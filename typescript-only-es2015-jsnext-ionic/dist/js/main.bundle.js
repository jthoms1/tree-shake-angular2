webpackJsonp([1],[
/* 0 */,
/* 1 */,
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var util_1 = __webpack_require__(972);
var Observable_1 = __webpack_require__(39);
/**
 * @private
 * @param pluginRef
 * @returns {null|*}
 */
exports.getPlugin = function (pluginRef) {
    return util_1.get(window, pluginRef);
};
/**
 * @private
 * @param pluginObj
 * @param method
 */
exports.pluginWarn = function (pluginObj, method) {
    var pluginName = pluginObj.name,
        plugin = pluginObj.plugin;
    if (method) console.warn('Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.');else console.warn('Native: tried accessing the ' + pluginName + ' plugin but it\'s not installed.');
    console.warn('Install the ' + pluginName + ' plugin: \'ionic plugin add ' + plugin + '\'');
};
/**
 * @private
 * @param pluginName
 * @param method
 */
exports.cordovaWarn = function (pluginName, method) {
    if (method) console.warn('Native: tried calling ' + pluginName + '.' + method + ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');else console.warn('Native: tried accessing the ' + pluginName + ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');
};
function setIndex(args, opts, resolve, reject) {
    if (opts === void 0) {
        opts = {};
    }
    // If the plugin method expects myMethod(success, err, options)
    if (opts.callbackOrder === 'reverse') {
        // Get those arguments in the order [resolve, reject, ...restOfArgs]
        args.unshift(reject);
        args.unshift(resolve);
    } else if (typeof opts.successIndex !== 'undefined' || typeof opts.errorIndex !== 'undefined') {
        // If we've specified a success/error index
        args.splice(opts.successIndex, 0, resolve);
        args.splice(opts.errorIndex, 0, reject);
    } else {
        // Otherwise, let's tack them on to the end of the argument list
        // which is 90% of cases
        args.push(resolve);
        args.push(reject);
    }
    return args;
}
function callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject) {
    if (opts === void 0) {
        opts = {};
    }
    // Try to figure out where the success/error callbacks need to be bound
    // to our promise resolve/reject handlers.
    args = setIndex(args, opts, resolve, reject);
    var pluginInstance = exports.getPlugin(pluginObj.pluginRef);
    if (!pluginInstance) {
        // Do this check in here in the case that the Web API for this plugin is available (for example, Geolocation).
        if (!window.cordova) {
            exports.cordovaWarn(pluginObj.name, methodName);
            return {
                error: 'cordova_not_available'
            };
        }
        exports.pluginWarn(pluginObj, methodName);
        return {
            error: 'plugin_not_installed'
        };
    }
    // TODO: Illegal invocation needs window context
    return util_1.get(window, pluginObj.pluginRef)[methodName].apply(pluginInstance, args);
}
function getPromise(cb) {
    if (window.Promise) {
        return new Promise(function (resolve, reject) {
            cb(resolve, reject);
        });
    } else if (window.angular) {
        var $q_1 = window.angular.injector(['ng']).get('$q');
        return $q_1(function (resolve, reject) {
            cb(resolve, reject);
        });
    } else {
        console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular 1/2 or on a recent browser.');
    }
}
function wrapPromise(pluginObj, methodName, args, opts) {
    if (opts === void 0) {
        opts = {};
    }
    var pluginResult, rej;
    var p = getPromise(function (resolve, reject) {
        pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject);
        rej = reject;
    });
    // Angular throws an error on unhandled rejection, but in this case we have already printed
    // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason
    // to error
    if (pluginResult && pluginResult.error) {
        p.catch(function () {});
        rej(pluginResult.error);
    }
    return p;
}
function wrapObservable(pluginObj, methodName, args, opts) {
    if (opts === void 0) {
        opts = {};
    }
    return new Observable_1.Observable(function (observer) {
        var pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));
        if (pluginResult && pluginResult.error) {
            observer.error(pluginResult.error);
        }
        return function () {
            try {
                if (opts.clearFunction) {
                    if (opts.clearWithArgs) {
                        return util_1.get(window, pluginObj.pluginRef)[opts.clearFunction].apply(pluginObj, args);
                    }
                    return util_1.get(window, pluginObj.pluginRef)[opts.clearFunction].call(pluginObj, pluginResult);
                }
            } catch (e) {
                console.warn('Unable to clear the previous observable watch for', pluginObj.name, methodName);
                console.error(e);
            }
        };
    });
}
function callInstance(pluginObj, methodName, args, opts, resolve, reject) {
    if (opts === void 0) {
        opts = {};
    }
    args = setIndex(args, opts, resolve, reject);
    return pluginObj._objectInstance[methodName].apply(pluginObj._objectInstance, args);
}
function wrapInstance(pluginObj, methodName, opts) {
    if (opts === void 0) {
        opts = {};
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (opts.sync) {
            return callInstance(pluginObj, methodName, args, opts);
        } else if (opts.observable) {
            return new Observable_1.Observable(function (observer) {
                var pluginResult = callInstance(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));
                return function () {
                    try {
                        if (opts.clearWithArgs) {
                            return pluginObj._objectInstance[opts.clearFunction].apply(pluginObj._objectInstance, args);
                        }
                        return pluginObj._objectInstance[opts.clearFunction].call(pluginObj, pluginResult);
                    } catch (e) {
                        console.warn('Unable to clear the previous observable watch for', pluginObj.name, methodName);
                        console.error(e);
                    }
                };
            });
        } else {
            return getPromise(function (resolve, reject) {
                callInstance(pluginObj, methodName, args, opts, resolve, reject);
            });
        }
    };
}
/**
 * Wrap the event with an observable
 * @param event
 * @returns {Observable}
 */
function wrapEventObservable(event) {
    return new Observable_1.Observable(function (observer) {
        var callback = function callback(status) {
            return observer.next(status);
        };
        window.addEventListener(event, callback, false);
        return function () {
            return window.removeEventListener(event, callback, false);
        };
    });
}
/**
 * @private
 * @param pluginObj
 * @param methodName
 * @param opts
 * @returns {function(...[any]): (undefined|*|Observable|*|*)}
 */
exports.wrap = function (pluginObj, methodName, opts) {
    if (opts === void 0) {
        opts = {};
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (opts.sync) return callCordovaPlugin(pluginObj, methodName, args, opts);else if (opts.observable) return wrapObservable(pluginObj, methodName, args, opts);else if (opts.eventObservable && opts.event) return wrapEventObservable(opts.event);else return wrapPromise(pluginObj, methodName, args, opts);
    };
};
/**
 * @private
 *
 * Class decorator specifying Plugin metadata. Required for all plugins.
 *
 * @usage
 * ```ts
 * @Plugin({
 *  name: 'MyPlugin',
 *  plugin: 'cordova-plugin-myplugin',
 *  pluginRef: 'window.myplugin'
 *  })
 *  export class MyPlugin {
 *
 *    // Plugin wrappers, properties, and functions go here ...
 *
 *  }
 * ```
 */
function Plugin(config) {
    return function (cls) {
        // Add these fields to the class
        for (var k in config) {
            cls[k] = config[k];
        }
        cls['installed'] = function () {
            return !!exports.getPlugin(config.pluginRef);
        };
        return cls;
    };
}
exports.Plugin = Plugin;
/**
 * @private
 *
 * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova
 * and the required plugin are installed.
 */
function Cordova(opts) {
    if (opts === void 0) {
        opts = {};
    }
    return function (target, methodName, descriptor) {
        return {
            value: function value() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                return exports.wrap(this, methodName, opts).apply(this, args);
            }
        };
    };
}
exports.Cordova = Cordova;
/**
 * @private
 *
 * Wrap an instance method
 */
function CordovaInstance(opts) {
    if (opts === void 0) {
        opts = {};
    }
    return function (target, methodName) {
        return {
            value: function value() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                return wrapInstance(this, methodName, opts).apply(this, args);
            }
        };
    };
}
exports.CordovaInstance = CordovaInstance;
/**
 * @private
 *
 *
 * Before calling the original method, ensure Cordova and the plugin are installed.
 */
function CordovaProperty(target, key, descriptor) {
    var originalMethod = descriptor.get;
    descriptor.get = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (!window.cordova) {
            exports.cordovaWarn(this.name, null);
            return {};
        }
        var pluginObj = this;
        var pluginInstance = exports.getPlugin(pluginObj.pluginRef);
        if (!pluginInstance) {
            exports.pluginWarn(this, key);
            return {};
        }
        return originalMethod.apply(this, args);
    };
    return descriptor;
}
exports.CordovaProperty = CordovaProperty;
/**
 * @private
 * @param target
 * @param key
 * @param descriptor
 * @constructor
 */
function InstanceProperty(target, key, descriptor) {
    descriptor.get = function () {
        return this._objectInstance[key];
    };
    descriptor.set = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this._objectInstance[key] = args[0];
    };
    return descriptor;
}
exports.InstanceProperty = InstanceProperty;
//# sourceMappingURL=plugin.js.map

/***/ },
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export */ exports["clamp"] = clamp;/* harmony export */ exports["assign"] = assign;/* harmony export */ exports["merge"] = merge;/* harmony export */ exports["debounce"] = debounce;/* harmony export */ exports["defaults"] = defaults;
/* harmony export */ __webpack_require__.d(exports, "isBoolean", function() { return isBoolean; });
/* harmony export */ __webpack_require__.d(exports, "isString", function() { return isString; });
/* harmony export */ __webpack_require__.d(exports, "isNumber", function() { return isNumber; });
/* harmony export */ __webpack_require__.d(exports, "isFunction", function() { return isFunction; });
/* harmony export */ __webpack_require__.d(exports, "isDefined", function() { return isDefined; });
/* harmony export */ __webpack_require__.d(exports, "isUndefined", function() { return isUndefined; });
/* harmony export */ __webpack_require__.d(exports, "isPresent", function() { return isPresent; });
/* harmony export */ __webpack_require__.d(exports, "isBlank", function() { return isBlank; });
/* harmony export */ __webpack_require__.d(exports, "isObject", function() { return isObject; });
/* harmony export */ __webpack_require__.d(exports, "isArray", function() { return isArray; });
/* harmony export */ __webpack_require__.d(exports, "isTrueProperty", function() { return isTrueProperty; });
/* harmony export */ __webpack_require__.d(exports, "isCheckedProperty", function() { return isCheckedProperty; });/* harmony export */ exports["pascalCaseToDashCase"] = pascalCaseToDashCase;/* harmony export */ exports["nextUid"] = nextUid;/* harmony export */ exports["getQuerystring"] = getQuerystring;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

/**
 * Given a min and max, restrict the given number
 * to the range.
 * @param min the minimum
 * @param n the value
 * @param max the maximum
 */
function clamp(min, n, max) {
    return Math.max(min, Math.min(n, max));
}
/**
 * The assign() method is used to copy the values of all enumerable own
 * properties from one or more source objects to a target object. It will
 * return the target object. When available, this method will use
 * `Object.assign()` under-the-hood.
 * @param target  The target object
 * @param source(s)  The source object
 */
function assign() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (typeof Object.assign !== 'function') {
        // use the old-school shallow extend method
        return _baseExtend(args[0], [].slice.call(args, 1), false);
    }
    // use the built in ES6 Object.assign method
    return Object.assign.apply(null, args);
}
/**
 * Do a deep extend (merge).
 * @param dst the destination
 * @param ... the param objects
 */
function merge(dst) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
    }

    return _baseExtend(dst, [].slice.call(arguments, 1), true);
}
function _baseExtend(dst, objs, deep) {
    for (var i = 0, ii = objs.length; i < ii; ++i) {
        var obj = objs[i];
        if (!obj || !isObject(obj) && !isFunction(obj)) continue;
        var keys = Object.keys(obj);
        for (var j = 0, jj = keys.length; j < jj; j++) {
            var key = keys[j];
            var src = obj[key];
            if (deep && isObject(src)) {
                if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
                _baseExtend(dst[key], [src], true);
            } else {
                dst[key] = src;
            }
        }
    }
    return dst;
}
function debounce(fn, wait) {
    var immediate = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var timeout, args, context, timestamp, result;
    return function () {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var later = function later() {
            var last = Date.now() - timestamp;
            if (last < wait) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) result = fn.apply(context, args);
            }
        };
        var callNow = immediate && !timeout;
        if (!timeout) {
            timeout = setTimeout(later, wait);
        }
        if (callNow) result = fn.apply(context, args);
        return result;
    };
}
/**
 * Apply default arguments if they don't exist in
 * the first object.
 * @param the destination to apply defaults to.
 */
function defaults(dest) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
    }

    for (var i = arguments.length - 1; i >= 1; i--) {
        var source = arguments[i] || {};
        for (var key in source) {
            if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
                dest[key] = source[key];
            }
        }
    }
    return dest;
}
var isBoolean = function isBoolean(val) {
    return typeof val === 'boolean';
};
var isString = function isString(val) {
    return typeof val === 'string';
};
var isNumber = function isNumber(val) {
    return typeof val === 'number';
};
var isFunction = function isFunction(val) {
    return typeof val === 'function';
};
var isDefined = function isDefined(val) {
    return typeof val !== 'undefined';
};
var isUndefined = function isUndefined(val) {
    return typeof val === 'undefined';
};
var isPresent = function isPresent(val) {
    return val !== undefined && val !== null;
};
var isBlank = function isBlank(val) {
    return val === undefined || val === null;
};
var isObject = function isObject(val) {
    return (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
};
var isArray = Array.isArray;
var isTrueProperty = function isTrueProperty(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return val === 'true' || val === 'on' || val === '';
    }
    return !!val;
};
var isCheckedProperty = function isCheckedProperty(a, b) {
    if (a === undefined || a === null || a === '') {
        return b === undefined || b === null || b === '';
    } else if (a === true || a === 'true') {
        return b === true || b === 'true';
    } else if (a === false || a === 'false') {
        return b === false || b === 'false';
    } else if (a === 0 || a === '0') {
        return b === 0 || b === '0';
    }
    // not using strict comparison on purpose
    /* tslint:disable */
    return a == b;
    /* tslint:enable */
};
/**
 * Convert a string in the format thisIsAString to a slug format this-is-a-string
 */
function pascalCaseToDashCase() {
    var val = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    return val.charAt(0).toLowerCase() + val.substring(1).replace(/[A-Z]/g, function (match) {
        return '-' + match.toLowerCase();
    });
}
var uid = 0;
function nextUid() {
    return ++uid;
}
/**
 * Grab all query strings keys and values.
 * @param url
 */
function getQuerystring(url) {
    var queryParams = {};
    if (url) {
        var startIndex = url.indexOf('?');
        if (startIndex !== -1) {
            var queries = url.slice(startIndex + 1).split('&');
            for (var i = 0; i < queries.length; i++) {
                if (queries[i].indexOf('=') > 0) {
                    var split = queries[i].split('=');
                    if (split.length > 1) {
                        queryParams[split[0].toLowerCase()] = split[1].split('#')[0];
                    }
                }
            }
        }
    }
    return queryParams;
}

/***/ },
/* 7 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * Given a min and max, restrict the given number
 * to the range.
 * @param min the minimum
 * @param n the value
 * @param max the maximum
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function clamp(min, n, max) {
    return Math.max(min, Math.min(n, max));
}
exports.clamp = clamp;
/**
 * The assign() method is used to copy the values of all enumerable own
 * properties from one or more source objects to a target object. It will
 * return the target object. When available, this method will use
 * `Object.assign()` under-the-hood.
 * @param target  The target object
 * @param source(s)  The source object
 */
function assign() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    if (typeof Object.assign !== 'function') {
        // use the old-school shallow extend method
        return _baseExtend(args[0], [].slice.call(args, 1), false);
    }
    // use the built in ES6 Object.assign method
    return Object.assign.apply(null, args);
}
exports.assign = assign;
/**
 * Do a deep extend (merge).
 * @param dst the destination
 * @param ... the param objects
 */
function merge(dst) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return _baseExtend(dst, [].slice.call(arguments, 1), true);
}
exports.merge = merge;
function _baseExtend(dst, objs, deep) {
    for (var i = 0, ii = objs.length; i < ii; ++i) {
        var obj = objs[i];
        if (!obj || !exports.isObject(obj) && !exports.isFunction(obj)) continue;
        var keys = Object.keys(obj);
        for (var j = 0, jj = keys.length; j < jj; j++) {
            var key = keys[j];
            var src = obj[key];
            if (deep && exports.isObject(src)) {
                if (!exports.isObject(dst[key])) dst[key] = exports.isArray(src) ? [] : {};
                _baseExtend(dst[key], [src], true);
            } else {
                dst[key] = src;
            }
        }
    }
    return dst;
}
function debounce(fn, wait, immediate) {
    if (immediate === void 0) {
        immediate = false;
    }
    var timeout, args, context, timestamp, result;
    return function () {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var later = function later() {
            var last = Date.now() - timestamp;
            if (last < wait) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) result = fn.apply(context, args);
            }
        };
        var callNow = immediate && !timeout;
        if (!timeout) {
            timeout = setTimeout(later, wait);
        }
        if (callNow) result = fn.apply(context, args);
        return result;
    };
}
exports.debounce = debounce;
/**
 * Apply default arguments if they don't exist in
 * the first object.
 * @param the destination to apply defaults to.
 */
function defaults(dest) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    for (var i = arguments.length - 1; i >= 1; i--) {
        var source = arguments[i] || {};
        for (var key in source) {
            if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
                dest[key] = source[key];
            }
        }
    }
    return dest;
}
exports.defaults = defaults;
exports.isBoolean = function (val) {
    return typeof val === 'boolean';
};
exports.isString = function (val) {
    return typeof val === 'string';
};
exports.isNumber = function (val) {
    return typeof val === 'number';
};
exports.isFunction = function (val) {
    return typeof val === 'function';
};
exports.isDefined = function (val) {
    return typeof val !== 'undefined';
};
exports.isUndefined = function (val) {
    return typeof val === 'undefined';
};
exports.isPresent = function (val) {
    return val !== undefined && val !== null;
};
exports.isBlank = function (val) {
    return val === undefined || val === null;
};
exports.isObject = function (val) {
    return (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
};
exports.isArray = Array.isArray;
exports.isTrueProperty = function (val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return val === 'true' || val === 'on' || val === '';
    }
    return !!val;
};
exports.isCheckedProperty = function (a, b) {
    if (a === undefined || a === null || a === '') {
        return b === undefined || b === null || b === '';
    } else if (a === true || a === 'true') {
        return b === true || b === 'true';
    } else if (a === false || a === 'false') {
        return b === false || b === 'false';
    } else if (a === 0 || a === '0') {
        return b === 0 || b === '0';
    }
    // not using strict comparison on purpose
    /* tslint:disable */
    return a == b;
    /* tslint:enable */
};
/**
 * Convert a string in the format thisIsAString to a slug format this-is-a-string
 */
function pascalCaseToDashCase(val) {
    if (val === void 0) {
        val = '';
    }
    return val.charAt(0).toLowerCase() + val.substring(1).replace(/[A-Z]/g, function (match) {
        return '-' + match.toLowerCase();
    });
}
exports.pascalCaseToDashCase = pascalCaseToDashCase;
var uid = 0;
function nextUid() {
    return ++uid;
}
exports.nextUid = nextUid;
/**
 * Grab all query strings keys and values.
 * @param url
 */
function getQuerystring(url) {
    var queryParams = {};
    if (url) {
        var startIndex = url.indexOf('?');
        if (startIndex !== -1) {
            var queries = url.slice(startIndex + 1).split('&');
            for (var i = 0; i < queries.length; i++) {
                if (queries[i].indexOf('=') > 0) {
                    var split = queries[i].split('=');
                    if (split.length > 1) {
                        queryParams[split[0].toLowerCase()] = split[1].split('#')[0];
                    }
                }
            }
        }
    }
    return queryParams;
}
exports.getQuerystring = getQuerystring;

/***/ },
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = self;
    } else {
        globalScope = global;
    }
} else {
    globalScope = window;
}
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
    if (type['name']) {
        return type['name'];
    }
    return typeof type === 'undefined' ? 'undefined' : _typeof(type);
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
    return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
    return typeof obj === 'boolean';
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
    return typeof obj === 'number';
}
exports.isNumber = isNumber;
function isString(obj) {
    return typeof obj === 'string';
}
exports.isString = isString;
function isFunction(obj) {
    return typeof obj === 'function';
}
exports.isFunction = isFunction;
function isType(obj) {
    return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
    return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
    return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
    return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token === undefined || token === null) {
        return '' + token;
    }
    if (token.name) {
        return token.name;
    }
    if (token.overriddenName) {
        return token.overriddenName;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
// serialize / deserialize enum exist only for consistency with dart API
// enums in typescript don't need to be serialized
function serializeEnum(val) {
    return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
    return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
    return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function () {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function (code) {
        return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function (s, index) {
        return s.charCodeAt(index);
    };
    StringWrapper.split = function (s, regExp) {
        return s.split(regExp);
    };
    StringWrapper.equals = function (s, s2) {
        return s === s2;
    };
    StringWrapper.stripLeft = function (s, charVal) {
        if (s && s.length) {
            var pos = 0;
            for (var i = 0; i < s.length; i++) {
                if (s[i] != charVal) break;
                pos++;
            }
            s = s.substring(pos);
        }
        return s;
    };
    StringWrapper.stripRight = function (s, charVal) {
        if (s && s.length) {
            var pos = s.length;
            for (var i = s.length - 1; i >= 0; i--) {
                if (s[i] != charVal) break;
                pos--;
            }
            s = s.substring(0, pos);
        }
        return s;
    };
    StringWrapper.replace = function (s, from, replace) {
        return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function (s, from, replace) {
        return s.replace(from, replace);
    };
    StringWrapper.slice = function (s, from, to) {
        if (from === void 0) {
            from = 0;
        }
        if (to === void 0) {
            to = null;
        }
        return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function (s, from, cb) {
        return s.replace(from, function () {
            var matches = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                matches[_i - 0] = arguments[_i];
            }
            // Remove offset & string from the result array
            matches.splice(-2, 2);
            // The callback receives match, p1, ..., pn
            return cb(matches);
        });
    };
    StringWrapper.contains = function (s, substr) {
        return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function (a, b) {
        if (a < b) {
            return -1;
        } else if (a > b) {
            return 1;
        } else {
            return 0;
        }
    };
    return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function () {
    function StringJoiner(parts) {
        if (parts === void 0) {
            parts = [];
        }
        this.parts = parts;
    }
    StringJoiner.prototype.add = function (part) {
        this.parts.push(part);
    };
    StringJoiner.prototype.toString = function () {
        return this.parts.join('');
    };
    return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function (_super) {
    __extends(NumberParseError, _super);
    function NumberParseError(message) {
        _super.call(this);
        this.message = message;
    }
    NumberParseError.prototype.toString = function () {
        return this.message;
    };
    return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function () {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function (n, fractionDigits) {
        return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function (a, b) {
        return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function (text) {
        var result = parseInt(text);
        if (isNaN(result)) {
            throw new NumberParseError('Invalid integer literal when parsing ' + text);
        }
        return result;
    };
    NumberWrapper.parseInt = function (text, radix) {
        if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
                return parseInt(text, radix);
            }
        } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                return parseInt(text, radix);
            }
        } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
                return result;
            }
        }
        throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
    NumberWrapper.parseFloat = function (text) {
        return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
        get: function get() {
            return NaN;
        },
        enumerable: true,
        configurable: true
    });
    NumberWrapper.isNumeric = function (value) {
        return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function (value) {
        return isNaN(value);
    };
    NumberWrapper.isInteger = function (value) {
        return Number.isInteger(value);
    };
    return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function () {
    function RegExpWrapper() {}
    RegExpWrapper.create = function (regExpStr, flags) {
        if (flags === void 0) {
            flags = '';
        }
        flags = flags.replace(/g/g, '');
        return new _global.RegExp(regExpStr, flags + 'g');
    };
    RegExpWrapper.firstMatch = function (regExp, input) {
        // Reset multimatch regex state
        regExp.lastIndex = 0;
        return regExp.exec(input);
    };
    RegExpWrapper.test = function (regExp, input) {
        regExp.lastIndex = 0;
        return regExp.test(input);
    };
    RegExpWrapper.matcher = function (regExp, input) {
        // Reset regex state for the case
        // someone did not loop over all matches
        // last time.
        regExp.lastIndex = 0;
        return { re: regExp, input: input };
    };
    RegExpWrapper.replaceAll = function (regExp, input, replace) {
        var c = regExp.exec(input);
        var res = '';
        regExp.lastIndex = 0;
        var prev = 0;
        while (c) {
            res += input.substring(prev, c.index);
            res += replace(c);
            prev = c.index + c[0].length;
            regExp.lastIndex = prev;
            c = regExp.exec(input);
        }
        res += input.substring(prev);
        return res;
    };
    return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function () {
    function RegExpMatcherWrapper() {}
    RegExpMatcherWrapper.next = function (matcher) {
        return matcher.re.exec(matcher.input);
    };
    return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function () {
    function FunctionWrapper() {}
    FunctionWrapper.apply = function (fn, posArgs) {
        return fn.apply(null, posArgs);
    };
    FunctionWrapper.bind = function (fn, scope) {
        return fn.bind(scope);
    };
    return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
// JS has NaN !== NaN
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
function getMapKey(value) {
    return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');
}
exports.isJsObject = isJsObject;
function print(obj) {
    console.log(obj);
}
exports.print = print;
function warn(obj) {
    console.warn(obj);
}
exports.warn = warn;
// Can't be all uppercase as our transpiler would think it is a special directive...
var Json = function () {
    function Json() {}
    Json.parse = function (s) {
        return _global.JSON.parse(s);
    };
    Json.stringify = function (data) {
        // Dart doesn't take 3 arguments
        return _global.JSON.stringify(data, null, 2);
    };
    return Json;
}();
exports.Json = Json;
var DateWrapper = function () {
    function DateWrapper() {}
    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
        if (month === void 0) {
            month = 1;
        }
        if (day === void 0) {
            day = 1;
        }
        if (hour === void 0) {
            hour = 0;
        }
        if (minutes === void 0) {
            minutes = 0;
        }
        if (seconds === void 0) {
            seconds = 0;
        }
        if (milliseconds === void 0) {
            milliseconds = 0;
        }
        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
    };
    DateWrapper.fromISOString = function (str) {
        return new exports.Date(str);
    };
    DateWrapper.fromMillis = function (ms) {
        return new exports.Date(ms);
    };
    DateWrapper.toMillis = function (date) {
        return date.getTime();
    };
    DateWrapper.now = function () {
        return new exports.Date();
    };
    DateWrapper.toJson = function (date) {
        return date.toJSON();
    };
    return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
        var name = parts.shift();
        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
            obj = obj[name];
        } else {
            obj = obj[name] = {};
        }
    }
    if (obj === undefined || obj === null) {
        obj = {};
    }
    obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
        if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
            _symbolIterator = Symbol.iterator;
        } else {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
    var fnArgNames = [];
    var fnArgValues = [];
    for (var argName in vars) {
        fnArgNames.push(argName);
        fnArgValues.push(vars[argName]);
    }
    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
    return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
    return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function escape(s) {
    return _global.encodeURI(s);
}
exports.escape = escape;
function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
}
exports.escapeRegExp = escapeRegExp;
//# sourceMappingURL=lang.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(96)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__platform_platform__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "Config", function() { return Config; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
* @ngdoc service
* @name Config
* @module ionic
* @description
* Config allows you to set the modes of your components
*/


/**
 * @name Config
 * @demo /docs/v2/demos/config/
 * @description
 * The Config lets you configure your entire app or specific platforms.
 * You can set the tab placement, icon mode, animations, and more here.
 *
 * ```ts
 * import {ionicBootstrap} from 'ionic-angular';
 *
 * ionicBootstrap(AppRoot, customProviders, {
 *   backButtonText: 'Go Back',
 *   iconMode: 'ios',
 *   modalEnter: 'modal-slide-in',
 *   modalLeave: 'modal-slide-out',
 *   tabbarPlacement: 'bottom',
 *   pageTransition: 'ios',
 * });
 * ```
 *
 *
 * Config can be overwritten at multiple levels allowing for more granular configuration.
 * Below is an example where an app can override any setting we want based on a platform.
 *
 * ```ts
 * import {ionicBootstrap} from 'ionic-angular';
 *
 * ionicBootstrap(AppRoot, customProviders, {
 *   tabbarPlacement: 'bottom',
 *   platforms: {
 *   ios: {
 *     tabbarPlacement: 'top',
 *   }
 * });
 * ```
 *
 * We could also configure these values at a component level. Take `tabbarPlacement`,
 * we can configure this as a property on our `ion-tabs`.
 *
 * ```html
 * <ion-tabs tabbarPlacement="top">
 *   <ion-tab tabTitle="Dash" tabIcon="pulse" [root]="tabRoot"></ion-tab>
 * </ion-tabs>
 * ```
 *
 * The last way we could configure is through URL query strings. This is useful for testing
 * while in the browser. Simply add `?ionic<PROPERTYNAME>=<value>` to the url.
 *
 * ```bash
 * http://localhost:8100/?ionicTabbarPlacement=bottom
 * ```
 *
 * Any value can be added to config, and looked up at a later in any component.
 *
 * ```js
 * config.set('ios', 'favoriteColor', 'green');
 *
 * // from any page in your app:
 * config.get('favoriteColor'); // 'green' when iOS
 * ```
 *
 *
 * A config value can come from anywhere and be anything, but there are default
 * values for each mode. The [theming](../../../theming/platform-specific-styles/)
 * documentation has a chart of the default mode configuration. The following
 * chart displays each property with a description of what it controls.
 *
 *
 * | Config Property          | Type                | Details                                                                                                                                          |
 * |--------------------------|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `activator`              | `string`            | Used for buttons, changes the effect of pressing on a button. Available options: `"ripple"`, `"highlight"`.                                      |
 * | `actionSheetEnter`       | `string`            | The name of the transition to use while an action sheet is presented.                                                                            |
 * | `actionSheetLeave`       | `string`            | The name of the transition to use while an action sheet is dismissed.                                                                            |
 * | `alertEnter`             | `string`            | The name of the transition to use while an alert is presented.                                                                                   |
 * | `alertLeave`             | `string`            | The name of the transition to use while an alert is dismissed.                                                                                   |
 * | `backButtonText`         | `string`            | The text to display by the back button icon in the navbar.                                                                                       |
 * | `backButtonIcon`         | `string`            | The icon to use as the back button icon.                                                                                                         |
 * | `iconMode`               | `string`            | The mode to use for all icons throughout the application. Available options: `"ios"`, `"md"`                                                     |
 * | `loadingEnter`           | `string`            | The name of the transition to use while a loading indicator is presented.                                                                        |
 * | `loadingLeave`           | `string`            | The name of the transition to use while a loading indicator is dismissed.                                                                        |
 * | `menuType`               | `string`            | Type of menu to display. Available options: `"overlay"`, `"reveal"`, `"push"`.                                                                   |
 * | `modalEnter`             | `string`            | The name of the transition to use while a modal is presented.                                                                                    |
 * | `modalLeave`             | `string`            | The name of the transition to use while a modal is dismiss.                                                                                      |
 * | `pageTransition`         | `string`            | The name of the transition to use while changing pages.                                                                                          |
 * | `pageTransitionDelay`    | `number`            | The delay in milliseconds before the transition starts while changing pages.                                                                     |
 * | `pickerEnter`            | `string`            | The name of the transition to use while a picker is presented.                                                                                   |
 * | `pickerLeave`            | `string`            | The name of the transition to use while a picker is dismissed.                                                                                   |
 * | `popoverEnter`           | `string`            | The name of the transition to use while a popover is presented.                                                                                  |
 * | `popoverLeave`           | `string`            | The name of the transition to use while a popover is dismissed.                                                                                  |
 * | `prodMode`               | `boolean`           | Disable development mode, which turns off assertions and other checks within the framework. One important assertion this disables verifies that a change detection pass does not result in additional changes to any bindings (also known as unidirectional data flow).
 * | `spinner`                | `string`            | The default spinner to use when a name is not defined.                                                                                           |
 * | `tabbarHighlight`        | `boolean`           | Whether to show a highlight line under the tab when it is selected.                                                                              |
 * | `tabbarLayout`           | `string`            | The layout to use for all tabs. Available options: `"icon-top"`, `"icon-left"`, `"icon-right"`, `"icon-bottom"`, `"icon-hide"`, `"title-hide"`.  |
 * | `tabbarPlacement`        | `string`            | The position of the tabs. Available options: `"top"`, `"bottom"`                                                                                 |
 * | `tabSubPages`            | `boolean`           | Whether to hide the tabs on child pages or not. If `true` it will not show the tabs on child pages.                                              |
 * | `toastEnter`             | `string`            | The name of the transition to use while a toast is presented.                                                                                    |
 * | `toastLeave`             | `string`            | The name of the transition to use while a toast is dismissed.                                                                                    |
 *
**/
var Config = function () {
    function Config(config) {
        _classCallCheck(this, Config);

        this._c = {};
        this._s = {};
        this._s = config && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isObject"])(config) && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isArray"])(config) ? config : {};
    }
    /**
     * @name get
     * @description
     * Returns a single config value, given a key.
     *
     * @param {string} [key] - the key for the config value
     * @param {any} [fallbackValue] - a fallback value to use when the config
     * value was not found, or is config value is `null`. Fallback value
     *  defaults to `null`.
     */

    _createClass(Config, [{
        key: 'get',
        value: function get(key) {
            var fallbackValue = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(this._c[key])) {
                if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(key)) {
                    throw 'config key is not defined';
                }
                // if the value was already set this will all be skipped
                // if there was no user config then it'll check each of
                // the user config's platforms, which already contains
                // settings from default platform configs
                var userPlatformValue = undefined;
                var userDefaultValue = this._s[key];
                var userPlatformModeValue = undefined;
                var userDefaultModeValue = undefined;
                var platformValue = undefined;
                var platformModeValue = undefined;
                var configObj = null;
                if (this.platform) {
                    var queryStringValue = this.platform.query('ionic' + key.toLowerCase());
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(queryStringValue)) {
                        return this._c[key] = queryStringValue === 'true' ? true : queryStringValue === 'false' ? false : queryStringValue;
                    }
                    // check the platform settings object for this value
                    // loop though each of the active platforms
                    // array of active platforms, which also knows the hierarchy,
                    // with the last one the most important
                    var activePlatformKeys = this.platform.platforms();
                    // loop through all of the active platforms we're on
                    for (var i = 0, l = activePlatformKeys.length; i < l; i++) {
                        // get user defined platform values
                        if (this._s.platforms) {
                            configObj = this._s.platforms[activePlatformKeys[i]];
                            if (configObj) {
                                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(configObj[key])) {
                                    userPlatformValue = configObj[key];
                                }
                                configObj = Config.getModeConfig(configObj.mode);
                                if (configObj && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(configObj[key])) {
                                    userPlatformModeValue = configObj[key];
                                }
                            }
                        }
                        // get default platform's setting
                        configObj = __WEBPACK_IMPORTED_MODULE_0__platform_platform__["Platform"].get(activePlatformKeys[i]);
                        if (configObj && configObj.settings) {
                            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(configObj.settings[key])) {
                                // found a setting for this platform
                                platformValue = configObj.settings[key];
                            }
                            configObj = Config.getModeConfig(configObj.settings.mode);
                            if (configObj && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(configObj[key])) {
                                // found setting for this platform's mode
                                platformModeValue = configObj[key];
                            }
                        }
                    }
                }
                configObj = Config.getModeConfig(this._s.mode);
                if (configObj && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(configObj[key])) {
                    userDefaultModeValue = configObj[key];
                }
                // cache the value
                this._c[key] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(userPlatformValue) ? userPlatformValue : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(userDefaultValue) ? userDefaultValue : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(userPlatformModeValue) ? userPlatformModeValue : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(userDefaultModeValue) ? userDefaultModeValue : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(platformValue) ? platformValue : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(platformModeValue) ? platformModeValue : null;
            }
            // return key's value
            // either it came directly from the user config
            // or it was from the users platform configs
            // or it was from the default platform configs
            // in that order
            var rtnVal = void 0;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isFunction"])(this._c[key])) {
                rtnVal = this._c[key](this.platform);
            } else {
                rtnVal = this._c[key];
            }
            return rtnVal !== null ? rtnVal : fallbackValue;
        }
        /**
         * @name getBoolean
         * @description
         * Same as `get()`, however always returns a boolean value. If the
         * value from `get()` is `null`, then it'll return the `fallbackValue`
         * which defaults to `false`. Otherwise, `getBoolean()` will return
         * if the config value is truthy or not. It also returns `true` if
         * the config value was the string value `"true"`.
         * @param {string} [key] - the key for the config value
         * @param {boolean} [fallbackValue] - a fallback value to use when the config
         * value was `null`. Fallback value defaults to `false`.
         */

    }, {
        key: 'getBoolean',
        value: function getBoolean(key) {
            var fallbackValue = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var val = this.get(key);
            if (val === null) {
                return fallbackValue;
            }
            if (typeof val === 'string') {
                return val === 'true';
            }
            return !!val;
        }
        /**
         * @name getNumber
         * @description
         * Same as `get()`, however always returns a number value. Uses `parseFloat()`
         * on the value received from `get()`. If the result from the parse is `NaN`,
         * then it will return the value passed to `fallbackValue`. If no fallback
         * value was provided then it'll default to returning `NaN` when the result
         * is not a valid number.
         * @param {string} [key] - the key for the config value
         * @param {number} [fallbackValue] - a fallback value to use when the config
         * value turned out to be `NaN`. Fallback value defaults to `NaN`.
         */

    }, {
        key: 'getNumber',
        value: function getNumber(key) {
            var fallbackValue = arguments.length <= 1 || arguments[1] === undefined ? NaN : arguments[1];

            var val = parseFloat(this.get(key));
            return isNaN(val) ? fallbackValue : val;
        }
        /**
         * @name set
         * @description
         * Sets a single config value.
         *
         * @param {string} [platform] - The platform (either 'ios' or 'android') that the config value should apply to. Leaving this blank will apply the config value to all platforms.
         * @param {string} [key] - The key used to look up the value at a later point in time.
         * @param {string} [value] - The config value being stored.
         */

    }, {
        key: 'set',
        value: function set() {
            var arg0 = arguments.length <= 0 ? undefined : arguments[0];
            var arg1 = arguments.length <= 1 ? undefined : arguments[1];
            switch (arguments.length) {
                case 2:
                    // set('key', 'value') = set key/value pair
                    // arg1 = value
                    this._s[arg0] = arg1;
                    delete this._c[arg0]; // clear cache
                    break;
                case 3:
                    // setting('ios', 'key', 'value') = set key/value pair for platform
                    // arg0 = platform
                    // arg1 = key
                    // arg2 = value
                    this._s.platforms = this._s.platforms || {};
                    this._s.platforms[arg0] = this._s.platforms[arg0] || {};
                    this._s.platforms[arg0][arg1] = arguments.length <= 2 ? undefined : arguments[2];
                    delete this._c[arg1]; // clear cache
                    break;
            }
            return this;
        }
        /**
         * @private
         * @name settings()
         * @description
         */

    }, {
        key: 'settings',
        value: function settings(arg0, arg1) {
            switch (arguments.length) {
                case 0:
                    return this._s;
                case 1:
                    // settings({...})
                    this._s = arg0;
                    this._c = {}; // clear cache
                    break;
                case 2:
                    // settings('ios', {...})
                    this._s.platforms = this._s.platforms || {};
                    this._s.platforms[arg0] = arg1;
                    this._c = {}; // clear cache
                    break;
            }
            return this;
        }
        /**
         * @private
         */

    }, {
        key: 'setPlatform',
        value: function setPlatform(platform) {
            this.platform = platform;
        }
        /**
         * @private
         */

    }], [{
        key: 'setModeConfig',
        value: function setModeConfig(mode, config) {
            modeConfigs[mode] = config;
        }
        /**
         * @private
         */

    }, {
        key: 'getModeConfig',
        value: function getModeConfig(mode) {
            return modeConfigs[mode] || null;
        }
    }]);

    return Config;
}();
var modeConfigs = {};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "nativeRaf", function() { return nativeRaf; });
/* harmony export */ __webpack_require__.d(exports, "raf", function() { return raf; });
/* harmony export */ __webpack_require__.d(exports, "cancelRaf", function() { return cancelRaf; });
/* harmony export */ __webpack_require__.d(exports, "nativeTimeout", function() { return nativeTimeout; });
/* harmony export */ __webpack_require__.d(exports, "clearNativeTimeout", function() { return clearNativeTimeout; });/* harmony export */ exports["rafFrames"] = rafFrames;
/* harmony export */ __webpack_require__.d(exports, "CSS", function() { return CSS; });/* harmony export */ exports["transitionEnd"] = transitionEnd;/* harmony export */ exports["ready"] = ready;/* harmony export */ exports["windowLoad"] = windowLoad;/* harmony export */ exports["pointerCoord"] = pointerCoord;/* harmony export */ exports["hasPointerMoved"] = hasPointerMoved;/* harmony export */ exports["isActive"] = isActive;/* harmony export */ exports["hasFocus"] = hasFocus;/* harmony export */ exports["isTextInput"] = isTextInput;/* harmony export */ exports["hasFocusedTextInput"] = hasFocusedTextInput;/* harmony export */ exports["copyInputAttributes"] = copyInputAttributes;/* harmony export */ exports["closest"] = closest;/* harmony export */ exports["getDimensions"] = getDimensions;/* harmony export */ exports["clearDimensions"] = clearDimensions;/* harmony export */ exports["windowDimensions"] = windowDimensions;/* harmony export */ exports["flushDimensionCache"] = flushDimensionCache;// RequestAnimationFrame Polyfill (Android 4.3 and below)
/*! @author Paul Irish */
/*! @source https://gist.github.com/paulirish/1579671 */
(function () {
    var rafLastTime = 0;
    var win = window;
    if (!win.requestAnimationFrame) {
        win.requestAnimationFrame = function (callback) {
            var currTime = Date.now();
            var timeToCall = Math.max(0, 16 - (currTime - rafLastTime));
            var id = window.setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            rafLastTime = currTime + timeToCall;
            return id;
        };
    }
    if (!win.cancelAnimationFrame) {
        win.cancelAnimationFrame = function (id) {
            clearTimeout(id);
        };
    }
})();
// use native raf rather than the zone wrapped one
var originalRaf = window[window['Zone']['__symbol__']('requestAnimationFrame')] || window[window['Zone']['__symbol__']('webkitRequestAnimationFrame')];
// if the originalRaf from the Zone symbol is not available, we need to provide the polyfilled version
var nativeRaf = originalRaf !== undefined ? originalRaf['bind'](window) : window.requestAnimationFrame.bind(window);
// zone wrapped raf
var raf = window.requestAnimationFrame.bind(window);
var cancelRaf = window.cancelAnimationFrame.bind(window);
var nativeTimeout = window[window['Zone']['__symbol__']('setTimeout')]['bind'](window);
var clearNativeTimeout = window[window['Zone']['__symbol__']('clearTimeout')]['bind'](window);
function rafFrames(framesToWait, callback) {
    framesToWait = Math.ceil(framesToWait);
    if (framesToWait < 2) {
        nativeRaf(callback);
    } else {
        nativeTimeout(function () {
            nativeRaf(callback);
        }, (framesToWait - 1) * 16.6667);
    }
}
var CSS = {};
(function () {
    // transform
    var i;
    var keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform', '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];
    for (i = 0; i < keys.length; i++) {
        if (document.documentElement.style[keys[i]] !== undefined) {
            CSS.transform = keys[i];
            break;
        }
    }
    // transition
    keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
    for (i = 0; i < keys.length; i++) {
        if (document.documentElement.style[keys[i]] !== undefined) {
            CSS.transition = keys[i];
            break;
        }
    }
    // The only prefix we care about is webkit for transitions.
    var isWebkit = CSS.transition.indexOf('webkit') > -1;
    // transition duration
    CSS.transitionDuration = (isWebkit ? '-webkit-' : '') + 'transition-duration';
    // transition timing function
    CSS.transitionTimingFn = (isWebkit ? '-webkit-' : '') + 'transition-timing-function';
    // transition delay
    CSS.transitionDelay = (isWebkit ? '-webkit-' : '') + 'transition-delay';
    // To be sure transitionend works everywhere, include *both* the webkit and non-webkit events
    CSS.transitionEnd = (isWebkit ? 'webkitTransitionEnd ' : '') + 'transitionend';
    // transform origin
    CSS.transformOrigin = (isWebkit ? '-webkit-' : '') + 'transform-origin';
})();
function transitionEnd(el, callback) {
    if (el) {
        CSS.transitionEnd.split(' ').forEach(function (eventName) {
            el.addEventListener(eventName, onEvent);
        });
        return unregister;
    }
    function unregister() {
        CSS.transitionEnd.split(' ').forEach(function (eventName) {
            el.removeEventListener(eventName, onEvent);
        });
    }
    function onEvent(ev) {
        if (el === ev.target) {
            unregister();
            callback(ev);
        }
    }
}
function ready(callback) {
    var promise = null;
    if (!callback) {
        // a callback wasn't provided, so let's return a promise instead
        promise = new Promise(function (resolve) {
            callback = resolve;
        });
    }
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        callback();
    } else {
        document.addEventListener('DOMContentLoaded', completed, false);
        window.addEventListener('load', completed, false);
    }
    return promise;
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed, false);
        window.removeEventListener('load', completed, false);
        callback();
    }
}
function windowLoad(callback) {
    var promise = null;
    if (!callback) {
        // a callback wasn't provided, so let's return a promise instead
        promise = new Promise(function (resolve) {
            callback = resolve;
        });
    }
    if (document.readyState === 'complete') {
        callback();
    } else {
        window.addEventListener('load', completed, false);
    }
    return promise;
    function completed() {
        window.removeEventListener('load', completed, false);
        callback();
    }
}
function pointerCoord(ev) {
    // get coordinates for either a mouse click
    // or a touch depending on the given event
    var c = { x: 0, y: 0 };
    if (ev) {
        var touches = ev.touches && ev.touches.length ? ev.touches : [ev];
        var e = ev.changedTouches && ev.changedTouches[0] || touches[0];
        if (e) {
            c.x = e.clientX || e.pageX || 0;
            c.y = e.clientY || e.pageY || 0;
        }
    }
    return c;
}
function hasPointerMoved(threshold, startCoord, endCoord) {
    return startCoord && endCoord && (Math.abs(startCoord.x - endCoord.x) > threshold || Math.abs(startCoord.y - endCoord.y) > threshold);
}
function isActive(ele) {
    return !!(ele && document.activeElement === ele);
}
function hasFocus(ele) {
    return isActive(ele) && ele.parentElement.querySelector(':focus') === ele;
}
function isTextInput(ele) {
    return !!ele && (ele.tagName === 'TEXTAREA' || ele.contentEditable === 'true' || ele.tagName === 'INPUT' && !/^(radio|checkbox|range|file|submit|reset|color|image|button)$/i.test(ele.type));
}
function hasFocusedTextInput() {
    var ele = document.activeElement;
    if (isTextInput(ele)) {
        return ele.parentElement.querySelector(':focus') === ele;
    }
    return false;
}
var skipInputAttrsReg = /^(value|checked|disabled|type|class|style|id|autofocus|autocomplete|autocorrect)$/i;
function copyInputAttributes(srcElement, destElement) {
    // copy attributes from one element to another
    // however, skip over a few of them as they're already
    // handled in the angular world
    var attrs = srcElement.attributes;
    for (var i = 0; i < attrs.length; i++) {
        var attr = attrs[i];
        if (!skipInputAttrsReg.test(attr.name)) {
            destElement.setAttribute(attr.name, attr.value);
        }
    }
}
var matchesFn = void 0;
var matchesMethods = ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector'];
matchesMethods.some(function (fn) {
    if (typeof document.documentElement[fn] === 'function') {
        matchesFn = fn;
        return true;
    }
});
function closest(ele, selector, checkSelf) {
    if (ele && matchesFn) {
        // traverse parents
        ele = checkSelf ? ele : ele.parentElement;
        while (ele !== null) {
            if (ele[matchesFn](selector)) {
                return ele;
            }
            ele = ele.parentElement;
        }
    }
    return null;
}
/**
 * Get the element offsetWidth and offsetHeight. Values are cached
 * to reduce DOM reads. Cache is cleared on a window resize.
 */
function getDimensions(ele, id) {
    var dimensions = dimensionCache[id];
    if (!dimensions) {
        // make sure we got good values before caching
        if (ele.offsetWidth && ele.offsetHeight) {
            dimensions = dimensionCache[id] = {
                width: ele.offsetWidth,
                height: ele.offsetHeight,
                left: ele.offsetLeft,
                top: ele.offsetTop
            };
        } else {
            // do not cache bad values
            return { width: 0, height: 0, left: 0, top: 0 };
        }
    }
    return dimensions;
}
function clearDimensions(id) {
    delete dimensionCache[id];
}
function windowDimensions() {
    if (!dimensionCache.win) {
        // make sure we got good values before caching
        if (window.innerWidth && window.innerHeight) {
            dimensionCache.win = {
                width: window.innerWidth,
                height: window.innerHeight
            };
        } else {
            // do not cache bad values
            return { width: 0, height: 0 };
        }
    }
    return dimensionCache.win;
}
function flushDimensionCache() {
    dimensionCache = {};
}
var dimensionCache = {};

/***/ },
/* 14 */,
/* 15 */,
/* 16 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
* @ngdoc service
* @name Config
* @module ionic
* @description
* Config allows you to set the modes of your components
*/
"use strict";

var platform_1 = __webpack_require__(72);
var util_1 = __webpack_require__(7);
/**
 * @name Config
 * @demo /docs/v2/demos/config/
 * @description
 * The Config lets you configure your entire app or specific platforms.
 * You can set the tab placement, icon mode, animations, and more here.
 *
 * ```ts
 * import {ionicBootstrap} from 'ionic-angular';
 *
 * ionicBootstrap(AppRoot, customProviders, {
 *   backButtonText: 'Go Back',
 *   iconMode: 'ios',
 *   modalEnter: 'modal-slide-in',
 *   modalLeave: 'modal-slide-out',
 *   tabbarPlacement: 'bottom',
 *   pageTransition: 'ios',
 * });
 * ```
 *
 *
 * Config can be overwritten at multiple levels allowing for more granular configuration.
 * Below is an example where an app can override any setting we want based on a platform.
 *
 * ```ts
 * import {ionicBootstrap} from 'ionic-angular';
 *
 * ionicBootstrap(AppRoot, customProviders, {
 *   tabbarPlacement: 'bottom',
 *   platforms: {
 *   ios: {
 *     tabbarPlacement: 'top',
 *   }
 * });
 * ```
 *
 * We could also configure these values at a component level. Take `tabbarPlacement`,
 * we can configure this as a property on our `ion-tabs`.
 *
 * ```html
 * <ion-tabs tabbarPlacement="top">
 *   <ion-tab tabTitle="Dash" tabIcon="pulse" [root]="tabRoot"></ion-tab>
 * </ion-tabs>
 * ```
 *
 * The last way we could configure is through URL query strings. This is useful for testing
 * while in the browser. Simply add `?ionic<PROPERTYNAME>=<value>` to the url.
 *
 * ```bash
 * http://localhost:8100/?ionicTabbarPlacement=bottom
 * ```
 *
 * Any value can be added to config, and looked up at a later in any component.
 *
 * ```js
 * config.set('ios', 'favoriteColor', 'green');
 *
 * // from any page in your app:
 * config.get('favoriteColor'); // 'green' when iOS
 * ```
 *
 *
 * A config value can come from anywhere and be anything, but there are default
 * values for each mode. The [theming](../../../theming/platform-specific-styles/)
 * documentation has a chart of the default mode configuration. The following
 * chart displays each property with a description of what it controls.
 *
 *
 * | Config Property          | Type                | Details                                                                                                                                          |
 * |--------------------------|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `activator`              | `string`            | Used for buttons, changes the effect of pressing on a button. Available options: `"ripple"`, `"highlight"`.                                      |
 * | `actionSheetEnter`       | `string`            | The name of the transition to use while an action sheet is presented.                                                                            |
 * | `actionSheetLeave`       | `string`            | The name of the transition to use while an action sheet is dismissed.                                                                            |
 * | `alertEnter`             | `string`            | The name of the transition to use while an alert is presented.                                                                                   |
 * | `alertLeave`             | `string`            | The name of the transition to use while an alert is dismissed.                                                                                   |
 * | `backButtonText`         | `string`            | The text to display by the back button icon in the navbar.                                                                                       |
 * | `backButtonIcon`         | `string`            | The icon to use as the back button icon.                                                                                                         |
 * | `iconMode`               | `string`            | The mode to use for all icons throughout the application. Available options: `"ios"`, `"md"`                                                     |
 * | `loadingEnter`           | `string`            | The name of the transition to use while a loading indicator is presented.                                                                        |
 * | `loadingLeave`           | `string`            | The name of the transition to use while a loading indicator is dismissed.                                                                        |
 * | `menuType`               | `string`            | Type of menu to display. Available options: `"overlay"`, `"reveal"`, `"push"`.                                                                   |
 * | `modalEnter`             | `string`            | The name of the transition to use while a modal is presented.                                                                                    |
 * | `modalLeave`             | `string`            | The name of the transition to use while a modal is dismiss.                                                                                      |
 * | `pageTransition`         | `string`            | The name of the transition to use while changing pages.                                                                                          |
 * | `pageTransitionDelay`    | `number`            | The delay in milliseconds before the transition starts while changing pages.                                                                     |
 * | `pickerEnter`            | `string`            | The name of the transition to use while a picker is presented.                                                                                   |
 * | `pickerLeave`            | `string`            | The name of the transition to use while a picker is dismissed.                                                                                   |
 * | `popoverEnter`           | `string`            | The name of the transition to use while a popover is presented.                                                                                  |
 * | `popoverLeave`           | `string`            | The name of the transition to use while a popover is dismissed.                                                                                  |
 * | `prodMode`               | `boolean`           | Disable development mode, which turns off assertions and other checks within the framework. One important assertion this disables verifies that a change detection pass does not result in additional changes to any bindings (also known as unidirectional data flow).
 * | `spinner`                | `string`            | The default spinner to use when a name is not defined.                                                                                           |
 * | `tabbarHighlight`        | `boolean`           | Whether to show a highlight line under the tab when it is selected.                                                                              |
 * | `tabbarLayout`           | `string`            | The layout to use for all tabs. Available options: `"icon-top"`, `"icon-left"`, `"icon-right"`, `"icon-bottom"`, `"icon-hide"`, `"title-hide"`.  |
 * | `tabbarPlacement`        | `string`            | The position of the tabs. Available options: `"top"`, `"bottom"`                                                                                 |
 * | `tabSubPages`            | `boolean`           | Whether to hide the tabs on child pages or not. If `true` it will not show the tabs on child pages.                                              |
 * | `toastEnter`             | `string`            | The name of the transition to use while a toast is presented.                                                                                    |
 * | `toastLeave`             | `string`            | The name of the transition to use while a toast is dismissed.                                                                                    |
 *
**/
var Config = function () {
    function Config(config) {
        this._c = {};
        this._s = {};
        this._s = config && util_1.isObject(config) && !util_1.isArray(config) ? config : {};
    }
    /**
     * @name get
     * @description
     * Returns a single config value, given a key.
     *
     * @param {string} [key] - the key for the config value
     * @param {any} [fallbackValue] - a fallback value to use when the config
     * value was not found, or is config value is `null`. Fallback value
     *  defaults to `null`.
     */
    Config.prototype.get = function (key, fallbackValue) {
        if (fallbackValue === void 0) {
            fallbackValue = null;
        }
        if (!util_1.isDefined(this._c[key])) {
            if (!util_1.isDefined(key)) {
                throw 'config key is not defined';
            }
            // if the value was already set this will all be skipped
            // if there was no user config then it'll check each of
            // the user config's platforms, which already contains
            // settings from default platform configs
            var userPlatformValue = undefined;
            var userDefaultValue = this._s[key];
            var userPlatformModeValue = undefined;
            var userDefaultModeValue = undefined;
            var platformValue = undefined;
            var platformModeValue = undefined;
            var configObj = null;
            if (this.platform) {
                var queryStringValue = this.platform.query('ionic' + key.toLowerCase());
                if (util_1.isDefined(queryStringValue)) {
                    return this._c[key] = queryStringValue === 'true' ? true : queryStringValue === 'false' ? false : queryStringValue;
                }
                // check the platform settings object for this value
                // loop though each of the active platforms
                // array of active platforms, which also knows the hierarchy,
                // with the last one the most important
                var activePlatformKeys = this.platform.platforms();
                // loop through all of the active platforms we're on
                for (var i = 0, l = activePlatformKeys.length; i < l; i++) {
                    // get user defined platform values
                    if (this._s.platforms) {
                        configObj = this._s.platforms[activePlatformKeys[i]];
                        if (configObj) {
                            if (util_1.isDefined(configObj[key])) {
                                userPlatformValue = configObj[key];
                            }
                            configObj = Config.getModeConfig(configObj.mode);
                            if (configObj && util_1.isDefined(configObj[key])) {
                                userPlatformModeValue = configObj[key];
                            }
                        }
                    }
                    // get default platform's setting
                    configObj = platform_1.Platform.get(activePlatformKeys[i]);
                    if (configObj && configObj.settings) {
                        if (util_1.isDefined(configObj.settings[key])) {
                            // found a setting for this platform
                            platformValue = configObj.settings[key];
                        }
                        configObj = Config.getModeConfig(configObj.settings.mode);
                        if (configObj && util_1.isDefined(configObj[key])) {
                            // found setting for this platform's mode
                            platformModeValue = configObj[key];
                        }
                    }
                }
            }
            configObj = Config.getModeConfig(this._s.mode);
            if (configObj && util_1.isDefined(configObj[key])) {
                userDefaultModeValue = configObj[key];
            }
            // cache the value
            this._c[key] = util_1.isDefined(userPlatformValue) ? userPlatformValue : util_1.isDefined(userDefaultValue) ? userDefaultValue : util_1.isDefined(userPlatformModeValue) ? userPlatformModeValue : util_1.isDefined(userDefaultModeValue) ? userDefaultModeValue : util_1.isDefined(platformValue) ? platformValue : util_1.isDefined(platformModeValue) ? platformModeValue : null;
        }
        // return key's value
        // either it came directly from the user config
        // or it was from the users platform configs
        // or it was from the default platform configs
        // in that order
        var rtnVal;
        if (util_1.isFunction(this._c[key])) {
            rtnVal = this._c[key](this.platform);
        } else {
            rtnVal = this._c[key];
        }
        return rtnVal !== null ? rtnVal : fallbackValue;
    };
    /**
     * @name getBoolean
     * @description
     * Same as `get()`, however always returns a boolean value. If the
     * value from `get()` is `null`, then it'll return the `fallbackValue`
     * which defaults to `false`. Otherwise, `getBoolean()` will return
     * if the config value is truthy or not. It also returns `true` if
     * the config value was the string value `"true"`.
     * @param {string} [key] - the key for the config value
     * @param {boolean} [fallbackValue] - a fallback value to use when the config
     * value was `null`. Fallback value defaults to `false`.
     */
    Config.prototype.getBoolean = function (key, fallbackValue) {
        if (fallbackValue === void 0) {
            fallbackValue = false;
        }
        var val = this.get(key);
        if (val === null) {
            return fallbackValue;
        }
        if (typeof val === 'string') {
            return val === 'true';
        }
        return !!val;
    };
    /**
     * @name getNumber
     * @description
     * Same as `get()`, however always returns a number value. Uses `parseFloat()`
     * on the value received from `get()`. If the result from the parse is `NaN`,
     * then it will return the value passed to `fallbackValue`. If no fallback
     * value was provided then it'll default to returning `NaN` when the result
     * is not a valid number.
     * @param {string} [key] - the key for the config value
     * @param {number} [fallbackValue] - a fallback value to use when the config
     * value turned out to be `NaN`. Fallback value defaults to `NaN`.
     */
    Config.prototype.getNumber = function (key, fallbackValue) {
        if (fallbackValue === void 0) {
            fallbackValue = NaN;
        }
        var val = parseFloat(this.get(key));
        return isNaN(val) ? fallbackValue : val;
    };
    /**
     * @name set
     * @description
     * Sets a single config value.
     *
     * @param {string} [platform] - The platform (either 'ios' or 'android') that the config value should apply to. Leaving this blank will apply the config value to all platforms.
     * @param {string} [key] - The key used to look up the value at a later point in time.
     * @param {string} [value] - The config value being stored.
     */
    Config.prototype.set = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var arg0 = args[0];
        var arg1 = args[1];
        switch (args.length) {
            case 2:
                // set('key', 'value') = set key/value pair
                // arg1 = value
                this._s[arg0] = arg1;
                delete this._c[arg0]; // clear cache
                break;
            case 3:
                // setting('ios', 'key', 'value') = set key/value pair for platform
                // arg0 = platform
                // arg1 = key
                // arg2 = value
                this._s.platforms = this._s.platforms || {};
                this._s.platforms[arg0] = this._s.platforms[arg0] || {};
                this._s.platforms[arg0][arg1] = args[2];
                delete this._c[arg1]; // clear cache
                break;
        }
        return this;
    };
    /**
     * @private
     * @name settings()
     * @description
     */
    Config.prototype.settings = function (arg0, arg1) {
        switch (arguments.length) {
            case 0:
                return this._s;
            case 1:
                // settings({...})
                this._s = arg0;
                this._c = {}; // clear cache
                break;
            case 2:
                // settings('ios', {...})
                this._s.platforms = this._s.platforms || {};
                this._s.platforms[arg0] = arg1;
                this._c = {}; // clear cache
                break;
        }
        return this;
    };
    /**
     * @private
     */
    Config.prototype.setPlatform = function (platform) {
        this.platform = platform;
    };
    /**
     * @private
     */
    Config.setModeConfig = function (mode, config) {
        modeConfigs[mode] = config;
    };
    /**
     * @private
     */
    Config.getModeConfig = function (mode) {
        return modeConfigs[mode] || null;
    };
    return Config;
}();
exports.Config = Config;
var modeConfigs = {};

/***/ },
/* 17 */
/***/ function(module, exports) {

"use strict";
"use strict";
// RequestAnimationFrame Polyfill (Android 4.3 and below)
/*! @author Paul Irish */
/*! @source https://gist.github.com/paulirish/1579671 */

(function () {
    var rafLastTime = 0;
    var win = window;
    if (!win.requestAnimationFrame) {
        win.requestAnimationFrame = function (callback) {
            var currTime = Date.now();
            var timeToCall = Math.max(0, 16 - (currTime - rafLastTime));
            var id = window.setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            rafLastTime = currTime + timeToCall;
            return id;
        };
    }
    if (!win.cancelAnimationFrame) {
        win.cancelAnimationFrame = function (id) {
            clearTimeout(id);
        };
    }
})();
// use native raf rather than the zone wrapped one
var originalRaf = window[window['Zone']['__symbol__']('requestAnimationFrame')] || window[window['Zone']['__symbol__']('webkitRequestAnimationFrame')];
// if the originalRaf from the Zone symbol is not available, we need to provide the polyfilled version
exports.nativeRaf = originalRaf !== undefined ? originalRaf['bind'](window) : window.requestAnimationFrame.bind(window);
// zone wrapped raf
exports.raf = window.requestAnimationFrame.bind(window);
exports.cancelRaf = window.cancelAnimationFrame.bind(window);
exports.nativeTimeout = window[window['Zone']['__symbol__']('setTimeout')]['bind'](window);
exports.clearNativeTimeout = window[window['Zone']['__symbol__']('clearTimeout')]['bind'](window);
function rafFrames(framesToWait, callback) {
    framesToWait = Math.ceil(framesToWait);
    if (framesToWait < 2) {
        exports.nativeRaf(callback);
    } else {
        exports.nativeTimeout(function () {
            exports.nativeRaf(callback);
        }, (framesToWait - 1) * 16.6667);
    }
}
exports.rafFrames = rafFrames;
exports.CSS = {};
(function () {
    // transform
    var i;
    var keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform', '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];
    for (i = 0; i < keys.length; i++) {
        if (document.documentElement.style[keys[i]] !== undefined) {
            exports.CSS.transform = keys[i];
            break;
        }
    }
    // transition
    keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
    for (i = 0; i < keys.length; i++) {
        if (document.documentElement.style[keys[i]] !== undefined) {
            exports.CSS.transition = keys[i];
            break;
        }
    }
    // The only prefix we care about is webkit for transitions.
    var isWebkit = exports.CSS.transition.indexOf('webkit') > -1;
    // transition duration
    exports.CSS.transitionDuration = (isWebkit ? '-webkit-' : '') + 'transition-duration';
    // transition timing function
    exports.CSS.transitionTimingFn = (isWebkit ? '-webkit-' : '') + 'transition-timing-function';
    // transition delay
    exports.CSS.transitionDelay = (isWebkit ? '-webkit-' : '') + 'transition-delay';
    // To be sure transitionend works everywhere, include *both* the webkit and non-webkit events
    exports.CSS.transitionEnd = (isWebkit ? 'webkitTransitionEnd ' : '') + 'transitionend';
    // transform origin
    exports.CSS.transformOrigin = (isWebkit ? '-webkit-' : '') + 'transform-origin';
})();
function transitionEnd(el, callback) {
    if (el) {
        exports.CSS.transitionEnd.split(' ').forEach(function (eventName) {
            el.addEventListener(eventName, onEvent);
        });
        return unregister;
    }
    function unregister() {
        exports.CSS.transitionEnd.split(' ').forEach(function (eventName) {
            el.removeEventListener(eventName, onEvent);
        });
    }
    function onEvent(ev) {
        if (el === ev.target) {
            unregister();
            callback(ev);
        }
    }
}
exports.transitionEnd = transitionEnd;
function ready(callback) {
    var promise = null;
    if (!callback) {
        // a callback wasn't provided, so let's return a promise instead
        promise = new Promise(function (resolve) {
            callback = resolve;
        });
    }
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        callback();
    } else {
        document.addEventListener('DOMContentLoaded', completed, false);
        window.addEventListener('load', completed, false);
    }
    return promise;
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed, false);
        window.removeEventListener('load', completed, false);
        callback();
    }
}
exports.ready = ready;
function windowLoad(callback) {
    var promise = null;
    if (!callback) {
        // a callback wasn't provided, so let's return a promise instead
        promise = new Promise(function (resolve) {
            callback = resolve;
        });
    }
    if (document.readyState === 'complete') {
        callback();
    } else {
        window.addEventListener('load', completed, false);
    }
    return promise;
    function completed() {
        window.removeEventListener('load', completed, false);
        callback();
    }
}
exports.windowLoad = windowLoad;
function pointerCoord(ev) {
    // get coordinates for either a mouse click
    // or a touch depending on the given event
    var c = { x: 0, y: 0 };
    if (ev) {
        var touches = ev.touches && ev.touches.length ? ev.touches : [ev];
        var e = ev.changedTouches && ev.changedTouches[0] || touches[0];
        if (e) {
            c.x = e.clientX || e.pageX || 0;
            c.y = e.clientY || e.pageY || 0;
        }
    }
    return c;
}
exports.pointerCoord = pointerCoord;
function hasPointerMoved(threshold, startCoord, endCoord) {
    return startCoord && endCoord && (Math.abs(startCoord.x - endCoord.x) > threshold || Math.abs(startCoord.y - endCoord.y) > threshold);
}
exports.hasPointerMoved = hasPointerMoved;
function isActive(ele) {
    return !!(ele && document.activeElement === ele);
}
exports.isActive = isActive;
function hasFocus(ele) {
    return isActive(ele) && ele.parentElement.querySelector(':focus') === ele;
}
exports.hasFocus = hasFocus;
function isTextInput(ele) {
    return !!ele && (ele.tagName === 'TEXTAREA' || ele.contentEditable === 'true' || ele.tagName === 'INPUT' && !/^(radio|checkbox|range|file|submit|reset|color|image|button)$/i.test(ele.type));
}
exports.isTextInput = isTextInput;
function hasFocusedTextInput() {
    var ele = document.activeElement;
    if (isTextInput(ele)) {
        return ele.parentElement.querySelector(':focus') === ele;
    }
    return false;
}
exports.hasFocusedTextInput = hasFocusedTextInput;
var skipInputAttrsReg = /^(value|checked|disabled|type|class|style|id|autofocus|autocomplete|autocorrect)$/i;
function copyInputAttributes(srcElement, destElement) {
    // copy attributes from one element to another
    // however, skip over a few of them as they're already
    // handled in the angular world
    var attrs = srcElement.attributes;
    for (var i = 0; i < attrs.length; i++) {
        var attr = attrs[i];
        if (!skipInputAttrsReg.test(attr.name)) {
            destElement.setAttribute(attr.name, attr.value);
        }
    }
}
exports.copyInputAttributes = copyInputAttributes;
var matchesFn;
var matchesMethods = ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector'];
matchesMethods.some(function (fn) {
    if (typeof document.documentElement[fn] === 'function') {
        matchesFn = fn;
        return true;
    }
});
function closest(ele, selector, checkSelf) {
    if (ele && matchesFn) {
        // traverse parents
        ele = checkSelf ? ele : ele.parentElement;
        while (ele !== null) {
            if (ele[matchesFn](selector)) {
                return ele;
            }
            ele = ele.parentElement;
        }
    }
    return null;
}
exports.closest = closest;
/**
 * Get the element offsetWidth and offsetHeight. Values are cached
 * to reduce DOM reads. Cache is cleared on a window resize.
 */
function getDimensions(ele, id) {
    var dimensions = dimensionCache[id];
    if (!dimensions) {
        // make sure we got good values before caching
        if (ele.offsetWidth && ele.offsetHeight) {
            dimensions = dimensionCache[id] = {
                width: ele.offsetWidth,
                height: ele.offsetHeight,
                left: ele.offsetLeft,
                top: ele.offsetTop
            };
        } else {
            // do not cache bad values
            return { width: 0, height: 0, left: 0, top: 0 };
        }
    }
    return dimensions;
}
exports.getDimensions = getDimensions;
function clearDimensions(id) {
    delete dimensionCache[id];
}
exports.clearDimensions = clearDimensions;
function windowDimensions() {
    if (!dimensionCache.win) {
        // make sure we got good values before caching
        if (window.innerWidth && window.innerHeight) {
            dimensionCache.win = {
                width: window.innerWidth,
                height: window.innerHeight
            };
        } else {
            // do not cache bad values
            return { width: 0, height: 0 };
        }
    }
    return dimensionCache.win;
}
exports.windowDimensions = windowDimensions;
function flushDimensionCache() {
    dimensionCache = {};
}
exports.flushDimensionCache = flushDimensionCache;
var dimensionCache = {};

/***/ },
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(399);
var exception_handler_1 = __webpack_require__(400);
var exception_handler_2 = __webpack_require__(400);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
/**
 * @stable
 */
var BaseException = function (_super) {
    __extends(BaseException, _super);
    function BaseException(message) {
        if (message === void 0) {
            message = '--';
        }
        _super.call(this, message);
        this.message = message;
        this.stack = new Error(message).stack;
    }
    BaseException.prototype.toString = function () {
        return this.message;
    };
    return BaseException;
}(Error);
exports.BaseException = BaseException;
/**
 * Wraps an exception and provides additional context or information.
 * @stable
 */
var WrappedException = function (_super) {
    __extends(WrappedException, _super);
    function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
        _super.call(this, _wrapperMessage);
        this._wrapperMessage = _wrapperMessage;
        this._originalException = _originalException;
        this._originalStack = _originalStack;
        this._context = _context;
        this._wrapperStack = new Error(_wrapperMessage).stack;
    }
    Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
        get: function get() {
            return this._wrapperMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "wrapperStack", {
        get: function get() {
            return this._wrapperStack;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "originalException", {
        get: function get() {
            return this._originalException;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "originalStack", {
        get: function get() {
            return this._originalStack;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "context", {
        get: function get() {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "message", {
        get: function get() {
            return exception_handler_1.ExceptionHandler.exceptionToString(this);
        },
        enumerable: true,
        configurable: true
    });
    WrappedException.prototype.toString = function () {
        return this.message;
    };
    return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
    return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
    throw new BaseException('unimplemented');
}
exports.unimplemented = unimplemented;
//# sourceMappingURL=exceptions.js.map

/***/ },
/* 30 */,
/* 31 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
// Safari and Internet Explorer do not support the iterable parameter to the
// Map constructor.  We work around that by manually adding the items.
var createMapFromPairs = function () {
    try {
        if (new exports.Map([[1, 2]]).size === 1) {
            return function createMapFromPairs(pairs) {
                return new exports.Map(pairs);
            };
        }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
        var map = new exports.Map();
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
        }
        return map;
    };
}();
var createMapFromMap = function () {
    try {
        if (new exports.Map(new exports.Map())) {
            return function createMapFromMap(m) {
                return new exports.Map(m);
            };
        }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
        var map = new exports.Map();
        m.forEach(function (v, k) {
            map.set(k, v);
        });
        return map;
    };
}();
var _clearValues = function () {
    if (new exports.Map().keys().next) {
        return function _clearValues(m) {
            var keyIterator = m.keys();
            var k;
            while (!(k = keyIterator.next()).done) {
                m.set(k.value, null);
            }
        };
    } else {
        return function _clearValuesWithForeEach(m) {
            m.forEach(function (v, k) {
                m.set(k, null);
            });
        };
    }
}();
// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
var _arrayFromMap = function () {
    try {
        if (new exports.Map().values().next) {
            return function createArrayFromMap(m, getValues) {
                return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
        var res = ListWrapper.createFixedSize(m.size),
            i = 0;
        m.forEach(function (v, k) {
            res[i] = getValues ? v : k;
            i++;
        });
        return res;
    };
}();
var MapWrapper = function () {
    function MapWrapper() {}
    MapWrapper.clone = function (m) {
        return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function (stringMap) {
        var result = new exports.Map();
        for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
        }
        return result;
    };
    MapWrapper.toStringMap = function (m) {
        var r = {};
        m.forEach(function (v, k) {
            return r[k] = v;
        });
        return r;
    };
    MapWrapper.createFromPairs = function (pairs) {
        return createMapFromPairs(pairs);
    };
    MapWrapper.clearValues = function (m) {
        _clearValues(m);
    };
    MapWrapper.iterable = function (m) {
        return m;
    };
    MapWrapper.keys = function (m) {
        return _arrayFromMap(m, false);
    };
    MapWrapper.values = function (m) {
        return _arrayFromMap(m, true);
    };
    return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
/**
 * Wraps Javascript Objects
 */
var StringMapWrapper = function () {
    function StringMapWrapper() {}
    StringMapWrapper.create = function () {
        // Note: We are not using Object.create(null) here due to
        // performance!
        // http://jsperf.com/ng2-object-create-null
        return {};
    };
    StringMapWrapper.contains = function (map, key) {
        return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function (map, key) {
        return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function (map, key, value) {
        map[key] = value;
    };
    StringMapWrapper.keys = function (map) {
        return Object.keys(map);
    };
    StringMapWrapper.values = function (map) {
        return Object.keys(map).reduce(function (r, a) {
            r.push(map[a]);
            return r;
        }, []);
    };
    StringMapWrapper.isEmpty = function (map) {
        for (var prop in map) {
            return false;
        }
        return true;
    };
    StringMapWrapper.delete = function (map, key) {
        delete map[key];
    };
    StringMapWrapper.forEach = function (map, callback) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                callback(map[prop], prop);
            }
        }
    };
    StringMapWrapper.merge = function (m1, m2) {
        var m = {};
        for (var attr in m1) {
            if (m1.hasOwnProperty(attr)) {
                m[attr] = m1[attr];
            }
        }
        for (var attr in m2) {
            if (m2.hasOwnProperty(attr)) {
                m[attr] = m2[attr];
            }
        }
        return m;
    };
    StringMapWrapper.equals = function (m1, m2) {
        var k1 = Object.keys(m1);
        var k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        var key;
        for (var i = 0; i < k1.length; i++) {
            key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function () {
    function ListWrapper() {}
    // JS has no way to express a statically fixed size list, but dart does so we
    // keep both methods.
    ListWrapper.createFixedSize = function (size) {
        return new Array(size);
    };
    ListWrapper.createGrowableSize = function (size) {
        return new Array(size);
    };
    ListWrapper.clone = function (array) {
        return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function (array, fn) {
        for (var i = 0; i < array.length; i++) {
            fn(array[i], i);
        }
    };
    ListWrapper.first = function (array) {
        if (!array) return null;
        return array[0];
    };
    ListWrapper.last = function (array) {
        if (!array || array.length == 0) return null;
        return array[array.length - 1];
    };
    ListWrapper.indexOf = function (array, value, startIndex) {
        if (startIndex === void 0) {
            startIndex = 0;
        }
        return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function (list, el) {
        return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function (array) {
        var a = ListWrapper.clone(array);
        return a.reverse();
    };
    ListWrapper.concat = function (a, b) {
        return a.concat(b);
    };
    ListWrapper.insert = function (list, index, value) {
        list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function (list, index) {
        var res = list[index];
        list.splice(index, 1);
        return res;
    };
    ListWrapper.removeAll = function (list, items) {
        for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
        }
    };
    ListWrapper.remove = function (list, el) {
        var index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
            return true;
        }
        return false;
    };
    ListWrapper.clear = function (list) {
        list.length = 0;
    };
    ListWrapper.isEmpty = function (list) {
        return list.length == 0;
    };
    ListWrapper.fill = function (list, value, start, end) {
        if (start === void 0) {
            start = 0;
        }
        if (end === void 0) {
            end = null;
        }
        list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function (a, b) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) return false;
        }
        return true;
    };
    ListWrapper.slice = function (l, from, to) {
        if (from === void 0) {
            from = 0;
        }
        if (to === void 0) {
            to = null;
        }
        return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function (l, from, length) {
        return l.splice(from, length);
    };
    ListWrapper.sort = function (l, compareFn) {
        if (lang_1.isPresent(compareFn)) {
            l.sort(compareFn);
        } else {
            l.sort();
        }
    };
    ListWrapper.toString = function (l) {
        return l.toString();
    };
    ListWrapper.toJSON = function (l) {
        return JSON.stringify(l);
    };
    ListWrapper.maximum = function (list, predicate) {
        if (list.length == 0) {
            return null;
        }
        var solution = null;
        var maxValue = -Infinity;
        for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (lang_1.isBlank(candidate)) {
                continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
                solution = candidate;
                maxValue = candidateValue;
            }
        }
        return solution;
    };
    ListWrapper.flatten = function (list) {
        var target = [];
        _flattenArray(list, target);
        return target;
    };
    ListWrapper.addAll = function (list, source) {
        for (var i = 0; i < source.length; i++) {
            list.push(source[i]);
        }
    };
    return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
    if (lang_1.isPresent(source)) {
        for (var i = 0; i < source.length; i++) {
            var item = source[i];
            if (lang_1.isArray(item)) {
                _flattenArray(item, target);
            } else {
                target.push(item);
            }
        }
    }
    return target;
}
function isListLikeIterable(obj) {
    if (!lang_1.isJsObject(obj)) return false;
    return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[lang_1.getSymbolIterator()]();
    var iterator2 = b[lang_1.getSymbolIterator()]();
    while (true) {
        var item1 = iterator1.next();
        var item2 = iterator2.next();
        if (item1.done && item2.done) return true;
        if (item1.done || item2.done) return false;
        if (!comparator(item1.value, item2.value)) return false;
    }
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
    if (lang_1.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    } else {
        var iterator = obj[lang_1.getSymbolIterator()]();
        var item;
        while (!(item = iterator.next()).done) {
            fn(item.value);
        }
    }
}
exports.iterateListLike = iterateListLike;
// Safari and Internet Explorer do not support the iterable parameter to the
// Set constructor.  We work around that by manually adding the items.
var createSetFromList = function () {
    var test = new exports.Set([1, 2, 3]);
    if (test.size === 3) {
        return function createSetFromList(lst) {
            return new exports.Set(lst);
        };
    } else {
        return function createSetAndPopulateFromList(lst) {
            var res = new exports.Set(lst);
            if (res.size !== lst.length) {
                for (var i = 0; i < lst.length; i++) {
                    res.add(lst[i]);
                }
            }
            return res;
        };
    }
}();
var SetWrapper = function () {
    function SetWrapper() {}
    SetWrapper.createFromList = function (lst) {
        return createSetFromList(lst);
    };
    SetWrapper.has = function (s, key) {
        return s.has(key);
    };
    SetWrapper.delete = function (m, k) {
        m.delete(k);
    };
    return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
//# sourceMappingURL=collection.js.map

/***/ },
/* 32 */,
/* 33 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nav_params__ = __webpack_require__(71);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ViewController; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



/**
 * @name ViewController
 * @description
 * Access various features and information about the current view.
 * @usage
 *  ```ts
 * import { Component } from '@angular/core';
 * import { ViewController } from 'ionic-angular';
 *
 * @Component({...})
 * export class MyPage{
 *
 *   constructor(public viewCtrl: ViewController) {}
 *
 * }
 * ```
 */
var ViewController = function () {
    function ViewController(componentType, data) {
        _classCallCheck(this, ViewController);

        this.componentType = componentType;
        this._tbRefs = [];
        this._hdAttr = null;
        this._leavingOpts = null;
        this._loaded = false;
        this._onDismiss = null;
        /**
         * @private
         */
        this.instance = {};
        /**
         * @private
         */
        this.state = '';
        /**
         * @private
         * If this is currently the active view, then set to false
         * if it does not want the other views to fire their own lifecycles.
         */
        this.fireOtherLifecycles = true;
        /**
         * @private
         */
        this.isOverlay = false;
        /**
         * @private
         */
        this.usePortal = false;
        /**
         * @private
         */
        this._emitter = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        // passed in data could be NavParams, but all we care about is its data object
        this.data = data instanceof __WEBPACK_IMPORTED_MODULE_2__nav_params__["a" /* NavParams */] ? data.data : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isPresent"])(data) ? data : {};
        this.willEnter = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.didEnter = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.willLeave = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.didLeave = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.willUnload = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.didUnload = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    /**
     * @private
     */

    _createClass(ViewController, [{
        key: "subscribe",
        value: function subscribe(generatorOrNext) {
            return this._emitter.subscribe(generatorOrNext);
        }
        /**
         * @private
         */

    }, {
        key: "emit",
        value: function emit(data) {
            this._emitter.emit(data);
        }
        /**
         * @private
         */

    }, {
        key: "onDismiss",
        value: function onDismiss(callback) {
            this._onDismiss = callback;
        }
        /**
         * @private
         */

    }, {
        key: "dismiss",
        value: function dismiss(data, role) {
            var _this = this;

            var navOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            var options = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["merge"])({}, this._leavingOpts, navOptions);
            return this._nav.remove(this._nav.indexOf(this), 1, options).then(function () {
                _this._onDismiss && _this._onDismiss(data, role);
                return data;
            });
        }
        /**
         * @private
         */

    }, {
        key: "setNav",
        value: function setNav(navCtrl) {
            this._nav = navCtrl;
        }
        /**
         * @private
         */

    }, {
        key: "getNav",
        value: function getNav() {
            return this._nav;
        }
        /**
         * @private
         */

    }, {
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            return this._nav && this._nav.config.get('pageTransition');
        }
        /**
         * @private
         */

    }, {
        key: "getNavParams",
        value: function getNavParams() {
            return new __WEBPACK_IMPORTED_MODULE_2__nav_params__["a" /* NavParams */](this.data);
        }
        /**
         * @private
         */

    }, {
        key: "setLeavingOpts",
        value: function setLeavingOpts(opts) {
            this._leavingOpts = opts;
        }
        /**
         * Check to see if you can go back in the navigation stack.
         * @param {boolean} Check whether or not you can go back from this page
         * @returns {boolean} Returns if it's possible to go back from this Page.
         */

    }, {
        key: "enableBack",
        value: function enableBack() {
            // update if it's possible to go back from this nav item
            if (this._nav) {
                var previousItem = this._nav.getPrevious(this);
                // the previous view may exist, but if it's about to be destroyed
                // it shouldn't be able to go back to
                return !!previousItem;
            }
            return false;
        }
        /**
         * @private
         */

    }, {
        key: "setChangeDetector",
        value: function setChangeDetector(cd) {
            this._cd = cd;
        }
        /**
         * @private
         */

    }, {
        key: "setInstance",
        value: function setInstance(instance) {
            this.instance = instance;
        }
        /**
         * @private
         */

    }, {
        key: "isFirst",

        /**
         * @returns {boolean} Returns if this Page is the first in the stack of pages within its NavController.
         */
        value: function isFirst() {
            return this._nav ? this._nav.first() === this : false;
        }
        /**
         * @returns {boolean} Returns if this Page is the last in the stack of pages within its NavController.
         */

    }, {
        key: "isLast",
        value: function isLast() {
            return this._nav ? this._nav.last() === this : false;
        }
        /**
         * @private
         */

    }, {
        key: "domShow",
        value: function domShow(shouldShow, renderer) {
            // using hidden element attribute to display:none and not render views
            // renderAttr of '' means the hidden attribute will be added
            // renderAttr of null means the hidden attribute will be removed
            // doing checks to make sure we only make an update to the element when needed
            if (this._pgRef && (shouldShow && this._hdAttr === '' || !shouldShow && this._hdAttr !== '')) {
                this._hdAttr = shouldShow ? null : '';
                renderer.setElementAttribute(this._pgRef.nativeElement, 'hidden', this._hdAttr);
            }
        }
        /**
         * @private
         */

    }, {
        key: "setZIndex",
        value: function setZIndex(zIndex, renderer) {
            if (this._pgRef && zIndex !== this.zIndex) {
                this.zIndex = zIndex;
                renderer.setElementStyle(this._pgRef.nativeElement, 'z-index', zIndex.toString());
            }
        }
        /**
         * @private
         */

    }, {
        key: "setPageRef",
        value: function setPageRef(elementRef) {
            this._pgRef = elementRef;
        }
        /**
         * @private
         * @returns {elementRef} Returns the Page's ElementRef
         */

    }, {
        key: "pageRef",
        value: function pageRef() {
            return this._pgRef;
        }
        /**
         * @private
         */

    }, {
        key: "setContentRef",
        value: function setContentRef(elementRef) {
            this._cntRef = elementRef;
        }
        /**
         * @private
         * @returns {elementRef} Returns the Page's Content ElementRef
         */

    }, {
        key: "contentRef",
        value: function contentRef() {
            return this._cntRef;
        }
        /**
         * @private
         */

    }, {
        key: "setContent",
        value: function setContent(directive) {
            this._cntDir = directive;
        }
        /**
         * @private
         */

    }, {
        key: "setToolbarRef",
        value: function setToolbarRef(elementRef) {
            this._tbRefs.push(elementRef);
        }
        /**
         * @private
         */

    }, {
        key: "toolbarRefs",
        value: function toolbarRefs() {
            return this._tbRefs;
        }
        /**
         * @private
         */

    }, {
        key: "setHeader",
        value: function setHeader(directive) {
            this._hdrDir = directive;
        }
        /**
         * @private
         */

    }, {
        key: "getHeader",
        value: function getHeader() {
            return this._hdrDir;
        }
        /**
         * @private
         */

    }, {
        key: "setFooter",
        value: function setFooter(directive) {
            this._ftrDir = directive;
        }
        /**
         * @private
         */

    }, {
        key: "getFooter",
        value: function getFooter() {
            return this._ftrDir;
        }
        /**
         * @private
         * @returns {component} Returns the Page's Content component reference.
         */

    }, {
        key: "getContent",
        value: function getContent() {
            return this._cntDir;
        }
        /**
         * @private
         */

    }, {
        key: "setNavbar",
        value: function setNavbar(directive) {
            this._nbDir = directive;
        }
        /**
         * @private
         */

    }, {
        key: "getNavbar",
        value: function getNavbar() {
            return this._nbDir;
        }
        /**
         * You can find out of the current view has a Navbar or not. Be sure
         * to wrap this in an `ionViewWillEnter` method in order to make sure
         * the view has rendered fully.
         *
         * ```ts
         * export class Page1 {
         *  constructor(private viewCtrl: ViewController) {}
         *
         *  ionViewWillEnter(){
         *    console.log('Do we have a Navbar?', this.viewCtrl.hasNavbar());
         *  }
         *}
         * ```
         *
         * @returns {boolean} Returns a boolean if this Page has a navbar or not.
         */

    }, {
        key: "hasNavbar",
        value: function hasNavbar() {
            return !!this.getNavbar();
        }
        /**
         * @private
         */

    }, {
        key: "navbarRef",
        value: function navbarRef() {
            var navbar = this.getNavbar();
            return navbar && navbar.getElementRef();
        }
        /**
         * @private
         */

    }, {
        key: "titleRef",
        value: function titleRef() {
            var navbar = this.getNavbar();
            return navbar && navbar.getTitleRef();
        }
        /**
         * @private
         */

    }, {
        key: "navbarItemRefs",
        value: function navbarItemRefs() {
            var navbar = this.getNavbar();
            return navbar && navbar.getItemRefs();
        }
        /**
         * @private
         */

    }, {
        key: "backBtnRef",
        value: function backBtnRef() {
            var navbar = this.getNavbar();
            return navbar && navbar.getBackButtonRef();
        }
        /**
         * @private
         */

    }, {
        key: "backBtnTextRef",
        value: function backBtnTextRef() {
            var navbar = this.getNavbar();
            return navbar && navbar.getBackButtonTextRef();
        }
        /**
         * @private
         */

    }, {
        key: "navbarBgRef",
        value: function navbarBgRef() {
            var navbar = this.getNavbar();
            return navbar && navbar.getBackgroundRef();
        }
        /**
         * You can change the text of the back button on a view-by-view basis.
         *
         * ```ts
         * export class MyClass{
         *  constructor(private viewCtrl: ViewController) {}
         *
         *  ionViewWillEnter() {
         *    this.viewCtrl.setBackButtonText('Previous');
         *  }
         * }
         * ```
         * Make sure you use the view events when calling this method, otherwise the back-button will not have been created
         *
         * @param {string} backButtonText Set the back button text.
         */

    }, {
        key: "setBackButtonText",
        value: function setBackButtonText(val) {
            var navbar = this.getNavbar();
            if (navbar) {
                navbar.setBackButtonText(val);
            }
        }
        /**
         * Set if the back button for the current view is visible or not. Be sure to wrap this in `ionViewWillEnter` to make sure the has been compleltly rendered.
         * @param {boolean} Set if this Page's back button should show or not.
         */

    }, {
        key: "showBackButton",
        value: function showBackButton(shouldShow) {
            var navbar = this.getNavbar();
            if (navbar) {
                navbar.hideBackButton = !shouldShow;
            }
        }
        /**
         * @private
         */

    }, {
        key: "isLoaded",
        value: function isLoaded() {
            return this._loaded;
        }
        /**
         * The loaded method is used to load any dynamic content/components
         * into the dom before proceeding with the transition.  If a component
         * needs dynamic component loading, extending ViewController and
         * overriding this method is a good option
         * @param {function} done is a callback that must be called when async
         * loading/actions are completed
         */

    }, {
        key: "loaded",
        value: function loaded(done) {
            done();
        }
        /**
         * @private
         * The view has loaded. This event only happens once per view being
         * created. If a view leaves but is cached, then this will not
         * fire again on a subsequent viewing. This method is a good place
         * to put your setup code for the view; however, it is not the
         * recommended method to use when a view becomes active.
         */

    }, {
        key: "fireLoaded",
        value: function fireLoaded() {
            this._loaded = true;
            ctrlFn(this, 'Loaded');
        }
        /**
         * @private
         * The view is about to enter and become the active view.
         */

    }, {
        key: "fireWillEnter",
        value: function fireWillEnter() {
            if (this._cd) {
                // ensure this has been re-attached to the change detector
                this._cd.reattach();
                // detect changes before we run any user code
                this._cd.detectChanges();
            }
            this.willEnter.emit(null);
            ctrlFn(this, 'WillEnter');
        }
        /**
         * @private
         * The view has fully entered and is now the active view. This
         * will fire, whether it was the first load or loaded from the cache.
         */

    }, {
        key: "fireDidEnter",
        value: function fireDidEnter() {
            var navbar = this.getNavbar();
            navbar && navbar.didEnter();
            this.didEnter.emit(null);
            ctrlFn(this, 'DidEnter');
        }
        /**
         * @private
         * The view has is about to leave and no longer be the active view.
         */

    }, {
        key: "fireWillLeave",
        value: function fireWillLeave() {
            this.willLeave.emit(null);
            ctrlFn(this, 'WillLeave');
        }
        /**
         * @private
         * The view has finished leaving and is no longer the active view. This
         * will fire, whether it is cached or unloaded.
         */

    }, {
        key: "fireDidLeave",
        value: function fireDidLeave() {
            this.didLeave.emit(null);
            ctrlFn(this, 'DidLeave');
            // when this is not the active page
            // we no longer need to detect changes
            this._cd && this._cd.detach();
        }
        /**
         * @private
         * The view is about to be destroyed and have its elements removed.
         */

    }, {
        key: "fireWillUnload",
        value: function fireWillUnload() {
            this.willUnload.emit(null);
            ctrlFn(this, 'WillUnload');
        }
        /**
         * @private
         */

    }, {
        key: "onDestroy",
        value: function onDestroy(destroyFn) {
            this._destroyFn = destroyFn;
        }
        /**
         * @private
         */

    }, {
        key: "destroy",
        value: function destroy() {
            this.didUnload.emit(null);
            ctrlFn(this, 'DidUnload');
            this._destroyFn && this._destroyFn();
            this._destroyFn = null;
        }
    }, {
        key: "name",
        get: function get() {
            return this.componentType ? this.componentType['name'] : '';
        }
        /**
         * You can find out the index of the current view is in the current navigation stack.
         *
         * ```ts
         *  export class Page1 {
         *    constructor(private view: ViewController){
         *      // Just log out the index
         *      console.log(this.view.index);
         *    }
         *  }
         * ```
         *
         * @returns {number} Returns the index of this page within its `NavController`.
         */

    }, {
        key: "index",
        get: function get() {
            return this._nav ? this._nav.indexOf(this) : -1;
        }
    }]);

    return ViewController;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], ViewController.prototype, "_emitter", void 0);
function ctrlFn(viewCtrl, fnName) {
    if (viewCtrl.instance) {
        // deprecated warning: added 2016-06-01, beta.8
        if (viewCtrl.instance['onPage' + fnName]) {
            try {
                console.warn('onPage' + fnName + '() has been deprecated. Please rename to ionView' + fnName + '()');
                viewCtrl.instance['onPage' + fnName]();
            } catch (e) {
                console.error(viewCtrl.name + ' onPage' + fnName + ': ' + e.message);
            }
        }
        // fire off ionView lifecycle instance method
        if (viewCtrl.instance['ionView' + fnName]) {
            try {
                viewCtrl.instance['ionView' + fnName]();
            } catch (e) {
                console.error(viewCtrl.name + ' ionView' + fnName + ': ' + e.message);
            }
        }
    }
}
var _a;

/***/ },
/* 34 */,
/* 35 */,
/* 36 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "Animation", function() { return Animation; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}



/**
 * @private
 *
 * - play
 * - Add before classes - DOM WRITE
 * - Remove before classes - DOM WRITE
 * - Add before inline styles - DOM WRITE
 * - set inline FROM styles - DOM WRITE
 * - RAF
 * - run before functions that have dom reads - DOM READ
 * - run before functions that have dom writes - DOM WRITE
 * - set css transition duration/easing - DOM WRITE
 * - RAF
 * - set inline TO styles - DOM WRITE
 */
var Animation = function () {
    function Animation(ele) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, Animation);

        this._c = [];
        this._el = [];
        this._fx = {};
        this._bfSty = {};
        this._bfAdd = [];
        this._bfRmv = [];
        this._afSty = {};
        this._afAdd = [];
        this._afRmv = [];
        this._bfReadFns = [];
        this._bfWriteFns = [];
        this._fFns = [];
        this._fOnceFns = [];
        this._rv = false;
        this._lastUpd = 0;
        this.isPlaying = false;
        this.hasTween = false;
        this.hasCompleted = false;
        this.element(ele);
        this._opts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["assign"])({
            renderDelay: 24
        }, opts);
    }
    /**
     * NO DOM
     */

    _createClass(Animation, [{
        key: '_reset',
        value: function _reset() {
            this._fx = {};
            this._bfSty = {};
            this._afSty = {};
            this._el.length = this._c.length = this._bfAdd.length = this._bfRmv.length = this._afAdd.length = this._afRmv.length = this._fFns.length = this._bfReadFns.length = this._bfWriteFns.length = this._fOnceFns.length = 0;
            this._easing = this._dur = null;
        }
    }, {
        key: 'element',
        value: function element(ele) {
            var i;
            if (ele) {
                if (ele.length) {
                    for (i = 0; i < ele.length; i++) {
                        this._addEle(ele[i]);
                    }
                } else if (typeof ele === 'string') {
                    ele = document.querySelectorAll(ele);
                    for (i = 0; i < ele.length; i++) {
                        this._addEle(ele[i]);
                    }
                } else {
                    this._addEle(ele);
                }
            }
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: '_addEle',
        value: function _addEle(ele) {
            if (ele.nativeElement) {
                ele = ele.nativeElement;
            }
            if (ele.nodeType === 1) {
                this._el.push(ele);
            }
        }
        /**
         * NO DOM
         */

    }, {
        key: 'parent',
        value: function parent(parentAnimation) {
            this._parent = parentAnimation;
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'add',
        value: function add(childAnimation) {
            childAnimation.parent(this);
            this._c.push(childAnimation);
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'getDuration',
        value: function getDuration() {
            return this._dur !== null ? this._dur : this._parent && this._parent.getDuration() || 0;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'duration',
        value: function duration(milliseconds) {
            this._dur = milliseconds;
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'getEasing',
        value: function getEasing() {
            return this._easing !== null ? this._easing : this._parent && this._parent.getEasing() || null;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'easing',
        value: function easing(name) {
            this._easing = name;
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'from',
        value: function from(prop, val) {
            this._addProp('from', prop, val);
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'to',
        value: function to(prop, val, clearProperyAfterTransition) {
            var fx = this._addProp('to', prop, val);
            if (clearProperyAfterTransition) {
                // if this effect is a transform then clear the transform effect
                // otherwise just clear the actual property
                this.after.clearStyles([fx.trans ? __WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transform : prop]);
            }
            return this;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'fromTo',
        value: function fromTo(prop, fromVal, toVal, clearProperyAfterTransition) {
            return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);
        }
        /**
         * NO DOM
         */

    }, {
        key: '_addProp',
        value: function _addProp(state, prop, val) {
            var fxProp = this._fx[prop];
            if (!fxProp) {
                // first time we've see this EffectProperty
                fxProp = this._fx[prop] = {
                    trans: typeof TRANSFORMS[prop] !== 'undefined',
                    wc: ''
                };
                // add the will-change property for transforms or opacity
                if (fxProp.trans) {
                    fxProp.wc = __WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transform;
                } else if (prop === 'opacity') {
                    fxProp.wc = prop;
                }
            }
            // add from/to EffectState to the EffectProperty
            var fxState = fxProp[state] = {
                val: val,
                num: null,
                unit: ''
            };
            if (typeof val === 'string' && val.indexOf(' ') < 0) {
                var r = val.match(CSS_VALUE_REGEX);
                var num = parseFloat(r[1]);
                if (!isNaN(num)) {
                    fxState.num = num;
                }
                fxState.unit = r[0] !== r[2] ? r[2] : '';
            } else if (typeof val === 'number') {
                fxState.num = val;
            }
            return fxProp;
        }
        /**
         * NO DOM
         */

    }, {
        key: 'play',

        /**
         * DOM WRITE
         */
        value: function play() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            var self = this;
            var i;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(opts.duration)) {
                self._dur = opts.duration;
            }
            console.debug('Animation, play, duration', self._dur, 'easing', self._easing);
            // always default that an animation does not tween
            // a tween requires that an Animation class has an element
            // and that it has at least one FROM/TO effect
            // and that the FROM/TO effect can tween numeric values
            self.hasTween = false;
            self.hasCompleted = false;
            self.isPlaying = true;
            // this is the top level animation and is in full control
            // of when the async play() should actually kick off
            // if there is no duration then it'll set the TO property immediately
            // if there is a duration, then it'll stage all animations at the
            // FROM property and transition duration, wait a few frames, then
            // kick off the animation by setting the TO property for each animation
            // ensure all past transition end events have been cleared
            self._clearAsync();
            if (self._dur > 30) {
                // this animation has a duration, so it should animate
                // place all the elements with their FROM properties
                // set the FROM properties
                // ******** DOM WRITE ****************
                self._progress(0);
                // add the will-change or translateZ properties when applicable
                // ******** DOM WRITE ****************
                self._willChg(true);
                // set the async TRANSITION END event
                // and run onFinishes when the transition ends
                // ******** DOM WRITE ****************
                self._asyncEnd(self._dur, true);
                // begin each animation when everything is rendered in their place
                // and the transition duration/easing is ready to go
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["rafFrames"])(self._opts.renderDelay / 16, function () {
                    // there's been a moment and the elements are in place
                    // fire off all the "before" function that have DOM READS in them
                    // elements will be in the DOM, however visibily hidden
                    // so we can read their dimensions if need be
                    // ******** DOM READ ****************
                    self._beforeReadFn();
                    // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                    // fire off all the "before" function that have DOM WRITES in them
                    // ******** DOM WRITE ****************
                    self._beforeWriteFn();
                    // stage all of the before css classes and inline styles
                    // will recursively stage all child elements
                    // ******** DOM WRITE ****************
                    self._before();
                    // now set the TRANSITION duration/easing
                    // ******** DOM WRITE ****************
                    self._setTrans(self._dur, false);
                    // wait a few moments again to wait for the transition
                    // info to take hold in the DOM
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["rafFrames"])(2, function () {
                        // browser had some time to render everything in place
                        // and the transition duration/easing is set
                        // now set the TO properties
                        // which will trigger the transition to begin
                        // ******** DOM WRITE ****************
                        self._progress(1);
                    });
                });
            } else {
                // this animation does not have a duration
                // but we still need to apply the styles and wait
                // a frame so we can accurately read the dimensions
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["rafFrames"])(self._opts.renderDelay / 16, function () {
                    // fire off all the "before" function that have DOM READS in them
                    // elements will be in the DOM, however visibily hidden
                    // so we can read their dimensions if need be
                    // ******** DOM READ ****************
                    self._beforeReadFn();
                    // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                    // fire off all the "before" function that have DOM WRITES in them
                    // ******** DOM WRITE ****************
                    self._beforeWriteFn();
                    // ensure before css has ran
                    // ******** DOM WRITE ****************
                    self._before();
                    // this animation does not have a duration, so it should not animate
                    // just go straight to the TO properties and call it done
                    // ******** DOM WRITE ****************
                    self._progress(1);
                    // since there was no animation, immediately run the after
                    // ******** DOM WRITE ****************
                    self._after();
                    // since there was no animation, it's done
                    // fire off all the onFinishes
                    // and now you know
                    self._didFinish(true);
                });
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: 'stop',
        value: function stop() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            var self = this;
            var duration = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(opts.duration) ? opts.duration : 0;
            var stepValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isDefined"])(opts.stepValue) ? opts.stepValue : 1;
            // ensure all past transition end events have been cleared
            this._clearAsync();
            // set the TO properties
            // ******** DOM WRITE ****************
            self._progress(stepValue);
            if (duration > 30) {
                // this animation has a duration, so it should animate
                // place all the elements with their TO properties
                // now set the TRANSITION duration
                // ******** DOM WRITE ****************
                self._setTrans(duration, true);
                // set the async TRANSITION END event
                // and run onFinishes when the transition ends
                // ******** DOM WRITE ****************
                self._asyncEnd(duration, false);
            } else {
                // this animation does not have a duration, so it should not animate
                // just go straight to the TO properties and call it done
                // ******** DOM WRITE ****************
                self._after();
                // since there was no animation, it's done
                // fire off all the onFinishes
                self._didFinish(false);
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_asyncEnd',
        value: function _asyncEnd(duration, shouldComplete) {
            var self = this;
            function onTransitionEnd(ev) {
                console.debug('Animation onTransitionEnd', ev.target.nodeName, ev.propertyName);
                // ensure transition end events and timeouts have been cleared
                self._clearAsync();
                // set the after styles
                // ******** DOM WRITE ****************
                self._after();
                // remove will change properties
                // ******** DOM WRITE ****************
                self._willChg(false);
                // transition finished
                self._didFinish(shouldComplete);
            }
            function onTransitionFallback() {
                console.debug('Animation onTransitionFallback');
                // oh noz! the transition end event didn't fire in time!
                // instead the fallback timer when first
                // clear the other async end events from firing
                self._tmr = 0;
                self._clearAsync();
                // too late to have a smooth animation, just finish it
                // ******** DOM WRITE ****************
                self._setTrans(0, true);
                // ensure the ending progress step gets rendered
                // ******** DOM WRITE ****************
                self._progress(1);
                // set the after styles
                // ******** DOM WRITE ****************
                self._after();
                // remove will change properties
                // ******** DOM WRITE ****************
                self._willChg(false);
                // transition finished
                self._didFinish(shouldComplete);
            }
            // set the TRANSITION END event on one of the transition elements
            self._unregTrans = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["transitionEnd"])(self._transEl(), onTransitionEnd);
            // set a fallback timeout if the transition end event never fires, or is too slow
            // transition end fallback: (animation duration + XXms)
            self._tmr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeTimeout"])(onTransitionFallback, duration + 400);
        }
        /**
         * NO DOM
         */

    }, {
        key: '_clearAsync',
        value: function _clearAsync() {
            this._unregTrans && this._unregTrans();
            if (this._tmr) {
                clearTimeout(this._tmr);
                this._tmr = 0;
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_progress',
        value: function _progress(stepValue) {
            // bread 'n butter
            var i;
            var prop;
            var fx;
            var val;
            var transforms;
            var tweenEffect;
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i]._progress(stepValue);
            }
            if (this._el.length) {
                // flip the number if we're going in reverse
                if (this._rv) {
                    stepValue = stepValue * -1 + 1;
                }
                transforms = [];
                for (prop in this._fx) {
                    fx = this._fx[prop];
                    if (fx.from && fx.to) {
                        tweenEffect = fx.from.num !== fx.to.num;
                        if (tweenEffect) {
                            this.hasTween = true;
                        }
                        if (stepValue === 0) {
                            // FROM
                            val = fx.from.val;
                        } else if (stepValue === 1) {
                            // TO
                            val = fx.to.val;
                        } else if (tweenEffect) {
                            // EVERYTHING IN BETWEEN
                            val = (fx.to.num - fx.from.num) * stepValue + fx.from.num + fx.to.unit;
                        } else {
                            val = null;
                        }
                        if (val !== null) {
                            if (fx.trans) {
                                transforms.push(prop + '(' + val + ')');
                            } else {
                                for (i = 0; i < this._el.length; i++) {
                                    // ******** DOM WRITE ****************
                                    this._el[i].style[prop] = val;
                                }
                            }
                        }
                    }
                }
                // place all transforms on the same property
                if (transforms.length) {
                    if (!SUPPORTS_WILL_CHANGE) {
                        // if the element doesn't support will-change
                        // then auto add translateZ for transform properties
                        transforms.push('translateZ(0px)');
                    }
                    for (i = 0; i < this._el.length; i++) {
                        // ******** DOM WRITE ****************
                        this._el[i].style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transform] = transforms.join(' ');
                    }
                }
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_setTrans',
        value: function _setTrans(duration, forcedLinearEasing) {
            var i;
            var easing;
            // set the TRANSITION properties inline on the element
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i]._setTrans(duration, forcedLinearEasing);
            }
            if (Object.keys(this._fx).length) {
                for (i = 0; i < this._el.length; i++) {
                    // all parent/child animations should have the same duration
                    // ******** DOM WRITE ****************
                    this._el[i].style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transitionDuration] = duration + 'ms';
                    // each animation can have a different easing
                    easing = forcedLinearEasing ? 'linear' : this.getEasing();
                    if (easing) {
                        // ******** DOM WRITE ****************
                        this._el[i].style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transitionTimingFn] = easing;
                    }
                }
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_willChg',
        value: function _willChg(addWillChange) {
            var i;
            var wc;
            var prop;
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i]._willChg(addWillChange);
            }
            if (SUPPORTS_WILL_CHANGE) {
                wc = [];
                if (addWillChange) {
                    for (prop in this._fx) {
                        if (this._fx[prop].wc !== '') {
                            if (this._fx[prop].wc === 'webkitTransform') {
                                wc.push('transform', '-webkit-transform');
                            } else {
                                wc.push(this._fx[prop].wc);
                            }
                        }
                    }
                }
                for (i = 0; i < this._el.length; i++) {
                    // ******** DOM WRITE ****************
                    this._el[i].style['willChange'] = wc.join(',');
                }
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_before',
        value: function _before() {
            // before the RENDER_DELAY
            // before the animations have started
            var i;
            var j;
            var prop;
            var ele;
            // stage all of the child animations
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i]._before();
            }
            if (!this._rv) {
                for (i = 0; i < this._el.length; i++) {
                    ele = this._el[i];
                    // css classes to add before the animation
                    for (j = 0; j < this._bfAdd.length; j++) {
                        // ******** DOM WRITE ****************
                        ele.classList.add(this._bfAdd[j]);
                    }
                    // css classes to remove before the animation
                    for (j = 0; j < this._bfRmv.length; j++) {
                        // ******** DOM WRITE ****************
                        ele.classList.remove(this._bfRmv[j]);
                    }
                    // inline styles to add before the animation
                    for (prop in this._bfSty) {
                        // ******** DOM WRITE ****************
                        ele.style[prop] = this._bfSty[prop];
                    }
                }
            }
        }
        /**
         * DOM READ
         */

    }, {
        key: '_beforeReadFn',
        value: function _beforeReadFn() {
            var i;
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM READ ****************
                this._c[i]._beforeReadFn();
            }
            for (i = 0; i < this._bfReadFns.length; i++) {
                // ******** DOM READ ****************
                this._bfReadFns[i]();
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_beforeWriteFn',
        value: function _beforeWriteFn() {
            var i;
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i]._beforeWriteFn();
            }
            for (i = 0; i < this._bfReadFns.length; i++) {
                // ******** DOM WRITE ****************
                this._bfWriteFns[i]();
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: '_after',
        value: function _after() {
            // after the animations have finished
            var i;
            var j;
            var prop;
            var ele;
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i]._after();
            }
            for (i = 0; i < this._el.length; i++) {
                ele = this._el[i];
                // remove the transition duration/easing
                // ******** DOM WRITE ****************
                ele.style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transitionDuration] = '';
                // ******** DOM WRITE ****************
                ele.style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transitionTimingFn] = '';
                if (this._rv) {
                    // finished in reverse direction
                    // css classes that were added before the animation should be removed
                    for (j = 0; j < this._bfAdd.length; j++) {
                        // ******** DOM WRITE ****************
                        ele.classList.remove(this._bfAdd[j]);
                    }
                    // css classes that were removed before the animation should be added
                    for (j = 0; j < this._bfRmv.length; j++) {
                        // ******** DOM WRITE ****************
                        ele.classList.add(this._bfRmv[j]);
                    }
                    // inline styles that were added before the animation should be removed
                    for (prop in this._bfSty) {
                        // ******** DOM WRITE ****************
                        ele.style[prop] = '';
                    }
                } else {
                    // finished in forward direction
                    // css classes to add after the animation
                    for (j = 0; j < this._afAdd.length; j++) {
                        // ******** DOM WRITE ****************
                        ele.classList.add(this._afAdd[j]);
                    }
                    // css classes to remove after the animation
                    for (j = 0; j < this._afRmv.length; j++) {
                        // ******** DOM WRITE ****************
                        ele.classList.remove(this._afRmv[j]);
                    }
                    // inline styles to add after the animation
                    for (prop in this._afSty) {
                        // ******** DOM WRITE ****************
                        ele.style[prop] = this._afSty[prop];
                    }
                }
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: 'progressStart',
        value: function progressStart() {
            for (var i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i].progressStart();
            }
            // ******** DOM WRITE ****************
            this._before();
            // force no duration, linear easing
            // ******** DOM WRITE ****************
            this._setTrans(0, true);
        }
        /**
         * DOM WRITE
         */

    }, {
        key: 'progressStep',
        value: function progressStep(stepValue) {
            var now = Date.now();
            // only update if the last update was more than 16ms ago
            if (now - 16 > this._lastUpd) {
                this._lastUpd = now;
                stepValue = Math.min(1, Math.max(0, stepValue));
                for (var i = 0; i < this._c.length; i++) {
                    // ******** DOM WRITE ****************
                    this._c[i].progressStep(stepValue);
                }
                if (this._rv) {
                    // if the animation is going in reverse then
                    // flip the step value: 0 becomes 1, 1 becomes 0
                    stepValue = stepValue * -1 + 1;
                }
                // ******** DOM WRITE ****************
                this._progress(stepValue);
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: 'progressEnd',
        value: function progressEnd(shouldComplete, currentStepValue) {
            console.debug('Animation, progressEnd, shouldComplete', shouldComplete, 'currentStepValue', currentStepValue);
            for (var i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i].progressEnd(shouldComplete, currentStepValue);
            }
            // set all the animations to their final position
            // ******** DOM WRITE ****************
            this._progress(shouldComplete ? 1 : 0);
            // if it's already at the final position, or close, then it's done
            // otherwise we need to add a transition end event listener
            if (currentStepValue < 0.05 || currentStepValue > 0.95) {
                // the progress was already left off at the point that is finished
                // for example, the left menu was dragged all the way open already
                // ******** DOM WRITE ****************
                this._after();
                // ******** DOM WRITE ****************
                this._willChg(false);
                this._didFinish(shouldComplete);
            } else {
                // the stepValue was left off at a point when it needs to finish transition still
                // for example, the left menu was opened 75% and needs to finish opening
                // ******** DOM WRITE ****************
                this._asyncEnd(64, shouldComplete);
                // force quick duration, linear easing
                // ******** DOM WRITE ****************
                this._setTrans(64, true);
            }
        }
        /**
         * POSSIBLE DOM READ/WRITE
         */

    }, {
        key: 'onFinish',
        value: function onFinish(callback) {
            var onceTimeCallback = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
            var clearOnFinishCallacks = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

            if (clearOnFinishCallacks) {
                this._fFns = [];
                this._fOnceFns = [];
            }
            if (onceTimeCallback) {
                this._fOnceFns.push(callback);
            } else {
                this._fFns.push(callback);
            }
            return this;
        }
        /**
         * POSSIBLE DOM READ/WRITE
         */

    }, {
        key: '_didFinish',
        value: function _didFinish(hasCompleted) {
            this.isPlaying = false;
            this.hasCompleted = hasCompleted;
            var i;
            for (i = 0; i < this._fFns.length; i++) {
                this._fFns[i](this);
            }
            for (i = 0; i < this._fOnceFns.length; i++) {
                this._fOnceFns[i](this);
            }
            this._fOnceFns = [];
        }
        /**
         * NO DOM
         */

    }, {
        key: 'reverse',
        value: function reverse() {
            var shouldReverse = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

            for (var i = 0; i < this._c.length; i++) {
                this._c[i].reverse(shouldReverse);
            }
            this._rv = shouldReverse;
            return this;
        }
        /**
         * DOM WRITE
         */

    }, {
        key: 'destroy',
        value: function destroy(removeElement) {
            var i;
            var ele;
            for (i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i].destroy(removeElement);
            }
            if (removeElement) {
                for (i = 0; i < this._el.length; i++) {
                    ele = this._el[i];
                    // ******** DOM WRITE ****************
                    ele.parentNode && ele.parentNode.removeChild(ele);
                }
            }
            this._clearAsync();
            this._reset();
        }
        /**
         * NO DOM
         */

    }, {
        key: '_transEl',
        value: function _transEl() {
            // get the lowest level element that has an Animation
            var i;
            var targetEl;
            for (i = 0; i < this._c.length; i++) {
                targetEl = this._c[i]._transEl();
                if (targetEl) {
                    return targetEl;
                }
            }
            return this.hasTween && this._el.length ? this._el[0] : null;
        }
        // ***** STATIC CLASSES *********

    }, {
        key: 'before',
        get: function get() {
            var _this = this;

            return {
                addClass: function addClass(className) {
                    _this._bfAdd.push(className);
                    return _this;
                },
                removeClass: function removeClass(className) {
                    _this._bfRmv.push(className);
                    return _this;
                },
                setStyles: function setStyles(styles) {
                    _this._bfSty = styles;
                    return _this;
                },
                clearStyles: function clearStyles(propertyNames) {
                    for (var i = 0; i < propertyNames.length; i++) {
                        _this._bfSty[propertyNames[i]] = '';
                    }
                    return _this;
                },
                addDomReadFn: function addDomReadFn(domReadFn) {
                    _this._bfReadFns.push(domReadFn);
                    return _this;
                },
                addDomWriteFn: function addDomWriteFn(domWriteFn) {
                    _this._bfWriteFns.push(domWriteFn);
                    return _this;
                }
            };
        }
        /**
         * NO DOM
         */

    }, {
        key: 'after',
        get: function get() {
            var _this2 = this;

            return {
                addClass: function addClass(className) {
                    _this2._afAdd.push(className);
                    return _this2;
                },
                removeClass: function removeClass(className) {
                    _this2._afRmv.push(className);
                    return _this2;
                },
                setStyles: function setStyles(styles) {
                    _this2._afSty = styles;
                    return _this2;
                },
                clearStyles: function clearStyles(propertyNames) {
                    for (var i = 0; i < propertyNames.length; i++) {
                        _this2._afSty[propertyNames[i]] = '';
                    }
                    return _this2;
                }
            };
        }
    }], [{
        key: 'create',
        value: function create(name) {
            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var AnimationClass = AnimationRegistry[name];
            if (!AnimationClass) {
                // couldn't find an animation by the given name
                // fallback to just the base Animation class
                AnimationClass = Animation;
            }
            return new AnimationClass(null, opts);
        }
    }, {
        key: 'register',
        value: function register(name, AnimationClass) {
            AnimationRegistry[name] = AnimationClass;
        }
    }]);

    return Animation;
}();
var TRANSFORMS = {
    'translateX': 1, 'translateY': 1, 'translateZ': 1,
    'scale': 1, 'scaleX': 1, 'scaleY': 1, 'scaleZ': 1,
    'rotate': 1, 'rotateX': 1, 'rotateY': 1, 'rotateZ': 1,
    'skewX': 1, 'skewY': 1, 'perspective': 1
};
var CSS_VALUE_REGEX = /(^-?\d*\.?\d*)(.*)/;
var SUPPORTS_WILL_CHANGE = typeof document.documentElement.style['willChange'] !== 'undefined';
var AnimationRegistry = {};

/***/ },
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export scheduleMicroTask *//* unused harmony export IS_DART */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return _global; });/* unused harmony export Type *//* unused harmony export getTypeNameForDebugging *//* unused harmony export Math *//* unused harmony export Date *//* harmony export */ exports["b"] = isPresent;/* harmony export */ exports["c"] = isBlank;/* unused harmony export isBoolean *//* unused harmony export isNumber *//* harmony export */ exports["g"] = isString;/* unused harmony export isFunction *//* unused harmony export isType *//* unused harmony export isStringMap *//* unused harmony export isStrictStringMap *//* unused harmony export isPromise *//* harmony export */ exports["d"] = isArray;/* unused harmony export isDate *//* unused harmony export noop *//* unused harmony export stringify *//* unused harmony export serializeEnum *//* unused harmony export deserializeEnum *//* unused harmony export resolveEnumToken */
/* harmony export */ __webpack_require__.d(exports, "i", function() { return StringWrapper; });/* unused harmony export StringJoiner *//* unused harmony export NumberParseError *//* unused harmony export NumberWrapper *//* unused harmony export RegExp *//* unused harmony export RegExpWrapper *//* unused harmony export RegExpMatcherWrapper *//* unused harmony export FunctionWrapper *//* unused harmony export looseIdentical *//* unused harmony export getMapKey *//* unused harmony export normalizeBlank *//* unused harmony export normalizeBool *//* harmony export */ exports["e"] = isJsObject;/* unused harmony export print *//* unused harmony export warn */
/* harmony export */ __webpack_require__.d(exports, "h", function() { return Json; });/* unused harmony export DateWrapper *//* unused harmony export setValueOnPath *//* harmony export */ exports["f"] = getSymbolIterator;/* unused harmony export evalExpression *//* unused harmony export isPrimitive *//* unused harmony export hasConstructor *//* unused harmony export escape *//* unused harmony export escapeRegExp */var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var globalScope;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = self;
    } else {
        globalScope = global;
    }
} else {
    globalScope = window;
}
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
var IS_DART = false;
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global = globalScope;

var Type = Function;
function getTypeNameForDebugging(type) {
    if (type['name']) {
        return type['name'];
    }
    return typeof type === 'undefined' ? 'undefined' : _typeof(type);
}
var Math = _global.Math;
var Date = _global.Date;
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
function isBlank(obj) {
    return obj === undefined || obj === null;
}
function isBoolean(obj) {
    return typeof obj === 'boolean';
}
function isNumber(obj) {
    return typeof obj === 'number';
}
function isString(obj) {
    return typeof obj === 'string';
}
function isFunction(obj) {
    return typeof obj === 'function';
}
function isType(obj) {
    return isFunction(obj);
}
function isStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;
}
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
function isPromise(obj) {
    return obj instanceof _global.Promise;
}
function isArray(obj) {
    return Array.isArray(obj);
}
function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
}
function noop() {}
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token === undefined || token === null) {
        return '' + token;
    }
    if (token.name) {
        return token.name;
    }
    if (token.overriddenName) {
        return token.overriddenName;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
// serialize / deserialize enum exist only for consistency with dart API
// enums in typescript don't need to be serialized
function serializeEnum(val) {
    return val;
}
function deserializeEnum(val, values) {
    return val;
}
function resolveEnumToken(enumValue, val) {
    return enumValue[val];
}

var StringWrapper = function () {
    function StringWrapper() {
        _classCallCheck(this, StringWrapper);
    }

    _createClass(StringWrapper, null, [{
        key: 'fromCharCode',
        value: function fromCharCode(code) {
            return String.fromCharCode(code);
        }
    }, {
        key: 'charCodeAt',
        value: function charCodeAt(s, index) {
            return s.charCodeAt(index);
        }
    }, {
        key: 'split',
        value: function split(s, regExp) {
            return s.split(regExp);
        }
    }, {
        key: 'equals',
        value: function equals(s, s2) {
            return s === s2;
        }
    }, {
        key: 'stripLeft',
        value: function stripLeft(s, charVal) {
            if (s && s.length) {
                var pos = 0;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] != charVal) break;
                    pos++;
                }
                s = s.substring(pos);
            }
            return s;
        }
    }, {
        key: 'stripRight',
        value: function stripRight(s, charVal) {
            if (s && s.length) {
                var pos = s.length;
                for (var i = s.length - 1; i >= 0; i--) {
                    if (s[i] != charVal) break;
                    pos--;
                }
                s = s.substring(0, pos);
            }
            return s;
        }
    }, {
        key: 'replace',
        value: function replace(s, from, _replace) {
            return s.replace(from, _replace);
        }
    }, {
        key: 'replaceAll',
        value: function replaceAll(s, from, replace) {
            return s.replace(from, replace);
        }
    }, {
        key: 'slice',
        value: function slice(s) {
            var from = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
            var to = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            return s.slice(from, to === null ? undefined : to);
        }
    }, {
        key: 'replaceAllMapped',
        value: function replaceAllMapped(s, from, cb) {
            return s.replace(from, function () {
                for (var _len = arguments.length, matches = Array(_len), _key = 0; _key < _len; _key++) {
                    matches[_key] = arguments[_key];
                }

                // Remove offset & string from the result array
                matches.splice(-2, 2);
                // The callback receives match, p1, ..., pn
                return cb(matches);
            });
        }
    }, {
        key: 'contains',
        value: function contains(s, substr) {
            return s.indexOf(substr) != -1;
        }
    }, {
        key: 'compare',
        value: function compare(a, b) {
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }
        }
    }]);

    return StringWrapper;
}();



var StringJoiner = function () {
    function StringJoiner() {
        var parts = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, StringJoiner);

        this.parts = parts;
    }

    _createClass(StringJoiner, [{
        key: 'add',
        value: function add(part) {
            this.parts.push(part);
        }
    }, {
        key: 'toString',
        value: function toString() {
            return this.parts.join('');
        }
    }]);

    return StringJoiner;
}();
var NumberParseError = function (_Error) {
    _inherits(NumberParseError, _Error);

    function NumberParseError(message) {
        _classCallCheck(this, NumberParseError);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NumberParseError).call(this));

        _this.message = message;
        return _this;
    }

    _createClass(NumberParseError, [{
        key: 'toString',
        value: function toString() {
            return this.message;
        }
    }]);

    return NumberParseError;
}(Error);
var NumberWrapper = function () {
    function NumberWrapper() {
        _classCallCheck(this, NumberWrapper);
    }

    _createClass(NumberWrapper, null, [{
        key: 'toFixed',
        value: function toFixed(n, fractionDigits) {
            return n.toFixed(fractionDigits);
        }
    }, {
        key: 'equal',
        value: function equal(a, b) {
            return a === b;
        }
    }, {
        key: 'parseIntAutoRadix',
        value: function parseIntAutoRadix(text) {
            var result = parseInt(text);
            if (isNaN(result)) {
                throw new NumberParseError('Invalid integer literal when parsing ' + text);
            }
            return result;
        }
    }, {
        key: 'parseInt',
        value: function (_parseInt) {
            function parseInt(_x4, _x5) {
                return _parseInt.apply(this, arguments);
            }

            parseInt.toString = function () {
                return _parseInt.toString();
            };

            return parseInt;
        }(function (text, radix) {
            if (radix == 10) {
                if (/^(\-|\+)?[0-9]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else if (radix == 16) {
                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else {
                var result = parseInt(text, radix);
                if (!isNaN(result)) {
                    return result;
                }
            }
            throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        })
        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.

    }, {
        key: 'parseFloat',
        value: function (_parseFloat) {
            function parseFloat(_x6) {
                return _parseFloat.apply(this, arguments);
            }

            parseFloat.toString = function () {
                return _parseFloat.toString();
            };

            return parseFloat;
        }(function (text) {
            return parseFloat(text);
        })
    }, {
        key: 'isNumeric',
        value: function isNumeric(value) {
            return !isNaN(value - parseFloat(value));
        }
    }, {
        key: 'isNaN',
        value: function (_isNaN) {
            function isNaN(_x7) {
                return _isNaN.apply(this, arguments);
            }

            isNaN.toString = function () {
                return _isNaN.toString();
            };

            return isNaN;
        }(function (value) {
            return isNaN(value);
        })
    }, {
        key: 'isInteger',
        value: function isInteger(value) {
            return Number.isInteger(value);
        }
    }, {
        key: 'NaN',
        get: function get() {
            return NaN;
        }
    }]);

    return NumberWrapper;
}();
var RegExp = _global.RegExp;
var RegExpWrapper = function () {
    function RegExpWrapper() {
        _classCallCheck(this, RegExpWrapper);
    }

    _createClass(RegExpWrapper, null, [{
        key: 'create',
        value: function create(regExpStr) {
            var flags = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

            flags = flags.replace(/g/g, '');
            return new _global.RegExp(regExpStr, flags + 'g');
        }
    }, {
        key: 'firstMatch',
        value: function firstMatch(regExp, input) {
            // Reset multimatch regex state
            regExp.lastIndex = 0;
            return regExp.exec(input);
        }
    }, {
        key: 'test',
        value: function test(regExp, input) {
            regExp.lastIndex = 0;
            return regExp.test(input);
        }
    }, {
        key: 'matcher',
        value: function matcher(regExp, input) {
            // Reset regex state for the case
            // someone did not loop over all matches
            // last time.
            regExp.lastIndex = 0;
            return { re: regExp, input: input };
        }
    }, {
        key: 'replaceAll',
        value: function replaceAll(regExp, input, replace) {
            var c = regExp.exec(input);
            var res = '';
            regExp.lastIndex = 0;
            var prev = 0;
            while (c) {
                res += input.substring(prev, c.index);
                res += replace(c);
                prev = c.index + c[0].length;
                regExp.lastIndex = prev;
                c = regExp.exec(input);
            }
            res += input.substring(prev);
            return res;
        }
    }]);

    return RegExpWrapper;
}();
var RegExpMatcherWrapper = function () {
    function RegExpMatcherWrapper() {
        _classCallCheck(this, RegExpMatcherWrapper);
    }

    _createClass(RegExpMatcherWrapper, null, [{
        key: 'next',
        value: function next(matcher) {
            return matcher.re.exec(matcher.input);
        }
    }]);

    return RegExpMatcherWrapper;
}();
var FunctionWrapper = function () {
    function FunctionWrapper() {
        _classCallCheck(this, FunctionWrapper);
    }

    _createClass(FunctionWrapper, null, [{
        key: 'apply',
        value: function apply(fn, posArgs) {
            return fn.apply(null, posArgs);
        }
    }, {
        key: 'bind',
        value: function bind(fn, scope) {
            return fn.bind(scope);
        }
    }]);

    return FunctionWrapper;
}();
// JS has NaN !== NaN
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
function getMapKey(value) {
    return value;
}
function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
}
function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
}
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');
}
function print(obj) {
    console.log(obj);
}
function warn(obj) {
    console.warn(obj);
}
// Can't be all uppercase as our transpiler would think it is a special directive...
var Json = function () {
    function Json() {
        _classCallCheck(this, Json);
    }

    _createClass(Json, null, [{
        key: 'parse',
        value: function parse(s) {
            return _global.JSON.parse(s);
        }
    }, {
        key: 'stringify',
        value: function stringify(data) {
            // Dart doesn't take 3 arguments
            return _global.JSON.stringify(data, null, 2);
        }
    }]);

    return Json;
}();
var DateWrapper = function () {
    function DateWrapper() {
        _classCallCheck(this, DateWrapper);
    }

    _createClass(DateWrapper, null, [{
        key: 'create',
        value: function create(year) {
            var month = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
            var day = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
            var hour = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];
            var minutes = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];
            var seconds = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];
            var milliseconds = arguments.length <= 6 || arguments[6] === undefined ? 0 : arguments[6];

            return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        }
    }, {
        key: 'fromISOString',
        value: function fromISOString(str) {
            return new Date(str);
        }
    }, {
        key: 'fromMillis',
        value: function fromMillis(ms) {
            return new Date(ms);
        }
    }, {
        key: 'toMillis',
        value: function toMillis(date) {
            return date.getTime();
        }
    }, {
        key: 'now',
        value: function now() {
            return new Date();
        }
    }, {
        key: 'toJson',
        value: function toJson(date) {
            return date.toJSON();
        }
    }]);

    return DateWrapper;
}();
function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
        var name = parts.shift();
        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
            obj = obj[name];
        } else {
            obj = obj[name] = {};
        }
    }
    if (obj === undefined || obj === null) {
        obj = {};
    }
    obj[parts.shift()] = value;
}
var _symbolIterator = null;
function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
        if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
            _symbolIterator = Symbol.iterator;
        } else {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + '\nreturn ' + expr + '\n//# sourceURL=' + sourceUrl;
    var fnArgNames = [];
    var fnArgValues = [];
    for (var argName in vars) {
        fnArgNames.push(argName);
        fnArgValues.push(vars[argName]);
    }
    return new (Function.prototype.bind.apply(Function, [null].concat(_toConsumableArray(fnArgNames.concat(fnBody)))))().apply(undefined, fnArgValues);
}
function isPrimitive(obj) {
    return !isJsObject(obj);
}
function hasConstructor(value, type) {
    return value.constructor === type;
}
function escape(s) {
    return _global.encodeURI(s);
}
function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
}
//# sourceMappingURL=lang.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(96)))

/***/ },
/* 41 */,
/* 42 */,
/* 43 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var util_1 = __webpack_require__(7);
var nav_params_1 = __webpack_require__(149);
/**
 * @name ViewController
 * @description
 * Access various features and information about the current view.
 * @usage
 *  ```ts
 * import { Component } from '@angular/core';
 * import { ViewController } from 'ionic-angular';
 *
 * @Component({...})
 * export class MyPage{
 *
 *   constructor(public viewCtrl: ViewController) {}
 *
 * }
 * ```
 */
var ViewController = function () {
    function ViewController(componentType, data) {
        this.componentType = componentType;
        this._tbRefs = [];
        this._hdAttr = null;
        this._leavingOpts = null;
        this._loaded = false;
        this._onDismiss = null;
        /**
         * @private
         */
        this.instance = {};
        /**
         * @private
         */
        this.state = '';
        /**
         * @private
         * If this is currently the active view, then set to false
         * if it does not want the other views to fire their own lifecycles.
         */
        this.fireOtherLifecycles = true;
        /**
         * @private
         */
        this.isOverlay = false;
        /**
         * @private
         */
        this.usePortal = false;
        this._emitter = new core_1.EventEmitter();
        // passed in data could be NavParams, but all we care about is its data object
        this.data = data instanceof nav_params_1.NavParams ? data.data : util_1.isPresent(data) ? data : {};
        this.willEnter = new core_1.EventEmitter();
        this.didEnter = new core_1.EventEmitter();
        this.willLeave = new core_1.EventEmitter();
        this.didLeave = new core_1.EventEmitter();
        this.willUnload = new core_1.EventEmitter();
        this.didUnload = new core_1.EventEmitter();
    }
    /**
     * @private
     */
    ViewController.prototype.subscribe = function (generatorOrNext) {
        return this._emitter.subscribe(generatorOrNext);
    };
    /**
     * @private
     */
    ViewController.prototype.emit = function (data) {
        this._emitter.emit(data);
    };
    /**
     * @private
     */
    ViewController.prototype.onDismiss = function (callback) {
        this._onDismiss = callback;
    };
    /**
     * @private
     */
    ViewController.prototype.dismiss = function (data, role, navOptions) {
        var _this = this;
        if (navOptions === void 0) {
            navOptions = {};
        }
        var options = util_1.merge({}, this._leavingOpts, navOptions);
        return this._nav.remove(this._nav.indexOf(this), 1, options).then(function () {
            _this._onDismiss && _this._onDismiss(data, role);
            return data;
        });
    };
    /**
     * @private
     */
    ViewController.prototype.setNav = function (navCtrl) {
        this._nav = navCtrl;
    };
    /**
     * @private
     */
    ViewController.prototype.getNav = function () {
        return this._nav;
    };
    /**
     * @private
     */
    ViewController.prototype.getTransitionName = function (direction) {
        return this._nav && this._nav.config.get('pageTransition');
    };
    /**
     * @private
     */
    ViewController.prototype.getNavParams = function () {
        return new nav_params_1.NavParams(this.data);
    };
    /**
     * @private
     */
    ViewController.prototype.setLeavingOpts = function (opts) {
        this._leavingOpts = opts;
    };
    /**
     * Check to see if you can go back in the navigation stack.
     * @param {boolean} Check whether or not you can go back from this page
     * @returns {boolean} Returns if it's possible to go back from this Page.
     */
    ViewController.prototype.enableBack = function () {
        // update if it's possible to go back from this nav item
        if (this._nav) {
            var previousItem = this._nav.getPrevious(this);
            // the previous view may exist, but if it's about to be destroyed
            // it shouldn't be able to go back to
            return !!previousItem;
        }
        return false;
    };
    /**
     * @private
     */
    ViewController.prototype.setChangeDetector = function (cd) {
        this._cd = cd;
    };
    /**
     * @private
     */
    ViewController.prototype.setInstance = function (instance) {
        this.instance = instance;
    };
    Object.defineProperty(ViewController.prototype, "name", {
        /**
         * @private
         */
        get: function get() {
            return this.componentType ? this.componentType['name'] : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewController.prototype, "index", {
        /**
         * You can find out the index of the current view is in the current navigation stack.
         *
         * ```ts
         *  export class Page1 {
         *    constructor(private view: ViewController){
         *      // Just log out the index
         *      console.log(this.view.index);
         *    }
         *  }
         * ```
         *
         * @returns {number} Returns the index of this page within its `NavController`.
         */
        get: function get() {
            return this._nav ? this._nav.indexOf(this) : -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @returns {boolean} Returns if this Page is the first in the stack of pages within its NavController.
     */
    ViewController.prototype.isFirst = function () {
        return this._nav ? this._nav.first() === this : false;
    };
    /**
     * @returns {boolean} Returns if this Page is the last in the stack of pages within its NavController.
     */
    ViewController.prototype.isLast = function () {
        return this._nav ? this._nav.last() === this : false;
    };
    /**
     * @private
     */
    ViewController.prototype.domShow = function (shouldShow, renderer) {
        // using hidden element attribute to display:none and not render views
        // renderAttr of '' means the hidden attribute will be added
        // renderAttr of null means the hidden attribute will be removed
        // doing checks to make sure we only make an update to the element when needed
        if (this._pgRef && (shouldShow && this._hdAttr === '' || !shouldShow && this._hdAttr !== '')) {
            this._hdAttr = shouldShow ? null : '';
            renderer.setElementAttribute(this._pgRef.nativeElement, 'hidden', this._hdAttr);
        }
    };
    /**
     * @private
     */
    ViewController.prototype.setZIndex = function (zIndex, renderer) {
        if (this._pgRef && zIndex !== this.zIndex) {
            this.zIndex = zIndex;
            renderer.setElementStyle(this._pgRef.nativeElement, 'z-index', zIndex.toString());
        }
    };
    /**
     * @private
     */
    ViewController.prototype.setPageRef = function (elementRef) {
        this._pgRef = elementRef;
    };
    /**
     * @private
     * @returns {elementRef} Returns the Page's ElementRef
     */
    ViewController.prototype.pageRef = function () {
        return this._pgRef;
    };
    /**
     * @private
     */
    ViewController.prototype.setContentRef = function (elementRef) {
        this._cntRef = elementRef;
    };
    /**
     * @private
     * @returns {elementRef} Returns the Page's Content ElementRef
     */
    ViewController.prototype.contentRef = function () {
        return this._cntRef;
    };
    /**
     * @private
     */
    ViewController.prototype.setContent = function (directive) {
        this._cntDir = directive;
    };
    /**
     * @private
     */
    ViewController.prototype.setToolbarRef = function (elementRef) {
        this._tbRefs.push(elementRef);
    };
    /**
     * @private
     */
    ViewController.prototype.toolbarRefs = function () {
        return this._tbRefs;
    };
    /**
     * @private
     */
    ViewController.prototype.setHeader = function (directive) {
        this._hdrDir = directive;
    };
    /**
     * @private
     */
    ViewController.prototype.getHeader = function () {
        return this._hdrDir;
    };
    /**
     * @private
     */
    ViewController.prototype.setFooter = function (directive) {
        this._ftrDir = directive;
    };
    /**
     * @private
     */
    ViewController.prototype.getFooter = function () {
        return this._ftrDir;
    };
    /**
     * @private
     * @returns {component} Returns the Page's Content component reference.
     */
    ViewController.prototype.getContent = function () {
        return this._cntDir;
    };
    /**
     * @private
     */
    ViewController.prototype.setNavbar = function (directive) {
        this._nbDir = directive;
    };
    /**
     * @private
     */
    ViewController.prototype.getNavbar = function () {
        return this._nbDir;
    };
    /**
     * You can find out of the current view has a Navbar or not. Be sure
     * to wrap this in an `ionViewWillEnter` method in order to make sure
     * the view has rendered fully.
     *
     * ```ts
     * export class Page1 {
     *  constructor(private viewCtrl: ViewController) {}
     *
     *  ionViewWillEnter(){
     *    console.log('Do we have a Navbar?', this.viewCtrl.hasNavbar());
     *  }
     *}
     * ```
     *
     * @returns {boolean} Returns a boolean if this Page has a navbar or not.
     */
    ViewController.prototype.hasNavbar = function () {
        return !!this.getNavbar();
    };
    /**
     * @private
     */
    ViewController.prototype.navbarRef = function () {
        var navbar = this.getNavbar();
        return navbar && navbar.getElementRef();
    };
    /**
     * @private
     */
    ViewController.prototype.titleRef = function () {
        var navbar = this.getNavbar();
        return navbar && navbar.getTitleRef();
    };
    /**
     * @private
     */
    ViewController.prototype.navbarItemRefs = function () {
        var navbar = this.getNavbar();
        return navbar && navbar.getItemRefs();
    };
    /**
     * @private
     */
    ViewController.prototype.backBtnRef = function () {
        var navbar = this.getNavbar();
        return navbar && navbar.getBackButtonRef();
    };
    /**
     * @private
     */
    ViewController.prototype.backBtnTextRef = function () {
        var navbar = this.getNavbar();
        return navbar && navbar.getBackButtonTextRef();
    };
    /**
     * @private
     */
    ViewController.prototype.navbarBgRef = function () {
        var navbar = this.getNavbar();
        return navbar && navbar.getBackgroundRef();
    };
    /**
     * You can change the text of the back button on a view-by-view basis.
     *
     * ```ts
     * export class MyClass{
     *  constructor(private viewCtrl: ViewController) {}
     *
     *  ionViewWillEnter() {
     *    this.viewCtrl.setBackButtonText('Previous');
     *  }
     * }
     * ```
     * Make sure you use the view events when calling this method, otherwise the back-button will not have been created
     *
     * @param {string} backButtonText Set the back button text.
     */
    ViewController.prototype.setBackButtonText = function (val) {
        var navbar = this.getNavbar();
        if (navbar) {
            navbar.setBackButtonText(val);
        }
    };
    /**
     * Set if the back button for the current view is visible or not. Be sure to wrap this in `ionViewWillEnter` to make sure the has been compleltly rendered.
     * @param {boolean} Set if this Page's back button should show or not.
     */
    ViewController.prototype.showBackButton = function (shouldShow) {
        var navbar = this.getNavbar();
        if (navbar) {
            navbar.hideBackButton = !shouldShow;
        }
    };
    /**
     * @private
     */
    ViewController.prototype.isLoaded = function () {
        return this._loaded;
    };
    /**
     * The loaded method is used to load any dynamic content/components
     * into the dom before proceeding with the transition.  If a component
     * needs dynamic component loading, extending ViewController and
     * overriding this method is a good option
     * @param {function} done is a callback that must be called when async
     * loading/actions are completed
     */
    ViewController.prototype.loaded = function (done) {
        done();
    };
    /**
     * @private
     * The view has loaded. This event only happens once per view being
     * created. If a view leaves but is cached, then this will not
     * fire again on a subsequent viewing. This method is a good place
     * to put your setup code for the view; however, it is not the
     * recommended method to use when a view becomes active.
     */
    ViewController.prototype.fireLoaded = function () {
        this._loaded = true;
        ctrlFn(this, 'Loaded');
    };
    /**
     * @private
     * The view is about to enter and become the active view.
     */
    ViewController.prototype.fireWillEnter = function () {
        if (this._cd) {
            // ensure this has been re-attached to the change detector
            this._cd.reattach();
            // detect changes before we run any user code
            this._cd.detectChanges();
        }
        this.willEnter.emit(null);
        ctrlFn(this, 'WillEnter');
    };
    /**
     * @private
     * The view has fully entered and is now the active view. This
     * will fire, whether it was the first load or loaded from the cache.
     */
    ViewController.prototype.fireDidEnter = function () {
        var navbar = this.getNavbar();
        navbar && navbar.didEnter();
        this.didEnter.emit(null);
        ctrlFn(this, 'DidEnter');
    };
    /**
     * @private
     * The view has is about to leave and no longer be the active view.
     */
    ViewController.prototype.fireWillLeave = function () {
        this.willLeave.emit(null);
        ctrlFn(this, 'WillLeave');
    };
    /**
     * @private
     * The view has finished leaving and is no longer the active view. This
     * will fire, whether it is cached or unloaded.
     */
    ViewController.prototype.fireDidLeave = function () {
        this.didLeave.emit(null);
        ctrlFn(this, 'DidLeave');
        // when this is not the active page
        // we no longer need to detect changes
        this._cd && this._cd.detach();
    };
    /**
     * @private
     * The view is about to be destroyed and have its elements removed.
     */
    ViewController.prototype.fireWillUnload = function () {
        this.willUnload.emit(null);
        ctrlFn(this, 'WillUnload');
    };
    /**
     * @private
     */
    ViewController.prototype.onDestroy = function (destroyFn) {
        this._destroyFn = destroyFn;
    };
    /**
     * @private
     */
    ViewController.prototype.destroy = function () {
        this.didUnload.emit(null);
        ctrlFn(this, 'DidUnload');
        this._destroyFn && this._destroyFn();
        this._destroyFn = null;
    };
    /** @nocollapse */
    ViewController.propDecorators = {
        '_emitter': [{ type: core_1.Output }]
    };
    return ViewController;
}();
exports.ViewController = ViewController;
function ctrlFn(viewCtrl, fnName) {
    if (viewCtrl.instance) {
        // deprecated warning: added 2016-06-01, beta.8
        if (viewCtrl.instance['onPage' + fnName]) {
            try {
                console.warn('onPage' + fnName + '() has been deprecated. Please rename to ionView' + fnName + '()');
                viewCtrl.instance['onPage' + fnName]();
            } catch (e) {
                console.error(viewCtrl.name + ' onPage' + fnName + ': ' + e.message);
            }
        }
        // fire off ionView lifecycle instance method
        if (viewCtrl.instance['ionView' + fnName]) {
            try {
                viewCtrl.instance['ionView' + fnName]();
            } catch (e) {
                console.error(viewCtrl.name + ' ionView' + fnName + ': ' + e.message);
            }
        }
    }
}

/***/ },
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var bootstrap_1 = __webpack_require__(891);
var ion_1 = __webpack_require__(58);
var util_1 = __webpack_require__(7);
var menu_controller_1 = __webpack_require__(148);
var nav_params_1 = __webpack_require__(149);
var swipe_back_1 = __webpack_require__(868);
var transition_1 = __webpack_require__(208);
var view_controller_1 = __webpack_require__(43);
/**
 * @name NavController
 * @description
 * _For examples on the basic usage of NavController, check out the
 * [Navigation section](../../../../components/#navigation) of the Component
 * docs._
 *
 * NavController is the base class for navigation controller components like
 * [`Nav`](../Nav/) and [`Tab`](../../Tabs/Tab/). You use navigation controllers
 * to navigate to [pages](#creating_pages) in your app. At a basic level, a
 * navigation controller is an array of pages representing a particular history
 * (of a Tab for example). This array can be manipulated to navigate throughout
 * an app by pushing and popping pages or inserting and removing them at
 * arbitrary locations in history.
 *
 * The current page is the last one in the array, or the top of the stack if we
 * think of it that way.  [Pushing](#push) a new page onto the top of the
 * navigation stack causes the new page to be animated in, while [popping](#pop)
 * the current page will navigate to the previous page in the stack.
 *
 * Unless you are using a directive like [NavPush](../NavPush/), or need a
 * specific NavController, most times you will inject and use a reference to the
 * nearest NavController to manipulate the navigation stack.
 *
 * ### Injecting NavController
 * Injecting NavController will always get you an instance of the nearest
 * NavController, regardless of whether it is a Tab or a Nav.
 *
 * Behind the scenes, when Ionic instantiates a new NavController, it creates an
 * injector with NavController bound to that instance (usually either a Nav or
 * Tab) and adds the injector to its own providers.  For more information on
 * providers and dependency injection, see [Providers and DI]().
 *
 * Instead, you can inject NavController and know that it is the correct
 * navigation controller for most situations (for more advanced situations, see
 * [Menu](../../Menu/Menu/) and [Tab](../../Tab/Tab/)).
 *
 * ```ts
 *  class MyComponent {
 *    constructor(nav: NavController) {
 *      this.nav = nav;
 *    }
 *  }
 * ```
 *
 *
 * ## Page creation
 * Pages are created when they are added to the navigation stack.  For methods
 * like [push()](#push), the NavController takes any component class that is
 * decorated with `@Component` as its first argument.  The NavController then
 * compiles that component, adds it to the app and animates it into view.
 *
 * By default, pages are cached and left in the DOM if they are navigated away
 * from but still in the navigation stack (the exiting page on a `push()` for
 * example).  They are destroyed when removed from the navigation stack (on
 * [pop()](#pop) or [setRoot()](#setRoot)).
 *
 *
 * ## Lifecycle events
 * Lifecycle events are fired during various stages of navigation.  They can be
 * defined in any component type which is pushed/popped from a `NavController`.
 *
 * ```ts
 * import {Component } from '@angular/core';
 *
 * @Component({
 *   template: 'Hello World'
 * })
 * class HelloWorld {
 *   ionViewLoaded() {
 *     console.log("I'm alive!");
 *   }
 *   ionViewWillLeave() {
 *     console.log("Looks like I'm about to leave :(");
 *   }
 * }
 * ```
 *
 *  | Page Event         | Description                                                                                                                                                                                                                                                                       |
 *  |--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 *  | `ionViewLoaded`     | Runs when the page has loaded. This event only happens once per page being created and added to the DOM. If a page leaves but is cached, then this event will not fire again on a subsequent viewing. The `ionViewLoaded` event is good place to put your setup code for the page. |
 *  | `ionViewWillEnter`  | Runs when the page is about to enter and become the active page.                                                                                                                                                                                                                  |
 *  | `ionViewDidEnter`   | Runs when the page has fully entered and is now the active page. This event will fire, whether it was the first load or a cached page.                                                                                                                                            |
 *  | `ionViewWillLeave`  | Runs when the page is about to leave and no longer be the active page.                                                                                                                                                                                                            |
 *  | `ionViewDidLeave`   | Runs when the page has finished leaving and is no longer the active page.                                                                                                                                                                                                         |
 *  | `ionViewWillUnload` | Runs when the page is about to be destroyed and have its elements removed.                                                                                                                                                                                                        |
 *  | `ionViewDidUnload`  | Runs after the page has been destroyed and its elements have been removed.
 *
 *
 * ## Nav Transition Promises
 *
 * Navigation transitions are asynchronous, meaning they take a few moments to finish, and
 * the duration of a transition could be any number. In most cases the async nature of a
 * transition doesn't cause any problems and the nav controller is pretty good about handling
 * which transition was the most recent when multiple transitions have been kicked off.
 * However, when an app begins firing off many transitions, on the same stack at
 * *roughly* the same time, the nav controller can start to get lost as to which transition
 * should be finishing, and which transitions should not be animated.
 *
 * In cases where an app's navigation can be altered by other async tasks, which may or
 * may not take a long time, it's best to rely on each nav transition's returned
 * promise. So instead of firing and forgetting multiple `push` or `pop` nav transitions,
 * it's better to fire the next nav transition when the previous one has finished.
 *
 * In the example below, after the async operation has completed, we then want to transition
 * to another page. Where the potential problem comes in, is that if the async operation
 * completed 100ms after the first transition started, then kicking off another transition
 * halfway through the first transition ends up with a janky animation. Instead, it's best
 * to always ensure the first transition has already finished before starting the next.
 *
 * ```ts
 * // begin the first transition
 * let navTransition = this.nav.push(SomePage);
 *
 * // start an async call, we're not sure how long it'll take
 * someAsyncOperation().then(() => {
 *   // incase the async operation completed faster than the time
 *   // it took to finish the first transition, this logic should
 *   // always ensure that the previous transition has resolved
 *   // first before kicking off the next transition
 *   navTransition.then(() => {
 *     this.nav.push(AnotherPage);
 *   });
 * });
 * ```
 *
 * ## NavOptions
 *
 * Some methods on `NavController` allow for customizing the current transition.
 * To do this, we can pass an object with the modified properites.
 *
 * | Property  | Value     | Description                                                                                                |
 * |-----------|-----------|------------------------------------------------------------------------------------------------------------|
 * | animate   | `boolean` | Whether or not the transition should animate.                                                              |
 * | animation | `string`  | What kind of animation should be used.                                                                     |
 * | direction | `string`  | The conceptual direction the user is navigating. For example, is the user navigating `forward`, or `back`? |
 * | duration  | `number`  | The length in milliseconds the animation should take.                                                      |
 * | easing    | `string`  | The easing for the animation.                                                                              |
 *
 * The property 'animation' understands the following values: `md-transition`, `ios-transition` and `wp-transition`.
 *
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 */
var NavController = function (_super) {
    __extends(NavController, _super);
    function NavController(parent, _app, config, _keyboard, elementRef, _zone, _renderer, _compiler) {
        _super.call(this, elementRef);
        this._app = _app;
        this._keyboard = _keyboard;
        this._zone = _zone;
        this._renderer = _renderer;
        this._compiler = _compiler;
        this._transIds = 0;
        this._init = false;
        this._children = [];
        this._ids = -1;
        this._views = [];
        /**
         * @private
         */
        this.routers = [];
        /**
         * @private
         */
        this.isPortal = false;
        /**
         * @private
         */
        this._trnsTime = 0;
        this.parent = parent;
        this.config = config;
        this._trnsDelay = config.get('pageTransitionDelay');
        this._sbEnabled = config.getBoolean('swipeBackEnabled');
        this._sbThreshold = config.getNumber('swipeBackThreshold', 40);
        this.id = (++ctrlIds).toString();
        this.viewDidLoad = new core_1.EventEmitter();
        this.viewWillEnter = new core_1.EventEmitter();
        this.viewDidEnter = new core_1.EventEmitter();
        this.viewWillLeave = new core_1.EventEmitter();
        this.viewDidLeave = new core_1.EventEmitter();
        this.viewWillUnload = new core_1.EventEmitter();
        this.viewDidUnload = new core_1.EventEmitter();
    }
    /**
     * @private
     */
    NavController.prototype.getPortal = function () {
        return this._portal;
    };
    /**
     * @private
     */
    NavController.prototype.setPortal = function (val) {
        this._portal = val;
    };
    /**
     * @private
     */
    NavController.prototype.setViewport = function (val) {
        this._viewport = val;
    };
    /**
     * Set the root for the current navigation stack.
     * @param {Page} page  The name of the component you want to push on the navigation stack.
     * @param {object} [params={}] Any nav-params you want to pass along to the next view.
     * @param {object} [opts={}] Any options you want to use pass to transtion.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.setRoot = function (page, params, opts) {
        return this.setPages([{ page: page, params: params }], opts);
    };
    /**
     * You can set the views of the current navigation stack and navigate to the
     * last view.
     *
     *
     *```ts
     * import {NavController } from 'ionic-angular'
     * import {Detail } from '../detail/detail'
     * import {Info } from '../info/info'
     *
     *  export class Home {
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *    setPages() {
     *      this.nav.setPages([ {page: List}, {page: Detail}, {page:Info} ]);
     *    }
     *  }
     *```
     *
     *
     * In this example, we're giving the current nav stack an array of pages.
     * Then the navigation stack will navigate to the last page in the array
     * and remove the previously active page.
     *
     * By default animations are disabled, but they can be enabled by passing
     * options to the navigation controller.
     *
     *
     * ```ts
     * import {NavController } from 'ionic-angular'
     * import {Detail } from '../detail/detail'
     *
     *  export class Home {
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *    setPages() {
     *      this.nav.setPages([ {page: List}, {page: Detail} ], {
     *        animate: true
     *      });
     *    }
     *  }
     * ```
     *
     * You can also pass any navigation params to the individual pages in
     * the array.
     *
     *
     * ```ts
     * import {NavController } from 'ionic-angular';
     * import {Info } from '../info/info';
     * import {List } from '../list/list';
     * import {Detail } from '../detail/detail';
     *
     *  export class Home {
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *    setPages() {
     *      this.nav.setPages([{
     *        page: Info
     *      }, {
     *        page: List,
     *        params: {tags: 'css'}
     *      }, {
     *        page: Detail,
     *        params: {id: 325}
     *      }]);
     *    }
     *  }
     *```
     *
     * @param {array<Page>} pages  An arry of page components and their params to load in the stack.
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.setPages = function (pages, opts) {
        if (!pages || !pages.length) {
            return Promise.resolve(false);
        }
        if (util_1.isBlank(opts)) {
            opts = {};
        }
        // remove existing views
        var leavingView = this._remove(0, this._views.length);
        // create view controllers out of the pages and insert the new views
        var views = pages.map(function (p) {
            return new view_controller_1.ViewController(p.page, p.params);
        });
        var enteringView = this._insert(0, views);
        // if animation wasn't set to true then default it to NOT animate
        if (opts.animate !== true) {
            opts.animate = false;
        }
        // set the nav direction to "back" if it wasn't set
        opts.direction = opts.direction || 'back';
        var resolve;
        var promise = new Promise(function (res) {
            resolve = res;
        });
        // start the transition, fire resolve when done...
        this._transition(enteringView, leavingView, opts, function (hasCompleted) {
            // transition has completed!!
            resolve(hasCompleted);
        });
        return promise;
    };
    /**
     * Push is how we can pass components and navigate to them. We push the component
     * we want to navigate to on to the navigation stack.
     *
     * ```ts
     * class MyClass{
     *    constructor(nav:NavController){
     *      this.nav = nav;
     *    }
     *
     *    pushPage(){
     *      this.nav.push(SecondView);
     *    }
     * }
     * ```
     *
     * We can also pass along parameters to the next view, such as data that we have
     * on the current view. This is a similar concept to to V1 apps with `$stateParams`.
     *
     * ```ts
     * class MyClass{
     *    constructor(nav:NavController){
     *      this.nav = nav;
     *    }
     *
     *    pushPage(user){
     *       // user is an object we have in our view
     *       // typically this comes from an ngFor or some array
     *       // here we can create an object with a property of
     *       // paramUser, and set its value to the user object we passed in
     *      this.nav.push(SecondView, { paramUser: user });
     *    }
     * }
     * ```
     *
     * We'll look at how we can access that data in the `SecondView` in the
     * navParam docs.
     *
     * We can also pass any options to the transtion from that same method.
     *
     * ```ts
     * class MyClass{
     *    constructor(nav: NavController){
     *      this.nav = nav;
     *    }
     *
     *    pushPage(user){
     *      this.nav.push(SecondView,{
     *       // user is an object we have in our view
     *       // typically this comes from an ngFor or some array
     *       // here we can create an object with a property of
     *       // paramUser, and set it's value to the user object we passed in
     *       paramUser: user
     *      },{
     *       // here we can configure things like the animations direction or
     *       // or if the view should animate at all.
     *       direction: 'back'
     *      });
     *    }
     * }
     * ```
     * @param {Page} page  The page component class you want to push on to the navigation stack
     * @param {object} [params={}] Any nav-params you want to pass along to the next view
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.push = function (page, params, opts) {
        return this.insertPages(-1, [{ page: page, params: params }], opts);
    };
    /**
     * Present is how an app display overlays on top of the content, from within the
     * root level `NavController`. The `present` method is used by overlays, such
     * as `ActionSheet`, `Alert`, and `Modal`. The main difference between `push`
     * and `present` is that `present` takes a `ViewController` instance, whereas
     * `push` takes a component class which hasn't been instantiated yet.
     * Additionally, `present` will place the overlay in the root NavController's
     * stack.
     *
     * ```ts
     * class MyClass{
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *
     *    presentModal() {
     *      let modal = Modal.create(ProfilePage);
     *      this.nav.present(modal);
     *    }
     * }
     * ```
     *
     * @param {ViewController} enteringView The component you want to push on the navigation stack.
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.present = function (enteringView, opts) {
        var rootNav = this.rootNav;
        if (rootNav['_tabs']) {
            // TODO: must have until this goes in
            // https://github.com/angular/angular/issues/5481
            console.error('A parent <ion-nav> is required for ActionSheet/Alert/Modal/Loading');
            return;
        }
        if (util_1.isBlank(opts)) {
            opts = {};
        }
        if (enteringView.usePortal && rootNav._portal) {
            return rootNav._portal.present(enteringView, opts);
        }
        enteringView.setNav(rootNav);
        opts.keyboardClose = false;
        opts.direction = 'forward';
        if (!opts.animation) {
            opts.animation = enteringView.getTransitionName('forward');
        }
        enteringView.setLeavingOpts({
            keyboardClose: false,
            direction: 'back',
            animation: enteringView.getTransitionName('back'),
            ev: opts.ev
        });
        // present() always uses the root nav
        // start the transition
        return rootNav._insertViews(-1, [enteringView], opts);
    };
    /**
     * Inserts a view into the nav stack at the specified index. This is useful if
     * you need to add a view at any point in your navigation stack.
     *
     * ```ts
     * export class Detail {
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *    insertPage(){
     *      this.nav.insert(1, Info);
     *    }
     *  }
     * ```
     *
     * This will insert the `Info` page into the second slot of our navigation stack.
     *
     * @param {number} insertIndex  The index where to insert the page.
     * @param {Page} page  The component you want to insert into the nav stack.
     * @param {object} [params={}] Any nav-params you want to pass along to the next page.
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.insert = function (insertIndex, page, params, opts) {
        return this.insertPages(insertIndex, [{ page: page, params: params }], opts);
    };
    /**
     * Inserts multiple pages into the nav stack at the specified index.
     *
     * ```ts
     * export class Detail {
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *    insertPages(){
     *      let pages = [
     *        { page: Info },
     *        { page: ProfileList },
     *        { page: ProfileDetail, params: {userId:5} }
     *      ];
     *      this.nav.insertPages(2, pages);
     *    }
     *  }
     * ```
     *
     * This will insert each of the pages in the array, starting at the third slot
     * (second index) of the nav stack. The last page in the array will animate
     * in and become the active page.
     *
     * @param {number} insertIndex  The index where you want to insert the page.
     * @param {array<{page: Page, params=: any}>} insertPages  An array of objects, each with a `page` and optionally `params` property.
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.insertPages = function (insertIndex, insertPages, opts) {
        var views = insertPages.map(function (p) {
            return new view_controller_1.ViewController(p.page, p.params);
        });
        return this._insertViews(insertIndex, views, opts);
    };
    NavController.prototype._insertViews = function (insertIndex, insertViews, opts) {
        if (!insertViews || !insertViews.length) {
            return Promise.reject('invalid pages');
        }
        if (util_1.isBlank(opts)) {
            opts = {};
        }
        // insert the new page into the stack
        // returns the newly created entering view
        var enteringView = this._insert(insertIndex, insertViews);
        // set the nav direction to "forward" if it wasn't set
        opts.direction = opts.direction || 'forward';
        // set which animation it should use if it wasn't set yet
        if (!opts.animation) {
            opts.animation = enteringView.getTransitionName(opts.direction);
        }
        var resolve;
        var promise = new Promise(function (res) {
            resolve = res;
        });
        // it's possible that the newly added view doesn't need to
        // transition in, but was simply inserted somewhere in the stack
        // go backwards through the stack and find the first active view
        // which could be active or one ready to enter
        for (var i = this._views.length - 1; i >= 0; i--) {
            if (this._views[i].state === STATE_ACTIVE || this._views[i].state === STATE_INIT_ENTER) {
                // found the view at the end of the stack that's either
                // already active or it is about to enter
                if (this._views[i] === enteringView) {
                    // cool, so the last valid view is also our entering view!!
                    // this means we should animate that bad boy in so it's the active view
                    // return a promise and resolve when the transition has completed
                    // get the leaving view which the _insert() already set
                    var leavingView = this.getByState(STATE_INIT_LEAVE);
                    // start the transition, fire resolve when done...
                    this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                        // transition has completed!!
                        resolve(hasCompleted);
                    });
                    return promise;
                }
                break;
            }
        }
        // the page was not pushed onto the end of the stack
        // but rather inserted somewhere in the middle or beginning
        // Since there are views after this new one, don't transition in
        // auto resolve cuz there was is no need for an animation
        return Promise.resolve(enteringView);
    };
    /**
     * @private
     */
    NavController.prototype._insert = function (insertIndex, insertViews) {
        // when this is done, there should only be at most
        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
        // there should not be any that are STATE_ACTIVE after this is done
        var _this = this;
        // allow -1 to be passed in to auto push it on the end
        // and clean up the index if it's larger then the size of the stack
        if (insertIndex < 0 || insertIndex > this._views.length) {
            insertIndex = this._views.length;
        }
        // first see if there's an active view
        var view = this.getActive();
        if (view) {
            // there's an active view, set that it's initialized to leave
            view.state = STATE_INIT_LEAVE;
        } else if (view = this.getByState(STATE_INIT_ENTER)) {
            // oh no, there's already a transition initalized ready to enter!
            // but it actually hasn't entered yet at all so lets
            // just keep it in the array, but not render or animate it in
            view.state = STATE_INACTIVE;
        }
        // insert each of the views in the pages array
        var insertView = null;
        insertViews.forEach(function (view, i) {
            insertView = view;
            // create the new entering view
            view.setNav(_this);
            view.state = STATE_INACTIVE;
            // give this inserted view an ID
            _this._incId(view);
            // insert the entering view into the correct index in the stack
            _this._views.splice(insertIndex + i, 0, view);
        });
        if (insertView) {
            insertView.state = STATE_INIT_ENTER;
        }
        return insertView;
    };
    /**
     * If you wanted to navigate back from a current view, you can use the
     * back-button or programatically call `pop()`. Similar to `push()`, you
     * can also pass navigation options.
     *
     * ```ts
     * class SecondView{
     *    constructor(nav:NavController){
     *      this.nav = nav;
     *    }
     *    goBack(){
     *      this.nav.pop();
     *    }
     * }
     * ```
     *
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.pop = function (opts) {
        // get the index of the active view
        // which will become the view to be leaving
        var activeView = this.getByState(STATE_TRANS_ENTER) || this.getByState(STATE_INIT_ENTER) || this.getActive();
        if (util_1.isBlank(opts)) {
            opts = {};
        }
        // if not set, by default climb up the nav controllers if
        // there isn't a previous view in this nav controller
        if (util_1.isBlank(opts.climbNav)) {
            opts.climbNav = true;
        }
        return this.remove(this.indexOf(activeView), 1, opts);
    };
    /**
     * Similar to `pop()`, this method let's you navigate back to the root of
     * the stack, no matter how many pages back that is.
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.popToRoot = function (opts) {
        return this.popTo(this.first(), opts);
    };
    /**
     * Pop to a specific view in the history stack.
     * @param {ViewController} view  to pop to
     * @param {object} [opts={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.popTo = function (view, opts) {
        var startIndex = this.indexOf(view);
        if (startIndex < 0) {
            return Promise.reject('View not found to pop to');
        }
        var activeView = this.getByState(STATE_TRANS_ENTER) || this.getByState(STATE_INIT_ENTER) || this.getActive();
        var removeCount = this.indexOf(activeView) - startIndex;
        return this.remove(startIndex + 1, removeCount, opts);
    };
    /**
     * Removes a page from the nav stack at the specified index.
     *
     * ```ts
     * export class Detail {
     *    constructor(nav: NavController) {
     *      this.nav = nav;
     *    }
     *    removePage(){
     *      this.nav.remove(1);
     *    }
     *  }
     * ```
     *
     * @param {number} [startIndex]  The starting index to remove pages from the stack. Default is the index of the last page.
     * @param {number} [removeCount]  The number of pages to remove, defaults to remove `1`.
     * @param {object} [opts={}] Any options you want to use pass to transtion.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    NavController.prototype.remove = function (startIndex, removeCount, opts) {
        var _this = this;
        if (startIndex === void 0) {
            startIndex = -1;
        }
        if (removeCount === void 0) {
            removeCount = 1;
        }
        if (startIndex === -1) {
            startIndex = this._views.length - 1;
        } else if (startIndex < 0 || startIndex >= this._views.length) {
            return Promise.reject('remove index out of range');
        }
        if (util_1.isBlank(opts)) {
            opts = {};
        }
        // default the direction to "back"
        opts.direction = opts.direction || 'back';
        // figure out the states of each view in the stack
        var leavingView = this._remove(startIndex, removeCount);
        if (!leavingView) {
            var forcedActive = this.getByState(STATE_FORCE_ACTIVE);
            if (forcedActive) {
                // this scenario happens when a remove is going on
                // during a transition
                if (this._trans) {
                    this._trans.stop();
                    this._trans.destroy();
                    this._trans = null;
                    this._cleanup();
                }
                return Promise.resolve(false);
            }
        }
        if (leavingView) {
            // there is a view ready to leave, meaning that a transition needs
            // to happen and the previously active view is going to animate out
            // get the view thats ready to enter
            var enteringView = this.getByState(STATE_INIT_ENTER);
            if (!enteringView && !this.isPortal) {
                // oh nos! no entering view to go to!
                // if there is no previous view that would enter in this nav stack
                // and the option is set to climb up the nav parent looking
                // for the next nav we could transition to instead
                if (opts.climbNav) {
                    var parentNav = this.parent;
                    while (parentNav) {
                        if (!parentNav['_tabs']) {
                            // Tabs can be a parent, but it is not a collection of views
                            // only we're looking for an actual NavController w/ stack of views
                            leavingView.fireWillLeave();
                            this.viewWillLeave.emit(leavingView);
                            return parentNav.pop(opts).then(function (rtnVal) {
                                leavingView.fireDidLeave();
                                _this.viewDidLeave.emit(leavingView);
                                return rtnVal;
                            });
                        }
                        parentNav = parentNav.parent;
                    }
                }
                // there's no previous view and there's no valid parent nav
                // to climb to so this shouldn't actually remove the leaving
                // view because there's nothing that would enter, eww
                leavingView.state = STATE_ACTIVE;
                return Promise.resolve(false);
            }
            var resolve_1;
            var promise = new Promise(function (res) {
                resolve_1 = res;
            });
            if (!opts.animation) {
                opts.animation = leavingView.getTransitionName(opts.direction);
            }
            // start the transition, fire resolve when done...
            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                // transition has completed!!
                resolve_1(hasCompleted);
            });
            return promise;
        }
        // no need to transition when the active view isn't being removed
        // there's still an active view after _remove() figured out states
        // so this means views that were only removed before the active
        // view, so auto-resolve since no transition needs to happen
        return Promise.resolve(false);
    };
    /**
     * @private
     */
    NavController.prototype._remove = function (startIndex, removeCount) {
        var _this = this;
        // when this is done, there should only be at most
        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
        // there should not be any that are STATE_ACTIVE after this is done
        var view = null;
        // loop through each view that is set to be removed
        for (var i = startIndex, ii = removeCount + startIndex; i < ii; i++) {
            view = this.getByIndex(i);
            if (!view) break;
            if (view.state === STATE_TRANS_ENTER || view.state === STATE_TRANS_LEAVE) {
                // oh no!!! this view should be removed, but it's
                // actively transitioning in at the moment!!
                // since it's viewable right now, let's just set that
                // it should be removed after the transition
                view.state = STATE_REMOVE_AFTER_TRANS;
            } else {
                // if this view is already leaving then no need to immediately
                // remove it, otherwise set the remove state
                // this is useful if the view being removed isn't going to
                // animate out, but just removed from the stack, no transition
                view.state = STATE_REMOVE;
            }
        }
        if (view = this.getByState(STATE_INIT_LEAVE)) {
            // looks like there's already an active leaving view
            // reassign previous entering view to just be inactive
            var enteringView = this.getByState(STATE_INIT_ENTER);
            if (enteringView) {
                enteringView.state = STATE_INACTIVE;
            }
            // from the index of the leaving view, go backwards and
            // find the first view that is inactive
            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
                if (this._views[i].state === STATE_INACTIVE) {
                    this._views[i].state = STATE_INIT_ENTER;
                    break;
                }
            }
        } else if (view = this.getByState(STATE_TRANS_LEAVE)) {
            // an active transition is happening, but a new transition
            // still needs to happen force this view to be the active one
            view.state = STATE_FORCE_ACTIVE;
        } else if (view = this.getByState(STATE_REMOVE)) {
            // there is no active transition about to happen
            // find the first view that is supposed to be removed and
            // set that it is the init leaving view
            // the first view to be removed, it should init leave
            view.state = STATE_INIT_LEAVE;
            view.fireWillUnload();
            this.viewWillUnload.emit(view);
            // from the index of the leaving view, go backwards and
            // find the first view that is inactive so it can be the entering
            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
                if (this._views[i].state === STATE_INACTIVE) {
                    this._views[i].state = STATE_INIT_ENTER;
                    break;
                }
            }
        }
        // if there is still an active view, then it wasn't one that was
        // set to be removed, so there actually won't be a transition at all
        view = this.getActive();
        if (view) {
            // the active view remains untouched, so all the removes
            // must have happened before it, so really no need for transition
            view = this.getByState(STATE_INIT_ENTER);
            if (view) {
                // if it was going to enter, then just make inactive
                view.state = STATE_INACTIVE;
            }
            view = this.getByState(STATE_INIT_LEAVE);
            if (view) {
                // this was going to leave, so just remove it completely
                view.state = STATE_REMOVE;
            }
        }
        // remove views that have been set to be removed, but not
        // apart of any transitions that will eventually happen
        this._views.filter(function (v) {
            return v.state === STATE_REMOVE;
        }).forEach(function (view) {
            view.fireWillLeave();
            _this.viewWillLeave.emit(view);
            view.fireDidLeave();
            _this.viewDidLeave.emit(view);
            _this._views.splice(_this.indexOf(view), 1);
            view.destroy();
        });
        return this.getByState(STATE_INIT_LEAVE);
    };
    /**
     * @private
     */
    NavController.prototype._transition = function (enteringView, leavingView, opts, done) {
        var _this = this;
        var transId = ++this._transIds;
        if (enteringView === leavingView) {
            // if the entering view and leaving view are the same thing don't continue
            this._transFinish(transId, enteringView, leavingView, null, false);
            return done(false);
        }
        if (util_1.isBlank(opts)) {
            opts = {};
        }
        this._setAnimate(opts);
        if (!leavingView) {
            // if no leaving view then create a bogus one
            leavingView = new view_controller_1.ViewController();
        }
        if (!enteringView) {
            // if no entering view then create a bogus one
            enteringView = new view_controller_1.ViewController();
            enteringView.fireLoaded();
            this.viewDidLoad.emit(enteringView);
        }
        /* Async steps to complete a transition
          1. _render: compile the view and render it in the DOM. Load page if it hasn't loaded already. When done call postRender
          2. _postRender: Run willEnter/willLeave, then wait a frame (change detection happens), then call beginTransition
          3. _beforeTrans: Create the transition's animation, play the animation, wait for it to end
          4. _afterTrans: Run didEnter/didLeave, call _transComplete()
          5. _transComplete: Cleanup, remove cache views, then call the final callback
        */
        // begin the multiple async process of transitioning to the entering view
        this._render(transId, enteringView, leavingView, opts, function (hasCompleted) {
            _this._transFinish(transId, enteringView, leavingView, opts.direction, hasCompleted);
            done(hasCompleted);
        });
    };
    /**
     * @private
     */
    NavController.prototype._setAnimate = function (opts) {
        if (this._views.length === 1 && !this._init && !this.isPortal || this.config.get('animate') === false) {
            opts.animate = false;
        }
    };
    /**
     * @private
     */
    NavController.prototype._render = function (transId, enteringView, leavingView, opts, done) {
        // compile/load the view into the DOM
        var _this = this;
        if (enteringView.state === STATE_INACTIVE) {
            // this entering view is already set to inactive, so this
            // transition must be canceled, so don't continue
            return done();
        }
        enteringView.state = STATE_INIT_ENTER;
        leavingView.state = STATE_INIT_LEAVE;
        // remember if this nav is already transitioning or not
        var isAlreadyTransitioning = this.isTransitioning();
        if (enteringView.isLoaded()) {
            // already compiled this view, do not load again and continue
            this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
        } else {
            // view has not been compiled/loaded yet
            // continue once the view has finished compiling
            // DOM WRITE
            this.setTransitioning(true, 500);
            this.loadPage(enteringView, this._viewport, opts, function () {
                enteringView.fireLoaded();
                _this.viewDidLoad.emit(enteringView);
                _this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
            });
        }
    };
    /**
     * @private
     */
    NavController.prototype._postRender = function (transId, enteringView, leavingView, isAlreadyTransitioning, opts, done) {
        // called after _render has completed and the view is compiled/loaded
        if (enteringView.state === STATE_INACTIVE) {
            // this entering view is already set to inactive, so this
            // transition must be canceled, so don't continue
            return done();
        }
        if (!opts.preload) {
            // the enteringView will become the active view, and is not being preloaded
            // set the correct zIndex for the entering and leaving views
            // if there's already another trans_enter happening then
            // the zIndex for the entering view should go off of that one
            // DOM WRITE
            var lastestLeavingView = this.getByState(STATE_TRANS_ENTER) || leavingView;
            this._setZIndex(enteringView, lastestLeavingView, opts.direction);
            // make sure the entering and leaving views are showing
            // DOM WRITE
            if (isAlreadyTransitioning) {
                // the previous transition was still going when this one started
                // so to be safe, only update showing the entering/leaving
                // don't hide the others when they could still be transitioning
                enteringView.domShow(true, this._renderer);
                leavingView.domShow(true, this._renderer);
            } else {
                // there are no other transitions happening but this one
                // only entering/leaving should show, all others hidden
                // also if a view is an overlay or the previous view is an
                // overlay then always show the overlay and the view before it
                var view;
                var shouldShow;
                for (var i = 0, ii = this._views.length; i < ii; i++) {
                    view = this._views[i];
                    shouldShow = view === enteringView || view === leavingView || view.isOverlay || (i < ii - 1 ? this._views[i + 1].isOverlay : false);
                    view.domShow(shouldShow, this._renderer);
                }
            }
            // call each view's lifecycle events
            if (leavingView.fireOtherLifecycles) {
                // only fire entering lifecycle if the leaving
                // view hasn't explicitly set not to
                enteringView.fireWillEnter();
                this.viewWillEnter.emit(enteringView);
            }
            if (enteringView.fireOtherLifecycles) {
                // only fire leaving lifecycle if the entering
                // view hasn't explicitly set not to
                leavingView.fireWillLeave();
                this.viewWillLeave.emit(leavingView);
            }
        } else {
            // this view is being preloaded, don't call lifecycle events
            // transition does not need to animate
            opts.animate = false;
        }
        this._beforeTrans(enteringView, leavingView, opts, done);
    };
    /**
     * @private
     */
    NavController.prototype._beforeTrans = function (enteringView, leavingView, opts, done) {
        // called after one raf from postRender()
        // create the transitions animation, play the animation
        // when the transition ends call wait for it to end
        var _this = this;
        if (enteringView.state === STATE_INACTIVE) {
            // this entering view is already set to inactive, so this
            // transition must be canceled, so don't continue
            return done();
        }
        enteringView.state = STATE_TRANS_ENTER;
        leavingView.state = STATE_TRANS_LEAVE;
        // everything during the transition should runOutsideAngular
        this._zone.runOutsideAngular(function () {
            // init the transition animation
            var transitionOpts = {
                animation: opts.animation,
                direction: opts.direction,
                duration: opts.duration,
                easing: opts.easing,
                renderDelay: opts.transitionDelay || _this._trnsDelay,
                isRTL: _this.config.platform.isRTL(),
                ev: opts.ev
            };
            var transAnimation = _this._createTrans(enteringView, leavingView, transitionOpts);
            _this._trans && _this._trans.destroy();
            _this._trans = transAnimation;
            if (opts.animate === false) {
                // force it to not animate the elements, just apply the "to" styles
                transAnimation.duration(0);
            }
            // check if a parent is transitioning and get the time that it ends
            var parentTransitionEndTime = _this._getLongestTrans(Date.now());
            if (parentTransitionEndTime > 0) {
                // the parent is already transitioning and has disabled the app
                // so just update the local transitioning information
                var duration = parentTransitionEndTime - Date.now();
                _this.setTransitioning(true, duration);
            } else {
                // this is the only active transition (for now), so disable the app
                var keyboardDurationPadding = 0;
                if (_this._keyboard.isOpen()) {
                    // add XXms to the duration the app is disabled when the keyboard is open
                    keyboardDurationPadding = 600;
                }
                var duration = transAnimation.getDuration() + keyboardDurationPadding;
                var enableApp = duration < 64;
                _this._app.setEnabled(enableApp, duration);
                _this.setTransitioning(!enableApp, duration);
            }
            // create a callback for when the animation is done
            transAnimation.onFinish(function (trans) {
                // transition animation has ended
                // destroy the animation and it's element references
                trans.destroy();
                _this._afterTrans(enteringView, leavingView, opts, trans.hasCompleted, done);
            });
            // cool, let's do this, start the transition
            if (opts.progressAnimation) {
                // this is a swipe to go back, just get the transition progress ready
                // kick off the swipe animation start
                transAnimation.progressStart();
            } else {
                // this is a normal animation
                // kick it off and let it play through
                transAnimation.play();
            }
        });
    };
    /**
     * @private
     */
    NavController.prototype._afterTrans = function (enteringView, leavingView, opts, hasCompleted, done) {
        // transition has completed, update each view's state
        // place back into the zone, run didEnter/didLeave
        // call the final callback when done
        var _this = this;
        // run inside of the zone again
        this._zone.run(function () {
            if (!opts.preload && hasCompleted) {
                if (leavingView.fireOtherLifecycles) {
                    // only fire entering lifecycle if the leaving
                    // view hasn't explicitly set not to
                    enteringView.fireDidEnter();
                    _this.viewDidEnter.emit(enteringView);
                }
                if (enteringView.fireOtherLifecycles) {
                    // only fire leaving lifecycle if the entering
                    // view hasn't explicitly set not to
                    leavingView.fireDidLeave();
                    _this.viewDidLeave.emit(leavingView);
                }
            }
            if (enteringView.state === STATE_INACTIVE) {
                // this entering view is already set to inactive, so this
                // transition must be canceled, so don't continue
                return done(hasCompleted);
            }
            if (opts.keyboardClose !== false && _this._keyboard.isOpen()) {
                // the keyboard is still open!
                // no problem, let's just close for them
                _this._keyboard.close();
                _this._keyboard.onClose(function () {
                    // keyboard has finished closing, transition complete
                    done(hasCompleted);
                }, 32);
            } else {
                // all good, transition complete
                done(hasCompleted);
            }
        });
    };
    /**
     * @private
     */
    NavController.prototype._transFinish = function (transId, enteringView, leavingView, direction, hasCompleted) {
        // a transition has completed, but not sure if it's the last one or not
        // check if this transition is the most recent one or not
        var _this = this;
        if (transId === this._transIds) {
            // ok, good news, there were no other transitions that kicked
            // off during the time this transition started and ended
            if (hasCompleted) {
                // this transition has completed as normal
                // so the entering one is now the active view
                // and the leaving view is now just inactive
                if (enteringView.state !== STATE_REMOVE_AFTER_TRANS) {
                    enteringView.state = STATE_ACTIVE;
                }
                if (leavingView.state !== STATE_REMOVE_AFTER_TRANS) {
                    leavingView.state = STATE_INACTIVE;
                }
                // only need to do all this clean up if the transition
                // completed, otherwise nothing actually changed
                // destroy all of the views that come after the active view
                this._cleanup();
                // make sure only this entering view and PREVIOUS view are the
                // only two views that are not display:none
                // do not make any changes to the stack's current visibility
                // if there is an overlay somewhere in the stack
                leavingView = this.getPrevious(enteringView);
                if (this.hasOverlay()) {
                    // ensure the entering view is showing
                    enteringView.domShow(true, this._renderer);
                } else {
                    // only possibly hide a view if there are no overlays in the stack
                    this._views.forEach(function (view) {
                        var shouldShow = view === enteringView || view === leavingView;
                        view.domShow(shouldShow, _this._renderer);
                    });
                }
                // this check only needs to happen once, which will add the css
                // class to the nav when it's finished its first transition
                if (!this._init) {
                    this._init = true;
                }
            } else {
                // this transition has not completed, meaning the
                // entering view did not end up as the active view
                // this would happen when swipe to go back started
                // but the user did not complete the swipe and the
                // what was the active view stayed as the active view
                leavingView.state = STATE_ACTIVE;
                enteringView.state = STATE_INACTIVE;
            }
            // check if there is a parent actively transitioning
            var transitionEndTime = this._getLongestTrans(Date.now());
            // if transitionEndTime is greater than 0, there is a parent transition occurring
            // so delegate enabling the app to the parent.  If it <= 0, go ahead and enable the app
            if (transitionEndTime <= 0) {
                this._app && this._app.setEnabled(true);
            }
            this.setTransitioning(false);
            if (direction !== null && hasCompleted && !this.isPortal) {
                // notify router of the state change if a direction was provided
                // multiple routers can exist and each should be notified
                this.routers.forEach(function (router) {
                    router.stateChange(direction, enteringView);
                });
            }
            // see if we should add the swipe back gesture listeners or not
            this._sbCheck();
            if (this._portal) {
                this._portal._views.forEach(function (view) {
                    if (view.data && view.data.dismissOnPageChange) {
                        view.dismiss();
                    }
                });
            }
        } else {
            // darn, so this wasn't the most recent transition
            // so while this one did end, there's another more recent one
            // still going on. Because a new transition is happening,
            // then this entering view isn't actually going to be the active
            // one, so only update the state to active/inactive if the state
            // wasn't already updated somewhere else during its transition
            if (enteringView.state === STATE_TRANS_ENTER) {
                enteringView.state = STATE_INACTIVE;
            }
            if (leavingView.state === STATE_TRANS_LEAVE) {
                leavingView.state = STATE_INACTIVE;
            }
        }
    };
    /**
     *@private
     * This method is just a wrapper to the Transition function of same name
     * to make it easy/possible to mock the method call by overriding the function.
     * In testing we don't want to actually do the animation, we want to return a stub instead
     */
    NavController.prototype._createTrans = function (enteringView, leavingView, transitionOpts) {
        return transition_1.Transition.createTransition(enteringView, leavingView, transitionOpts);
    };
    NavController.prototype._cleanup = function () {
        var _this = this;
        // ok, cleanup time!! Destroy all of the views that are
        // INACTIVE and come after the active view
        var activeViewIndex = this.indexOf(this.getActive());
        var destroys = this._views.filter(function (v) {
            return v.state === STATE_REMOVE_AFTER_TRANS;
        });
        for (var i = activeViewIndex + 1; i < this._views.length; i++) {
            if (this._views[i].state === STATE_INACTIVE) {
                destroys.push(this._views[i]);
            }
        }
        // all pages being destroyed should be removed from the list of
        // pages and completely removed from the dom
        destroys.forEach(function (view) {
            _this._views.splice(_this.indexOf(view), 1);
            view.destroy();
        });
        // if any z-index goes under 0, then reset them all
        var shouldResetZIndex = this._views.some(function (v) {
            return v.zIndex < 0;
        });
        if (shouldResetZIndex) {
            this._views.forEach(function (view) {
                view.setZIndex(view.zIndex + INIT_ZINDEX + 1, _this._renderer);
            });
        }
    };
    /**
     * @private
     */
    NavController.prototype.getActiveChildNav = function () {
        return this._children[this._children.length - 1];
    };
    /**
     * @private
     */
    NavController.prototype.registerChildNav = function (nav) {
        this._children.push(nav);
    };
    /**
     * @private
     */
    NavController.prototype.unregisterChildNav = function (nav) {
        var index = this._children.indexOf(nav);
        if (index > -1) {
            this._children.splice(index, 1);
        }
    };
    /**
     * @private
     */
    NavController.prototype.ngOnDestroy = function () {
        for (var i = this._views.length - 1; i >= 0; i--) {
            this._views[i].destroy();
        }
        this._views.length = 0;
        if (this.parent && this.parent.unregisterChildNav) {
            this.parent.unregisterChildNav(this);
        }
    };
    /**
     * @private
     */
    NavController.prototype.loadPage = function (view, viewport, opts, done) {
        var _this = this;
        if (!viewport || !view.componentType) {
            return;
        }
        // TEMPORARY: automatically set selector w/ dah reflector
        // TODO: use componentFactory.create once fixed
        bootstrap_1.addSelector(view.componentType, 'ion-page');
        this._compiler.resolveComponent(view.componentType).then(function (componentFactory) {
            // add more providers to just this page
            var componentProviders = core_1.ReflectiveInjector.resolve([core_1.provide(NavController, { useValue: _this }), core_1.provide(view_controller_1.ViewController, { useValue: view }), core_1.provide(nav_params_1.NavParams, { useValue: view.getNavParams() })]);
            var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(componentProviders, _this._viewport.parentInjector);
            var componentRef = componentFactory.create(childInjector, null, null);
            viewport.insert(componentRef.hostView, viewport.length);
            // a new ComponentRef has been created
            // set the ComponentRef's instance to its ViewController
            view.setInstance(componentRef.instance);
            // the component has been loaded, so call the view controller's loaded method to load any dependencies into the dom
            view.loaded(function () {
                // the ElementRef of the actual ion-page created
                var pageElementRef = componentRef.location;
                // remember the ChangeDetectorRef for this ViewController
                view.setChangeDetector(componentRef.changeDetectorRef);
                // remember the ElementRef to the ion-page elementRef that was just created
                view.setPageRef(pageElementRef);
                // auto-add page css className created from component JS class name
                var cssClassName = util_1.pascalCaseToDashCase(view.componentType.name);
                _this._renderer.setElementClass(pageElementRef.nativeElement, cssClassName, true);
                view.onDestroy(function () {
                    // ensure the element is cleaned up for when the view pool reuses this element
                    _this._renderer.setElementAttribute(pageElementRef.nativeElement, 'class', null);
                    _this._renderer.setElementAttribute(pageElementRef.nativeElement, 'style', null);
                    componentRef.destroy();
                });
                // our job is done here
                done(view);
            });
        });
    };
    /**
     * @private
     */
    NavController.prototype.swipeBackStart = function () {
        // default the direction to "back"
        var opts = {
            direction: 'back',
            progressAnimation: true
        };
        // figure out the states of each view in the stack
        var leavingView = this._remove(this._views.length - 1, 1);
        if (leavingView) {
            opts.animation = leavingView.getTransitionName(opts.direction);
            // get the view thats ready to enter
            var enteringView = this.getByState(STATE_INIT_ENTER);
            // start the transition, fire callback when done...
            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                // swipe back has finished!!
                console.debug('swipeBack, hasCompleted', hasCompleted);
            });
        }
    };
    /**
     * @private
     */
    NavController.prototype.swipeBackProgress = function (stepValue) {
        if (this._trans && this._sbGesture) {
            // continue to disable the app while actively dragging
            this._app.setEnabled(false, 4000);
            this.setTransitioning(true, 4000);
            // set the transition animation's progress
            this._trans.progressStep(stepValue);
        }
    };
    /**
     * @private
     */
    NavController.prototype.swipeBackEnd = function (shouldComplete, currentStepValue) {
        if (this._trans && this._sbGesture) {
            // the swipe back gesture has ended
            this._trans.progressEnd(shouldComplete, currentStepValue);
        }
    };
    /**
     * @private
     */
    NavController.prototype._sbCheck = function () {
        var _this = this;
        if (this._sbEnabled) {
            // this nav controller can have swipe to go back
            if (!this._sbGesture) {
                // create the swipe back gesture if we haven't already
                var opts = {
                    edge: 'left',
                    threshold: this._sbThreshold
                };
                var menuCtrl = this._app.getAppInjector().get(menu_controller_1.MenuController);
                this._sbGesture = new swipe_back_1.SwipeBackGesture(this.getNativeElement(), opts, this, menuCtrl);
            }
            if (this.canSwipeBack()) {
                // it is be possible to swipe back
                if (!this._sbGesture.isListening) {
                    this._zone.runOutsideAngular(function () {
                        // start listening if it's not already
                        console.debug('swipeBack gesture, listen');
                        _this._sbGesture.listen();
                    });
                }
            } else if (this._sbGesture.isListening) {
                // it should not be possible to swipe back
                // but the gesture is still listening
                console.debug('swipeBack gesture, unlisten');
                this._sbGesture.unlisten();
            }
        }
    };
    /**
     * If it's possible to use swipe back or not. If it's not possible
     * to go back, or swipe back is not enabled, then this will return `false`.
     * If it is possible to go back, and swipe back is enabled, then this
     * will return `true`.
     * @returns {boolean}
     */
    NavController.prototype.canSwipeBack = function () {
        return this._sbEnabled && !this.isTransitioning() && this._app.isEnabled() && this.canGoBack();
    };
    /**
     * Returns `true` if there's a valid previous page that we can pop
     * back to. Otherwise returns `false`.
     * @returns {boolean}
     */
    NavController.prototype.canGoBack = function () {
        var activeView = this.getActive();
        if (activeView) {
            return activeView.enableBack();
        }
        return false;
    };
    /**
     * Returns if the nav controller is actively transitioning or not.
     * @return {boolean}
     */
    NavController.prototype.isTransitioning = function () {
        return this._trnsTime > Date.now();
    };
    /**
     * @private
     */
    NavController.prototype.setTransitioning = function (isTransitioning, fallback) {
        if (fallback === void 0) {
            fallback = 700;
        }
        this._trnsTime = isTransitioning ? Date.now() + fallback : 0;
    };
    /**
     * @private
     * This method traverses the tree of parents upwards
     * and looks at the time the transition ends (if it's transitioning)
     * and returns the value that is the furthest into the future
     * thus giving us the longest transition duration
     */
    NavController.prototype._getLongestTrans = function (now) {
        var parentNav = this.parent;
        var transitionEndTime = -1;
        while (parentNav) {
            if (parentNav._trnsTime > transitionEndTime) {
                transitionEndTime = parentNav._trnsTime;
            }
            parentNav = parentNav.parent;
        }
        // only check if the transitionTime is greater than the current time once
        return transitionEndTime > 0 && transitionEndTime > now ? transitionEndTime : 0;
    };
    /**
     * @private
     */
    NavController.prototype.hasOverlay = function () {
        for (var i = this._views.length - 1; i >= 0; i--) {
            if (this._views[i].isOverlay) {
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     */
    NavController.prototype.getByState = function (state) {
        for (var i = this._views.length - 1; i >= 0; i--) {
            if (this._views[i].state === state) {
                return this._views[i];
            }
        }
        return null;
    };
    /**
     * @param {number} index  The index of the page to get.
     * @returns {ViewController} Returns the view controller that matches the given index.
     */
    NavController.prototype.getByIndex = function (index) {
        return index < this._views.length && index > -1 ? this._views[index] : null;
    };
    /**
     * @returns {ViewController} Returns the active page's view controller.
     */
    NavController.prototype.getActive = function () {
        return this.getByState(STATE_ACTIVE);
    };
    /**
     * @param {ViewController} view
     * @returns {boolean}
     */
    NavController.prototype.isActive = function (view) {
        return !!(view && view.state === STATE_ACTIVE);
    };
    /**
     * Returns the view controller which is before the given view controller.
     * @param {ViewController} view
     * @returns {viewController}
     */
    NavController.prototype.getPrevious = function (view) {
        return this.getByIndex(this.indexOf(view) - 1);
    };
    /**
     * Returns the first view controller in this nav controller's stack.
     * @returns {ViewController}
     */
    NavController.prototype.first = function () {
        return this._views.length ? this._views[0] : null;
    };
    /**
     * Returns the last page in this nav controller's stack.
     * @returns {ViewController}
     */
    NavController.prototype.last = function () {
        return this._views.length ? this._views[this._views.length - 1] : null;
    };
    /**
     * Returns the index number of the given view controller.
     * @param {ViewController} view
     * @returns {number}
     */
    NavController.prototype.indexOf = function (view) {
        return this._views.indexOf(view);
    };
    /**
     * Returns the number of views in this nav controller.
     * @returns {number} The number of views in this stack, including the current view.
     */
    NavController.prototype.length = function () {
        return this._views.length;
    };
    /**
     * @private
     */
    NavController.prototype.isSwipeBackEnabled = function () {
        return this._sbEnabled;
    };
    Object.defineProperty(NavController.prototype, "rootNav", {
        /**
         * Returns the root `NavController`.
         * @returns {NavController}
         */
        get: function get() {
            var nav = this;
            while (nav.parent) {
                nav = nav.parent;
            }
            return nav;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    NavController.prototype.registerRouter = function (router) {
        this.routers.push(router);
    };
    /**
     * @private
     */
    NavController.prototype._incId = function (view) {
        view.id = this.id + '-' + ++this._ids;
    };
    /**
     * @private
     */
    NavController.prototype._setZIndex = function (enteringView, leavingView, direction) {
        if (enteringView) {
            // get the leaving view, which could be in various states
            if (!leavingView || !leavingView.isLoaded()) {
                // the leavingView is a mocked view, either we're
                // actively transitioning or it's the initial load
                var previousView = this.getPrevious(enteringView);
                if (previousView && previousView.isLoaded()) {
                    // we found a better previous view to reference
                    // use this one instead
                    enteringView.setZIndex(previousView.zIndex + 1, this._renderer);
                } else {
                    // this is the initial view
                    enteringView.setZIndex(this.isPortal ? PORTAL_ZINDEX : INIT_ZINDEX, this._renderer);
                }
            } else if (direction === 'back') {
                // moving back
                enteringView.setZIndex(leavingView.zIndex - 1, this._renderer);
            } else {
                // moving forward
                enteringView.setZIndex(leavingView.zIndex + 1, this._renderer);
            }
        }
    };
    return NavController;
}(ion_1.Ion);
exports.NavController = NavController;
var STATE_ACTIVE = 'active';
var STATE_INACTIVE = 'inactive';
var STATE_INIT_ENTER = 'init_enter';
var STATE_INIT_LEAVE = 'init_leave';
var STATE_TRANS_ENTER = 'trans_enter';
var STATE_TRANS_LEAVE = 'trans_leave';
var STATE_REMOVE = 'remove';
var STATE_REMOVE_AFTER_TRANS = 'remove_after_trans';
var STATE_FORCE_ACTIVE = 'force_active';
var INIT_ZINDEX = 100;
var PORTAL_ZINDEX = 9999;
var ctrlIds = -1;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_bootstrap__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__menu_menu_controller__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__swipe_back__ = __webpack_require__(904);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NavController; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}










/**
 * @name NavController
 * @description
 * _For examples on the basic usage of NavController, check out the
 * [Navigation section](../../../../components/#navigation) of the Component
 * docs._
 *
 * NavController is the base class for navigation controller components like
 * [`Nav`](../Nav/) and [`Tab`](../../Tabs/Tab/). You use navigation controllers
 * to navigate to [pages](#creating_pages) in your app. At a basic level, a
 * navigation controller is an array of pages representing a particular history
 * (of a Tab for example). This array can be manipulated to navigate throughout
 * an app by pushing and popping pages or inserting and removing them at
 * arbitrary locations in history.
 *
 * The current page is the last one in the array, or the top of the stack if we
 * think of it that way.  [Pushing](#push) a new page onto the top of the
 * navigation stack causes the new page to be animated in, while [popping](#pop)
 * the current page will navigate to the previous page in the stack.
 *
 * Unless you are using a directive like [NavPush](../NavPush/), or need a
 * specific NavController, most times you will inject and use a reference to the
 * nearest NavController to manipulate the navigation stack.
 *
 * ### Injecting NavController
 * Injecting NavController will always get you an instance of the nearest
 * NavController, regardless of whether it is a Tab or a Nav.
 *
 * Behind the scenes, when Ionic instantiates a new NavController, it creates an
 * injector with NavController bound to that instance (usually either a Nav or
 * Tab) and adds the injector to its own providers.  For more information on
 * providers and dependency injection, see [Providers and DI]().
 *
 * Instead, you can inject NavController and know that it is the correct
 * navigation controller for most situations (for more advanced situations, see
 * [Menu](../../Menu/Menu/) and [Tab](../../Tab/Tab/)).
 *
 * ```ts
 *  class MyComponent {
 *    constructor(nav: NavController) {
 *      this.nav = nav;
 *    }
 *  }
 * ```
 *
 *
 * ## Page creation
 * Pages are created when they are added to the navigation stack.  For methods
 * like [push()](#push), the NavController takes any component class that is
 * decorated with `@Component` as its first argument.  The NavController then
 * compiles that component, adds it to the app and animates it into view.
 *
 * By default, pages are cached and left in the DOM if they are navigated away
 * from but still in the navigation stack (the exiting page on a `push()` for
 * example).  They are destroyed when removed from the navigation stack (on
 * [pop()](#pop) or [setRoot()](#setRoot)).
 *
 *
 * ## Lifecycle events
 * Lifecycle events are fired during various stages of navigation.  They can be
 * defined in any component type which is pushed/popped from a `NavController`.
 *
 * ```ts
 * import {Component } from '@angular/core';
 *
 * @Component({
 *   template: 'Hello World'
 * })
 * class HelloWorld {
 *   ionViewLoaded() {
 *     console.log("I'm alive!");
 *   }
 *   ionViewWillLeave() {
 *     console.log("Looks like I'm about to leave :(");
 *   }
 * }
 * ```
 *
 *  | Page Event         | Description                                                                                                                                                                                                                                                                       |
 *  |--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 *  | `ionViewLoaded`     | Runs when the page has loaded. This event only happens once per page being created and added to the DOM. If a page leaves but is cached, then this event will not fire again on a subsequent viewing. The `ionViewLoaded` event is good place to put your setup code for the page. |
 *  | `ionViewWillEnter`  | Runs when the page is about to enter and become the active page.                                                                                                                                                                                                                  |
 *  | `ionViewDidEnter`   | Runs when the page has fully entered and is now the active page. This event will fire, whether it was the first load or a cached page.                                                                                                                                            |
 *  | `ionViewWillLeave`  | Runs when the page is about to leave and no longer be the active page.                                                                                                                                                                                                            |
 *  | `ionViewDidLeave`   | Runs when the page has finished leaving and is no longer the active page.                                                                                                                                                                                                         |
 *  | `ionViewWillUnload` | Runs when the page is about to be destroyed and have its elements removed.                                                                                                                                                                                                        |
 *  | `ionViewDidUnload`  | Runs after the page has been destroyed and its elements have been removed.
 *
 *
 * ## Nav Transition Promises
 *
 * Navigation transitions are asynchronous, meaning they take a few moments to finish, and
 * the duration of a transition could be any number. In most cases the async nature of a
 * transition doesn't cause any problems and the nav controller is pretty good about handling
 * which transition was the most recent when multiple transitions have been kicked off.
 * However, when an app begins firing off many transitions, on the same stack at
 * *roughly* the same time, the nav controller can start to get lost as to which transition
 * should be finishing, and which transitions should not be animated.
 *
 * In cases where an app's navigation can be altered by other async tasks, which may or
 * may not take a long time, it's best to rely on each nav transition's returned
 * promise. So instead of firing and forgetting multiple `push` or `pop` nav transitions,
 * it's better to fire the next nav transition when the previous one has finished.
 *
 * In the example below, after the async operation has completed, we then want to transition
 * to another page. Where the potential problem comes in, is that if the async operation
 * completed 100ms after the first transition started, then kicking off another transition
 * halfway through the first transition ends up with a janky animation. Instead, it's best
 * to always ensure the first transition has already finished before starting the next.
 *
 * ```ts
 * // begin the first transition
 * let navTransition = this.nav.push(SomePage);
 *
 * // start an async call, we're not sure how long it'll take
 * someAsyncOperation().then(() => {
 *   // incase the async operation completed faster than the time
 *   // it took to finish the first transition, this logic should
 *   // always ensure that the previous transition has resolved
 *   // first before kicking off the next transition
 *   navTransition.then(() => {
 *     this.nav.push(AnotherPage);
 *   });
 * });
 * ```
 *
 * ## NavOptions
 *
 * Some methods on `NavController` allow for customizing the current transition.
 * To do this, we can pass an object with the modified properites.
 *
 * | Property  | Value     | Description                                                                                                |
 * |-----------|-----------|------------------------------------------------------------------------------------------------------------|
 * | animate   | `boolean` | Whether or not the transition should animate.                                                              |
 * | animation | `string`  | What kind of animation should be used.                                                                     |
 * | direction | `string`  | The conceptual direction the user is navigating. For example, is the user navigating `forward`, or `back`? |
 * | duration  | `number`  | The length in milliseconds the animation should take.                                                      |
 * | easing    | `string`  | The easing for the animation.                                                                              |
 *
 * The property 'animation' understands the following values: `md-transition`, `ios-transition` and `wp-transition`.
 *
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 */

var NavController = function (_Ion) {
    _inherits(NavController, _Ion);

    function NavController(parent, _app, config, _keyboard, elementRef, _zone, _renderer, _compiler) {
        _classCallCheck(this, NavController);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NavController).call(this, elementRef));

        _this._app = _app;
        _this._keyboard = _keyboard;
        _this._zone = _zone;
        _this._renderer = _renderer;
        _this._compiler = _compiler;
        _this._transIds = 0;
        _this._init = false;
        _this._children = [];
        _this._ids = -1;
        _this._views = [];
        /**
         * @private
         */
        _this.routers = [];
        /**
         * @private
         */
        _this.isPortal = false;
        /**
         * @private
         */
        _this._trnsTime = 0;
        _this.parent = parent;
        _this.config = config;
        _this._trnsDelay = config.get('pageTransitionDelay');
        _this._sbEnabled = config.getBoolean('swipeBackEnabled');
        _this._sbThreshold = config.getNumber('swipeBackThreshold', 40);
        _this.id = (++ctrlIds).toString();
        _this.viewDidLoad = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.viewWillEnter = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.viewDidEnter = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.viewWillLeave = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.viewDidLeave = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.viewWillUnload = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.viewDidUnload = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        return _this;
    }
    /**
     * @private
     */

    _createClass(NavController, [{
        key: 'getPortal',
        value: function getPortal() {
            return this._portal;
        }
        /**
         * @private
         */

    }, {
        key: 'setPortal',
        value: function setPortal(val) {
            this._portal = val;
        }
        /**
         * @private
         */

    }, {
        key: 'setViewport',
        value: function setViewport(val) {
            this._viewport = val;
        }
        /**
         * Set the root for the current navigation stack.
         * @param {Page} page  The name of the component you want to push on the navigation stack.
         * @param {object} [params={}] Any nav-params you want to pass along to the next view.
         * @param {object} [opts={}] Any options you want to use pass to transtion.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'setRoot',
        value: function setRoot(page, params, opts) {
            return this.setPages([{ page: page, params: params }], opts);
        }
        /**
         * You can set the views of the current navigation stack and navigate to the
         * last view.
         *
         *
         *```ts
         * import {NavController } from 'ionic-angular'
         * import {Detail } from '../detail/detail'
         * import {Info } from '../info/info'
         *
         *  export class Home {
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *    setPages() {
         *      this.nav.setPages([ {page: List}, {page: Detail}, {page:Info} ]);
         *    }
         *  }
         *```
         *
         *
         * In this example, we're giving the current nav stack an array of pages.
         * Then the navigation stack will navigate to the last page in the array
         * and remove the previously active page.
         *
         * By default animations are disabled, but they can be enabled by passing
         * options to the navigation controller.
         *
         *
         * ```ts
         * import {NavController } from 'ionic-angular'
         * import {Detail } from '../detail/detail'
         *
         *  export class Home {
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *    setPages() {
         *      this.nav.setPages([ {page: List}, {page: Detail} ], {
         *        animate: true
         *      });
         *    }
         *  }
         * ```
         *
         * You can also pass any navigation params to the individual pages in
         * the array.
         *
         *
         * ```ts
         * import {NavController } from 'ionic-angular';
         * import {Info } from '../info/info';
         * import {List } from '../list/list';
         * import {Detail } from '../detail/detail';
         *
         *  export class Home {
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *    setPages() {
         *      this.nav.setPages([{
         *        page: Info
         *      }, {
         *        page: List,
         *        params: {tags: 'css'}
         *      }, {
         *        page: Detail,
         *        params: {id: 325}
         *      }]);
         *    }
         *  }
         *```
         *
         * @param {array<Page>} pages  An arry of page components and their params to load in the stack.
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'setPages',
        value: function setPages(pages, opts) {
            if (!pages || !pages.length) {
                return Promise.resolve(false);
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts)) {
                opts = {};
            }
            // remove existing views
            var leavingView = this._remove(0, this._views.length);
            // create view controllers out of the pages and insert the new views
            var views = pages.map(function (p) {
                return new __WEBPACK_IMPORTED_MODULE_8__view_controller__["a" /* ViewController */](p.page, p.params);
            });
            var enteringView = this._insert(0, views);
            // if animation wasn't set to true then default it to NOT animate
            if (opts.animate !== true) {
                opts.animate = false;
            }
            // set the nav direction to "back" if it wasn't set
            opts.direction = opts.direction || 'back';
            var resolve = void 0;
            var promise = new Promise(function (res) {
                resolve = res;
            });
            // start the transition, fire resolve when done...
            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                // transition has completed!!
                resolve(hasCompleted);
            });
            return promise;
        }
        /**
         * Push is how we can pass components and navigate to them. We push the component
         * we want to navigate to on to the navigation stack.
         *
         * ```ts
         * class MyClass{
         *    constructor(nav:NavController){
         *      this.nav = nav;
         *    }
         *
         *    pushPage(){
         *      this.nav.push(SecondView);
         *    }
         * }
         * ```
         *
         * We can also pass along parameters to the next view, such as data that we have
         * on the current view. This is a similar concept to to V1 apps with `$stateParams`.
         *
         * ```ts
         * class MyClass{
         *    constructor(nav:NavController){
         *      this.nav = nav;
         *    }
         *
         *    pushPage(user){
         *       // user is an object we have in our view
         *       // typically this comes from an ngFor or some array
         *       // here we can create an object with a property of
         *       // paramUser, and set its value to the user object we passed in
         *      this.nav.push(SecondView, { paramUser: user });
         *    }
         * }
         * ```
         *
         * We'll look at how we can access that data in the `SecondView` in the
         * navParam docs.
         *
         * We can also pass any options to the transtion from that same method.
         *
         * ```ts
         * class MyClass{
         *    constructor(nav: NavController){
         *      this.nav = nav;
         *    }
         *
         *    pushPage(user){
         *      this.nav.push(SecondView,{
         *       // user is an object we have in our view
         *       // typically this comes from an ngFor or some array
         *       // here we can create an object with a property of
         *       // paramUser, and set it's value to the user object we passed in
         *       paramUser: user
         *      },{
         *       // here we can configure things like the animations direction or
         *       // or if the view should animate at all.
         *       direction: 'back'
         *      });
         *    }
         * }
         * ```
         * @param {Page} page  The page component class you want to push on to the navigation stack
         * @param {object} [params={}] Any nav-params you want to pass along to the next view
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'push',
        value: function push(page, params, opts) {
            return this.insertPages(-1, [{ page: page, params: params }], opts);
        }
        /**
         * Present is how an app display overlays on top of the content, from within the
         * root level `NavController`. The `present` method is used by overlays, such
         * as `ActionSheet`, `Alert`, and `Modal`. The main difference between `push`
         * and `present` is that `present` takes a `ViewController` instance, whereas
         * `push` takes a component class which hasn't been instantiated yet.
         * Additionally, `present` will place the overlay in the root NavController's
         * stack.
         *
         * ```ts
         * class MyClass{
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *
         *    presentModal() {
         *      let modal = Modal.create(ProfilePage);
         *      this.nav.present(modal);
         *    }
         * }
         * ```
         *
         * @param {ViewController} enteringView The component you want to push on the navigation stack.
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'present',
        value: function present(enteringView, opts) {
            var rootNav = this.rootNav;
            if (rootNav['_tabs']) {
                // TODO: must have until this goes in
                // https://github.com/angular/angular/issues/5481
                console.error('A parent <ion-nav> is required for ActionSheet/Alert/Modal/Loading');
                return;
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts)) {
                opts = {};
            }
            if (enteringView.usePortal && rootNav._portal) {
                return rootNav._portal.present(enteringView, opts);
            }
            enteringView.setNav(rootNav);
            opts.keyboardClose = false;
            opts.direction = 'forward';
            if (!opts.animation) {
                opts.animation = enteringView.getTransitionName('forward');
            }
            enteringView.setLeavingOpts({
                keyboardClose: false,
                direction: 'back',
                animation: enteringView.getTransitionName('back'),
                ev: opts.ev
            });
            // present() always uses the root nav
            // start the transition
            return rootNav._insertViews(-1, [enteringView], opts);
        }
        /**
         * Inserts a view into the nav stack at the specified index. This is useful if
         * you need to add a view at any point in your navigation stack.
         *
         * ```ts
         * export class Detail {
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *    insertPage(){
         *      this.nav.insert(1, Info);
         *    }
         *  }
         * ```
         *
         * This will insert the `Info` page into the second slot of our navigation stack.
         *
         * @param {number} insertIndex  The index where to insert the page.
         * @param {Page} page  The component you want to insert into the nav stack.
         * @param {object} [params={}] Any nav-params you want to pass along to the next page.
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'insert',
        value: function insert(insertIndex, page, params, opts) {
            return this.insertPages(insertIndex, [{ page: page, params: params }], opts);
        }
        /**
         * Inserts multiple pages into the nav stack at the specified index.
         *
         * ```ts
         * export class Detail {
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *    insertPages(){
         *      let pages = [
         *        { page: Info },
         *        { page: ProfileList },
         *        { page: ProfileDetail, params: {userId:5} }
         *      ];
         *      this.nav.insertPages(2, pages);
         *    }
         *  }
         * ```
         *
         * This will insert each of the pages in the array, starting at the third slot
         * (second index) of the nav stack. The last page in the array will animate
         * in and become the active page.
         *
         * @param {number} insertIndex  The index where you want to insert the page.
         * @param {array<{page: Page, params=: any}>} insertPages  An array of objects, each with a `page` and optionally `params` property.
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'insertPages',
        value: function insertPages(insertIndex, _insertPages, opts) {
            var views = _insertPages.map(function (p) {
                return new __WEBPACK_IMPORTED_MODULE_8__view_controller__["a" /* ViewController */](p.page, p.params);
            });
            return this._insertViews(insertIndex, views, opts);
        }
    }, {
        key: '_insertViews',
        value: function _insertViews(insertIndex, insertViews, opts) {
            if (!insertViews || !insertViews.length) {
                return Promise.reject('invalid pages');
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts)) {
                opts = {};
            }
            // insert the new page into the stack
            // returns the newly created entering view
            var enteringView = this._insert(insertIndex, insertViews);
            // set the nav direction to "forward" if it wasn't set
            opts.direction = opts.direction || 'forward';
            // set which animation it should use if it wasn't set yet
            if (!opts.animation) {
                opts.animation = enteringView.getTransitionName(opts.direction);
            }
            var resolve = void 0;
            var promise = new Promise(function (res) {
                resolve = res;
            });
            // it's possible that the newly added view doesn't need to
            // transition in, but was simply inserted somewhere in the stack
            // go backwards through the stack and find the first active view
            // which could be active or one ready to enter
            for (var i = this._views.length - 1; i >= 0; i--) {
                if (this._views[i].state === STATE_ACTIVE || this._views[i].state === STATE_INIT_ENTER) {
                    // found the view at the end of the stack that's either
                    // already active or it is about to enter
                    if (this._views[i] === enteringView) {
                        // cool, so the last valid view is also our entering view!!
                        // this means we should animate that bad boy in so it's the active view
                        // return a promise and resolve when the transition has completed
                        // get the leaving view which the _insert() already set
                        var leavingView = this.getByState(STATE_INIT_LEAVE);
                        // start the transition, fire resolve when done...
                        this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                            // transition has completed!!
                            resolve(hasCompleted);
                        });
                        return promise;
                    }
                    break;
                }
            }
            // the page was not pushed onto the end of the stack
            // but rather inserted somewhere in the middle or beginning
            // Since there are views after this new one, don't transition in
            // auto resolve cuz there was is no need for an animation
            return Promise.resolve(enteringView);
        }
        /**
         * @private
         */

    }, {
        key: '_insert',
        value: function _insert(insertIndex, insertViews) {
            var _this2 = this;

            // when this is done, there should only be at most
            // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
            // there should not be any that are STATE_ACTIVE after this is done
            // allow -1 to be passed in to auto push it on the end
            // and clean up the index if it's larger then the size of the stack
            if (insertIndex < 0 || insertIndex > this._views.length) {
                insertIndex = this._views.length;
            }
            // first see if there's an active view
            var view = this.getActive();
            if (view) {
                // there's an active view, set that it's initialized to leave
                view.state = STATE_INIT_LEAVE;
            } else if (view = this.getByState(STATE_INIT_ENTER)) {
                // oh no, there's already a transition initalized ready to enter!
                // but it actually hasn't entered yet at all so lets
                // just keep it in the array, but not render or animate it in
                view.state = STATE_INACTIVE;
            }
            // insert each of the views in the pages array
            var insertView = null;
            insertViews.forEach(function (view, i) {
                insertView = view;
                // create the new entering view
                view.setNav(_this2);
                view.state = STATE_INACTIVE;
                // give this inserted view an ID
                _this2._incId(view);
                // insert the entering view into the correct index in the stack
                _this2._views.splice(insertIndex + i, 0, view);
            });
            if (insertView) {
                insertView.state = STATE_INIT_ENTER;
            }
            return insertView;
        }
        /**
         * If you wanted to navigate back from a current view, you can use the
         * back-button or programatically call `pop()`. Similar to `push()`, you
         * can also pass navigation options.
         *
         * ```ts
         * class SecondView{
         *    constructor(nav:NavController){
         *      this.nav = nav;
         *    }
         *    goBack(){
         *      this.nav.pop();
         *    }
         * }
         * ```
         *
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'pop',
        value: function pop(opts) {
            // get the index of the active view
            // which will become the view to be leaving
            var activeView = this.getByState(STATE_TRANS_ENTER) || this.getByState(STATE_INIT_ENTER) || this.getActive();
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts)) {
                opts = {};
            }
            // if not set, by default climb up the nav controllers if
            // there isn't a previous view in this nav controller
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts.climbNav)) {
                opts.climbNav = true;
            }
            return this.remove(this.indexOf(activeView), 1, opts);
        }
        /**
         * Similar to `pop()`, this method let's you navigate back to the root of
         * the stack, no matter how many pages back that is.
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'popToRoot',
        value: function popToRoot(opts) {
            return this.popTo(this.first(), opts);
        }
        /**
         * Pop to a specific view in the history stack.
         * @param {ViewController} view  to pop to
         * @param {object} [opts={}] Nav options to go with this transition.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'popTo',
        value: function popTo(view, opts) {
            var startIndex = this.indexOf(view);
            if (startIndex < 0) {
                return Promise.reject('View not found to pop to');
            }
            var activeView = this.getByState(STATE_TRANS_ENTER) || this.getByState(STATE_INIT_ENTER) || this.getActive();
            var removeCount = this.indexOf(activeView) - startIndex;
            return this.remove(startIndex + 1, removeCount, opts);
        }
        /**
         * Removes a page from the nav stack at the specified index.
         *
         * ```ts
         * export class Detail {
         *    constructor(nav: NavController) {
         *      this.nav = nav;
         *    }
         *    removePage(){
         *      this.nav.remove(1);
         *    }
         *  }
         * ```
         *
         * @param {number} [startIndex]  The starting index to remove pages from the stack. Default is the index of the last page.
         * @param {number} [removeCount]  The number of pages to remove, defaults to remove `1`.
         * @param {object} [opts={}] Any options you want to use pass to transtion.
         * @returns {Promise} Returns a promise which is resolved when the transition has completed.
         */

    }, {
        key: 'remove',
        value: function remove() {
            var startIndex = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

            var _this3 = this;

            var removeCount = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
            var opts = arguments[2];

            if (startIndex === -1) {
                startIndex = this._views.length - 1;
            } else if (startIndex < 0 || startIndex >= this._views.length) {
                return Promise.reject('remove index out of range');
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts)) {
                opts = {};
            }
            // default the direction to "back"
            opts.direction = opts.direction || 'back';
            // figure out the states of each view in the stack
            var leavingView = this._remove(startIndex, removeCount);
            if (!leavingView) {
                var forcedActive = this.getByState(STATE_FORCE_ACTIVE);
                if (forcedActive) {
                    // this scenario happens when a remove is going on
                    // during a transition
                    if (this._trans) {
                        this._trans.stop();
                        this._trans.destroy();
                        this._trans = null;
                        this._cleanup();
                    }
                    return Promise.resolve(false);
                }
            }
            if (leavingView) {
                var _ret = function () {
                    // there is a view ready to leave, meaning that a transition needs
                    // to happen and the previously active view is going to animate out
                    // get the view thats ready to enter
                    var enteringView = _this3.getByState(STATE_INIT_ENTER);
                    if (!enteringView && !_this3.isPortal) {
                        // oh nos! no entering view to go to!
                        // if there is no previous view that would enter in this nav stack
                        // and the option is set to climb up the nav parent looking
                        // for the next nav we could transition to instead
                        if (opts.climbNav) {
                            var parentNav = _this3.parent;
                            while (parentNav) {
                                if (!parentNav['_tabs']) {
                                    // Tabs can be a parent, but it is not a collection of views
                                    // only we're looking for an actual NavController w/ stack of views
                                    leavingView.fireWillLeave();
                                    _this3.viewWillLeave.emit(leavingView);
                                    return {
                                        v: parentNav.pop(opts).then(function (rtnVal) {
                                            leavingView.fireDidLeave();
                                            _this3.viewDidLeave.emit(leavingView);
                                            return rtnVal;
                                        })
                                    };
                                }
                                parentNav = parentNav.parent;
                            }
                        }
                        // there's no previous view and there's no valid parent nav
                        // to climb to so this shouldn't actually remove the leaving
                        // view because there's nothing that would enter, eww
                        leavingView.state = STATE_ACTIVE;
                        return {
                            v: Promise.resolve(false)
                        };
                    }
                    var resolve = void 0;
                    var promise = new Promise(function (res) {
                        resolve = res;
                    });
                    if (!opts.animation) {
                        opts.animation = leavingView.getTransitionName(opts.direction);
                    }
                    // start the transition, fire resolve when done...
                    _this3._transition(enteringView, leavingView, opts, function (hasCompleted) {
                        // transition has completed!!
                        resolve(hasCompleted);
                    });
                    return {
                        v: promise
                    };
                }();

                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
            }
            // no need to transition when the active view isn't being removed
            // there's still an active view after _remove() figured out states
            // so this means views that were only removed before the active
            // view, so auto-resolve since no transition needs to happen
            return Promise.resolve(false);
        }
        /**
         * @private
         */

    }, {
        key: '_remove',
        value: function _remove(startIndex, removeCount) {
            var _this4 = this;

            // when this is done, there should only be at most
            // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
            // there should not be any that are STATE_ACTIVE after this is done
            var view = null;
            // loop through each view that is set to be removed
            for (var i = startIndex, ii = removeCount + startIndex; i < ii; i++) {
                view = this.getByIndex(i);
                if (!view) break;
                if (view.state === STATE_TRANS_ENTER || view.state === STATE_TRANS_LEAVE) {
                    // oh no!!! this view should be removed, but it's
                    // actively transitioning in at the moment!!
                    // since it's viewable right now, let's just set that
                    // it should be removed after the transition
                    view.state = STATE_REMOVE_AFTER_TRANS;
                } else {
                    // if this view is already leaving then no need to immediately
                    // remove it, otherwise set the remove state
                    // this is useful if the view being removed isn't going to
                    // animate out, but just removed from the stack, no transition
                    view.state = STATE_REMOVE;
                }
            }
            if (view = this.getByState(STATE_INIT_LEAVE)) {
                // looks like there's already an active leaving view
                // reassign previous entering view to just be inactive
                var enteringView = this.getByState(STATE_INIT_ENTER);
                if (enteringView) {
                    enteringView.state = STATE_INACTIVE;
                }
                // from the index of the leaving view, go backwards and
                // find the first view that is inactive
                for (var i = this.indexOf(view) - 1; i >= 0; i--) {
                    if (this._views[i].state === STATE_INACTIVE) {
                        this._views[i].state = STATE_INIT_ENTER;
                        break;
                    }
                }
            } else if (view = this.getByState(STATE_TRANS_LEAVE)) {
                // an active transition is happening, but a new transition
                // still needs to happen force this view to be the active one
                view.state = STATE_FORCE_ACTIVE;
            } else if (view = this.getByState(STATE_REMOVE)) {
                // there is no active transition about to happen
                // find the first view that is supposed to be removed and
                // set that it is the init leaving view
                // the first view to be removed, it should init leave
                view.state = STATE_INIT_LEAVE;
                view.fireWillUnload();
                this.viewWillUnload.emit(view);
                // from the index of the leaving view, go backwards and
                // find the first view that is inactive so it can be the entering
                for (var i = this.indexOf(view) - 1; i >= 0; i--) {
                    if (this._views[i].state === STATE_INACTIVE) {
                        this._views[i].state = STATE_INIT_ENTER;
                        break;
                    }
                }
            }
            // if there is still an active view, then it wasn't one that was
            // set to be removed, so there actually won't be a transition at all
            view = this.getActive();
            if (view) {
                // the active view remains untouched, so all the removes
                // must have happened before it, so really no need for transition
                view = this.getByState(STATE_INIT_ENTER);
                if (view) {
                    // if it was going to enter, then just make inactive
                    view.state = STATE_INACTIVE;
                }
                view = this.getByState(STATE_INIT_LEAVE);
                if (view) {
                    // this was going to leave, so just remove it completely
                    view.state = STATE_REMOVE;
                }
            }
            // remove views that have been set to be removed, but not
            // apart of any transitions that will eventually happen
            this._views.filter(function (v) {
                return v.state === STATE_REMOVE;
            }).forEach(function (view) {
                view.fireWillLeave();
                _this4.viewWillLeave.emit(view);
                view.fireDidLeave();
                _this4.viewDidLeave.emit(view);
                _this4._views.splice(_this4.indexOf(view), 1);
                view.destroy();
            });
            return this.getByState(STATE_INIT_LEAVE);
        }
        /**
         * @private
         */

    }, {
        key: '_transition',
        value: function _transition(enteringView, leavingView, opts, done) {
            var _this5 = this;

            var transId = ++this._transIds;
            if (enteringView === leavingView) {
                // if the entering view and leaving view are the same thing don't continue
                this._transFinish(transId, enteringView, leavingView, null, false);
                return done(false);
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isBlank"])(opts)) {
                opts = {};
            }
            this._setAnimate(opts);
            if (!leavingView) {
                // if no leaving view then create a bogus one
                leavingView = new __WEBPACK_IMPORTED_MODULE_8__view_controller__["a" /* ViewController */]();
            }
            if (!enteringView) {
                // if no entering view then create a bogus one
                enteringView = new __WEBPACK_IMPORTED_MODULE_8__view_controller__["a" /* ViewController */]();
                enteringView.fireLoaded();
                this.viewDidLoad.emit(enteringView);
            }
            /* Async steps to complete a transition
              1. _render: compile the view and render it in the DOM. Load page if it hasn't loaded already. When done call postRender
              2. _postRender: Run willEnter/willLeave, then wait a frame (change detection happens), then call beginTransition
              3. _beforeTrans: Create the transition's animation, play the animation, wait for it to end
              4. _afterTrans: Run didEnter/didLeave, call _transComplete()
              5. _transComplete: Cleanup, remove cache views, then call the final callback
            */
            // begin the multiple async process of transitioning to the entering view
            this._render(transId, enteringView, leavingView, opts, function (hasCompleted) {
                _this5._transFinish(transId, enteringView, leavingView, opts.direction, hasCompleted);
                done(hasCompleted);
            });
        }
        /**
         * @private
         */

    }, {
        key: '_setAnimate',
        value: function _setAnimate(opts) {
            if (this._views.length === 1 && !this._init && !this.isPortal || this.config.get('animate') === false) {
                opts.animate = false;
            }
        }
        /**
         * @private
         */

    }, {
        key: '_render',
        value: function _render(transId, enteringView, leavingView, opts, done) {
            var _this6 = this;

            // compile/load the view into the DOM
            if (enteringView.state === STATE_INACTIVE) {
                // this entering view is already set to inactive, so this
                // transition must be canceled, so don't continue
                return done();
            }
            enteringView.state = STATE_INIT_ENTER;
            leavingView.state = STATE_INIT_LEAVE;
            // remember if this nav is already transitioning or not
            var isAlreadyTransitioning = this.isTransitioning();
            if (enteringView.isLoaded()) {
                // already compiled this view, do not load again and continue
                this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
            } else {
                // view has not been compiled/loaded yet
                // continue once the view has finished compiling
                // DOM WRITE
                this.setTransitioning(true, 500);
                this.loadPage(enteringView, this._viewport, opts, function () {
                    enteringView.fireLoaded();
                    _this6.viewDidLoad.emit(enteringView);
                    _this6._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: '_postRender',
        value: function _postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done) {
            // called after _render has completed and the view is compiled/loaded
            if (enteringView.state === STATE_INACTIVE) {
                // this entering view is already set to inactive, so this
                // transition must be canceled, so don't continue
                return done();
            }
            if (!opts.preload) {
                // the enteringView will become the active view, and is not being preloaded
                // set the correct zIndex for the entering and leaving views
                // if there's already another trans_enter happening then
                // the zIndex for the entering view should go off of that one
                // DOM WRITE
                var lastestLeavingView = this.getByState(STATE_TRANS_ENTER) || leavingView;
                this._setZIndex(enteringView, lastestLeavingView, opts.direction);
                // make sure the entering and leaving views are showing
                // DOM WRITE
                if (isAlreadyTransitioning) {
                    // the previous transition was still going when this one started
                    // so to be safe, only update showing the entering/leaving
                    // don't hide the others when they could still be transitioning
                    enteringView.domShow(true, this._renderer);
                    leavingView.domShow(true, this._renderer);
                } else {
                    // there are no other transitions happening but this one
                    // only entering/leaving should show, all others hidden
                    // also if a view is an overlay or the previous view is an
                    // overlay then always show the overlay and the view before it
                    var view;
                    var shouldShow;
                    for (var i = 0, ii = this._views.length; i < ii; i++) {
                        view = this._views[i];
                        shouldShow = view === enteringView || view === leavingView || view.isOverlay || (i < ii - 1 ? this._views[i + 1].isOverlay : false);
                        view.domShow(shouldShow, this._renderer);
                    }
                }
                // call each view's lifecycle events
                if (leavingView.fireOtherLifecycles) {
                    // only fire entering lifecycle if the leaving
                    // view hasn't explicitly set not to
                    enteringView.fireWillEnter();
                    this.viewWillEnter.emit(enteringView);
                }
                if (enteringView.fireOtherLifecycles) {
                    // only fire leaving lifecycle if the entering
                    // view hasn't explicitly set not to
                    leavingView.fireWillLeave();
                    this.viewWillLeave.emit(leavingView);
                }
            } else {
                // this view is being preloaded, don't call lifecycle events
                // transition does not need to animate
                opts.animate = false;
            }
            this._beforeTrans(enteringView, leavingView, opts, done);
        }
        /**
         * @private
         */

    }, {
        key: '_beforeTrans',
        value: function _beforeTrans(enteringView, leavingView, opts, done) {
            var _this7 = this;

            // called after one raf from postRender()
            // create the transitions animation, play the animation
            // when the transition ends call wait for it to end
            if (enteringView.state === STATE_INACTIVE) {
                // this entering view is already set to inactive, so this
                // transition must be canceled, so don't continue
                return done();
            }
            enteringView.state = STATE_TRANS_ENTER;
            leavingView.state = STATE_TRANS_LEAVE;
            // everything during the transition should runOutsideAngular
            this._zone.runOutsideAngular(function () {
                // init the transition animation
                var transitionOpts = {
                    animation: opts.animation,
                    direction: opts.direction,
                    duration: opts.duration,
                    easing: opts.easing,
                    renderDelay: opts.transitionDelay || _this7._trnsDelay,
                    isRTL: _this7.config.platform.isRTL(),
                    ev: opts.ev
                };
                var transAnimation = _this7._createTrans(enteringView, leavingView, transitionOpts);
                _this7._trans && _this7._trans.destroy();
                _this7._trans = transAnimation;
                if (opts.animate === false) {
                    // force it to not animate the elements, just apply the "to" styles
                    transAnimation.duration(0);
                }
                // check if a parent is transitioning and get the time that it ends
                var parentTransitionEndTime = _this7._getLongestTrans(Date.now());
                if (parentTransitionEndTime > 0) {
                    // the parent is already transitioning and has disabled the app
                    // so just update the local transitioning information
                    var duration = parentTransitionEndTime - Date.now();
                    _this7.setTransitioning(true, duration);
                } else {
                    // this is the only active transition (for now), so disable the app
                    var keyboardDurationPadding = 0;
                    if (_this7._keyboard.isOpen()) {
                        // add XXms to the duration the app is disabled when the keyboard is open
                        keyboardDurationPadding = 600;
                    }
                    var _duration = transAnimation.getDuration() + keyboardDurationPadding;
                    var enableApp = _duration < 64;
                    _this7._app.setEnabled(enableApp, _duration);
                    _this7.setTransitioning(!enableApp, _duration);
                }
                // create a callback for when the animation is done
                transAnimation.onFinish(function (trans) {
                    // transition animation has ended
                    // destroy the animation and it's element references
                    trans.destroy();
                    _this7._afterTrans(enteringView, leavingView, opts, trans.hasCompleted, done);
                });
                // cool, let's do this, start the transition
                if (opts.progressAnimation) {
                    // this is a swipe to go back, just get the transition progress ready
                    // kick off the swipe animation start
                    transAnimation.progressStart();
                } else {
                    // this is a normal animation
                    // kick it off and let it play through
                    transAnimation.play();
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: '_afterTrans',
        value: function _afterTrans(enteringView, leavingView, opts, hasCompleted, done) {
            var _this8 = this;

            // transition has completed, update each view's state
            // place back into the zone, run didEnter/didLeave
            // call the final callback when done
            // run inside of the zone again
            this._zone.run(function () {
                if (!opts.preload && hasCompleted) {
                    if (leavingView.fireOtherLifecycles) {
                        // only fire entering lifecycle if the leaving
                        // view hasn't explicitly set not to
                        enteringView.fireDidEnter();
                        _this8.viewDidEnter.emit(enteringView);
                    }
                    if (enteringView.fireOtherLifecycles) {
                        // only fire leaving lifecycle if the entering
                        // view hasn't explicitly set not to
                        leavingView.fireDidLeave();
                        _this8.viewDidLeave.emit(leavingView);
                    }
                }
                if (enteringView.state === STATE_INACTIVE) {
                    // this entering view is already set to inactive, so this
                    // transition must be canceled, so don't continue
                    return done(hasCompleted);
                }
                if (opts.keyboardClose !== false && _this8._keyboard.isOpen()) {
                    // the keyboard is still open!
                    // no problem, let's just close for them
                    _this8._keyboard.close();
                    _this8._keyboard.onClose(function () {
                        // keyboard has finished closing, transition complete
                        done(hasCompleted);
                    }, 32);
                } else {
                    // all good, transition complete
                    done(hasCompleted);
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: '_transFinish',
        value: function _transFinish(transId, enteringView, leavingView, direction, hasCompleted) {
            var _this9 = this;

            // a transition has completed, but not sure if it's the last one or not
            // check if this transition is the most recent one or not
            if (transId === this._transIds) {
                // ok, good news, there were no other transitions that kicked
                // off during the time this transition started and ended
                if (hasCompleted) {
                    // this transition has completed as normal
                    // so the entering one is now the active view
                    // and the leaving view is now just inactive
                    if (enteringView.state !== STATE_REMOVE_AFTER_TRANS) {
                        enteringView.state = STATE_ACTIVE;
                    }
                    if (leavingView.state !== STATE_REMOVE_AFTER_TRANS) {
                        leavingView.state = STATE_INACTIVE;
                    }
                    // only need to do all this clean up if the transition
                    // completed, otherwise nothing actually changed
                    // destroy all of the views that come after the active view
                    this._cleanup();
                    // make sure only this entering view and PREVIOUS view are the
                    // only two views that are not display:none
                    // do not make any changes to the stack's current visibility
                    // if there is an overlay somewhere in the stack
                    leavingView = this.getPrevious(enteringView);
                    if (this.hasOverlay()) {
                        // ensure the entering view is showing
                        enteringView.domShow(true, this._renderer);
                    } else {
                        // only possibly hide a view if there are no overlays in the stack
                        this._views.forEach(function (view) {
                            var shouldShow = view === enteringView || view === leavingView;
                            view.domShow(shouldShow, _this9._renderer);
                        });
                    }
                    // this check only needs to happen once, which will add the css
                    // class to the nav when it's finished its first transition
                    if (!this._init) {
                        this._init = true;
                    }
                } else {
                    // this transition has not completed, meaning the
                    // entering view did not end up as the active view
                    // this would happen when swipe to go back started
                    // but the user did not complete the swipe and the
                    // what was the active view stayed as the active view
                    leavingView.state = STATE_ACTIVE;
                    enteringView.state = STATE_INACTIVE;
                }
                // check if there is a parent actively transitioning
                var transitionEndTime = this._getLongestTrans(Date.now());
                // if transitionEndTime is greater than 0, there is a parent transition occurring
                // so delegate enabling the app to the parent.  If it <= 0, go ahead and enable the app
                if (transitionEndTime <= 0) {
                    this._app && this._app.setEnabled(true);
                }
                this.setTransitioning(false);
                if (direction !== null && hasCompleted && !this.isPortal) {
                    // notify router of the state change if a direction was provided
                    // multiple routers can exist and each should be notified
                    this.routers.forEach(function (router) {
                        router.stateChange(direction, enteringView);
                    });
                }
                // see if we should add the swipe back gesture listeners or not
                this._sbCheck();
                if (this._portal) {
                    this._portal._views.forEach(function (view) {
                        if (view.data && view.data.dismissOnPageChange) {
                            view.dismiss();
                        }
                    });
                }
            } else {
                // darn, so this wasn't the most recent transition
                // so while this one did end, there's another more recent one
                // still going on. Because a new transition is happening,
                // then this entering view isn't actually going to be the active
                // one, so only update the state to active/inactive if the state
                // wasn't already updated somewhere else during its transition
                if (enteringView.state === STATE_TRANS_ENTER) {
                    enteringView.state = STATE_INACTIVE;
                }
                if (leavingView.state === STATE_TRANS_LEAVE) {
                    leavingView.state = STATE_INACTIVE;
                }
            }
        }
        /**
         *@private
         * This method is just a wrapper to the Transition function of same name
         * to make it easy/possible to mock the method call by overriding the function.
         * In testing we don't want to actually do the animation, we want to return a stub instead
         */

    }, {
        key: '_createTrans',
        value: function _createTrans(enteringView, leavingView, transitionOpts) {
            return __WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].createTransition(enteringView, leavingView, transitionOpts);
        }
    }, {
        key: '_cleanup',
        value: function _cleanup() {
            var _this10 = this;

            // ok, cleanup time!! Destroy all of the views that are
            // INACTIVE and come after the active view
            var activeViewIndex = this.indexOf(this.getActive());
            var destroys = this._views.filter(function (v) {
                return v.state === STATE_REMOVE_AFTER_TRANS;
            });
            for (var i = activeViewIndex + 1; i < this._views.length; i++) {
                if (this._views[i].state === STATE_INACTIVE) {
                    destroys.push(this._views[i]);
                }
            }
            // all pages being destroyed should be removed from the list of
            // pages and completely removed from the dom
            destroys.forEach(function (view) {
                _this10._views.splice(_this10.indexOf(view), 1);
                view.destroy();
            });
            // if any z-index goes under 0, then reset them all
            var shouldResetZIndex = this._views.some(function (v) {
                return v.zIndex < 0;
            });
            if (shouldResetZIndex) {
                this._views.forEach(function (view) {
                    view.setZIndex(view.zIndex + INIT_ZINDEX + 1, _this10._renderer);
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: 'getActiveChildNav',
        value: function getActiveChildNav() {
            return this._children[this._children.length - 1];
        }
        /**
         * @private
         */

    }, {
        key: 'registerChildNav',
        value: function registerChildNav(nav) {
            this._children.push(nav);
        }
        /**
         * @private
         */

    }, {
        key: 'unregisterChildNav',
        value: function unregisterChildNav(nav) {
            var index = this._children.indexOf(nav);
            if (index > -1) {
                this._children.splice(index, 1);
            }
        }
        /**
         * @private
         */

    }, {
        key: 'ngOnDestroy',
        value: function ngOnDestroy() {
            for (var i = this._views.length - 1; i >= 0; i--) {
                this._views[i].destroy();
            }
            this._views.length = 0;
            if (this.parent && this.parent.unregisterChildNav) {
                this.parent.unregisterChildNav(this);
            }
        }
        /**
         * @private
         */

    }, {
        key: 'loadPage',
        value: function loadPage(view, viewport, opts, done) {
            var _this11 = this;

            if (!viewport || !view.componentType) {
                return;
            }
            // TEMPORARY: automatically set selector w/ dah reflector
            // TODO: use componentFactory.create once fixed
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__config_bootstrap__["addSelector"])(view.componentType, 'ion-page');
            this._compiler.resolveComponent(view.componentType).then(function (componentFactory) {
                // add more providers to just this page
                var componentProviders = __WEBPACK_IMPORTED_MODULE_0__angular_core__["ReflectiveInjector"].resolve([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["provide"])(NavController, { useValue: _this11 }), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_8__view_controller__["a" /* ViewController */], { useValue: view }), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_5__nav_params__["a" /* NavParams */], { useValue: view.getNavParams() })]);
                var childInjector = __WEBPACK_IMPORTED_MODULE_0__angular_core__["ReflectiveInjector"].fromResolvedProviders(componentProviders, _this11._viewport.parentInjector);
                var componentRef = componentFactory.create(childInjector, null, null);
                viewport.insert(componentRef.hostView, viewport.length);
                // a new ComponentRef has been created
                // set the ComponentRef's instance to its ViewController
                view.setInstance(componentRef.instance);
                // the component has been loaded, so call the view controller's loaded method to load any dependencies into the dom
                view.loaded(function () {
                    // the ElementRef of the actual ion-page created
                    var pageElementRef = componentRef.location;
                    // remember the ChangeDetectorRef for this ViewController
                    view.setChangeDetector(componentRef.changeDetectorRef);
                    // remember the ElementRef to the ion-page elementRef that was just created
                    view.setPageRef(pageElementRef);
                    // auto-add page css className created from component JS class name
                    var cssClassName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["pascalCaseToDashCase"])(view.componentType.name);
                    _this11._renderer.setElementClass(pageElementRef.nativeElement, cssClassName, true);
                    view.onDestroy(function () {
                        // ensure the element is cleaned up for when the view pool reuses this element
                        _this11._renderer.setElementAttribute(pageElementRef.nativeElement, 'class', null);
                        _this11._renderer.setElementAttribute(pageElementRef.nativeElement, 'style', null);
                        componentRef.destroy();
                    });
                    // our job is done here
                    done(view);
                });
            });
        }
        /**
         * @private
         */

    }, {
        key: 'swipeBackStart',
        value: function swipeBackStart() {
            // default the direction to "back"
            var opts = {
                direction: 'back',
                progressAnimation: true
            };
            // figure out the states of each view in the stack
            var leavingView = this._remove(this._views.length - 1, 1);
            if (leavingView) {
                opts.animation = leavingView.getTransitionName(opts.direction);
                // get the view thats ready to enter
                var enteringView = this.getByState(STATE_INIT_ENTER);
                // start the transition, fire callback when done...
                this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                    // swipe back has finished!!
                    console.debug('swipeBack, hasCompleted', hasCompleted);
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: 'swipeBackProgress',
        value: function swipeBackProgress(stepValue) {
            if (this._trans && this._sbGesture) {
                // continue to disable the app while actively dragging
                this._app.setEnabled(false, 4000);
                this.setTransitioning(true, 4000);
                // set the transition animation's progress
                this._trans.progressStep(stepValue);
            }
        }
        /**
         * @private
         */

    }, {
        key: 'swipeBackEnd',
        value: function swipeBackEnd(shouldComplete, currentStepValue) {
            if (this._trans && this._sbGesture) {
                // the swipe back gesture has ended
                this._trans.progressEnd(shouldComplete, currentStepValue);
            }
        }
        /**
         * @private
         */

    }, {
        key: '_sbCheck',
        value: function _sbCheck() {
            var _this12 = this;

            if (this._sbEnabled) {
                // this nav controller can have swipe to go back
                if (!this._sbGesture) {
                    // create the swipe back gesture if we haven't already
                    var opts = {
                        edge: 'left',
                        threshold: this._sbThreshold
                    };
                    var menuCtrl = this._app.getAppInjector().get(__WEBPACK_IMPORTED_MODULE_4__menu_menu_controller__["a" /* MenuController */]);
                    this._sbGesture = new __WEBPACK_IMPORTED_MODULE_6__swipe_back__["a" /* SwipeBackGesture */](this.getNativeElement(), opts, this, menuCtrl);
                }
                if (this.canSwipeBack()) {
                    // it is be possible to swipe back
                    if (!this._sbGesture.isListening) {
                        this._zone.runOutsideAngular(function () {
                            // start listening if it's not already
                            console.debug('swipeBack gesture, listen');
                            _this12._sbGesture.listen();
                        });
                    }
                } else if (this._sbGesture.isListening) {
                    // it should not be possible to swipe back
                    // but the gesture is still listening
                    console.debug('swipeBack gesture, unlisten');
                    this._sbGesture.unlisten();
                }
            }
        }
        /**
         * If it's possible to use swipe back or not. If it's not possible
         * to go back, or swipe back is not enabled, then this will return `false`.
         * If it is possible to go back, and swipe back is enabled, then this
         * will return `true`.
         * @returns {boolean}
         */

    }, {
        key: 'canSwipeBack',
        value: function canSwipeBack() {
            return this._sbEnabled && !this.isTransitioning() && this._app.isEnabled() && this.canGoBack();
        }
        /**
         * Returns `true` if there's a valid previous page that we can pop
         * back to. Otherwise returns `false`.
         * @returns {boolean}
         */

    }, {
        key: 'canGoBack',
        value: function canGoBack() {
            var activeView = this.getActive();
            if (activeView) {
                return activeView.enableBack();
            }
            return false;
        }
        /**
         * Returns if the nav controller is actively transitioning or not.
         * @return {boolean}
         */

    }, {
        key: 'isTransitioning',
        value: function isTransitioning() {
            return this._trnsTime > Date.now();
        }
        /**
         * @private
         */

    }, {
        key: 'setTransitioning',
        value: function setTransitioning(isTransitioning) {
            var fallback = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

            this._trnsTime = isTransitioning ? Date.now() + fallback : 0;
        }
        /**
         * @private
         * This method traverses the tree of parents upwards
         * and looks at the time the transition ends (if it's transitioning)
         * and returns the value that is the furthest into the future
         * thus giving us the longest transition duration
         */

    }, {
        key: '_getLongestTrans',
        value: function _getLongestTrans(now) {
            var parentNav = this.parent;
            var transitionEndTime = -1;
            while (parentNav) {
                if (parentNav._trnsTime > transitionEndTime) {
                    transitionEndTime = parentNav._trnsTime;
                }
                parentNav = parentNav.parent;
            }
            // only check if the transitionTime is greater than the current time once
            return transitionEndTime > 0 && transitionEndTime > now ? transitionEndTime : 0;
        }
        /**
         * @private
         */

    }, {
        key: 'hasOverlay',
        value: function hasOverlay() {
            for (var i = this._views.length - 1; i >= 0; i--) {
                if (this._views[i].isOverlay) {
                    return true;
                }
            }
            return false;
        }
        /**
         * @private
         */

    }, {
        key: 'getByState',
        value: function getByState(state) {
            for (var i = this._views.length - 1; i >= 0; i--) {
                if (this._views[i].state === state) {
                    return this._views[i];
                }
            }
            return null;
        }
        /**
         * @param {number} index  The index of the page to get.
         * @returns {ViewController} Returns the view controller that matches the given index.
         */

    }, {
        key: 'getByIndex',
        value: function getByIndex(index) {
            return index < this._views.length && index > -1 ? this._views[index] : null;
        }
        /**
         * @returns {ViewController} Returns the active page's view controller.
         */

    }, {
        key: 'getActive',
        value: function getActive() {
            return this.getByState(STATE_ACTIVE);
        }
        /**
         * @param {ViewController} view
         * @returns {boolean}
         */

    }, {
        key: 'isActive',
        value: function isActive(view) {
            return !!(view && view.state === STATE_ACTIVE);
        }
        /**
         * Returns the view controller which is before the given view controller.
         * @param {ViewController} view
         * @returns {viewController}
         */

    }, {
        key: 'getPrevious',
        value: function getPrevious(view) {
            return this.getByIndex(this.indexOf(view) - 1);
        }
        /**
         * Returns the first view controller in this nav controller's stack.
         * @returns {ViewController}
         */

    }, {
        key: 'first',
        value: function first() {
            return this._views.length ? this._views[0] : null;
        }
        /**
         * Returns the last page in this nav controller's stack.
         * @returns {ViewController}
         */

    }, {
        key: 'last',
        value: function last() {
            return this._views.length ? this._views[this._views.length - 1] : null;
        }
        /**
         * Returns the index number of the given view controller.
         * @param {ViewController} view
         * @returns {number}
         */

    }, {
        key: 'indexOf',
        value: function indexOf(view) {
            return this._views.indexOf(view);
        }
        /**
         * Returns the number of views in this nav controller.
         * @returns {number} The number of views in this stack, including the current view.
         */

    }, {
        key: 'length',
        value: function length() {
            return this._views.length;
        }
        /**
         * @private
         */

    }, {
        key: 'isSwipeBackEnabled',
        value: function isSwipeBackEnabled() {
            return this._sbEnabled;
        }
        /**
         * Returns the root `NavController`.
         * @returns {NavController}
         */

    }, {
        key: 'registerRouter',

        /**
         * @private
         */
        value: function registerRouter(router) {
            this.routers.push(router);
        }
        /**
         * @private
         */

    }, {
        key: '_incId',
        value: function _incId(view) {
            view.id = this.id + '-' + ++this._ids;
        }
        /**
         * @private
         */

    }, {
        key: '_setZIndex',
        value: function _setZIndex(enteringView, leavingView, direction) {
            if (enteringView) {
                // get the leaving view, which could be in various states
                if (!leavingView || !leavingView.isLoaded()) {
                    // the leavingView is a mocked view, either we're
                    // actively transitioning or it's the initial load
                    var previousView = this.getPrevious(enteringView);
                    if (previousView && previousView.isLoaded()) {
                        // we found a better previous view to reference
                        // use this one instead
                        enteringView.setZIndex(previousView.zIndex + 1, this._renderer);
                    } else {
                        // this is the initial view
                        enteringView.setZIndex(this.isPortal ? PORTAL_ZINDEX : INIT_ZINDEX, this._renderer);
                    }
                } else if (direction === 'back') {
                    // moving back
                    enteringView.setZIndex(leavingView.zIndex - 1, this._renderer);
                } else {
                    // moving forward
                    enteringView.setZIndex(leavingView.zIndex + 1, this._renderer);
                }
            }
        }
    }, {
        key: 'rootNav',
        get: function get() {
            var nav = this;
            while (nav.parent) {
                nav = nav.parent;
            }
            return nav;
        }
    }]);

    return NavController;
}(__WEBPACK_IMPORTED_MODULE_2__ion__["a" /* Ion */]);



var STATE_ACTIVE = 'active';
var STATE_INACTIVE = 'inactive';
var STATE_INIT_ENTER = 'init_enter';
var STATE_INIT_LEAVE = 'init_leave';
var STATE_TRANS_ENTER = 'trans_enter';
var STATE_TRANS_LEAVE = 'trans_leave';
var STATE_REMOVE = 'remove';
var STATE_REMOVE_AFTER_TRANS = 'remove_after_trans';
var STATE_FORCE_ACTIVE = 'force_active';
var INIT_ZINDEX = 100;
var PORTAL_ZINDEX = 9999;
var ctrlIds = -1;

/***/ },
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var platform_browser_1 = __webpack_require__(97);
var click_block_1 = __webpack_require__(510);
var config_1 = __webpack_require__(16);
var platform_1 = __webpack_require__(72);
var App = function () {
    function App(_config, _clickBlock, _platform) {
        this._config = _config;
        this._clickBlock = _clickBlock;
        this._platform = _platform;
        this._disTime = 0;
        this._scrollTime = 0;
        this._title = '';
        this._titleSrv = new platform_browser_1.Title();
        this._rootNav = null;
        // listen for hardware back button events
        // register this back button action with a default priority
        _platform.registerBackButtonAction(this.navPop.bind(this));
    }
    /**
     * Sets the document title.
     * @param {string} val  Value to set the document title to.
     */
    App.prototype.setTitle = function (val) {
        if (val !== this._title) {
            this._title = val;
            this._titleSrv.setTitle(val);
        }
    };
    /**
     * @private
     * Sets if the app is currently enabled or not, meaning if it's
     * available to accept new user commands. For example, this is set to `false`
     * while views transition, a modal slides up, an action-sheet
     * slides up, etc. After the transition completes it is set back to `true`.
     * @param {boolean} isEnabled
     * @param {number} duration  When `isEnabled` is set to `false`, this argument
     * is used to set the maximum number of milliseconds that app will wait until
     * it will automatically enable the app again. It's basically a fallback incase
     * something goes wrong during a transition and the app wasn't re-enabled correctly.
     */
    App.prototype.setEnabled = function (isEnabled, duration) {
        if (duration === void 0) {
            duration = 700;
        }
        this._disTime = isEnabled ? 0 : Date.now() + duration;
        var CLICK_BLOCK_BUFFER_IN_MILLIS = 64;
        if (this._clickBlock) {
            if (isEnabled || duration <= 32) {
                // disable the click block if it's enabled, or the duration is tiny
                this._clickBlock.show(false, 0);
            } else {
                // show the click block for duration + some number
                this._clickBlock.show(true, duration + CLICK_BLOCK_BUFFER_IN_MILLIS);
            }
        }
    };
    /**
     * @private
     * Boolean if the app is actively enabled or not.
     * @return {boolean}
     */
    App.prototype.isEnabled = function () {
        return this._disTime < Date.now();
    };
    /**
     * @private
     */
    App.prototype.setScrolling = function () {
        this._scrollTime = Date.now();
    };
    /**
     * Boolean if the app is actively scrolling or not.
     * @return {boolean}
     */
    App.prototype.isScrolling = function () {
        return this._scrollTime + 64 > Date.now();
    };
    /**
     * @private
     */
    App.prototype.getActiveNav = function () {
        var nav = this._rootNav || null;
        var activeChildNav;
        while (nav) {
            activeChildNav = nav.getActiveChildNav();
            if (!activeChildNav) {
                break;
            }
            nav = activeChildNav;
        }
        return nav;
    };
    /**
     * @private
     */
    App.prototype.getRootNav = function () {
        return this._rootNav;
    };
    /**
     * @private
     */
    App.prototype.setRootNav = function (nav) {
        this._rootNav = nav;
    };
    /**
     * @private
     */
    App.prototype.navPop = function () {
        // function used to climb up all parent nav controllers
        function navPop(nav) {
            if (nav) {
                if (nav.length && nav.length() > 1) {
                    // this nav controller has more than one view
                    // pop the current view on this nav and we're done here
                    console.debug('app, goBack pop nav');
                    return nav.pop();
                } else if (nav.previousTab) {
                    // FYI, using "nav instanceof Tabs" throws a Promise runtime error for whatever reason, idk
                    // this is a Tabs container
                    // see if there is a valid previous tab to go to
                    var prevTab = nav.previousTab(true);
                    if (prevTab) {
                        console.debug('app, goBack previous tab');
                        nav.select(prevTab);
                        return Promise.resolve();
                    }
                }
                // try again using the parent nav (if there is one)
                return navPop(nav.parent);
            }
            // nerp, never found nav that could pop off a view
            return null;
        }
        // app must be enabled and there must be a
        // root nav controller for go back to work
        if (this._rootNav && this.isEnabled()) {
            // first check if the root navigation has any overlays
            // opened in it's portal, like alert/actionsheet/popup
            var portal = this._rootNav.getPortal && this._rootNav.getPortal();
            if (portal && portal.length() > 0) {
                // there is an overlay view in the portal
                // let's pop this one off to go back
                console.debug('app, goBack pop overlay');
                return portal.pop();
            }
            // next get the active nav, check itself and climb up all
            // of its parent navs until it finds a nav that can pop
            var navPromise = navPop(this.getActiveNav());
            if (navPromise === null) {
                // no views to go back to
                // let's exit the app
                if (this._config.getBoolean('navExitApp', true)) {
                    console.debug('app, goBack exitApp');
                    this._platform.exitApp();
                }
            } else {
                return navPromise;
            }
        }
        return Promise.resolve();
    };
    /**
     * @private
     */
    App.prototype.getRegisteredComponent = function (cls) {
        // deprecated warning: added 2016-04-28, beta7
        console.warn('Using app.getRegisteredComponent() to query components has been deprecated. ' + 'Please use Angular\'s ViewChild annotation instead:\n\nhttp://learnangular2.com/viewChild/');
    };
    /**
     * @private
     */
    App.prototype.getComponent = function (id) {
        // deprecated warning: added 2016-04-28, beta7
        console.warn('Using app.getComponent() to query components has been deprecated. ' + 'Please use Angular\'s ViewChild annotation instead:\n\nhttp://learnangular2.com/viewChild/');
    };
    /**
     * Set the global app injector that contains references to all of the instantiated providers
     * @param injector
     */
    App.prototype.setAppInjector = function (injector) {
        this._appInjector = injector;
    };
    /**
     * Get an instance of the global app injector that contains references to all of the instantiated providers
     * @returns {Injector}
     */
    App.prototype.getAppInjector = function () {
        return this._appInjector;
    };
    /** @nocollapse */
    App.decorators = [{ type: core_1.Injectable }];
    /** @nocollapse */
    App.ctorParameters = [{ type: config_1.Config }, { type: click_block_1.ClickBlock }, { type: platform_1.Platform }];
    return App;
}();
exports.App = App;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var dom_1 = __webpack_require__(17);
var ids = 0;
/**
 * Base class for all Ionic components. Exposes some common functionality
 * that all Ionic components need, such as accessing underlying native elements and
 * sending/receiving app-level events.
 */
var Ion = function () {
    function Ion(elementRef) {
        this.elementRef = elementRef;
        this._id = 'i' + ids++;
    }
    Ion.prototype.getElementRef = function () {
        return this.elementRef;
    };
    Ion.prototype.getNativeElement = function () {
        return this.elementRef.nativeElement;
    };
    Ion.prototype.getDimensions = function () {
        return dom_1.getDimensions(this.elementRef.nativeElement, this._id);
    };
    Ion.prototype.width = function () {
        return dom_1.getDimensions(this.elementRef.nativeElement, this._id).width;
    };
    Ion.prototype.height = function () {
        return dom_1.getDimensions(this.elementRef.nativeElement, this._id).height;
    };
    Ion.prototype.ngOnDestroy = function () {
        dom_1.clearDimensions(this._id);
    };
    return Ion;
}();
exports.Ion = Ion;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Ion; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}


var ids = 0;
/**
 * Base class for all Ionic components. Exposes some common functionality
 * that all Ionic components need, such as accessing underlying native elements and
 * sending/receiving app-level events.
 */
var Ion = function () {
    function Ion(elementRef) {
        _classCallCheck(this, Ion);

        this.elementRef = elementRef;
        this._id = 'i' + ids++;
    }

    _createClass(Ion, [{
        key: 'getElementRef',
        value: function getElementRef() {
            return this.elementRef;
        }
    }, {
        key: 'getNativeElement',
        value: function getNativeElement() {
            return this.elementRef.nativeElement;
        }
    }, {
        key: 'getDimensions',
        value: function getDimensions() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["getDimensions"])(this.elementRef.nativeElement, this._id);
        }
    }, {
        key: 'width',
        value: function width() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["getDimensions"])(this.elementRef.nativeElement, this._id).width;
        }
    }, {
        key: 'height',
        value: function height() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["getDimensions"])(this.elementRef.nativeElement, this._id).height;
        }
    }, {
        key: 'ngOnDestroy',
        value: function ngOnDestroy() {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["clearDimensions"])(this._id);
        }
    }]);

    return Ion;
}();

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__button_button__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__icon_icon__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__item_item_reorder__ = __webpack_require__(477);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__label_label__ = __webpack_require__(316);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Item; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return ItemContent; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * @name Item
 * @description
 * An item can contain text, images, and anything else. Generally it is placed in a list with other
 * items. It can easily be swiped, deleted, reordered, edited, and more. An item is only required to
 * be in a [List](../../list/List) if manipulating the item via gestures is required. It requires an
 * [ItemSliding](../ItemSliding) wrapper element in order to be swiped.
 *
 *
 * ## Common Usage
 * There are a few elements that are considered items, but not all of them are styled to look the same.
 * The basic item can be written as an `<ion-item>` element or it can be added to any element by adding
 * `ion-item` as an attribute. List headers and item dividers, although styled differently, are also items
 * and can be written as `<ion-list-header>` and `<ion-item-divider>`, respectively.
 *
 * ### As an Element
 * A basic item should be written as a `<ion-item>` element when it is not clickable.
 *
 * ```html
 * <ion-item>
 *   Item
 * </ion-item>
 * ```
 *
 * A list header should be written as `<ion-list-header>`.
 *
 * ```html
 * <ion-list-header>
 *   List Header
 * </ion-list-header>
 * ```
 *
 * An item divider should be written as `<ion-item-divider>`.
 *
 * ```html
 * <ion-item-divider>
 *   Item Divider
 * </ion-item-divider>
 * ```
 *
 * ### As an Attribute
 * The attribute `ion-item` should be added to a `<button>` when the item can be clicked or tapped. It
 * should be added to an `<a>` element when the item needs to contain a `href`. It can be added as an
 * attribute to any element to take on the item styling.
 *
 * ```html
 * <button ion-item (click)="buttonClick()">
 *   Button Item
 * </button>
 *
 * <a ion-item href="https://www.ionicframework.com">
 *   Anchor Item
 * </a>
 * ```
 *
 * Note: do not add `ion-item` as an attribute to an `<ion-list-header>` or `<ion-item-divider>` element
 * as they are already items and their styling will be changed to look like a basic item.
 *
 * ## Detail Arrows
 * By default, `<button>` and `<a>` elements with the `ion-item` attribute will display a right arrow icon
 * on `ios` mode. To hide the right arrow icon on either of these elements, add the `detail-none` attribute
 * to the item. To show the right arrow icon on an element that doesn't display is naturally, add the
 * `detail-push` attribute to the item.
 *
 * ```html
 * <ion-item detail-push>
 *   Item with Detail Arrow
 * </ion-item>
 *
 * <button ion-item (click)="buttonClick()">
 *   Button Item with Detail Arrow
 * </button>
 *
 * <a ion-item detail-none href="https://www.ionicframework.com">
 *   Anchor Item with no Detail Arrow
 * </a>
 * ```
 *
 * This feature is not enabled by default for `md` and `wp` modes, but it can be enabled by setting the
 * Sass variables `$item-md-detail-push-show` and `$item-wp-detail-push-show`, respectively, to `true`.
 * It can also be disabled for ios by setting `$item-ios-detail-push-show` to `false`. See the
 * [theming documentation](http://ionicframework.com/docs/v2/theming/overriding-ionic-variables/) for
 * more information on overriding Sass variables.
 *
 *
 * ## Item Placement
 * Items rely heavily on content projection to position content. The item grabs content based on the
 * element or attribute and positions it that way. This logic makes it possible to write a complex
 * item with simple, understandable markup without having to worry about styling and positioning
 * the elements.
 *
 * The below chart details the attributes item looks for and where it will place the element with
 * that attribute inside of the item:
 *
 *  | Attribute      | Description                                                                                          |
 *  |----------------|----------------------------------------------------------------------------------------------------- |
 *  | `item-left`    | Placed to the left of all other elements, outside of the inner item.                                 |
 *  | `item-right`   | Placed to the right of all other elements, inside of the inner item, outside of the input wrapper.   |
 *  | `item-content` | Placed to the right of any `ion-label`, inside of the input wrapper.                                 |
 *
 * ### Checkboxes, Radios and Toggles
 * [Checkboxes](../../checkbox/Checkbox) are positioned in the same place as the `item-left` attribute.
 * [Radios](../../radio/RadioButton) and [Toggles](../../toggle/Toggle) are positioned in the same place
 * as the `item-right` attribute. All of these components can be positioned differently by adding the
 * `item-left` or `item-right` attribute.
 *
 * ### Content and Inputs
 * A [Label](../../label/Label) is placed inside of the item to the left of all content and inputs. The
 * following components are all placed in the same position as the `item-content` attribute: [Select](../../select/Select),
 * [Input](../../input/Input), [TextArea](../../input/TextArea), [DateTime](../../datetime/DateTime), and
 * [Range](../../range/Range).
 *
 * Any element directly placed inside of an `<ion-item>` that does not have one of the previously mentioned
 * attributes and isn't one of the above elements will be placed inside of a [Label](../../label/Label).
 *
 *
 * @usage
 *
 * ```html
 * <ion-list>
 *
 *   <ion-list-header>
 *     Header
 *   </ion-list-header>
 *
 *   <ion-item>
 *     Item
 *   </ion-item>
 *
 *   <ion-item detail-push>
 *     Item with Detail Arrow
 *   </ion-item>
 *
 *   <button ion-item (click)="buttonClick()">
 *     Button Item
 *   </button>
 *
 *   <ion-item-divider>
 *     Item Divider
 *   </ion-item-divider>
 *
 *   <button ion-item detail-none (click)="buttonClick()">
 *     Button Item with no Detail Arrow
 *   </button>
 *
 *   <a ion-item href="https://www.ionicframework.com">
 *     Anchor Item
 *   </a>
 *
 *   <ion-item no-lines>
 *     Item with no border
 *   </ion-item>
 *
 *   <ion-item text-wrap>
 *     Multiline text that should wrap when it is too long
 *     to fit on one line in the item.
 *   </ion-item>
 *
 * </ion-list>
 * ```
 *
 *
 * @advanced
 *
 * ```html
 * <ion-list>
 *
 *   <!-- List header with buttons on each side -->
 *   <ion-list-header>
 *     <button item-left (click)="buttonClick()">Button</button>
 *     List Header
 *     <button outline item-right (click)="buttonClick()">Outline</button>
 *   </ion-list-header>
 *
 *   <!-- Loops through and creates multiple items -->
 *   <ion-item *ngFor="let item of items">
 *     Item {% raw %}{{item}}{% endraw %}
 *   </ion-item>
 *
 *   <!-- Button item with an icon on the left -->
 *   <button ion-item>
 *     <ion-icon name="star" item-left></ion-icon>
 *     Button Item
 *   </button>
 *
 *   <!-- Item with a label and content -->
 *   <ion-item>
 *     <ion-label>
 *       Item Label
 *     </ion-label>
 *     <div item-content>
 *       Item Content next to the label
 *     </div>
 *   </ion-item>
 *
 *   <!-- Item with left and right buttons -->
 *   <ion-item>
 *     <button item-left (click)="buttonClick()">Button</button>
 *     Item
 *     <button outline item-right (click)="buttonClick()">Outline</button>
 *   </ion-item>
 *
 *   <!-- Item divider with a right button -->
 *   <ion-item-divider>
 *     Item Divider
 *     <button item-right>Button</button>
 *   </ion-item-divider>
 *
 *   <!-- Disabled button item with left and right buttons -->
 *   <button ion-item disabled>
 *     <button item-left (click)="buttonClick()">
 *       <ion-icon name="home"></ion-icon>
 *       Left Icon
 *     </button>
 *     Disabled Button Item
 *     <button outline item-right (click)="buttonClick()">
 *       <ion-icon name="star"></ion-icon>
 *       Left Icon
 *     </button>
 *   </button>
 *
 *   <!-- Item with an avatar on the left and button on the right -->
 *   <ion-item>
 *     <ion-avatar item-left>
 *       <img src="img/my-avatar.png">
 *     </ion-avatar>
 *     Avatar Item
 *     <button outline item-right>View</button>
 *   </ion-item>
 *
 *   <!-- Item with a thumbnail on the right -->
 *   <ion-item>
 *     <h2>Item</h2>
 *     <p>Item Paragraph</p>
 *     <ion-thumbnail item-right>
 *       <img src="img/my-thumbnail.png">
 *     </ion-thumbnail>
 *   </ion-item>
 *
 *   <!-- Sliding item -->
 *   <ion-item-sliding>
 *     <ion-item>
 *       Item
 *     </ion-item>
 *     <ion-item-options>
 *       <button primary (click)="archive()">Archive</button>
 *     </ion-item-options>
 *   </ion-item-sliding>
 *
 * </ion-list>
 * ```
 *
 *
 * @demo /docs/v2/demos/item/
 * @see {@link /docs/v2/components#lists List Component Docs}
 * @see {@link ../../list/List List API Docs}
 * @see {@link ../ItemSliding ItemSliding API Docs}
 */
var Item = function () {
    function Item(form, _renderer, _elementRef) {
        _classCallCheck(this, Item);

        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._ids = -1;
        this._inputs = [];
        this._viewLabel = true;
        /**
         * @private
         */
        this.labelId = null;
        this.id = form.nextId().toString();
        _elementRef.nativeElement['$ionComponent'] = this;
    }
    /**
     * @private
     */

    _createClass(Item, [{
        key: "registerInput",
        value: function registerInput(type) {
            this._inputs.push(type);
            return this.id + '-' + ++this._ids;
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            if (this._viewLabel && this._inputs.length) {
                var labelText = this.getLabelText().trim();
                this._viewLabel = labelText.length > 0;
            }
            if (this._inputs.length > 1) {
                this.setCssClass('item-multiple-inputs', true);
            }
        }
        /**
         * @private
         */

    }, {
        key: "setCssClass",
        value: function setCssClass(cssClass, shouldAdd) {
            this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
        }
        /**
         * @private
         */

    }, {
        key: "setCssStyle",
        value: function setCssStyle(property, value) {
            this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
        }
        /**
         * @private
         */

    }, {
        key: "getLabelText",
        value: function getLabelText() {
            return this._label ? this._label.text : '';
        }
        /**
         * @private
         */

    }, {
        key: "getNativeElement",

        /**
         * @private
         */
        value: function getNativeElement() {
            return this._elementRef.nativeElement;
        }
        /**
         * @private
         */

    }, {
        key: "height",
        value: function height() {
            return this._elementRef.nativeElement.offsetHeight;
        }
    }, {
        key: "contentLabel",
        set: function set(label) {
            if (label) {
                this._label = label;
                this.labelId = label.id = 'lbl-' + this.id;
                if (label.type) {
                    this.setCssClass('item-label-' + label.type, true);
                }
                this._viewLabel = false;
            }
        }
        /**
         * @private
         */

    }, {
        key: "viewLabel",
        set: function set(label) {
            if (!this._label) {
                this._label = label;
            }
        }
        /**
         * @private
         */

    }, {
        key: "_buttons",
        set: function set(buttons) {
            buttons.toArray().forEach(function (button) {
                // Don't add the item-button class if the user specifies
                // a different size button
                if (!button.isItem && !button._size) {
                    button.addClass('item-button');
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: "_icons",
        set: function set(icons) {
            icons.toArray().forEach(function (icon) {
                icon.addClass('item-icon');
            });
        }
    }]);

    return Item;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Item.prototype, "index", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"])(__WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */]), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */]) === 'function' && _a || Object), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */]) === 'function' && _b || Object])], Item.prototype, "contentLabel", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */]), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */]) === 'function' && _c || Object), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__label_label__["a" /* Label */]) === 'function' && _d || Object])], Item.prototype, "viewLabel", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(__WEBPACK_IMPORTED_MODULE_2__button_button__["a" /* Button */]), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Item.prototype, "_buttons", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(__WEBPACK_IMPORTED_MODULE_4__icon_icon__["a" /* Icon */]), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Item.prototype, "_icons", null);
Item = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-list-header,ion-item,[ion-item],ion-item-divider',
    template: '<ng-content select="[item-left],ion-checkbox:not([item-right])"></ng-content>' + '<div class="item-inner">' + '<div class="input-wrapper">' + '<ng-content select="ion-label"></ng-content>' + '<ion-label *ngIf="_viewLabel">' + '<ng-content></ng-content>' + '</ion-label>' + '<ng-content select="ion-select,ion-input,ion-textarea,ion-datetime,ion-range,[item-content]"></ng-content>' + '</div>' + '<ng-content select="[item-right],ion-radio,ion-toggle"></ng-content>' + '<ion-reorder></ion-reorder>' + '</div>' + '<ion-button-effect></ion-button-effect>',
    directives: [__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return __WEBPACK_IMPORTED_MODULE_5__item_item_reorder__["a" /* ItemReorder */];
    }), __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]],
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__util_form__["Form"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _g || Object])], Item);
/**
 * @private
 */
var ItemContent = function ItemContent() {
    _classCallCheck(this, ItemContent);
};
ItemContent = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-item,[ion-item]',
    host: {
        'class': 'item'
    }
}), __metadata('design:paramtypes', [])], ItemContent);
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "Platform", function() { return Platform; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}




/**
 * @name Platform
 * @description
 * The Platform service can be used to get information about your current device.
 * You can get all of the platforms associated with the device using the [platforms](#platforms)
 * method, including whether the app is being viewed from a tablet, if it's
 * on a mobile device or browser, and the exact platform (iOS, Android, etc).
 * You can also get the orientation of the device, if it uses right-to-left
 * language direction, and much much more. With this information you can completely
 * customize your app to fit any device.
 *
 * @usage
 * ```ts
 * import {Platform} from 'ionic-angular';
 *
 * @Component({...})
 * export MyPage {
 *   constructor(platform: Platform) {
 *     this.platform = platform;
 *   }
 * }
 * ```
 * @demo /docs/v2/demos/platform/
 */
var Platform = function () {
    function Platform() {
        var _this = this;

        var platforms = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, Platform);

        this._versions = {};
        this._onResizes = [];
        this._bbActions = [];
        // Events meant to be triggered by the engine
        // **********************************************
        /**
         * @private
         */
        this.backButton = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * The pause event emits when the native platform puts the application
         * into the background, typically when the user switches to a different
         * application. This event would emit when a Cordova app is put into
         * the background, however, it would not fire on a standard web browser.
         */
        this.pause = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * The resume event emits when the native platform pulls the application
         * out from the background. This event would emit when a Cordova app comes
         * out from the background, however, it would not fire on a standard web browser.
         */
        this.resume = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._platforms = platforms;
        this._readyPromise = new Promise(function (res) {
            _this._readyResolve = res;
        });
        this.backButton.subscribe(function () {
            // the hardware back button event has been fired
            console.debug('hardware back button');
            // decide which backbutton action should run
            _this.runBackButtonAction();
        });
    }
    /**
     * @private
     */

    _createClass(Platform, [{
        key: 'setZone',
        value: function setZone(zone) {
            this.zone = zone;
        }
        // Methods
        // **********************************************
        /**
         * @returns {boolean} returns true/false based on platform.
         * @description
         * Depending on the platform the user is on, `is(platformName)` will
         * return `true` or `false`. Note that the same app can return `true`
         * for more than one platform name. For example, an app running from
         * an iPad would return `true` for the platform names: `mobile`,
         * `ios`, `ipad`, and `tablet`. Additionally, if the app was running
         * from Cordova then `cordova` would be true, and if it was running
         * from a web browser on the iPad then `mobileweb` would be `true`.
         *
         * ```
         * import {Platform} from 'ionic-angular';
         *
         * @Component({...})
         * export MyPage {
         *   constructor(platform: Platform) {
         *     this.platform = platform;
         *
         *     if (this.platform.is('ios')) {
         *       // This will only print when on iOS
         *       console.log("I'm an iOS device!");
         *     }
         *   }
         * }
         * ```
         *
         * | Platform Name   | Description                        |
         * |-----------------|------------------------------------|
         * | android         | on a device running Android.       |
         * | cordova         | on a device running Cordova.       |
         * | core            | on a desktop device.               |
         * | ios             | on a device running iOS.           |
         * | ipad            | on an iPad device.                 |
         * | iphone          | on an iPhone device.               |
         * | mobile          | on a mobile device.                |
         * | mobileweb       | in a browser on a mobile device.   |
         * | phablet         | on a phablet device.               |
         * | tablet          | on a tablet device.                |
         * | windows         | on a device running Windows.       |
         *
         * @param {string} platformName
         */

    }, {
        key: 'is',
        value: function is(platformName) {
            return this._platforms.indexOf(platformName) > -1;
        }
        /**
         * @returns {array} the array of platforms
         * @description
         * Depending on what device you are on, `platforms` can return multiple values.
         * Each possible value is a hierarchy of platforms. For example, on an iPhone,
         * it would return `mobile`, `ios`, and `iphone`.
         *
         * ```
         * import {Platform} from 'ionic-angular';
         *
         * @Component({...})
         * export MyPage {
         *   constructor(platform: Platform) {
         *     this.platform = platform;
         *
         *     // This will print an array of the current platforms
         *     console.log(this.platform.platforms());
         *   }
         * }
         * ```
         */

    }, {
        key: 'platforms',
        value: function platforms() {
            // get the array of active platforms, which also knows the hierarchy,
            // with the last one the most important
            return this._platforms;
        }
        /**
         * Returns an object containing version information about all of the platforms.
         *
         * ```
         * import {Platform} from 'ionic-angular';
         *
         * @Component({...})
         * export MyPage {
         *   constructor(platform: Platform) {
         *     this.platform = platform;
         *
         *     // This will print an object containing
         *     // all of the platforms and their versions
         *     console.log(platform.versions());
         *   }
         * }
         * ```
         *
         * @returns {object} An object containing all of the platforms and their versions.
         */

    }, {
        key: 'versions',
        value: function versions() {
            // get all the platforms that have a valid parsed version
            return this._versions;
        }
        /**
         * @private
         */

    }, {
        key: 'version',
        value: function version() {
            for (var platformName in this._versions) {
                if (this._versions[platformName]) {
                    return this._versions[platformName];
                }
            }
            return {};
        }
        /**
         * Returns a promise when the platform is ready and native functionality
         * can be called. If the app is running from within a web browser, then
         * the promise will resolve when the DOM is ready. When the app is running
         * from an application engine such as Cordova, then the promise will
         * resolve when Cordova triggers the `deviceready` event.
         *
         * The resolved value is the `readySource`, which states which platform
         * ready was used. For example, when Cordova is ready, the resolved ready
         * source is `cordova`. The default ready source value will be `dom`. The
         * `readySource` is useful if different logic should run depending on the
         * platform the app is running from. For example, only Cordova can execute
         * the status bar plugin, so the web should not run status bar plugin logic.
         *
         * ```
         * import {Component} from '@angular/core';
         * import {Platform} from 'ionic-angular';
         *
         * @Component({...})
         * export MyApp {
         *   constructor(platform: Platform) {
         *     platform.ready().then((readySource) => {
         *       console.log('Platform ready from', readySource);
         *       // Platform now ready, execute any required native code
         *     });
         *   }
         * }
         * ```
         * @returns {promise}
         */

    }, {
        key: 'ready',
        value: function ready() {
            return this._readyPromise;
        }
        /**
         * @private
         * This should be triggered by the engine when the platform is
         * ready. If there was no custom prepareReady method from the engine,
         * such as Cordova or Electron, then it uses the default DOM ready.
         */

    }, {
        key: 'triggerReady',
        value: function triggerReady(readySource) {
            var _this2 = this;

            this.zone.run(function () {
                _this2._readyResolve(readySource);
            });
        }
        /**
         * @private
         * This is the default prepareReady if it's not replaced by an engine,
         * such as Cordova or Electron. If there was no custom prepareReady
         * method from an engine then it uses the method below, which triggers
         * the platform ready on the DOM ready event, and the default resolved
         * value is `dom`.
         */

    }, {
        key: 'prepareReady',
        value: function prepareReady() {
            var _this3 = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["ready"])(function () {
                _this3.triggerReady('dom');
            });
        }
        /**
         * Set the app's language direction, which will update the `dir` attribute
         * on the app's root `<html>` element. We recommend the app's `index.html`
         * file already has the correct `dir` attribute value set, such as
         * `<html dir="ltr">` or `<html dir="rtl">`. This method is useful if the
         * direction needs to be dynamically changed per user/session.
         * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
         * @param {string} dir  Examples: `rtl`, `ltr`
         */

    }, {
        key: 'setDir',
        value: function setDir(dir, updateDocument) {
            this._dir = (dir || '').toLowerCase();
            if (updateDocument !== false) {
                document.documentElement.setAttribute('dir', dir);
            }
        }
        /**
         * Returns app's language direction.
         * We recommend the app's `index.html` file already has the correct `dir`
         * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
         * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
         * @returns {string}
         */

    }, {
        key: 'dir',
        value: function dir() {
            return this._dir;
        }
        /**
         * Returns if this app is using right-to-left language direction or not.
         * We recommend the app's `index.html` file already has the correct `dir`
         * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
         * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
         * @returns {boolean}
         */

    }, {
        key: 'isRTL',
        value: function isRTL() {
            return this._dir === 'rtl';
        }
        /**
         * Set the app's language and optionally the country code, which will update
         * the `lang` attribute on the app's root `<html>` element.
         * We recommend the app's `index.html` file already has the correct `lang`
         * attribute value set, such as `<html lang="en">`. This method is useful if
         * the language needs to be dynamically changed per user/session.
         * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
         * @param {string} language  Examples: `en-US`, `en-GB`, `ar`, `de`, `zh`, `es-MX`
         */

    }, {
        key: 'setLang',
        value: function setLang(language, updateDocument) {
            this._lang = language;
            if (updateDocument !== false) {
                document.documentElement.setAttribute('lang', language);
            }
        }
        /**
         * Returns app's language and optional country code.
         * We recommend the app's `index.html` file already has the correct `lang`
         * attribute value set, such as `<html lang="en">`.
         * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
         * @returns {string}
         */

    }, {
        key: 'lang',
        value: function lang() {
            return this._lang;
        }
        // Methods meant to be overridden by the engine
        // **********************************************
        // Provided NOOP methods so they do not error when
        // called by engines (the browser)that do not provide them
        /**
         * @private
         */

    }, {
        key: 'exitApp',
        value: function exitApp() {}
        /**
         * The back button event is triggered when the user presses the native
         * platform's back button, also referred to as the "hardware" back button.
         * This event is only used within Cordova apps running on Android and
         * Windows platforms. This event is not fired on iOS since iOS doesn't come
         * with a hardware back button in the same sense an Android or Windows device
         * does.
         *
         * Registering a hardware back button action and setting a priority allows
         * apps to control which action should be called when the hardware back
         * button is pressed. This method decides which of the registered back button
         * actions has the highest priority and should be called.
         *
         * @param {Function} callback Called when the back button is pressed,
         * if this registered action has the highest priority.
         * @param {number} priority Set the priority for this action. Only the highest priority will execute. Defaults to `0`.
         * @returns {Function} A function that, when called, will unregister
         * the its back button action.
         */

    }, {
        key: 'registerBackButtonAction',
        value: function registerBackButtonAction(fn) {
            var _this4 = this;

            var priority = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

            var action = { fn: fn, priority: priority };
            this._bbActions.push(action);
            // return a function to unregister this back button action
            return function () {
                var index = _this4._bbActions.indexOf(action);
                if (index > -1) {
                    _this4._bbActions.splice(index, 1);
                }
            };
        }
        /**
         * @private
         */

    }, {
        key: 'runBackButtonAction',
        value: function runBackButtonAction() {
            // decide which one back button action should run
            var winner = null;
            this._bbActions.forEach(function (action) {
                if (!winner || action.priority >= winner.priority) {
                    winner = action;
                }
            });
            // run the winning action if there is one
            winner && winner.fn && winner.fn();
        }
        // Getter/Setter Methods
        // **********************************************
        /**
         * @private
         */

    }, {
        key: 'setUrl',
        value: function setUrl(url) {
            this._url = url;
            this._qs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["getQuerystring"])(url);
        }
        /**
         * @private
         */

    }, {
        key: 'url',
        value: function url() {
            return this._url;
        }
        /**
         * @private
         */

    }, {
        key: 'query',
        value: function query(key) {
            return (this._qs || {})[key];
        }
        /**
         * @private
         */

    }, {
        key: 'setUserAgent',
        value: function setUserAgent(userAgent) {
            this._ua = userAgent;
        }
        /**
         * @private
         */

    }, {
        key: 'userAgent',
        value: function userAgent() {
            return this._ua || '';
        }
        /**
         * @private
         */

    }, {
        key: 'setNavigatorPlatform',
        value: function setNavigatorPlatform(navigatorPlatform) {
            this._bPlt = navigatorPlatform;
        }
        /**
         * @private
         */

    }, {
        key: 'navigatorPlatform',
        value: function navigatorPlatform() {
            return this._bPlt || '';
        }
        /**
         * Gets the width of the platform's viewport using `window.innerWidth`.
         * Using this method is preferred since the dimension is a cached value,
         * which reduces the chance of multiple and expensive DOM reads.
         */

    }, {
        key: 'width',
        value: function width() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["windowDimensions"])().width;
        }
        /**
         * Gets the height of the platform's viewport using `window.innerHeight`.
         * Using this method is preferred since the dimension is a cached value,
         * which reduces the chance of multiple and expensive DOM reads.
         */

    }, {
        key: 'height',
        value: function height() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["windowDimensions"])().height;
        }
        /**
         * Returns `true` if the app is in portait mode.
         */

    }, {
        key: 'isPortrait',
        value: function isPortrait() {
            return this.width() < this.height();
        }
        /**
         * Returns `true` if the app is in landscape mode.
         */

    }, {
        key: 'isLandscape',
        value: function isLandscape() {
            return !this.isPortrait();
        }
        /**
         * @private
         */

    }, {
        key: 'windowResize',
        value: function windowResize() {
            var self = this;
            clearTimeout(self._resizeTm);
            self._resizeTm = setTimeout(function () {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["flushDimensionCache"])();
                for (var i = 0; i < self._onResizes.length; i++) {
                    try {
                        self._onResizes[i]();
                    } catch (e) {
                        console.error(e);
                    }
                }
            }, 200);
        }
        /**
         * @private
         */

    }, {
        key: 'onResize',
        value: function onResize(cb) {
            var self = this;
            self._onResizes.push(cb);
            return function () {
                var index = self._onResizes.indexOf(cb);
                if (index > -1) {
                    self._onResizes.splice(index, 1);
                }
            };
        }
        // Platform Registry
        // **********************************************
        /**
         * @private
         */

    }, {
        key: 'testQuery',

        /**
         * @private
         */
        value: function testQuery(queryValue, queryTestValue) {
            var valueSplit = queryValue.toLowerCase().split(';');
            return valueSplit.indexOf(queryTestValue) > -1;
        }
        /**
         * @private
         */

    }, {
        key: 'testNavigatorPlatform',
        value: function testNavigatorPlatform(navigatorPlatformExpression) {
            var rgx = new RegExp(navigatorPlatformExpression, 'i');
            return rgx.test(this._bPlt);
        }
        /**
         * @private
         */

    }, {
        key: 'matchUserAgentVersion',
        value: function matchUserAgentVersion(userAgentExpression) {
            if (this._ua && userAgentExpression) {
                var val = this._ua.match(userAgentExpression);
                if (val) {
                    return {
                        major: val[1],
                        minor: val[2]
                    };
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: 'isPlatformMatch',
        value: function isPlatformMatch(queryStringName, userAgentAtLeastHas) {
            var userAgentMustNotHave = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

            var queryValue = this.query('ionicplatform');
            if (queryValue) {
                return this.testQuery(queryValue, queryStringName);
            }
            userAgentAtLeastHas = userAgentAtLeastHas || [queryStringName];
            var userAgent = this._ua.toLowerCase();
            for (var i = 0; i < userAgentAtLeastHas.length; i++) {
                if (userAgent.indexOf(userAgentAtLeastHas[i]) > -1) {
                    for (var j = 0; j < userAgentMustNotHave.length; j++) {
                        if (userAgent.indexOf(userAgentMustNotHave[j]) > -1) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        }
        /**
         * @private
         */

    }, {
        key: 'load',
        value: function load(config) {
            var rootPlatformNode = void 0;
            var enginePlatformNode = void 0;
            var self = this;
            // figure out the most specific platform and active engine
            var tmpPlatform = void 0;
            for (var platformName in platformRegistry) {
                tmpPlatform = this.matchPlatform(platformName);
                if (tmpPlatform) {
                    // we found a platform match!
                    // check if its more specific than the one we already have
                    if (tmpPlatform.isEngine) {
                        // because it matched then this should be the active engine
                        // you cannot have more than one active engine
                        enginePlatformNode = tmpPlatform;
                    } else if (!rootPlatformNode || tmpPlatform.depth > rootPlatformNode.depth) {
                        // only find the root node for platforms that are not engines
                        // set this node as the root since we either don't already
                        // have one, or this one is more specific that the current one
                        rootPlatformNode = tmpPlatform;
                    }
                }
            }
            if (!rootPlatformNode) {
                rootPlatformNode = new PlatformNode(platformDefault);
            }
            // build a Platform instance filled with the
            // hierarchy of active platforms and settings
            if (rootPlatformNode) {
                // check if we found an engine node (cordova/node-webkit/etc)
                if (enginePlatformNode) {
                    // add the engine to the first in the platform hierarchy
                    // the original rootPlatformNode now becomes a child
                    // of the engineNode, which is not the new root
                    enginePlatformNode.child = rootPlatformNode;
                    rootPlatformNode.parent = enginePlatformNode;
                    rootPlatformNode = enginePlatformNode;
                }
                var platformNode = rootPlatformNode;
                while (platformNode) {
                    insertSuperset(platformNode);
                    platformNode = platformNode.child;
                }
                // make sure the root noot is actually the root
                // incase a node was inserted before the root
                platformNode = rootPlatformNode.parent;
                while (platformNode) {
                    rootPlatformNode = platformNode;
                    platformNode = platformNode.parent;
                }
                platformNode = rootPlatformNode;
                while (platformNode) {
                    platformNode.initialize(this, config);
                    // set the array of active platforms with
                    // the last one in the array the most important
                    this._platforms.push(platformNode.name);
                    // get the platforms version if a version parser was provided
                    this._versions[platformNode.name] = platformNode.version(this);
                    // go to the next platform child
                    platformNode = platformNode.child;
                }
            }
            if (this._platforms.indexOf('mobile') > -1 && this._platforms.indexOf('cordova') === -1) {
                this._platforms.push('mobileweb');
            }
        }
        /**
         * @private
         */

    }, {
        key: 'matchPlatform',
        value: function matchPlatform(platformName) {
            // build a PlatformNode and assign config data to it
            // use it's getRoot method to build up its hierarchy
            // depending on which platforms match
            var platformNode = new PlatformNode(platformName);
            var rootNode = platformNode.getRoot(this);
            if (rootNode) {
                rootNode.depth = 0;
                var childPlatform = rootNode.child;
                while (childPlatform) {
                    rootNode.depth++;
                    childPlatform = childPlatform.child;
                }
            }
            return rootNode;
        }
    }], [{
        key: 'register',
        value: function register(platformConfig) {
            platformRegistry[platformConfig.name] = platformConfig;
        }
        /**
         * @private
         */

    }, {
        key: 'registry',
        value: function registry() {
            return platformRegistry;
        }
        /**
         * @private
         */

    }, {
        key: 'get',
        value: function get(platformName) {
            return platformRegistry[platformName] || {};
        }
        /**
         * @private
         */

    }, {
        key: 'setDefault',
        value: function setDefault(platformName) {
            platformDefault = platformName;
        }
    }]);

    return Platform;
}();
function insertSuperset(platformNode) {
    var supersetPlaformName = platformNode.superset();
    if (supersetPlaformName) {
        // add a platform in between two exist platforms
        // so we can build the correct hierarchy of active platforms
        var supersetPlatform = new PlatformNode(supersetPlaformName);
        supersetPlatform.parent = platformNode.parent;
        supersetPlatform.child = platformNode;
        if (supersetPlatform.parent) {
            supersetPlatform.parent.child = supersetPlatform;
        }
        platformNode.parent = supersetPlatform;
    }
}
/**
 * @private
 */

var PlatformNode = function () {
    function PlatformNode(platformName) {
        _classCallCheck(this, PlatformNode);

        this.c = Platform.get(platformName);
        this.name = platformName;
        this.isEngine = this.c.isEngine;
    }

    _createClass(PlatformNode, [{
        key: 'settings',
        value: function settings() {
            return this.c.settings || {};
        }
    }, {
        key: 'superset',
        value: function superset() {
            return this.c.superset;
        }
    }, {
        key: 'isMatch',
        value: function isMatch(p) {
            return this.c.isMatch && this.c.isMatch(p) || false;
        }
    }, {
        key: 'initialize',
        value: function initialize(platform, config) {
            this.c.initialize && this.c.initialize(platform, config);
        }
    }, {
        key: 'version',
        value: function version(p) {
            if (this.c.versionParser) {
                var v = this.c.versionParser(p);
                if (v) {
                    var str = v.major + '.' + v.minor;
                    return {
                        str: str,
                        num: parseFloat(str),
                        major: parseInt(v.major, 10),
                        minor: parseInt(v.minor, 10)
                    };
                }
            }
        }
    }, {
        key: 'getRoot',
        value: function getRoot(p) {
            if (this.isMatch(p)) {
                var parents = this.getSubsetParents(this.name);
                if (!parents.length) {
                    return this;
                }
                var platform = null;
                var rootPlatform = null;
                for (var i = 0; i < parents.length; i++) {
                    platform = new PlatformNode(parents[i]);
                    platform.child = this;
                    rootPlatform = platform.getRoot(p);
                    if (rootPlatform) {
                        this.parent = platform;
                        return rootPlatform;
                    }
                }
            }
            return null;
        }
    }, {
        key: 'getSubsetParents',
        value: function getSubsetParents(subsetPlatformName) {
            var platformRegistry = Platform.registry();
            var parentPlatformNames = [];
            var platform = null;
            for (var platformName in platformRegistry) {
                platform = platformRegistry[platformName];
                if (platform.subsets && platform.subsets.indexOf(subsetPlatformName) > -1) {
                    parentPlatformNames.push(platformName);
                }
            }
            return parentPlatformNames;
        }
    }]);

    return PlatformNode;
}();

var platformRegistry = {};
var platformDefault = null;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);

/* harmony export */ __webpack_require__.d(exports, "Form", function() { return Form; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

/**
 * @private
 */
var Form = function () {
    function Form() {
        _classCallCheck(this, Form);

        this._focused = null;
        this._ids = -1;
        this._inputs = [];
        this.focusCtrl(document);
    }

    _createClass(Form, [{
        key: "register",
        value: function register(input) {
            this._inputs.push(input);
        }
    }, {
        key: "deregister",
        value: function deregister(input) {
            var index = this._inputs.indexOf(input);
            if (index > -1) {
                this._inputs.splice(index, 1);
            }
            if (input === this._focused) {
                this._focused = null;
            }
        }
    }, {
        key: "focusCtrl",
        value: function focusCtrl(document) {
            // raw DOM fun
            var focusCtrl = document.createElement('focus-ctrl');
            focusCtrl.setAttribute('aria-hidden', true);
            this._blur = document.createElement('button');
            this._blur.tabIndex = -1;
            focusCtrl.appendChild(this._blur);
            document.body.appendChild(focusCtrl);
        }
    }, {
        key: "focusOut",
        value: function focusOut() {
            console.debug('focusOut');
            var activeElement = document.activeElement;
            if (activeElement) {
                activeElement.blur();
            }
            this._blur.focus();
        }
    }, {
        key: "setAsFocused",
        value: function setAsFocused(input) {
            this._focused = input;
        }
        /**
         * Focuses the next input element, if it exists.
         */

    }, {
        key: "tabFocus",
        value: function tabFocus(currentInput) {
            var index = this._inputs.indexOf(currentInput);
            if (index > -1 && index + 1 < this._inputs.length) {
                var nextInput = this._inputs[index + 1];
                if (nextInput !== this._focused) {
                    console.debug('tabFocus, next');
                    return nextInput.initFocus();
                }
            }
            index = this._inputs.indexOf(this._focused);
            if (index > 0) {
                var previousInput = this._inputs[index - 1];
                if (previousInput) {
                    console.debug('tabFocus, previous');
                    previousInput.initFocus();
                }
            }
        }
    }, {
        key: "nextId",
        value: function nextId() {
            return ++this._ids;
        }
    }]);

    return Form;
}();
Form = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), __metadata('design:paramtypes', [])], Form);

/***/ },
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var button_1 = __webpack_require__(308);
var form_1 = __webpack_require__(73);
var icon_1 = __webpack_require__(458);
var item_reorder_1 = __webpack_require__(858);
var label_1 = __webpack_require__(462);
var Item = function () {
    function Item(form, _renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._ids = -1;
        this._inputs = [];
        this._viewLabel = true;
        /**
         * @private
         */
        this.labelId = null;
        this.id = form.nextId().toString();
        _elementRef.nativeElement['$ionComponent'] = this;
    }
    /**
     * @private
     */
    Item.prototype.registerInput = function (type) {
        this._inputs.push(type);
        return this.id + '-' + ++this._ids;
    };
    /**
     * @private
     */
    Item.prototype.ngAfterContentInit = function () {
        if (this._viewLabel && this._inputs.length) {
            var labelText = this.getLabelText().trim();
            this._viewLabel = labelText.length > 0;
        }
        if (this._inputs.length > 1) {
            this.setCssClass('item-multiple-inputs', true);
        }
    };
    /**
     * @private
     */
    Item.prototype.setCssClass = function (cssClass, shouldAdd) {
        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
    };
    /**
     * @private
     */
    Item.prototype.setCssStyle = function (property, value) {
        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
    };
    /**
     * @private
     */
    Item.prototype.getLabelText = function () {
        return this._label ? this._label.text : '';
    };
    Object.defineProperty(Item.prototype, "contentLabel", {
        set: function set(label) {
            if (label) {
                this._label = label;
                this.labelId = label.id = 'lbl-' + this.id;
                if (label.type) {
                    this.setCssClass('item-label-' + label.type, true);
                }
                this._viewLabel = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Item.prototype, "viewLabel", {
        set: function set(label) {
            if (!this._label) {
                this._label = label;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Item.prototype, "_buttons", {
        set: function set(buttons) {
            buttons.toArray().forEach(function (button) {
                // Don't add the item-button class if the user specifies
                // a different size button
                if (!button.isItem && !button._size) {
                    button.addClass('item-button');
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Item.prototype, "_icons", {
        set: function set(icons) {
            icons.toArray().forEach(function (icon) {
                icon.addClass('item-icon');
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Item.prototype.getNativeElement = function () {
        return this._elementRef.nativeElement;
    };
    /**
     * @private
     */
    Item.prototype.height = function () {
        return this._elementRef.nativeElement.offsetHeight;
    };
    /** @nocollapse */
    Item.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-list-header,ion-item,[ion-item],ion-item-divider',
            template: '<ng-content select="[item-left],ion-checkbox:not([item-right])"></ng-content>' + '<div class="item-inner">' + '<div class="input-wrapper">' + '<ng-content select="ion-label"></ng-content>' + '<ion-label *ngIf="_viewLabel">' + '<ng-content></ng-content>' + '</ion-label>' + '<ng-content select="ion-select,ion-input,ion-textarea,ion-datetime,ion-range,[item-content]"></ng-content>' + '</div>' + '<ng-content select="[item-right],ion-radio,ion-toggle"></ng-content>' + '<ion-reorder></ion-reorder>' + '</div>' + '<ion-button-effect></ion-button-effect>',
            directives: [core_1.forwardRef(function () {
                return item_reorder_1.ItemReorder;
            }), common_1.NgIf],
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Item.ctorParameters = [{ type: form_1.Form }, { type: core_1.Renderer }, { type: core_1.ElementRef }];
    /** @nocollapse */
    Item.propDecorators = {
        'index': [{ type: core_1.Input }],
        'contentLabel': [{ type: core_1.ContentChild, args: [label_1.Label] }],
        'viewLabel': [{ type: core_1.ViewChild, args: [label_1.Label] }],
        '_buttons': [{ type: core_1.ContentChildren, args: [button_1.Button] }],
        '_icons': [{ type: core_1.ContentChildren, args: [icon_1.Icon] }]
    };
    return Item;
}();
exports.Item = Item;
var ItemContent = function () {
    function ItemContent() {}
    /** @nocollapse */
    ItemContent.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-item,[ion-item]',
            host: {
                'class': 'item'
            }
        }] }];
    return ItemContent;
}();
exports.ItemContent = ItemContent;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_click_block__ = __webpack_require__(326);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__platform_platform__ = __webpack_require__(61);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return App; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





/**
 * Ionic App utility service.
 */
var App = function () {
    function App(_config, _clickBlock, _platform) {
        _classCallCheck(this, App);

        this._config = _config;
        this._clickBlock = _clickBlock;
        this._platform = _platform;
        this._disTime = 0;
        this._scrollTime = 0;
        this._title = '';
        this._titleSrv = new __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["Title"]();
        this._rootNav = null;
        // listen for hardware back button events
        // register this back button action with a default priority
        _platform.registerBackButtonAction(this.navPop.bind(this));
    }
    /**
     * Sets the document title.
     * @param {string} val  Value to set the document title to.
     */

    _createClass(App, [{
        key: "setTitle",
        value: function setTitle(val) {
            if (val !== this._title) {
                this._title = val;
                this._titleSrv.setTitle(val);
            }
        }
        /**
         * @private
         * Sets if the app is currently enabled or not, meaning if it's
         * available to accept new user commands. For example, this is set to `false`
         * while views transition, a modal slides up, an action-sheet
         * slides up, etc. After the transition completes it is set back to `true`.
         * @param {boolean} isEnabled
         * @param {number} duration  When `isEnabled` is set to `false`, this argument
         * is used to set the maximum number of milliseconds that app will wait until
         * it will automatically enable the app again. It's basically a fallback incase
         * something goes wrong during a transition and the app wasn't re-enabled correctly.
         */

    }, {
        key: "setEnabled",
        value: function setEnabled(isEnabled) {
            var duration = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

            this._disTime = isEnabled ? 0 : Date.now() + duration;
            var CLICK_BLOCK_BUFFER_IN_MILLIS = 64;
            if (this._clickBlock) {
                if (isEnabled || duration <= 32) {
                    // disable the click block if it's enabled, or the duration is tiny
                    this._clickBlock.show(false, 0);
                } else {
                    // show the click block for duration + some number
                    this._clickBlock.show(true, duration + CLICK_BLOCK_BUFFER_IN_MILLIS);
                }
            }
        }
        /**
         * @private
         * Boolean if the app is actively enabled or not.
         * @return {boolean}
         */

    }, {
        key: "isEnabled",
        value: function isEnabled() {
            return this._disTime < Date.now();
        }
        /**
         * @private
         */

    }, {
        key: "setScrolling",
        value: function setScrolling() {
            this._scrollTime = Date.now();
        }
        /**
         * Boolean if the app is actively scrolling or not.
         * @return {boolean}
         */

    }, {
        key: "isScrolling",
        value: function isScrolling() {
            return this._scrollTime + 64 > Date.now();
        }
        /**
         * @private
         */

    }, {
        key: "getActiveNav",
        value: function getActiveNav() {
            var nav = this._rootNav || null;
            var activeChildNav;
            while (nav) {
                activeChildNav = nav.getActiveChildNav();
                if (!activeChildNav) {
                    break;
                }
                nav = activeChildNav;
            }
            return nav;
        }
        /**
         * @private
         */

    }, {
        key: "getRootNav",
        value: function getRootNav() {
            return this._rootNav;
        }
        /**
         * @private
         */

    }, {
        key: "setRootNav",
        value: function setRootNav(nav) {
            this._rootNav = nav;
        }
        /**
         * @private
         */

    }, {
        key: "navPop",
        value: function navPop() {
            // function used to climb up all parent nav controllers
            function navPop(nav) {
                if (nav) {
                    if (nav.length && nav.length() > 1) {
                        // this nav controller has more than one view
                        // pop the current view on this nav and we're done here
                        console.debug('app, goBack pop nav');
                        return nav.pop();
                    } else if (nav.previousTab) {
                        // FYI, using "nav instanceof Tabs" throws a Promise runtime error for whatever reason, idk
                        // this is a Tabs container
                        // see if there is a valid previous tab to go to
                        var prevTab = nav.previousTab(true);
                        if (prevTab) {
                            console.debug('app, goBack previous tab');
                            nav.select(prevTab);
                            return Promise.resolve();
                        }
                    }
                    // try again using the parent nav (if there is one)
                    return navPop(nav.parent);
                }
                // nerp, never found nav that could pop off a view
                return null;
            }
            // app must be enabled and there must be a
            // root nav controller for go back to work
            if (this._rootNav && this.isEnabled()) {
                // first check if the root navigation has any overlays
                // opened in it's portal, like alert/actionsheet/popup
                var portal = this._rootNav.getPortal && this._rootNav.getPortal();
                if (portal && portal.length() > 0) {
                    // there is an overlay view in the portal
                    // let's pop this one off to go back
                    console.debug('app, goBack pop overlay');
                    return portal.pop();
                }
                // next get the active nav, check itself and climb up all
                // of its parent navs until it finds a nav that can pop
                var navPromise = navPop(this.getActiveNav());
                if (navPromise === null) {
                    // no views to go back to
                    // let's exit the app
                    if (this._config.getBoolean('navExitApp', true)) {
                        console.debug('app, goBack exitApp');
                        this._platform.exitApp();
                    }
                } else {
                    return navPromise;
                }
            }
            return Promise.resolve();
        }
        /**
         * @private
         */

    }, {
        key: "getRegisteredComponent",
        value: function getRegisteredComponent(cls) {
            // deprecated warning: added 2016-04-28, beta7
            console.warn('Using app.getRegisteredComponent() to query components has been deprecated. ' + 'Please use Angular\'s ViewChild annotation instead:\n\nhttp://learnangular2.com/viewChild/');
        }
        /**
         * @private
         */

    }, {
        key: "getComponent",
        value: function getComponent(id) {
            // deprecated warning: added 2016-04-28, beta7
            console.warn('Using app.getComponent() to query components has been deprecated. ' + 'Please use Angular\'s ViewChild annotation instead:\n\nhttp://learnangular2.com/viewChild/');
        }
        /**
         * Set the global app injector that contains references to all of the instantiated providers
         * @param injector
         */

    }, {
        key: "setAppInjector",
        value: function setAppInjector(injector) {
            this._appInjector = injector;
        }
        /**
         * Get an instance of the global app injector that contains references to all of the instantiated providers
         * @returns {Injector}
         */

    }, {
        key: "getAppInjector",
        value: function getAppInjector() {
            return this._appInjector;
        }
    }]);

    return App;
}();
App = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__util_click_block__["ClickBlock"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__util_click_block__["ClickBlock"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__platform_platform__["Platform"]) === 'function' && _c || Object])], App);
var _a, _b, _c;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NavParams; });var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * @name NavParams
 * @description
 * NavParams are an object that exists on a page and can contain data for that particular view.
 * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible
 * option with a simple `get` method.
 *
 * @usage
 * ```ts
 * export class MyClass{
 *  constructor(params: NavParams){
 *    this.params = params;
 *    // userParams is an object we have in our nav-parameters
 *    this.params.get('userParams');
 *  }
 * }
 * ```
 * @demo /docs/v2/demos/nav-params/
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 * @see {@link ../NavController/ NavController API Docs}
 * @see {@link ../Nav/ Nav API Docs}
 * @see {@link ../NavPush/ NavPush API Docs}
 */
var NavParams = function () {
  /**
   * @private
   * @param {TODO} data  TODO
   */

  function NavParams() {
    var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, NavParams);

    this.data = data;
  }
  /**
   * Get the value of a nav-parameter for the current view
   *
   * ```ts
   * export class MyClass{
   *  constructor(params: NavParams){
   *    this.params = params;
   *    // userParams is an object we have in our nav-parameters
   *    this.params.get('userParams');
   *  }
   * }
   * ```
   *
   *
   * @param {string} parameter Which param you want to look up
   */

  _createClass(NavParams, [{
    key: "get",
    value: function get(param) {
      return this.data[param];
    }
  }]);

  return NavParams;
}();

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var util_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(17);
/**
 * @name Platform
 * @description
 * The Platform service can be used to get information about your current device.
 * You can get all of the platforms associated with the device using the [platforms](#platforms)
 * method, including whether the app is being viewed from a tablet, if it's
 * on a mobile device or browser, and the exact platform (iOS, Android, etc).
 * You can also get the orientation of the device, if it uses right-to-left
 * language direction, and much much more. With this information you can completely
 * customize your app to fit any device.
 *
 * @usage
 * ```ts
 * import {Platform} from 'ionic-angular';
 *
 * @Component({...})
 * export MyPage {
 *   constructor(platform: Platform) {
 *     this.platform = platform;
 *   }
 * }
 * ```
 * @demo /docs/v2/demos/platform/
 */
var Platform = function () {
    function Platform(platforms) {
        var _this = this;
        if (platforms === void 0) {
            platforms = [];
        }
        this._versions = {};
        this._onResizes = [];
        this._bbActions = [];
        // Events meant to be triggered by the engine
        // **********************************************
        /**
         * @private
         */
        this.backButton = new core_1.EventEmitter();
        /**
         * The pause event emits when the native platform puts the application
         * into the background, typically when the user switches to a different
         * application. This event would emit when a Cordova app is put into
         * the background, however, it would not fire on a standard web browser.
         */
        this.pause = new core_1.EventEmitter();
        /**
         * The resume event emits when the native platform pulls the application
         * out from the background. This event would emit when a Cordova app comes
         * out from the background, however, it would not fire on a standard web browser.
         */
        this.resume = new core_1.EventEmitter();
        this._platforms = platforms;
        this._readyPromise = new Promise(function (res) {
            _this._readyResolve = res;
        });
        this.backButton.subscribe(function () {
            // the hardware back button event has been fired
            console.debug('hardware back button');
            // decide which backbutton action should run
            _this.runBackButtonAction();
        });
    }
    /**
     * @private
     */
    Platform.prototype.setZone = function (zone) {
        this.zone = zone;
    };
    // Methods
    // **********************************************
    /**
     * @returns {boolean} returns true/false based on platform.
     * @description
     * Depending on the platform the user is on, `is(platformName)` will
     * return `true` or `false`. Note that the same app can return `true`
     * for more than one platform name. For example, an app running from
     * an iPad would return `true` for the platform names: `mobile`,
     * `ios`, `ipad`, and `tablet`. Additionally, if the app was running
     * from Cordova then `cordova` would be true, and if it was running
     * from a web browser on the iPad then `mobileweb` would be `true`.
     *
     * ```
     * import {Platform} from 'ionic-angular';
     *
     * @Component({...})
     * export MyPage {
     *   constructor(platform: Platform) {
     *     this.platform = platform;
     *
     *     if (this.platform.is('ios')) {
     *       // This will only print when on iOS
     *       console.log("I'm an iOS device!");
     *     }
     *   }
     * }
     * ```
     *
     * | Platform Name   | Description                        |
     * |-----------------|------------------------------------|
     * | android         | on a device running Android.       |
     * | cordova         | on a device running Cordova.       |
     * | core            | on a desktop device.               |
     * | ios             | on a device running iOS.           |
     * | ipad            | on an iPad device.                 |
     * | iphone          | on an iPhone device.               |
     * | mobile          | on a mobile device.                |
     * | mobileweb       | in a browser on a mobile device.   |
     * | phablet         | on a phablet device.               |
     * | tablet          | on a tablet device.                |
     * | windows         | on a device running Windows.       |
     *
     * @param {string} platformName
     */
    Platform.prototype.is = function (platformName) {
        return this._platforms.indexOf(platformName) > -1;
    };
    /**
     * @returns {array} the array of platforms
     * @description
     * Depending on what device you are on, `platforms` can return multiple values.
     * Each possible value is a hierarchy of platforms. For example, on an iPhone,
     * it would return `mobile`, `ios`, and `iphone`.
     *
     * ```
     * import {Platform} from 'ionic-angular';
     *
     * @Component({...})
     * export MyPage {
     *   constructor(platform: Platform) {
     *     this.platform = platform;
     *
     *     // This will print an array of the current platforms
     *     console.log(this.platform.platforms());
     *   }
     * }
     * ```
     */
    Platform.prototype.platforms = function () {
        // get the array of active platforms, which also knows the hierarchy,
        // with the last one the most important
        return this._platforms;
    };
    /**
     * Returns an object containing version information about all of the platforms.
     *
     * ```
     * import {Platform} from 'ionic-angular';
     *
     * @Component({...})
     * export MyPage {
     *   constructor(platform: Platform) {
     *     this.platform = platform;
     *
     *     // This will print an object containing
     *     // all of the platforms and their versions
     *     console.log(platform.versions());
     *   }
     * }
     * ```
     *
     * @returns {object} An object containing all of the platforms and their versions.
     */
    Platform.prototype.versions = function () {
        // get all the platforms that have a valid parsed version
        return this._versions;
    };
    /**
     * @private
     */
    Platform.prototype.version = function () {
        for (var platformName in this._versions) {
            if (this._versions[platformName]) {
                return this._versions[platformName];
            }
        }
        return {};
    };
    /**
     * Returns a promise when the platform is ready and native functionality
     * can be called. If the app is running from within a web browser, then
     * the promise will resolve when the DOM is ready. When the app is running
     * from an application engine such as Cordova, then the promise will
     * resolve when Cordova triggers the `deviceready` event.
     *
     * The resolved value is the `readySource`, which states which platform
     * ready was used. For example, when Cordova is ready, the resolved ready
     * source is `cordova`. The default ready source value will be `dom`. The
     * `readySource` is useful if different logic should run depending on the
     * platform the app is running from. For example, only Cordova can execute
     * the status bar plugin, so the web should not run status bar plugin logic.
     *
     * ```
     * import {Component} from '@angular/core';
     * import {Platform} from 'ionic-angular';
     *
     * @Component({...})
     * export MyApp {
     *   constructor(platform: Platform) {
     *     platform.ready().then((readySource) => {
     *       console.log('Platform ready from', readySource);
     *       // Platform now ready, execute any required native code
     *     });
     *   }
     * }
     * ```
     * @returns {promise}
     */
    Platform.prototype.ready = function () {
        return this._readyPromise;
    };
    /**
     * @private
     * This should be triggered by the engine when the platform is
     * ready. If there was no custom prepareReady method from the engine,
     * such as Cordova or Electron, then it uses the default DOM ready.
     */
    Platform.prototype.triggerReady = function (readySource) {
        var _this = this;
        this.zone.run(function () {
            _this._readyResolve(readySource);
        });
    };
    /**
     * @private
     * This is the default prepareReady if it's not replaced by an engine,
     * such as Cordova or Electron. If there was no custom prepareReady
     * method from an engine then it uses the method below, which triggers
     * the platform ready on the DOM ready event, and the default resolved
     * value is `dom`.
     */
    Platform.prototype.prepareReady = function () {
        var _this = this;
        dom_1.ready(function () {
            _this.triggerReady('dom');
        });
    };
    /**
     * Set the app's language direction, which will update the `dir` attribute
     * on the app's root `<html>` element. We recommend the app's `index.html`
     * file already has the correct `dir` attribute value set, such as
     * `<html dir="ltr">` or `<html dir="rtl">`. This method is useful if the
     * direction needs to be dynamically changed per user/session.
     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
     * @param {string} dir  Examples: `rtl`, `ltr`
     */
    Platform.prototype.setDir = function (dir, updateDocument) {
        this._dir = (dir || '').toLowerCase();
        if (updateDocument !== false) {
            document.documentElement.setAttribute('dir', dir);
        }
    };
    /**
     * Returns app's language direction.
     * We recommend the app's `index.html` file already has the correct `dir`
     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
     * @returns {string}
     */
    Platform.prototype.dir = function () {
        return this._dir;
    };
    /**
     * Returns if this app is using right-to-left language direction or not.
     * We recommend the app's `index.html` file already has the correct `dir`
     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
     * @returns {boolean}
     */
    Platform.prototype.isRTL = function () {
        return this._dir === 'rtl';
    };
    /**
     * Set the app's language and optionally the country code, which will update
     * the `lang` attribute on the app's root `<html>` element.
     * We recommend the app's `index.html` file already has the correct `lang`
     * attribute value set, such as `<html lang="en">`. This method is useful if
     * the language needs to be dynamically changed per user/session.
     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
     * @param {string} language  Examples: `en-US`, `en-GB`, `ar`, `de`, `zh`, `es-MX`
     */
    Platform.prototype.setLang = function (language, updateDocument) {
        this._lang = language;
        if (updateDocument !== false) {
            document.documentElement.setAttribute('lang', language);
        }
    };
    /**
     * Returns app's language and optional country code.
     * We recommend the app's `index.html` file already has the correct `lang`
     * attribute value set, such as `<html lang="en">`.
     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
     * @returns {string}
     */
    Platform.prototype.lang = function () {
        return this._lang;
    };
    // Methods meant to be overridden by the engine
    // **********************************************
    // Provided NOOP methods so they do not error when
    // called by engines (the browser)that do not provide them
    /**
     * @private
     */
    Platform.prototype.exitApp = function () {};
    /**
     * The back button event is triggered when the user presses the native
     * platform's back button, also referred to as the "hardware" back button.
     * This event is only used within Cordova apps running on Android and
     * Windows platforms. This event is not fired on iOS since iOS doesn't come
     * with a hardware back button in the same sense an Android or Windows device
     * does.
     *
     * Registering a hardware back button action and setting a priority allows
     * apps to control which action should be called when the hardware back
     * button is pressed. This method decides which of the registered back button
     * actions has the highest priority and should be called.
     *
     * @param {Function} callback Called when the back button is pressed,
     * if this registered action has the highest priority.
     * @param {number} priority Set the priority for this action. Only the highest priority will execute. Defaults to `0`.
     * @returns {Function} A function that, when called, will unregister
     * the its back button action.
     */
    Platform.prototype.registerBackButtonAction = function (fn, priority) {
        var _this = this;
        if (priority === void 0) {
            priority = 0;
        }
        var action = { fn: fn, priority: priority };
        this._bbActions.push(action);
        // return a function to unregister this back button action
        return function () {
            var index = _this._bbActions.indexOf(action);
            if (index > -1) {
                _this._bbActions.splice(index, 1);
            }
        };
    };
    /**
     * @private
     */
    Platform.prototype.runBackButtonAction = function () {
        // decide which one back button action should run
        var winner = null;
        this._bbActions.forEach(function (action) {
            if (!winner || action.priority >= winner.priority) {
                winner = action;
            }
        });
        // run the winning action if there is one
        winner && winner.fn && winner.fn();
    };
    // Getter/Setter Methods
    // **********************************************
    /**
     * @private
     */
    Platform.prototype.setUrl = function (url) {
        this._url = url;
        this._qs = util_1.getQuerystring(url);
    };
    /**
     * @private
     */
    Platform.prototype.url = function () {
        return this._url;
    };
    /**
     * @private
     */
    Platform.prototype.query = function (key) {
        return (this._qs || {})[key];
    };
    /**
     * @private
     */
    Platform.prototype.setUserAgent = function (userAgent) {
        this._ua = userAgent;
    };
    /**
     * @private
     */
    Platform.prototype.userAgent = function () {
        return this._ua || '';
    };
    /**
     * @private
     */
    Platform.prototype.setNavigatorPlatform = function (navigatorPlatform) {
        this._bPlt = navigatorPlatform;
    };
    /**
     * @private
     */
    Platform.prototype.navigatorPlatform = function () {
        return this._bPlt || '';
    };
    /**
     * Gets the width of the platform's viewport using `window.innerWidth`.
     * Using this method is preferred since the dimension is a cached value,
     * which reduces the chance of multiple and expensive DOM reads.
     */
    Platform.prototype.width = function () {
        return dom_1.windowDimensions().width;
    };
    /**
     * Gets the height of the platform's viewport using `window.innerHeight`.
     * Using this method is preferred since the dimension is a cached value,
     * which reduces the chance of multiple and expensive DOM reads.
     */
    Platform.prototype.height = function () {
        return dom_1.windowDimensions().height;
    };
    /**
     * Returns `true` if the app is in portait mode.
     */
    Platform.prototype.isPortrait = function () {
        return this.width() < this.height();
    };
    /**
     * Returns `true` if the app is in landscape mode.
     */
    Platform.prototype.isLandscape = function () {
        return !this.isPortrait();
    };
    /**
     * @private
     */
    Platform.prototype.windowResize = function () {
        var self = this;
        clearTimeout(self._resizeTm);
        self._resizeTm = setTimeout(function () {
            dom_1.flushDimensionCache();
            for (var i = 0; i < self._onResizes.length; i++) {
                try {
                    self._onResizes[i]();
                } catch (e) {
                    console.error(e);
                }
            }
        }, 200);
    };
    /**
     * @private
     */
    Platform.prototype.onResize = function (cb) {
        var self = this;
        self._onResizes.push(cb);
        return function () {
            var index = self._onResizes.indexOf(cb);
            if (index > -1) {
                self._onResizes.splice(index, 1);
            }
        };
    };
    // Platform Registry
    // **********************************************
    /**
     * @private
     */
    Platform.register = function (platformConfig) {
        platformRegistry[platformConfig.name] = platformConfig;
    };
    /**
     * @private
     */
    Platform.registry = function () {
        return platformRegistry;
    };
    /**
     * @private
     */
    Platform.get = function (platformName) {
        return platformRegistry[platformName] || {};
    };
    /**
     * @private
     */
    Platform.setDefault = function (platformName) {
        platformDefault = platformName;
    };
    /**
     * @private
     */
    Platform.prototype.testQuery = function (queryValue, queryTestValue) {
        var valueSplit = queryValue.toLowerCase().split(';');
        return valueSplit.indexOf(queryTestValue) > -1;
    };
    /**
     * @private
     */
    Platform.prototype.testNavigatorPlatform = function (navigatorPlatformExpression) {
        var rgx = new RegExp(navigatorPlatformExpression, 'i');
        return rgx.test(this._bPlt);
    };
    /**
     * @private
     */
    Platform.prototype.matchUserAgentVersion = function (userAgentExpression) {
        if (this._ua && userAgentExpression) {
            var val = this._ua.match(userAgentExpression);
            if (val) {
                return {
                    major: val[1],
                    minor: val[2]
                };
            }
        }
    };
    /**
     * @private
     */
    Platform.prototype.isPlatformMatch = function (queryStringName, userAgentAtLeastHas, userAgentMustNotHave) {
        if (userAgentMustNotHave === void 0) {
            userAgentMustNotHave = [];
        }
        var queryValue = this.query('ionicplatform');
        if (queryValue) {
            return this.testQuery(queryValue, queryStringName);
        }
        userAgentAtLeastHas = userAgentAtLeastHas || [queryStringName];
        var userAgent = this._ua.toLowerCase();
        for (var i = 0; i < userAgentAtLeastHas.length; i++) {
            if (userAgent.indexOf(userAgentAtLeastHas[i]) > -1) {
                for (var j = 0; j < userAgentMustNotHave.length; j++) {
                    if (userAgent.indexOf(userAgentMustNotHave[j]) > -1) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     */
    Platform.prototype.load = function (config) {
        var rootPlatformNode;
        var enginePlatformNode;
        var self = this;
        // figure out the most specific platform and active engine
        var tmpPlatform;
        for (var platformName in platformRegistry) {
            tmpPlatform = this.matchPlatform(platformName);
            if (tmpPlatform) {
                // we found a platform match!
                // check if its more specific than the one we already have
                if (tmpPlatform.isEngine) {
                    // because it matched then this should be the active engine
                    // you cannot have more than one active engine
                    enginePlatformNode = tmpPlatform;
                } else if (!rootPlatformNode || tmpPlatform.depth > rootPlatformNode.depth) {
                    // only find the root node for platforms that are not engines
                    // set this node as the root since we either don't already
                    // have one, or this one is more specific that the current one
                    rootPlatformNode = tmpPlatform;
                }
            }
        }
        if (!rootPlatformNode) {
            rootPlatformNode = new PlatformNode(platformDefault);
        }
        // build a Platform instance filled with the
        // hierarchy of active platforms and settings
        if (rootPlatformNode) {
            // check if we found an engine node (cordova/node-webkit/etc)
            if (enginePlatformNode) {
                // add the engine to the first in the platform hierarchy
                // the original rootPlatformNode now becomes a child
                // of the engineNode, which is not the new root
                enginePlatformNode.child = rootPlatformNode;
                rootPlatformNode.parent = enginePlatformNode;
                rootPlatformNode = enginePlatformNode;
            }
            var platformNode = rootPlatformNode;
            while (platformNode) {
                insertSuperset(platformNode);
                platformNode = platformNode.child;
            }
            // make sure the root noot is actually the root
            // incase a node was inserted before the root
            platformNode = rootPlatformNode.parent;
            while (platformNode) {
                rootPlatformNode = platformNode;
                platformNode = platformNode.parent;
            }
            platformNode = rootPlatformNode;
            while (platformNode) {
                platformNode.initialize(this, config);
                // set the array of active platforms with
                // the last one in the array the most important
                this._platforms.push(platformNode.name);
                // get the platforms version if a version parser was provided
                this._versions[platformNode.name] = platformNode.version(this);
                // go to the next platform child
                platformNode = platformNode.child;
            }
        }
        if (this._platforms.indexOf('mobile') > -1 && this._platforms.indexOf('cordova') === -1) {
            this._platforms.push('mobileweb');
        }
    };
    /**
     * @private
     */
    Platform.prototype.matchPlatform = function (platformName) {
        // build a PlatformNode and assign config data to it
        // use it's getRoot method to build up its hierarchy
        // depending on which platforms match
        var platformNode = new PlatformNode(platformName);
        var rootNode = platformNode.getRoot(this);
        if (rootNode) {
            rootNode.depth = 0;
            var childPlatform = rootNode.child;
            while (childPlatform) {
                rootNode.depth++;
                childPlatform = childPlatform.child;
            }
        }
        return rootNode;
    };
    return Platform;
}();
exports.Platform = Platform;
function insertSuperset(platformNode) {
    var supersetPlaformName = platformNode.superset();
    if (supersetPlaformName) {
        // add a platform in between two exist platforms
        // so we can build the correct hierarchy of active platforms
        var supersetPlatform = new PlatformNode(supersetPlaformName);
        supersetPlatform.parent = platformNode.parent;
        supersetPlatform.child = platformNode;
        if (supersetPlatform.parent) {
            supersetPlatform.parent.child = supersetPlatform;
        }
        platformNode.parent = supersetPlatform;
    }
}
/**
 * @private
 */
var PlatformNode = function () {
    function PlatformNode(platformName) {
        this.c = Platform.get(platformName);
        this.name = platformName;
        this.isEngine = this.c.isEngine;
    }
    PlatformNode.prototype.settings = function () {
        return this.c.settings || {};
    };
    PlatformNode.prototype.superset = function () {
        return this.c.superset;
    };
    PlatformNode.prototype.isMatch = function (p) {
        return this.c.isMatch && this.c.isMatch(p) || false;
    };
    PlatformNode.prototype.initialize = function (platform, config) {
        this.c.initialize && this.c.initialize(platform, config);
    };
    PlatformNode.prototype.version = function (p) {
        if (this.c.versionParser) {
            var v = this.c.versionParser(p);
            if (v) {
                var str = v.major + '.' + v.minor;
                return {
                    str: str,
                    num: parseFloat(str),
                    major: parseInt(v.major, 10),
                    minor: parseInt(v.minor, 10)
                };
            }
        }
    };
    PlatformNode.prototype.getRoot = function (p) {
        if (this.isMatch(p)) {
            var parents = this.getSubsetParents(this.name);
            if (!parents.length) {
                return this;
            }
            var platform = null;
            var rootPlatform = null;
            for (var i = 0; i < parents.length; i++) {
                platform = new PlatformNode(parents[i]);
                platform.child = this;
                rootPlatform = platform.getRoot(p);
                if (rootPlatform) {
                    this.parent = platform;
                    return rootPlatform;
                }
            }
        }
        return null;
    };
    PlatformNode.prototype.getSubsetParents = function (subsetPlatformName) {
        var platformRegistry = Platform.registry();
        var parentPlatformNames = [];
        var platform = null;
        for (var platformName in platformRegistry) {
            platform = platformRegistry[platformName];
            if (platform.subsets && platform.subsets.indexOf(subsetPlatformName) > -1) {
                parentPlatformNames.push(platformName);
            }
        }
        return parentPlatformNames;
    };
    return PlatformNode;
}();
var platformRegistry = {};
var platformDefault = null;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var Form = function () {
    function Form() {
        this._focused = null;
        this._ids = -1;
        this._inputs = [];
        this.focusCtrl(document);
    }
    Form.prototype.register = function (input) {
        this._inputs.push(input);
    };
    Form.prototype.deregister = function (input) {
        var index = this._inputs.indexOf(input);
        if (index > -1) {
            this._inputs.splice(index, 1);
        }
        if (input === this._focused) {
            this._focused = null;
        }
    };
    Form.prototype.focusCtrl = function (document) {
        // raw DOM fun
        var focusCtrl = document.createElement('focus-ctrl');
        focusCtrl.setAttribute('aria-hidden', true);
        this._blur = document.createElement('button');
        this._blur.tabIndex = -1;
        focusCtrl.appendChild(this._blur);
        document.body.appendChild(focusCtrl);
    };
    Form.prototype.focusOut = function () {
        console.debug('focusOut');
        var activeElement = document.activeElement;
        if (activeElement) {
            activeElement.blur();
        }
        this._blur.focus();
    };
    Form.prototype.setAsFocused = function (input) {
        this._focused = input;
    };
    /**
     * Focuses the next input element, if it exists.
     */
    Form.prototype.tabFocus = function (currentInput) {
        var index = this._inputs.indexOf(currentInput);
        if (index > -1 && index + 1 < this._inputs.length) {
            var nextInput = this._inputs[index + 1];
            if (nextInput !== this._focused) {
                console.debug('tabFocus, next');
                return nextInput.initFocus();
            }
        }
        index = this._inputs.indexOf(this._focused);
        if (index > 0) {
            var previousInput = this._inputs[index - 1];
            if (previousInput) {
                console.debug('tabFocus, previous');
                previousInput.initFocus();
            }
        }
    };
    Form.prototype.nextId = function () {
        return ++this._ids;
    };
    /** @nocollapse */
    Form.decorators = [{ type: core_1.Injectable }];
    /** @nocollapse */
    Form.ctorParameters = [];
    return Form;
}();
exports.Form = Form;

/***/ },
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_scroll_view__ = __webpack_require__(506);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs_tabs__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Content; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};










/**
 * @name Content
 * @description
 * The Content component provides an easy to use content area with
 * some useful methods to control the scrollable area.
 *
 * The content area can also implement pull-to-refresh with the
 * [Refresher](../../refresher/Refresher) component.
 *
 * @usage
 * ```html
 * <ion-content>
 *   Add your content here!
 * </ion-content>
 * ```
 *
 * To get a reference to the content component from a Page's logic,
 * you can use Angular's `@ViewChild` annotation:
 *
 * ```ts
 * import {Component, ViewChild} from '@angular/core';
 * import {Content} from 'ionic-angular';
 *
 * @Component({...})
 * export class MyPage{
 *   @ViewChild(Content) content: Content;
 *
 *   scrollToTop() {
 *     this.content.scrollToTop();
 *   }
 * }
 * ```
 *
 */
var Content = function (_Ion) {
    _inherits(Content, _Ion);

    function Content(_elementRef, _config, _app, _keyboard, _zone, viewCtrl, _tabs) {
        _classCallCheck(this, Content);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Content).call(this, _elementRef));

        _this._elementRef = _elementRef;
        _this._config = _config;
        _this._app = _app;
        _this._keyboard = _keyboard;
        _this._zone = _zone;
        _this._tabs = _tabs;
        _this._inputPolling = false;
        _this._sbPadding = _config.getBoolean('statusbarPadding', false);
        if (viewCtrl) {
            viewCtrl.setContent(_this);
            viewCtrl.setContentRef(_elementRef);
        }
        return _this;
    }
    /**
     * @private
     */

    _createClass(Content, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            var self = this;
            self._scrollEle = self._elementRef.nativeElement.children[0];
            self._zone.runOutsideAngular(function () {
                self._scroll = new __WEBPACK_IMPORTED_MODULE_6__util_scroll_view__["a" /* ScrollView */](self._scrollEle);
                if (self._config.getBoolean('tapPolyfill')) {
                    self._scLsn = self.addScrollListener(function () {
                        self._app.setScrolling();
                    });
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._scLsn && this._scLsn();
            this._scroll && this._scroll.destroy();
            this._scrollEle = this._footerEle = this._scLsn = null;
        }
        /**
         * @private
         */

    }, {
        key: "addScrollListener",
        value: function addScrollListener(handler) {
            return this._addListener('scroll', handler);
        }
        /**
         * @private
         */

    }, {
        key: "addTouchStartListener",
        value: function addTouchStartListener(handler) {
            return this._addListener('touchstart', handler);
        }
        /**
         * @private
         */

    }, {
        key: "addTouchMoveListener",
        value: function addTouchMoveListener(handler) {
            return this._addListener('touchmove', handler);
        }
        /**
         * @private
         */

    }, {
        key: "addTouchEndListener",
        value: function addTouchEndListener(handler) {
            return this._addListener('touchend', handler);
        }
        /**
         * @private
         */

    }, {
        key: "addMouseDownListener",
        value: function addMouseDownListener(handler) {
            return this._addListener('mousedown', handler);
        }
        /**
         * @private
         */

    }, {
        key: "addMouseUpListener",
        value: function addMouseUpListener(handler) {
            return this._addListener('mouseup', handler);
        }
        /**
         * @private
         */

    }, {
        key: "addMouseMoveListener",
        value: function addMouseMoveListener(handler) {
            return this._addListener('mousemove', handler);
        }
    }, {
        key: "_addListener",
        value: function _addListener(type, handler) {
            var _this2 = this;

            if (!this._scrollEle) {
                return;
            }
            // ensure we're not creating duplicates
            this._scrollEle.removeEventListener(type, handler);
            this._scrollEle.addEventListener(type, handler);
            return function () {
                if (_this2._scrollEle) {
                    _this2._scrollEle.removeEventListener(type, handler);
                }
            };
        }
        /**
         * @private
         */

    }, {
        key: "getScrollElement",
        value: function getScrollElement() {
            return this._scrollEle;
        }
        /**
         * @private
         * Call a method when scrolling has stopped
         * @param {Function} callback The method you want perform when scrolling has ended
         */

    }, {
        key: "onScrollEnd",
        value: function onScrollEnd(callback) {
            var lastScrollTop = null;
            var framesUnchanged = 0;
            var _scrollEle = this._scrollEle;
            function next() {
                var currentScrollTop = _scrollEle.scrollTop;
                if (lastScrollTop !== null) {
                    if (Math.round(lastScrollTop) === Math.round(currentScrollTop)) {
                        framesUnchanged++;
                    } else {
                        framesUnchanged = 0;
                    }
                    if (framesUnchanged > 9) {
                        return callback();
                    }
                }
                lastScrollTop = currentScrollTop;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["nativeRaf"])(function () {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["nativeRaf"])(next);
                });
            }
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["nativeTimeout"])(next, 100);
        }
        /**
         * @private
         */

    }, {
        key: "onScrollElementTransitionEnd",
        value: function onScrollElementTransitionEnd(callback) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["transitionEnd"])(this._scrollEle, callback);
        }
        /**
         * Scroll to the specified position.
         *
         * ```ts
         * import {Component, ViewChild} from '@angular/core';
         * import {Content} from 'ionic-angular';
         *
         * @Component({
         *   template: `<ion-content>
         *                <button (click)="scrollTo()">Down 500px</button>
         *              </ion-content>`
         * )}
         * export class MyPage{
         *   @ViewChild(Content) content: Content;
         *
         *   scrollTo() {
         *     // set the scrollLeft to 0px, and scrollTop to 500px
         *     // the scroll duration should take 200ms
         *     this.content.scrollTo(0, 500, 200);
         *   }
         * }
         * ```
         * @param {number} x  The x-value to scroll to.
         * @param {number} y  The y-value to scroll to.
         * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
         * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
         */

    }, {
        key: "scrollTo",
        value: function scrollTo(x, y) {
            var duration = arguments.length <= 2 || arguments[2] === undefined ? 300 : arguments[2];

            return this._scroll.scrollTo(x, y, duration);
        }
        /**
         * Scroll to the top of the content component.
         *
         * ```ts
         * import {Component, ViewChild} from '@angular/core';
         * import {Content} from 'ionic-angular';
         *
         * @Component({
         *   template: `<ion-content>
         *                <button (click)="scrollToTop()">Scroll to top</button>
         *              </ion-content>`
         * )}
         * export class MyPage{
         *   @ViewChild(Content) content: Content;
         *
         *   scrollToTop() {
         *     this.content.scrollToTop();
         *   }
         * }
         * ```
         * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
         * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
         */

    }, {
        key: "scrollToTop",
        value: function scrollToTop() {
            var duration = arguments.length <= 0 || arguments[0] === undefined ? 300 : arguments[0];

            return this._scroll.scrollToTop(duration);
        }
        /**
         * Get the `scrollTop` property of the content's scrollable element.
         * @returns {number}
         */

    }, {
        key: "getScrollTop",
        value: function getScrollTop() {
            return this._scroll.getTop();
        }
        /**
         * Set the `scrollTop` property of the content's scrollable element.
         * @param {number} top
         */

    }, {
        key: "setScrollTop",
        value: function setScrollTop(top) {
            this._scroll.setTop(top);
        }
        /**
         * Scroll to the bottom of the content component.
         * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
         * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
         */

    }, {
        key: "scrollToBottom",
        value: function scrollToBottom() {
            var duration = arguments.length <= 0 || arguments[0] === undefined ? 300 : arguments[0];

            return this._scroll.scrollToBottom(duration);
        }
        /**
         * @private
         */

    }, {
        key: "jsScroll",
        value: function jsScroll(onScrollCallback) {
            return this._scroll.jsScroll(onScrollCallback);
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "addCssClass",
        value: function addCssClass(className) {
            this.getNativeElement().classList.add(className);
        }
        /**
         * @input {boolean} By default, content is positioned between the headers
         * and footers. However, using `fullscreen="true"`, the content will be
         * able to scroll "under" the headers and footers. At first glance the
         * fullscreen option may not look any different than the default, however,
         * by adding a transparency effect to a header then the content can be
         * seen under the header as the user scrolls.
         */

    }, {
        key: "removeCssClass",

        /**
         * @private
         * DOM WRITE
         */
        value: function removeCssClass(className) {
            this.getNativeElement().classList.remove(className);
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "setScrollElementStyle",
        value: function setScrollElementStyle(prop, val) {
            this._scrollEle.style[prop] = val;
        }
        /**
         * Returns the content and scroll elements' dimensions.
         * @returns {object} dimensions  The content and scroll elements' dimensions
         * {number} dimensions.contentHeight  content offsetHeight
         * {number} dimensions.contentTop  content offsetTop
         * {number} dimensions.contentBottom  content offsetTop+offsetHeight
         * {number} dimensions.contentWidth  content offsetWidth
         * {number} dimensions.contentLeft  content offsetLeft
         * {number} dimensions.contentRight  content offsetLeft + offsetWidth
         * {number} dimensions.scrollHeight  scroll scrollHeight
         * {number} dimensions.scrollTop  scroll scrollTop
         * {number} dimensions.scrollBottom  scroll scrollTop + scrollHeight
         * {number} dimensions.scrollWidth  scroll scrollWidth
         * {number} dimensions.scrollLeft  scroll scrollLeft
         * {number} dimensions.scrollRight  scroll scrollLeft + scrollWidth
         */

    }, {
        key: "getContentDimensions",
        value: function getContentDimensions() {
            var _scrollEle = this._scrollEle;
            var parentElement = _scrollEle.parentElement;
            return {
                contentHeight: parentElement.offsetHeight,
                contentTop: parentElement.offsetTop,
                contentBottom: parentElement.offsetTop + parentElement.offsetHeight,
                contentWidth: parentElement.offsetWidth,
                contentLeft: parentElement.offsetLeft,
                contentRight: parentElement.offsetLeft + parentElement.offsetWidth,
                scrollHeight: _scrollEle.scrollHeight,
                scrollTop: _scrollEle.scrollTop,
                scrollBottom: _scrollEle.scrollTop + _scrollEle.scrollHeight,
                scrollWidth: _scrollEle.scrollWidth,
                scrollLeft: _scrollEle.scrollLeft,
                scrollRight: _scrollEle.scrollLeft + _scrollEle.scrollWidth
            };
        }
        /**
         * @private
         * DOM WRITE
         * Adds padding to the bottom of the scroll element when the keyboard is open
         * so content below the keyboard can be scrolled into view.
         */

    }, {
        key: "addScrollPadding",
        value: function addScrollPadding(newPadding) {
            if (newPadding > this._scrollPadding) {
                console.debug('content addScrollPadding', newPadding);
                this._scrollPadding = newPadding;
                this._scrollEle.style.paddingBottom = newPadding + 'px';
            }
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "clearScrollPaddingFocusOut",
        value: function clearScrollPaddingFocusOut() {
            var _this3 = this;

            if (!this._inputPolling) {
                this._inputPolling = true;
                this._keyboard.onClose(function () {
                    _this3._scrollPadding = 0;
                    _this3._scrollEle.style.paddingBottom = _this3._paddingBottom > 0 ? _this3._paddingBottom + 'px' : '';
                    _this3._inputPolling = false;
                    _this3.addScrollPadding(0);
                }, 200, Infinity);
            }
        }
        /**
         * @private
         * DOM READ
         */

    }, {
        key: "readDimensions",
        value: function readDimensions() {
            this._paddingTop = 0;
            this._paddingRight = 0;
            this._paddingBottom = 0;
            this._paddingLeft = 0;
            this._headerHeight = 0;
            this._tabbarPlacement = null;
            var ele = this._elementRef.nativeElement;
            var parentEle = ele.parentElement;
            var computedStyle = void 0;
            for (var i = 0; i < parentEle.children.length; i++) {
                ele = parentEle.children[i];
                if (ele.tagName === 'ION-CONTENT') {
                    if (this._fullscreen) {
                        computedStyle = getComputedStyle(ele);
                        this._paddingTop = parsePxUnit(computedStyle.paddingTop);
                        this._paddingBottom = parsePxUnit(computedStyle.paddingBottom);
                        this._paddingRight = parsePxUnit(computedStyle.paddingRight);
                        this._paddingLeft = parsePxUnit(computedStyle.paddingLeft);
                    }
                } else if (ele.tagName === 'ION-HEADER') {
                    this._headerHeight = ele.clientHeight;
                } else if (ele.tagName === 'ION-FOOTER') {
                    this._footerHeight = ele.clientHeight;
                    this._footerEle = ele;
                }
            }
            ele = parentEle;
            var tabbarEle = void 0;
            while (ele && ele.tagName !== 'ION-MODAL' && !ele.classList.contains('tab-subpage')) {
                if (ele.tagName === 'ION-TABS') {
                    tabbarEle = ele.firstElementChild;
                    this._tabbarHeight = tabbarEle.clientHeight;
                    if (this._tabbarPlacement === null) {
                        // this is the first tabbar found, remember it's position
                        this._tabbarPlacement = ele.getAttribute('tabbarplacement');
                    }
                }
                ele = ele.parentElement;
            }
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "writeDimensions",
        value: function writeDimensions() {
            var newVal = void 0;
            var scrollEle = this._scrollEle;
            // only write when it has changed
            if (this._fullscreen) {
                // adjust the content with padding, allowing content to scroll under headers/footers
                // however, on iOS you cannot control the margins of the scrollbar (last tested iOS9.2)
                // only add inline padding styles if the computed padding value, which would
                // have come from the app's css, is different than the new padding value
                newVal = this._headerHeight + this._paddingTop;
                if (this._tabbarPlacement === 'top') {
                    newVal += this._tabbarHeight;
                }
                if (newVal !== this.adjustedTop) {
                    scrollEle.style.paddingTop = newVal > 0 ? newVal + 'px' : '';
                    this.adjustedTop = newVal;
                }
                newVal = this._footerHeight + this._paddingBottom;
                if (this._tabbarPlacement === 'bottom') {
                    newVal += this._tabbarHeight;
                }
                if (newVal !== this.adjustedBottom) {
                    scrollEle.style.paddingBottom = newVal > 0 ? newVal + 'px' : '';
                    this.adjustedBottom = newVal;
                    if (newVal > 0 && this._footerEle) {
                        this._footerEle.style.bottom = newVal - this._footerHeight + 'px';
                    }
                }
            } else {
                // adjust the content with margins
                newVal = this._headerHeight;
                if (this._tabbarPlacement === 'top') {
                    newVal += this._tabbarHeight;
                }
                if (newVal !== this.adjustedTop) {
                    scrollEle.style.marginTop = newVal > 0 ? newVal + 'px' : '';
                    this.adjustedTop = newVal;
                }
                newVal = this._footerHeight;
                if (this._tabbarPlacement === 'bottom') {
                    newVal += this._tabbarHeight;
                }
                if (newVal !== this.adjustedBottom) {
                    scrollEle.style.marginBottom = newVal > 0 ? newVal + 'px' : '';
                    this.adjustedBottom = newVal;
                    if (newVal > 0 && this._footerEle) {
                        this._footerEle.style.bottom = newVal - this._footerHeight + 'px';
                    }
                }
            }
            if (this._tabbarPlacement !== null && this._tabs) {
                // set the position of the tabbar
                if (this._tabbarPlacement === 'top') {
                    this._tabs.setTabbarPosition(this._headerHeight, -1);
                } else {
                    this._tabs.setTabbarPosition(-1, 0);
                }
            }
        }
    }, {
        key: "fullscreen",
        get: function get() {
            return !!this._fullscreen;
        },
        set: function set(val) {
            this._fullscreen = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__util_util__["isTrueProperty"])(val);
        }
    }]);

    return Content;
}(__WEBPACK_IMPORTED_MODULE_2__ion__["a" /* Ion */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Content.prototype, "fullscreen", null);
Content = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-content',
    template: '<scroll-content>' + '<ng-content></ng-content>' + '</scroll-content>' + '<ng-content select="ion-fixed"></ng-content>' + '<ng-content select="ion-refresher"></ng-content>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    host: {
        '[class.statusbar-padding]': '_sbPadding'
    }
}), __param(5, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(6, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__util_keyboard__["Keyboard"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__util_keyboard__["Keyboard"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_7__tabs_tabs__["a" /* Tabs */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__tabs_tabs__["a" /* Tabs */]) === 'function' && _g || Object])], Content);
function parsePxUnit(val) {
    return val.indexOf('px') > 0 ? parseInt(val, 10) : 0;
}
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "b", function() { return RequestMethod; });
/* harmony export */ __webpack_require__.d(exports, "c", function() { return ReadyState; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return ResponseType; });
/* harmony export */ __webpack_require__.d(exports, "d", function() { return ContentType; });/**
 * Supported http methods.
 */
var RequestMethod;
(function (RequestMethod) {
    RequestMethod[RequestMethod["Get"] = 0] = "Get";
    RequestMethod[RequestMethod["Post"] = 1] = "Post";
    RequestMethod[RequestMethod["Put"] = 2] = "Put";
    RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
    RequestMethod[RequestMethod["Options"] = 4] = "Options";
    RequestMethod[RequestMethod["Head"] = 5] = "Head";
    RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
})(RequestMethod || (RequestMethod = {}));
/**
 * All possible states in which a connection can be, based on
 * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
 * additional "CANCELLED" state.
 */
var ReadyState;
(function (ReadyState) {
    ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
    ReadyState[ReadyState["Open"] = 1] = "Open";
    ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
    ReadyState[ReadyState["Loading"] = 3] = "Loading";
    ReadyState[ReadyState["Done"] = 4] = "Done";
    ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
})(ReadyState || (ReadyState = {}));
/**
 * Acceptable response types to be associated with a {@link Response}, based on
 * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
 */
var ResponseType;
(function (ResponseType) {
    ResponseType[ResponseType["Basic"] = 0] = "Basic";
    ResponseType[ResponseType["Cors"] = 1] = "Cors";
    ResponseType[ResponseType["Default"] = 2] = "Default";
    ResponseType[ResponseType["Error"] = 3] = "Error";
    ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
})(ResponseType || (ResponseType = {}));
/**
 * Supported content type to be automatically associated with a {@link Request}.
 */
var ContentType;
(function (ContentType) {
    ContentType[ContentType["NONE"] = 0] = "NONE";
    ContentType[ContentType["JSON"] = 1] = "JSON";
    ContentType[ContentType["FORM"] = 2] = "FORM";
    ContentType[ContentType["FORM_DATA"] = 3] = "FORM_DATA";
    ContentType[ContentType["TEXT"] = 4] = "TEXT";
    ContentType[ContentType["BLOB"] = 5] = "BLOB";
    ContentType[ContentType["ARRAY_BUFFER"] = 6] = "ARRAY_BUFFER";
})(ContentType || (ContentType = {}));
//# sourceMappingURL=enums.js.map

/***/ },
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animations_animation__ = __webpack_require__(36);

/* harmony export */ __webpack_require__.d(exports, "Transition", function() { return Transition; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}


/**
 * @private
 *
 * - play
 * - Add before classes - DOM WRITE
 * - Remove before classes - DOM WRITE
 * - Add before inline styles - DOM WRITE
 * - set inline FROM styles - DOM WRITE
 * - RAF
 * - read toolbar dimensions - DOM READ
 * - write content top/bottom padding - DOM WRITE
 * - set css transition duration/easing - DOM WRITE
 * - RAF
 * - set inline TO styles - DOM WRITE
 */
var Transition = function (_Animation) {
    _inherits(Transition, _Animation);

    function Transition(enteringView, leavingView, opts) {
        _classCallCheck(this, Transition);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Transition).call(this, null, {
            renderDelay: opts.renderDelay
        }));

        _this.enteringView = enteringView;
        return _this;
    }

    _createClass(Transition, null, [{
        key: 'createTransition',
        value: function createTransition(enteringView, leavingView, opts) {
            var TransitionClass = TransitionRegistry[opts.animation];
            if (!TransitionClass) {
                // didn't find a transition animation, default to ios-transition
                TransitionClass = TransitionRegistry['ios-transition'];
            }
            return new TransitionClass(enteringView, leavingView, opts);
        }
    }, {
        key: 'register',
        value: function register(name, TransitionClass) {
            TransitionRegistry[name] = TransitionClass;
        }
    }]);

    return Transition;
}(__WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"]);
var TransitionRegistry = {};

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var config_1 = __webpack_require__(16);
var form_1 = __webpack_require__(73);
var dom_1 = __webpack_require__(17);
var key_1 = __webpack_require__(210);
var Keyboard = function () {
    function Keyboard(config, _form, _zone) {
        var _this = this;
        this._form = _form;
        this._zone = _zone;
        _zone.runOutsideAngular(function () {
            _this.focusOutline(config.get('focusOutline'), document);
        });
    }
    /**
     * Check to see if the keyboard is open or not.
     *
     * ```ts
     * export class MyClass{
     *  constructor(keyboard: Keyboard){
     *    this.keyboard = keyboard;
     *  }
     *  keyboardCheck(){
     *    setTimeout(()  => console.log('is the keyboard open ', this.keyboard.isOpen()));
     *  }
     * }
     *
     * ```
     *
     * @return {boolean} returns a true or flase value if the keyboard is open or not
     */
    Keyboard.prototype.isOpen = function () {
        return dom_1.hasFocusedTextInput();
    };
    /**
     * When the keyboard is closed, call any methods you want
     *
     * ```ts
     * export class MyClass{
     *  constructor(keyboard: Keyboard){
     *    this.keyboard = keyboard;
     *    this.keyboard.onClose(this.closeCallback);
     *  }
     *  closeCallback(){
     *     // call what ever functionality you want on keyboard close
     *     console.log('Closing time');
     *  }
     * }
     *
     * ```
     * @param {function} callback method you want to call when the keyboard has been closed
     * @return {function} returns a callback that gets fired when the keyboard is closed
     */
    Keyboard.prototype.onClose = function (callback, pollingInternval, pollingChecksMax) {
        if (pollingInternval === void 0) {
            pollingInternval = KEYBOARD_CLOSE_POLLING;
        }
        if (pollingChecksMax === void 0) {
            pollingChecksMax = KEYBOARD_POLLING_CHECKS_MAX;
        }
        console.debug('keyboard onClose');
        var self = this;
        var checks = 0;
        var promise = null;
        if (!callback) {
            // a callback wasn't provided, so let's return a promise instead
            promise = new Promise(function (resolve) {
                callback = resolve;
            });
        }
        function checkKeyboard() {
            console.debug('keyboard isOpen', self.isOpen());
            if (!self.isOpen() || checks > pollingChecksMax) {
                dom_1.rafFrames(30, function () {
                    self._zone.run(function () {
                        console.debug('keyboard closed');
                        callback();
                    });
                });
            } else {
                dom_1.nativeTimeout(checkKeyboard, pollingInternval);
            }
            checks++;
        }
        dom_1.nativeTimeout(checkKeyboard, pollingInternval);
        return promise;
    };
    /**
     * Programmatically close the keyboard
     *
     */
    Keyboard.prototype.close = function () {
        var _this = this;
        console.debug('keyboard close()');
        dom_1.nativeRaf(function () {
            if (dom_1.hasFocusedTextInput()) {
                // only focus out when a text input has focus
                _this._form.focusOut();
            }
        });
    };
    /**
     * @private
     */
    Keyboard.prototype.focusOutline = function (setting, document) {
        /* Focus Outline
         * --------------------------------------------------
         * By default, when a keydown event happens from a tab key, then
         * the 'focus-outline' css class is added to the body element
         * so focusable elements have an outline. On a mousedown or
         * touchstart event, then the 'focus-outline' css class is removed.
         *
         * Config default overrides:
         * focusOutline: true     - Always add the focus-outline
         * focusOutline: false    - Do not add the focus-outline
         */
        var self = this;
        var isKeyInputEnabled = false;
        function cssClass() {
            dom_1.nativeRaf(function () {
                document.body.classList[isKeyInputEnabled ? 'add' : 'remove']('focus-outline');
            });
        }
        if (setting === true) {
            isKeyInputEnabled = true;
            return cssClass();
        } else if (setting === false) {
            return;
        }
        // default is to add the focus-outline when the tab key is used
        function keyDown(ev) {
            if (!isKeyInputEnabled && ev.keyCode === key_1.Key.TAB) {
                isKeyInputEnabled = true;
                enableKeyInput();
            }
        }
        function pointerDown() {
            isKeyInputEnabled = false;
            enableKeyInput();
        }
        function enableKeyInput() {
            cssClass();
            self._zone.runOutsideAngular(function () {
                document.removeEventListener('mousedown', pointerDown);
                document.removeEventListener('touchstart', pointerDown);
                if (isKeyInputEnabled) {
                    document.addEventListener('mousedown', pointerDown);
                    document.addEventListener('touchstart', pointerDown);
                }
            });
        }
        document.addEventListener('keydown', keyDown);
    };
    /** @nocollapse */
    Keyboard.decorators = [{ type: core_1.Injectable }];
    /** @nocollapse */
    Keyboard.ctorParameters = [{ type: config_1.Config }, { type: form_1.Form }, { type: core_1.NgZone }];
    return Keyboard;
}();
exports.Keyboard = Keyboard;
var KEYBOARD_CLOSE_POLLING = 150;
var KEYBOARD_POLLING_CHECKS_MAX = 100;

/***/ },
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var app_1 = __webpack_require__(57);
var ion_1 = __webpack_require__(58);
var config_1 = __webpack_require__(16);
var keyboard_1 = __webpack_require__(95);
var dom_1 = __webpack_require__(17);
var scroll_view_1 = __webpack_require__(513);
var tabs_1 = __webpack_require__(311);
var view_controller_1 = __webpack_require__(43);
var util_1 = __webpack_require__(7);
var Content = function (_super) {
    __extends(Content, _super);
    function Content(_elementRef, _config, _app, _keyboard, _zone, viewCtrl, _tabs) {
        _super.call(this, _elementRef);
        this._elementRef = _elementRef;
        this._config = _config;
        this._app = _app;
        this._keyboard = _keyboard;
        this._zone = _zone;
        this._tabs = _tabs;
        this._inputPolling = false;
        this._sbPadding = _config.getBoolean('statusbarPadding', false);
        if (viewCtrl) {
            viewCtrl.setContent(this);
            viewCtrl.setContentRef(_elementRef);
        }
    }
    /**
     * @private
     */
    Content.prototype.ngOnInit = function () {
        var self = this;
        self._scrollEle = self._elementRef.nativeElement.children[0];
        self._zone.runOutsideAngular(function () {
            self._scroll = new scroll_view_1.ScrollView(self._scrollEle);
            if (self._config.getBoolean('tapPolyfill')) {
                self._scLsn = self.addScrollListener(function () {
                    self._app.setScrolling();
                });
            }
        });
    };
    /**
     * @private
     */
    Content.prototype.ngOnDestroy = function () {
        this._scLsn && this._scLsn();
        this._scroll && this._scroll.destroy();
        this._scrollEle = this._footerEle = this._scLsn = null;
    };
    /**
     * @private
     */
    Content.prototype.addScrollListener = function (handler) {
        return this._addListener('scroll', handler);
    };
    /**
     * @private
     */
    Content.prototype.addTouchStartListener = function (handler) {
        return this._addListener('touchstart', handler);
    };
    /**
     * @private
     */
    Content.prototype.addTouchMoveListener = function (handler) {
        return this._addListener('touchmove', handler);
    };
    /**
     * @private
     */
    Content.prototype.addTouchEndListener = function (handler) {
        return this._addListener('touchend', handler);
    };
    /**
     * @private
     */
    Content.prototype.addMouseDownListener = function (handler) {
        return this._addListener('mousedown', handler);
    };
    /**
     * @private
     */
    Content.prototype.addMouseUpListener = function (handler) {
        return this._addListener('mouseup', handler);
    };
    /**
     * @private
     */
    Content.prototype.addMouseMoveListener = function (handler) {
        return this._addListener('mousemove', handler);
    };
    Content.prototype._addListener = function (type, handler) {
        var _this = this;
        if (!this._scrollEle) {
            return;
        }
        // ensure we're not creating duplicates
        this._scrollEle.removeEventListener(type, handler);
        this._scrollEle.addEventListener(type, handler);
        return function () {
            if (_this._scrollEle) {
                _this._scrollEle.removeEventListener(type, handler);
            }
        };
    };
    /**
     * @private
     */
    Content.prototype.getScrollElement = function () {
        return this._scrollEle;
    };
    /**
     * @private
     * Call a method when scrolling has stopped
     * @param {Function} callback The method you want perform when scrolling has ended
     */
    Content.prototype.onScrollEnd = function (callback) {
        var lastScrollTop = null;
        var framesUnchanged = 0;
        var _scrollEle = this._scrollEle;
        function next() {
            var currentScrollTop = _scrollEle.scrollTop;
            if (lastScrollTop !== null) {
                if (Math.round(lastScrollTop) === Math.round(currentScrollTop)) {
                    framesUnchanged++;
                } else {
                    framesUnchanged = 0;
                }
                if (framesUnchanged > 9) {
                    return callback();
                }
            }
            lastScrollTop = currentScrollTop;
            dom_1.nativeRaf(function () {
                dom_1.nativeRaf(next);
            });
        }
        dom_1.nativeTimeout(next, 100);
    };
    /**
     * @private
     */
    Content.prototype.onScrollElementTransitionEnd = function (callback) {
        dom_1.transitionEnd(this._scrollEle, callback);
    };
    /**
     * Scroll to the specified position.
     *
     * ```ts
     * import {Component, ViewChild} from '@angular/core';
     * import {Content} from 'ionic-angular';
     *
     * @Component({
     *   template: `<ion-content>
     *                <button (click)="scrollTo()">Down 500px</button>
     *              </ion-content>`
     * )}
     * export class MyPage{
     *   @ViewChild(Content) content: Content;
     *
     *   scrollTo() {
     *     // set the scrollLeft to 0px, and scrollTop to 500px
     *     // the scroll duration should take 200ms
     *     this.content.scrollTo(0, 500, 200);
     *   }
     * }
     * ```
     * @param {number} x  The x-value to scroll to.
     * @param {number} y  The y-value to scroll to.
     * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
     * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
     */
    Content.prototype.scrollTo = function (x, y, duration) {
        if (duration === void 0) {
            duration = 300;
        }
        return this._scroll.scrollTo(x, y, duration);
    };
    /**
     * Scroll to the top of the content component.
     *
     * ```ts
     * import {Component, ViewChild} from '@angular/core';
     * import {Content} from 'ionic-angular';
     *
     * @Component({
     *   template: `<ion-content>
     *                <button (click)="scrollToTop()">Scroll to top</button>
     *              </ion-content>`
     * )}
     * export class MyPage{
     *   @ViewChild(Content) content: Content;
     *
     *   scrollToTop() {
     *     this.content.scrollToTop();
     *   }
     * }
     * ```
     * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
     * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
     */
    Content.prototype.scrollToTop = function (duration) {
        if (duration === void 0) {
            duration = 300;
        }
        return this._scroll.scrollToTop(duration);
    };
    /**
     * Get the `scrollTop` property of the content's scrollable element.
     * @returns {number}
     */
    Content.prototype.getScrollTop = function () {
        return this._scroll.getTop();
    };
    /**
     * Set the `scrollTop` property of the content's scrollable element.
     * @param {number} top
     */
    Content.prototype.setScrollTop = function (top) {
        this._scroll.setTop(top);
    };
    /**
     * Scroll to the bottom of the content component.
     * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
     * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
     */
    Content.prototype.scrollToBottom = function (duration) {
        if (duration === void 0) {
            duration = 300;
        }
        return this._scroll.scrollToBottom(duration);
    };
    /**
     * @private
     */
    Content.prototype.jsScroll = function (onScrollCallback) {
        return this._scroll.jsScroll(onScrollCallback);
    };
    /**
     * @private
     * DOM WRITE
     */
    Content.prototype.addCssClass = function (className) {
        this.getNativeElement().classList.add(className);
    };
    Object.defineProperty(Content.prototype, "fullscreen", {
        get: function get() {
            return !!this._fullscreen;
        },
        set: function set(val) {
            this._fullscreen = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * DOM WRITE
     */
    Content.prototype.removeCssClass = function (className) {
        this.getNativeElement().classList.remove(className);
    };
    /**
     * @private
     * DOM WRITE
     */
    Content.prototype.setScrollElementStyle = function (prop, val) {
        this._scrollEle.style[prop] = val;
    };
    /**
     * Returns the content and scroll elements' dimensions.
     * @returns {object} dimensions  The content and scroll elements' dimensions
     * {number} dimensions.contentHeight  content offsetHeight
     * {number} dimensions.contentTop  content offsetTop
     * {number} dimensions.contentBottom  content offsetTop+offsetHeight
     * {number} dimensions.contentWidth  content offsetWidth
     * {number} dimensions.contentLeft  content offsetLeft
     * {number} dimensions.contentRight  content offsetLeft + offsetWidth
     * {number} dimensions.scrollHeight  scroll scrollHeight
     * {number} dimensions.scrollTop  scroll scrollTop
     * {number} dimensions.scrollBottom  scroll scrollTop + scrollHeight
     * {number} dimensions.scrollWidth  scroll scrollWidth
     * {number} dimensions.scrollLeft  scroll scrollLeft
     * {number} dimensions.scrollRight  scroll scrollLeft + scrollWidth
     */
    Content.prototype.getContentDimensions = function () {
        var _scrollEle = this._scrollEle;
        var parentElement = _scrollEle.parentElement;
        return {
            contentHeight: parentElement.offsetHeight,
            contentTop: parentElement.offsetTop,
            contentBottom: parentElement.offsetTop + parentElement.offsetHeight,
            contentWidth: parentElement.offsetWidth,
            contentLeft: parentElement.offsetLeft,
            contentRight: parentElement.offsetLeft + parentElement.offsetWidth,
            scrollHeight: _scrollEle.scrollHeight,
            scrollTop: _scrollEle.scrollTop,
            scrollBottom: _scrollEle.scrollTop + _scrollEle.scrollHeight,
            scrollWidth: _scrollEle.scrollWidth,
            scrollLeft: _scrollEle.scrollLeft,
            scrollRight: _scrollEle.scrollLeft + _scrollEle.scrollWidth
        };
    };
    /**
     * @private
     * DOM WRITE
     * Adds padding to the bottom of the scroll element when the keyboard is open
     * so content below the keyboard can be scrolled into view.
     */
    Content.prototype.addScrollPadding = function (newPadding) {
        if (newPadding > this._scrollPadding) {
            console.debug('content addScrollPadding', newPadding);
            this._scrollPadding = newPadding;
            this._scrollEle.style.paddingBottom = newPadding + 'px';
        }
    };
    /**
     * @private
     * DOM WRITE
     */
    Content.prototype.clearScrollPaddingFocusOut = function () {
        var _this = this;
        if (!this._inputPolling) {
            this._inputPolling = true;
            this._keyboard.onClose(function () {
                _this._scrollPadding = 0;
                _this._scrollEle.style.paddingBottom = _this._paddingBottom > 0 ? _this._paddingBottom + 'px' : '';
                _this._inputPolling = false;
                _this.addScrollPadding(0);
            }, 200, Infinity);
        }
    };
    /**
     * @private
     * DOM READ
     */
    Content.prototype.readDimensions = function () {
        this._paddingTop = 0;
        this._paddingRight = 0;
        this._paddingBottom = 0;
        this._paddingLeft = 0;
        this._headerHeight = 0;
        this._tabbarPlacement = null;
        var ele = this._elementRef.nativeElement;
        var parentEle = ele.parentElement;
        var computedStyle;
        for (var i = 0; i < parentEle.children.length; i++) {
            ele = parentEle.children[i];
            if (ele.tagName === 'ION-CONTENT') {
                if (this._fullscreen) {
                    computedStyle = getComputedStyle(ele);
                    this._paddingTop = parsePxUnit(computedStyle.paddingTop);
                    this._paddingBottom = parsePxUnit(computedStyle.paddingBottom);
                    this._paddingRight = parsePxUnit(computedStyle.paddingRight);
                    this._paddingLeft = parsePxUnit(computedStyle.paddingLeft);
                }
            } else if (ele.tagName === 'ION-HEADER') {
                this._headerHeight = ele.clientHeight;
            } else if (ele.tagName === 'ION-FOOTER') {
                this._footerHeight = ele.clientHeight;
                this._footerEle = ele;
            }
        }
        ele = parentEle;
        var tabbarEle;
        while (ele && ele.tagName !== 'ION-MODAL' && !ele.classList.contains('tab-subpage')) {
            if (ele.tagName === 'ION-TABS') {
                tabbarEle = ele.firstElementChild;
                this._tabbarHeight = tabbarEle.clientHeight;
                if (this._tabbarPlacement === null) {
                    // this is the first tabbar found, remember it's position
                    this._tabbarPlacement = ele.getAttribute('tabbarplacement');
                }
            }
            ele = ele.parentElement;
        }
    };
    /**
     * @private
     * DOM WRITE
     */
    Content.prototype.writeDimensions = function () {
        var newVal;
        var scrollEle = this._scrollEle;
        // only write when it has changed
        if (this._fullscreen) {
            // adjust the content with padding, allowing content to scroll under headers/footers
            // however, on iOS you cannot control the margins of the scrollbar (last tested iOS9.2)
            // only add inline padding styles if the computed padding value, which would
            // have come from the app's css, is different than the new padding value
            newVal = this._headerHeight + this._paddingTop;
            if (this._tabbarPlacement === 'top') {
                newVal += this._tabbarHeight;
            }
            if (newVal !== this.adjustedTop) {
                scrollEle.style.paddingTop = newVal > 0 ? newVal + 'px' : '';
                this.adjustedTop = newVal;
            }
            newVal = this._footerHeight + this._paddingBottom;
            if (this._tabbarPlacement === 'bottom') {
                newVal += this._tabbarHeight;
            }
            if (newVal !== this.adjustedBottom) {
                scrollEle.style.paddingBottom = newVal > 0 ? newVal + 'px' : '';
                this.adjustedBottom = newVal;
                if (newVal > 0 && this._footerEle) {
                    this._footerEle.style.bottom = newVal - this._footerHeight + 'px';
                }
            }
        } else {
            // adjust the content with margins
            newVal = this._headerHeight;
            if (this._tabbarPlacement === 'top') {
                newVal += this._tabbarHeight;
            }
            if (newVal !== this.adjustedTop) {
                scrollEle.style.marginTop = newVal > 0 ? newVal + 'px' : '';
                this.adjustedTop = newVal;
            }
            newVal = this._footerHeight;
            if (this._tabbarPlacement === 'bottom') {
                newVal += this._tabbarHeight;
            }
            if (newVal !== this.adjustedBottom) {
                scrollEle.style.marginBottom = newVal > 0 ? newVal + 'px' : '';
                this.adjustedBottom = newVal;
                if (newVal > 0 && this._footerEle) {
                    this._footerEle.style.bottom = newVal - this._footerHeight + 'px';
                }
            }
        }
        if (this._tabbarPlacement !== null && this._tabs) {
            // set the position of the tabbar
            if (this._tabbarPlacement === 'top') {
                this._tabs.setTabbarPosition(this._headerHeight, -1);
            } else {
                this._tabs.setTabbarPosition(-1, 0);
            }
        }
    };
    /** @nocollapse */
    Content.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-content',
            template: '<scroll-content>' + '<ng-content></ng-content>' + '</scroll-content>' + '<ng-content select="ion-fixed"></ng-content>' + '<ng-content select="ion-refresher"></ng-content>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None,
            host: {
                '[class.statusbar-padding]': '_sbPadding'
            }
        }] }];
    /** @nocollapse */
    Content.ctorParameters = [{ type: core_1.ElementRef }, { type: config_1.Config }, { type: app_1.App }, { type: keyboard_1.Keyboard }, { type: core_1.NgZone }, { type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: tabs_1.Tabs, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    Content.propDecorators = {
        'fullscreen': [{ type: core_1.Input }]
    };
    return Content;
}(ion_1.Ion);
exports.Content = Content;
function parsePxUnit(val) {
    return val.indexOf('px') > 0 ? parseInt(val, 10) : 0;
}

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return MenuController; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * @name MenuController
 * @description
 * The MenuController is a provider which makes it easy to control a [Menu](../Menu).
 * Its methods can be used to display the menu, enable the menu, toggle the menu, and more.
 * The controller will grab a reference to the menu by the `side`, `id`, or, if neither
 * of these are passed to it, it will grab the first menu it finds.
 *
 *
 * @usage
 *
 * Add a basic menu component to start with. See the [Menu](../Menu) API docs
 * for more information on adding menu components.
 *
 * ```html
 * <ion-menu [content]="mycontent">
 *   <ion-content>
 *     <ion-list>
 *     ...
 *     </ion-list>
 *   </ion-content>
 * </ion-menu>
 *
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * To call the controller methods, inject the `MenuController` provider
 * into the page. Then, create some methods for opening, closing, and
 * toggling the menu.
 *
 * ```ts
 * import {Component} from '@angular/core';
 * import {MenuController} from 'ionic-angular';
 *
 * @Component({...})
 * export class MyPage {
 *
 *  constructor(private menu: MenuController) {
 *
 *  }
 *
 *  openMenu() {
 *    this.menu.open();
 *  }
 *
 *  closeMenu() {
 *    this.menu.close();
 *  }
 *
 *  toggleMenu() {
 *    this.menu.toggle();
 *  }
 *
 * }
 * ```
 *
 * Since only one menu exists, the `MenuController` will grab the
 * correct menu and call the correct method for each.
 *
 *
 * ### Multiple Menus on Different Sides
 *
 * For applications with both a left and right menu, the desired menu can be
 * grabbed by passing the `side` of the menu. If nothing is passed, it will
 * default to the `"left"` menu.
 *
 * ```html
 * <ion-menu side="left" [content]="mycontent">...</ion-menu>
 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * ```ts
 *  toggleLeftMenu() {
 *    this.menu.toggle();
 *  }
 *
 *  toggleRightMenu() {
 *    this.menu.toggle('right');
 *  }
 * ```
 *
 *
 * ### Multiple Menus on the Same Side
 *
 * An application can have multiple menus on the same side. In order to determine
 * the menu to control, an `id` should be passed. In the example below, the menu
 * with the `authenticated` id will be enabled, and the menu with the `unauthenticated`
 * id will be disabled.
 *
 * ```html
 * <ion-menu id="authenticated" side="left" [content]="mycontent">...</ion-menu>
 * <ion-menu id="unauthenticated" side="left" [content]="mycontent">...</ion-menu>
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * ```ts
 *  enableAuthenticatedMenu() {
 *    this.menu.enable(true, 'authenticated');
 *    this.menu.enable(false, 'unauthenticated');
 *  }
 * ```
 *
 * Note: if an app only has one menu, there is no reason to pass an `id`.
 *
 *
 * @demo /docs/v2/demos/menu/
 *
 * @see {@link /docs/v2/components#menus Menu Component Docs}
 * @see {@link ../Menu Menu API Docs}
 *
 */
var MenuController = function () {
    function MenuController() {
        _classCallCheck(this, MenuController);

        this._menus = [];
    }
    /**
     * Progamatically open the Menu.
     * @return {Promise} returns a promise when the menu is fully opened
     */

    _createClass(MenuController, [{
        key: 'open',
        value: function open(menuId) {
            var menu = this.get(menuId);
            if (menu) {
                return menu.open();
            }
            return Promise.resolve(false);
        }
        /**
         * Progamatically close the Menu. If no `menuId` is given as the first
         * argument then it'll close any menu which is open. If a `menuId`
         * is given then it'll close that exact menu.
         * @param {string} [menuId]  Optionally get the menu by its id, or side.
         * @return {Promise} returns a promise when the menu is fully closed
         */

    }, {
        key: 'close',
        value: function close(menuId) {
            var menu = void 0;
            if (menuId) {
                // find the menu by its id
                menu = this.get(menuId);
            } else {
                // find the menu that is open
                menu = this._menus.find(function (m) {
                    return m.isOpen;
                });
            }
            if (menu) {
                // close the menu
                return menu.close();
            }
            return Promise.resolve(false);
        }
    }, {
        key: 'tempDisable',
        value: function tempDisable(temporarilyDisable) {
            this._menus.forEach(function (menu) {
                menu.tempDisable(temporarilyDisable);
            });
        }
        /**
         * Toggle the menu. If it's closed, it will open, and if opened, it
         * will close.
         * @param {string} [menuId]  Optionally get the menu by its id, or side.
         * @return {Promise} returns a promise when the menu has been toggled
         */

    }, {
        key: 'toggle',
        value: function toggle(menuId) {
            var menu = this.get(menuId);
            if (menu) {
                return menu.toggle();
            }
            return Promise.resolve(false);
        }
        /**
         * Used to enable or disable a menu. For example, there could be multiple
         * left menus, but only one of them should be able to be opened at the same
         * time. If there are multiple menus on the same side, then enabling one menu
         * will also automatically disable all the others that are on the same side.
         * @param {string} [menuId]  Optionally get the menu by its id, or side.
         * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
         */

    }, {
        key: 'enable',
        value: function enable(shouldEnable, menuId) {
            var menu = this.get(menuId);
            if (menu) {
                return menu.enable(shouldEnable);
            }
        }
        /**
         * Used to enable or disable the ability to swipe open the menu.
         * @param {boolean} shouldEnable  True if it should be swipe-able, false if not.
         * @param {string} [menuId]  Optionally get the menu by its id, or side.
         * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
         */

    }, {
        key: 'swipeEnable',
        value: function swipeEnable(shouldEnable, menuId) {
            var menu = this.get(menuId);
            if (menu) {
                return menu.swipeEnable(shouldEnable);
            }
        }
        /**
         * @return {boolean} Returns true if the menu is currently open, otherwise false.
         */

    }, {
        key: 'isOpen',
        value: function isOpen(menuId) {
            var menu = this.get(menuId);
            return menu && menu.isOpen || false;
        }
        /**
         * @return {boolean} Returns true if the menu is currently enabled, otherwise false.
         */

    }, {
        key: 'isEnabled',
        value: function isEnabled(menuId) {
            var menu = this.get(menuId);
            return menu && menu.enabled || false;
        }
        /**
         * Used to get a menu instance. If a `menuId` is not provided then it'll
         * return the first menu found. If a `menuId` is `left` or `right`, then
         * it'll return the enabled menu on that side. Otherwise, if a `menuId` is
         * provided, then it'll try to find the menu using the menu's `id`
         * property. If a menu is not found then it'll return `null`.
         * @param {string} [menuId]  Optionally get the menu by its id, or side.
         * @return {Menu}  Returns the instance of the menu if found, otherwise `null`.
         */

    }, {
        key: 'get',
        value: function get(menuId) {
            var menu;
            if (menuId === 'left' || menuId === 'right') {
                // there could be more than one menu on the same side
                // so first try to get the enabled one
                menu = this._menus.find(function (m) {
                    return m.side === menuId && m.enabled;
                });
                if (menu) return menu;
                // didn't find a menu side that is enabled
                // so try to get the first menu side found
                return this._menus.find(function (m) {
                    return m.side === menuId;
                }) || null;
            } else if (menuId) {
                // the menuId was not left or right
                // so try to get the menu by its "id"
                return this._menus.find(function (m) {
                    return m.id === menuId;
                }) || null;
            }
            // return the first enabled menu
            menu = this._menus.find(function (m) {
                return m.enabled;
            });
            if (menu) return menu;
            // get the first menu in the array, if one exists
            return this._menus.length ? this._menus[0] : null;
        }
        /**
         * @return {Array<Menu>}  Returns an array of all menu instances.
         */

    }, {
        key: 'getMenus',
        value: function getMenus() {
            return this._menus;
        }
        /**
         * @private
         */

    }, {
        key: 'register',
        value: function register(menu) {
            this._menus.push(menu);
        }
        /**
         * @private
         */

    }, {
        key: 'unregister',
        value: function unregister(menu) {
            var index = this._menus.indexOf(menu);
            if (index > -1) {
                this._menus.splice(index, 1);
            }
        }
        /**
         * @private
         */

    }], [{
        key: 'registerType',
        value: function registerType(name, cls) {
            menuTypes[name] = cls;
        }
        /**
         * @private
         */

    }, {
        key: 'create',
        value: function create(type, menuCmp, platform) {
            return new menuTypes[type](menuCmp, platform);
        }
    }]);

    return MenuController;
}();
var menuTypes = {};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__key__ = __webpack_require__(128);

/* harmony export */ __webpack_require__.d(exports, "Keyboard", function() { return Keyboard; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





/**
 * @name Keyboard
 * @description
 * The `Keyboard` class allows you to work with the keyboard events provided by the Ionic keyboard plugin.
 *
 * @usage
 * ```ts
 * export class MyClass{
 *  constructor(keyboard: Keyboard){
 *    this.keyboard = keyboard;
 *  }
 * }
 *
 * ```
 */
var Keyboard = function () {
    function Keyboard(config, _form, _zone) {
        var _this = this;

        _classCallCheck(this, Keyboard);

        this._form = _form;
        this._zone = _zone;
        _zone.runOutsideAngular(function () {
            _this.focusOutline(config.get('focusOutline'), document);
        });
    }
    /**
     * Check to see if the keyboard is open or not.
     *
     * ```ts
     * export class MyClass{
     *  constructor(keyboard: Keyboard){
     *    this.keyboard = keyboard;
     *  }
     *  keyboardCheck(){
     *    setTimeout(()  => console.log('is the keyboard open ', this.keyboard.isOpen()));
     *  }
     * }
     *
     * ```
     *
     * @return {boolean} returns a true or flase value if the keyboard is open or not
     */

    _createClass(Keyboard, [{
        key: "isOpen",
        value: function isOpen() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["hasFocusedTextInput"])();
        }
        /**
         * When the keyboard is closed, call any methods you want
         *
         * ```ts
         * export class MyClass{
         *  constructor(keyboard: Keyboard){
         *    this.keyboard = keyboard;
         *    this.keyboard.onClose(this.closeCallback);
         *  }
         *  closeCallback(){
         *     // call what ever functionality you want on keyboard close
         *     console.log('Closing time');
         *  }
         * }
         *
         * ```
         * @param {function} callback method you want to call when the keyboard has been closed
         * @return {function} returns a callback that gets fired when the keyboard is closed
         */

    }, {
        key: "onClose",
        value: function onClose(callback) {
            var pollingInternval = arguments.length <= 1 || arguments[1] === undefined ? KEYBOARD_CLOSE_POLLING : arguments[1];
            var pollingChecksMax = arguments.length <= 2 || arguments[2] === undefined ? KEYBOARD_POLLING_CHECKS_MAX : arguments[2];

            console.debug('keyboard onClose');
            var self = this;
            var checks = 0;
            var promise = null;
            if (!callback) {
                // a callback wasn't provided, so let's return a promise instead
                promise = new Promise(function (resolve) {
                    callback = resolve;
                });
            }
            function checkKeyboard() {
                console.debug('keyboard isOpen', self.isOpen());
                if (!self.isOpen() || checks > pollingChecksMax) {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["rafFrames"])(30, function () {
                        self._zone.run(function () {
                            console.debug('keyboard closed');
                            callback();
                        });
                    });
                } else {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["nativeTimeout"])(checkKeyboard, pollingInternval);
                }
                checks++;
            }
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["nativeTimeout"])(checkKeyboard, pollingInternval);
            return promise;
        }
        /**
         * Programmatically close the keyboard
         *
         */

    }, {
        key: "close",
        value: function close() {
            var _this2 = this;

            console.debug('keyboard close()');
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["nativeRaf"])(function () {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["hasFocusedTextInput"])()) {
                    // only focus out when a text input has focus
                    _this2._form.focusOut();
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: "focusOutline",
        value: function focusOutline(setting, document) {
            /* Focus Outline
             * --------------------------------------------------
             * By default, when a keydown event happens from a tab key, then
             * the 'focus-outline' css class is added to the body element
             * so focusable elements have an outline. On a mousedown or
             * touchstart event, then the 'focus-outline' css class is removed.
             *
             * Config default overrides:
             * focusOutline: true     - Always add the focus-outline
             * focusOutline: false    - Do not add the focus-outline
             */
            var self = this;
            var isKeyInputEnabled = false;
            function cssClass() {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__dom__["nativeRaf"])(function () {
                    document.body.classList[isKeyInputEnabled ? 'add' : 'remove']('focus-outline');
                });
            }
            if (setting === true) {
                isKeyInputEnabled = true;
                return cssClass();
            } else if (setting === false) {
                return;
            }
            // default is to add the focus-outline when the tab key is used
            function keyDown(ev) {
                if (!isKeyInputEnabled && ev.keyCode === __WEBPACK_IMPORTED_MODULE_4__key__["a" /* Key */].TAB) {
                    isKeyInputEnabled = true;
                    enableKeyInput();
                }
            }
            function pointerDown() {
                isKeyInputEnabled = false;
                enableKeyInput();
            }
            function enableKeyInput() {
                cssClass();
                self._zone.runOutsideAngular(function () {
                    document.removeEventListener('mousedown', pointerDown);
                    document.removeEventListener('touchstart', pointerDown);
                    if (isKeyInputEnabled) {
                        document.addEventListener('mousedown', pointerDown);
                        document.addEventListener('touchstart', pointerDown);
                    }
                });
            }
            document.addEventListener('keydown', keyDown);
        }
    }]);

    return Keyboard;
}();
Keyboard = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__form__["Form"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _c || Object])], Keyboard);
var KEYBOARD_CLOSE_POLLING = 150;
var KEYBOARD_POLLING_CHECKS_MAX = 100;
var _a, _b, _c;

/***/ },
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transition__ = __webpack_require__(94);

/* harmony export */ __webpack_require__.d(exports, "PageTransition", function() { return PageTransition; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}




/**
 * @private
 */
var PageTransition = function (_Transition) {
    _inherits(PageTransition, _Transition);

    function PageTransition(enteringView, leavingView, opts) {
        _classCallCheck(this, PageTransition);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PageTransition).call(this, enteringView, leavingView, opts));

        _this.enteringPage = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](_this.enteringView.pageRef());
        _this.enteringPage.before.addClass('show-page');
        _this.add(_this.enteringPage);
        _this.before.addDomReadFn(_this.readDimensions.bind(_this));
        _this.before.addDomWriteFn(_this.writeDimensions.bind(_this));
        return _this;
    }
    /**
     * DOM READ
     */

    _createClass(PageTransition, [{
        key: 'readDimensions',
        value: function readDimensions() {
            var content = this.enteringView.getContent();
            if (content && content instanceof __WEBPACK_IMPORTED_MODULE_1__components_content_content__["a" /* Content */]) {
                content.readDimensions();
            }
        }
        /**
         * DOM WRITE
         */

    }, {
        key: 'writeDimensions',
        value: function writeDimensions() {
            var content = this.enteringView.getContent();
            if (content && content instanceof __WEBPACK_IMPORTED_MODULE_1__components_content_content__["a" /* Content */]) {
                content.writeDimensions();
            }
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            _get(Object.getPrototypeOf(PageTransition.prototype), 'destroy', this).call(this);
            this.enteringView = this.enteringPage = null;
        }
    }]);

    return PageTransition;
}(__WEBPACK_IMPORTED_MODULE_2__transition__["Transition"]);
function parsePxUnit(val) {
    return val.indexOf('px') > 0 ? parseInt(val, 10) : 0;
}

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Key; });var Key;
(function (Key) {
    Key[Key["ENTER"] = 13] = "ENTER";
    Key[Key["ESCAPE"] = 27] = "ESCAPE";
    Key[Key["TAB"] = 9] = "TAB";
})(Key || (Key = {}));
;

/***/ },
/* 129 */,
/* 130 */,
/* 131 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__config_bootstrap__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__config_directives__ = __webpack_require__(501);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__decorators_page__ = __webpack_require__(915);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components__ = __webpack_require__(894);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__gestures_drag_gesture__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__gestures_gesture__ = __webpack_require__(322);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__gestures_slide_edge_gesture__ = __webpack_require__(323);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__gestures_slide_gesture__ = __webpack_require__(502);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__platform_platform__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__platform_storage__ = __webpack_require__(918);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__util_click_block__ = __webpack_require__(326);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__util_events__ = __webpack_require__(505);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__transitions_page_transition__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__translation_translate__ = __webpack_require__(325);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__translation_translate_pipe__ = __webpack_require__(924);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config_modes__ = __webpack_require__(914);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config_modes___default = __WEBPACK_IMPORTED_MODULE_0__config_modes__ && __WEBPACK_IMPORTED_MODULE_0__config_modes__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_0__config_modes__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_0__config_modes__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_0__config_modes___default, 'a', __WEBPACK_IMPORTED_MODULE_0__config_modes___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_registry__ = __webpack_require__(917);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_registry___default = __WEBPACK_IMPORTED_MODULE_1__platform_registry__ && __WEBPACK_IMPORTED_MODULE_1__platform_registry__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_1__platform_registry__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_1__platform_registry__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_1__platform_registry___default, 'a', __WEBPACK_IMPORTED_MODULE_1__platform_registry___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_builtins__ = __webpack_require__(893);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_builtins___default = __WEBPACK_IMPORTED_MODULE_2__animations_builtins__ && __WEBPACK_IMPORTED_MODULE_2__animations_builtins__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_2__animations_builtins__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_2__animations_builtins__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_2__animations_builtins___default, 'a', __WEBPACK_IMPORTED_MODULE_2__animations_builtins___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios__ = __webpack_require__(921);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios___default = __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios__ && __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios___default, 'a', __WEBPACK_IMPORTED_MODULE_3__transitions_transition_ios___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md__ = __webpack_require__(922);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md___default = __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md__ && __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_4__transitions_transition_md___default, 'a', __WEBPACK_IMPORTED_MODULE_4__transitions_transition_md___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp__ = __webpack_require__(923);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp___default = __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp__ && __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp___default, 'a', __WEBPACK_IMPORTED_MODULE_5__transitions_transition_wp___default);
/* harmony namespace reexport */ __webpack_require__.d(exports, "d", function() { return __WEBPACK_IMPORTED_MODULE_6__config_bootstrap__["ionicBootstrap"]; }); __webpack_require__.d(exports, "e", function() { return __WEBPACK_IMPORTED_MODULE_6__config_bootstrap__["ionicProviders"]; }); __webpack_require__.d(exports, "f", function() { return __WEBPACK_IMPORTED_MODULE_6__config_bootstrap__["ionicPostBootstrap"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony namespace reexport */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_10__components__["NavController"]; }); __webpack_require__.d(exports, "b", function() { return __WEBPACK_IMPORTED_MODULE_10__components__["Nav"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony namespace reexport */ __webpack_require__.d(exports, "c", function() { return __WEBPACK_IMPORTED_MODULE_15__platform_platform__["Platform"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */



























/***/ },
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */
/***/ function(module, exports) {

"use strict";
"use strict";

(function (ViewType) {
    // A view that contains the host element with bound component directive.
    // Contains a COMPONENT view
    ViewType[ViewType["HOST"] = 0] = "HOST";
    // The view of the component
    // Can contain 0 to n EMBEDDED views
    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
    // A view that is embedded into another View via a <template> element
    // inside of a COMPONENT view
    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
})(exports.ViewType || (exports.ViewType = {}));
var ViewType = exports.ViewType;
//# sourceMappingURL=view_type.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__ = __webpack_require__(414);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__exception_handler__ = __webpack_require__(415);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return BaseException; });/* unused harmony export WrappedException *//* harmony export */ exports["b"] = makeTypeError;/* unused harmony export unimplemented *//* unused harmony reexport ExceptionHandler */
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @stable
 */
var BaseException = function (_Error) {
    _inherits(BaseException, _Error);

    function BaseException() {
        var message = arguments.length <= 0 || arguments[0] === undefined ? '--' : arguments[0];

        _classCallCheck(this, BaseException);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BaseException).call(this, message));

        _this.message = message;
        _this.stack = new Error(message).stack;
        return _this;
    }

    _createClass(BaseException, [{
        key: 'toString',
        value: function toString() {
            return this.message;
        }
    }]);

    return BaseException;
}(Error);
/**
 * Wraps an exception and provides additional context or information.
 * @stable
 */
var WrappedException = function (_BaseWrappedException) {
    _inherits(WrappedException, _BaseWrappedException);

    function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
        _classCallCheck(this, WrappedException);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(WrappedException).call(this, _wrapperMessage));

        _this2._wrapperMessage = _wrapperMessage;
        _this2._originalException = _originalException;
        _this2._originalStack = _originalStack;
        _this2._context = _context;
        _this2._wrapperStack = new Error(_wrapperMessage).stack;
        return _this2;
    }

    _createClass(WrappedException, [{
        key: 'toString',
        value: function toString() {
            return this.message;
        }
    }, {
        key: 'wrapperMessage',
        get: function get() {
            return this._wrapperMessage;
        }
    }, {
        key: 'wrapperStack',
        get: function get() {
            return this._wrapperStack;
        }
    }, {
        key: 'originalException',
        get: function get() {
            return this._originalException;
        }
    }, {
        key: 'originalStack',
        get: function get() {
            return this._originalStack;
        }
    }, {
        key: 'context',
        get: function get() {
            return this._context;
        }
    }, {
        key: 'message',
        get: function get() {
            return __WEBPACK_IMPORTED_MODULE_1__exception_handler__["a" /* ExceptionHandler */].exceptionToString(this);
        }
    }]);

    return WrappedException;
}(__WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */]);
function makeTypeError(message) {
    return new TypeError(message);
}
function unimplemented() {
    throw new BaseException('unimplemented');
}
//# sourceMappingURL=exceptions.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__ = __webpack_require__(270);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Headers; });var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




/**
 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
 *
 * The only known difference between this `Headers` implementation and the spec is the
 * lack of an `entries` method.
 *
 * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))
 *
 * ```
 * import {Headers} from '@angular/http';
 *
 * var firstHeaders = new Headers();
 * firstHeaders.append('Content-Type', 'image/jpeg');
 * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
 *
 * // Create headers from Plain Old JavaScript Object
 * var secondHeaders = new Headers({
 *   'X-My-Custom-Header': 'Angular'
 * });
 * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
 *
 * var thirdHeaders = new Headers(secondHeaders);
 * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
 * ```
 */
var Headers = function () {
    function Headers(headers) {
        var _this = this;

        _classCallCheck(this, Headers);

        if (headers instanceof Headers) {
            this._headersMap = headers._headersMap;
            return;
        }
        this._headersMap = new __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["b" /* Map */]();
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["c" /* isBlank */])(headers)) {
            return;
        }
        // headers instanceof StringMap
        __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["c" /* StringMapWrapper */].forEach(headers, function (v, k) {
            _this._headersMap.set(k, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["a" /* isListLikeIterable */])(v) ? v : [v]);
        });
    }
    /**
     * Returns a new Headers instance from the given DOMString of Response Headers
     */


    _createClass(Headers, [{
        key: 'append',

        /**
         * Appends a header to existing list of header values for a given header name.
         */
        value: function append(name, value) {
            var mapName = this._headersMap.get(name);
            var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["a" /* isListLikeIterable */])(mapName) ? mapName : [];
            list.push(value);
            this._headersMap.set(name, list);
        }
        /**
         * Deletes all header values for the given name.
         */

    }, {
        key: 'delete',
        value: function _delete(name) {
            this._headersMap.delete(name);
        }
    }, {
        key: 'forEach',
        value: function forEach(fn) {
            this._headersMap.forEach(fn);
        }
        /**
         * Returns first header that matches given name.
         */

    }, {
        key: 'get',
        value: function get(header) {
            return __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["d" /* ListWrapper */].first(this._headersMap.get(header));
        }
        /**
         * Check for existence of header by given name.
         */

    }, {
        key: 'has',
        value: function has(header) {
            return this._headersMap.has(header);
        }
        /**
         * Provides names of set headers
         */

    }, {
        key: 'keys',
        value: function keys() {
            return __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["e" /* MapWrapper */].keys(this._headersMap);
        }
        /**
         * Sets or overrides header value for given name.
         */

    }, {
        key: 'set',
        value: function set(header, value) {
            var list = [];
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["a" /* isListLikeIterable */])(value)) {
                var pushValue = value.join(',');
                list.push(pushValue);
            } else {
                list.push(value);
            }
            this._headersMap.set(header, list);
        }
        /**
         * Returns values of all headers.
         */

    }, {
        key: 'values',
        value: function values() {
            return __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["e" /* MapWrapper */].values(this._headersMap);
        }
        /**
         * Returns string of all headers.
         */

    }, {
        key: 'toJSON',
        value: function toJSON() {
            var serializableHeaders = {};
            this._headersMap.forEach(function (values, name) {
                var list = [];
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["f" /* iterateListLike */])(values, function (val /** TODO #9100 */) {
                    return list = __WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["d" /* ListWrapper */].concat(list, val.split(','));
                });
                serializableHeaders[name] = list;
            });
            return serializableHeaders;
        }
        /**
         * Returns list of header values for a given name.
         */

    }, {
        key: 'getAll',
        value: function getAll(header) {
            var headers = this._headersMap.get(header);
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_collection__["a" /* isListLikeIterable */])(headers) ? headers : [];
        }
        /**
         * This method is not implemented.
         */

    }, {
        key: 'entries',
        value: function entries() {
            throw new __WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__["a" /* BaseException */]('"entries" method is not implemented on Headers class');
        }
    }], [{
        key: 'fromResponseHeaderString',
        value: function fromResponseHeaderString(headersString) {
            return headersString.trim().split('\n').map(function (val) {
                return val.split(':');
            }).map(function (_ref) {
                var _ref2 = _toArray(_ref);

                var key = _ref2[0];

                var parts = _ref2.slice(1);

                return [key.trim(), parts.join(':').trim()];
            }).reduce(function (headers, _ref3) {
                var _ref4 = _slicedToArray(_ref3, 2);

                var key = _ref4[0];
                var value = _ref4[1];
                return !headers.set(key, value) && headers;
            }, new Headers());
        }
    }]);

    return Headers;
}();
//# sourceMappingURL=headers.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ConnectionBackend; });
/* harmony export */ __webpack_require__.d(exports, "c", function() { return Connection; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return XSRFStrategy; });function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Abstract class from which real backends are derived.
 *
 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
 * {@link Request}.
 */
var ConnectionBackend = function ConnectionBackend() {
  _classCallCheck(this, ConnectionBackend);
};
/**
 * Abstract class from which real connections are derived.
 */
var Connection = function Connection() {
  _classCallCheck(this, Connection);
};
/** An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request. */
var XSRFStrategy = function XSRFStrategy() {
  _classCallCheck(this, XSRFStrategy);
};
//# sourceMappingURL=interfaces.js.map

/***/ },
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var dom_1 = __webpack_require__(17);
var util_1 = __webpack_require__(7);
/**
 * @private
 *
 * - play
 * - Add before classes - DOM WRITE
 * - Remove before classes - DOM WRITE
 * - Add before inline styles - DOM WRITE
 * - set inline FROM styles - DOM WRITE
 * - RAF
 * - run before functions that have dom reads - DOM READ
 * - run before functions that have dom writes - DOM WRITE
 * - set css transition duration/easing - DOM WRITE
 * - RAF
 * - set inline TO styles - DOM WRITE
 */
var Animation = function () {
    function Animation(ele, opts) {
        if (opts === void 0) {
            opts = {};
        }
        this._c = [];
        this._el = [];
        this._fx = {};
        this._bfSty = {};
        this._bfAdd = [];
        this._bfRmv = [];
        this._afSty = {};
        this._afAdd = [];
        this._afRmv = [];
        this._bfReadFns = [];
        this._bfWriteFns = [];
        this._fFns = [];
        this._fOnceFns = [];
        this._rv = false;
        this._lastUpd = 0;
        this.isPlaying = false;
        this.hasTween = false;
        this.hasCompleted = false;
        this.element(ele);
        this._opts = util_1.assign({
            renderDelay: 24
        }, opts);
    }
    /**
     * NO DOM
     */
    Animation.prototype._reset = function () {
        this._fx = {};
        this._bfSty = {};
        this._afSty = {};
        this._el.length = this._c.length = this._bfAdd.length = this._bfRmv.length = this._afAdd.length = this._afRmv.length = this._fFns.length = this._bfReadFns.length = this._bfWriteFns.length = this._fOnceFns.length = 0;
        this._easing = this._dur = null;
    };
    Animation.prototype.element = function (ele) {
        var i;
        if (ele) {
            if (ele.length) {
                for (i = 0; i < ele.length; i++) {
                    this._addEle(ele[i]);
                }
            } else if (typeof ele === 'string') {
                ele = document.querySelectorAll(ele);
                for (i = 0; i < ele.length; i++) {
                    this._addEle(ele[i]);
                }
            } else {
                this._addEle(ele);
            }
        }
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype._addEle = function (ele) {
        if (ele.nativeElement) {
            ele = ele.nativeElement;
        }
        if (ele.nodeType === 1) {
            this._el.push(ele);
        }
    };
    /**
     * NO DOM
     */
    Animation.prototype.parent = function (parentAnimation) {
        this._parent = parentAnimation;
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype.add = function (childAnimation) {
        childAnimation.parent(this);
        this._c.push(childAnimation);
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype.getDuration = function () {
        return this._dur !== null ? this._dur : this._parent && this._parent.getDuration() || 0;
    };
    /**
     * NO DOM
     */
    Animation.prototype.duration = function (milliseconds) {
        this._dur = milliseconds;
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype.getEasing = function () {
        return this._easing !== null ? this._easing : this._parent && this._parent.getEasing() || null;
    };
    /**
     * NO DOM
     */
    Animation.prototype.easing = function (name) {
        this._easing = name;
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype.from = function (prop, val) {
        this._addProp('from', prop, val);
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype.to = function (prop, val, clearProperyAfterTransition) {
        var fx = this._addProp('to', prop, val);
        if (clearProperyAfterTransition) {
            // if this effect is a transform then clear the transform effect
            // otherwise just clear the actual property
            this.after.clearStyles([fx.trans ? dom_1.CSS.transform : prop]);
        }
        return this;
    };
    /**
     * NO DOM
     */
    Animation.prototype.fromTo = function (prop, fromVal, toVal, clearProperyAfterTransition) {
        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);
    };
    /**
     * NO DOM
     */
    Animation.prototype._addProp = function (state, prop, val) {
        var fxProp = this._fx[prop];
        if (!fxProp) {
            // first time we've see this EffectProperty
            fxProp = this._fx[prop] = {
                trans: typeof TRANSFORMS[prop] !== 'undefined',
                wc: ''
            };
            // add the will-change property for transforms or opacity
            if (fxProp.trans) {
                fxProp.wc = dom_1.CSS.transform;
            } else if (prop === 'opacity') {
                fxProp.wc = prop;
            }
        }
        // add from/to EffectState to the EffectProperty
        var fxState = fxProp[state] = {
            val: val,
            num: null,
            unit: ''
        };
        if (typeof val === 'string' && val.indexOf(' ') < 0) {
            var r = val.match(CSS_VALUE_REGEX);
            var num = parseFloat(r[1]);
            if (!isNaN(num)) {
                fxState.num = num;
            }
            fxState.unit = r[0] !== r[2] ? r[2] : '';
        } else if (typeof val === 'number') {
            fxState.num = val;
        }
        return fxProp;
    };
    Object.defineProperty(Animation.prototype, "before", {
        /**
         * NO DOM
         */
        get: function get() {
            var _this = this;
            return {
                addClass: function addClass(className) {
                    _this._bfAdd.push(className);
                    return _this;
                },
                removeClass: function removeClass(className) {
                    _this._bfRmv.push(className);
                    return _this;
                },
                setStyles: function setStyles(styles) {
                    _this._bfSty = styles;
                    return _this;
                },
                clearStyles: function clearStyles(propertyNames) {
                    for (var i = 0; i < propertyNames.length; i++) {
                        _this._bfSty[propertyNames[i]] = '';
                    }
                    return _this;
                },
                addDomReadFn: function addDomReadFn(domReadFn) {
                    _this._bfReadFns.push(domReadFn);
                    return _this;
                },
                addDomWriteFn: function addDomWriteFn(domWriteFn) {
                    _this._bfWriteFns.push(domWriteFn);
                    return _this;
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "after", {
        /**
         * NO DOM
         */
        get: function get() {
            var _this = this;
            return {
                addClass: function addClass(className) {
                    _this._afAdd.push(className);
                    return _this;
                },
                removeClass: function removeClass(className) {
                    _this._afRmv.push(className);
                    return _this;
                },
                setStyles: function setStyles(styles) {
                    _this._afSty = styles;
                    return _this;
                },
                clearStyles: function clearStyles(propertyNames) {
                    for (var i = 0; i < propertyNames.length; i++) {
                        _this._afSty[propertyNames[i]] = '';
                    }
                    return _this;
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * DOM WRITE
     */
    Animation.prototype.play = function (opts) {
        if (opts === void 0) {
            opts = {};
        }
        var self = this;
        var i;
        if (util_1.isDefined(opts.duration)) {
            self._dur = opts.duration;
        }
        console.debug('Animation, play, duration', self._dur, 'easing', self._easing);
        // always default that an animation does not tween
        // a tween requires that an Animation class has an element
        // and that it has at least one FROM/TO effect
        // and that the FROM/TO effect can tween numeric values
        self.hasTween = false;
        self.hasCompleted = false;
        self.isPlaying = true;
        // this is the top level animation and is in full control
        // of when the async play() should actually kick off
        // if there is no duration then it'll set the TO property immediately
        // if there is a duration, then it'll stage all animations at the
        // FROM property and transition duration, wait a few frames, then
        // kick off the animation by setting the TO property for each animation
        // ensure all past transition end events have been cleared
        self._clearAsync();
        if (self._dur > 30) {
            // this animation has a duration, so it should animate
            // place all the elements with their FROM properties
            // set the FROM properties
            // ******** DOM WRITE ****************
            self._progress(0);
            // add the will-change or translateZ properties when applicable
            // ******** DOM WRITE ****************
            self._willChg(true);
            // set the async TRANSITION END event
            // and run onFinishes when the transition ends
            // ******** DOM WRITE ****************
            self._asyncEnd(self._dur, true);
            // begin each animation when everything is rendered in their place
            // and the transition duration/easing is ready to go
            dom_1.rafFrames(self._opts.renderDelay / 16, function () {
                // there's been a moment and the elements are in place
                // fire off all the "before" function that have DOM READS in them
                // elements will be in the DOM, however visibily hidden
                // so we can read their dimensions if need be
                // ******** DOM READ ****************
                self._beforeReadFn();
                // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                // fire off all the "before" function that have DOM WRITES in them
                // ******** DOM WRITE ****************
                self._beforeWriteFn();
                // stage all of the before css classes and inline styles
                // will recursively stage all child elements
                // ******** DOM WRITE ****************
                self._before();
                // now set the TRANSITION duration/easing
                // ******** DOM WRITE ****************
                self._setTrans(self._dur, false);
                // wait a few moments again to wait for the transition
                // info to take hold in the DOM
                dom_1.rafFrames(2, function () {
                    // browser had some time to render everything in place
                    // and the transition duration/easing is set
                    // now set the TO properties
                    // which will trigger the transition to begin
                    // ******** DOM WRITE ****************
                    self._progress(1);
                });
            });
        } else {
            // this animation does not have a duration
            // but we still need to apply the styles and wait
            // a frame so we can accurately read the dimensions
            dom_1.rafFrames(self._opts.renderDelay / 16, function () {
                // fire off all the "before" function that have DOM READS in them
                // elements will be in the DOM, however visibily hidden
                // so we can read their dimensions if need be
                // ******** DOM READ ****************
                self._beforeReadFn();
                // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                // fire off all the "before" function that have DOM WRITES in them
                // ******** DOM WRITE ****************
                self._beforeWriteFn();
                // ensure before css has ran
                // ******** DOM WRITE ****************
                self._before();
                // this animation does not have a duration, so it should not animate
                // just go straight to the TO properties and call it done
                // ******** DOM WRITE ****************
                self._progress(1);
                // since there was no animation, immediately run the after
                // ******** DOM WRITE ****************
                self._after();
                // since there was no animation, it's done
                // fire off all the onFinishes
                // and now you know
                self._didFinish(true);
            });
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype.stop = function (opts) {
        if (opts === void 0) {
            opts = {};
        }
        var self = this;
        var duration = util_1.isDefined(opts.duration) ? opts.duration : 0;
        var stepValue = util_1.isDefined(opts.stepValue) ? opts.stepValue : 1;
        // ensure all past transition end events have been cleared
        this._clearAsync();
        // set the TO properties
        // ******** DOM WRITE ****************
        self._progress(stepValue);
        if (duration > 30) {
            // this animation has a duration, so it should animate
            // place all the elements with their TO properties
            // now set the TRANSITION duration
            // ******** DOM WRITE ****************
            self._setTrans(duration, true);
            // set the async TRANSITION END event
            // and run onFinishes when the transition ends
            // ******** DOM WRITE ****************
            self._asyncEnd(duration, false);
        } else {
            // this animation does not have a duration, so it should not animate
            // just go straight to the TO properties and call it done
            // ******** DOM WRITE ****************
            self._after();
            // since there was no animation, it's done
            // fire off all the onFinishes
            self._didFinish(false);
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._asyncEnd = function (duration, shouldComplete) {
        var self = this;
        function onTransitionEnd(ev) {
            console.debug('Animation onTransitionEnd', ev.target.nodeName, ev.propertyName);
            // ensure transition end events and timeouts have been cleared
            self._clearAsync();
            // set the after styles
            // ******** DOM WRITE ****************
            self._after();
            // remove will change properties
            // ******** DOM WRITE ****************
            self._willChg(false);
            // transition finished
            self._didFinish(shouldComplete);
        }
        function onTransitionFallback() {
            console.debug('Animation onTransitionFallback');
            // oh noz! the transition end event didn't fire in time!
            // instead the fallback timer when first
            // clear the other async end events from firing
            self._tmr = 0;
            self._clearAsync();
            // too late to have a smooth animation, just finish it
            // ******** DOM WRITE ****************
            self._setTrans(0, true);
            // ensure the ending progress step gets rendered
            // ******** DOM WRITE ****************
            self._progress(1);
            // set the after styles
            // ******** DOM WRITE ****************
            self._after();
            // remove will change properties
            // ******** DOM WRITE ****************
            self._willChg(false);
            // transition finished
            self._didFinish(shouldComplete);
        }
        // set the TRANSITION END event on one of the transition elements
        self._unregTrans = dom_1.transitionEnd(self._transEl(), onTransitionEnd);
        // set a fallback timeout if the transition end event never fires, or is too slow
        // transition end fallback: (animation duration + XXms)
        self._tmr = dom_1.nativeTimeout(onTransitionFallback, duration + 400);
    };
    /**
     * NO DOM
     */
    Animation.prototype._clearAsync = function () {
        this._unregTrans && this._unregTrans();
        if (this._tmr) {
            clearTimeout(this._tmr);
            this._tmr = 0;
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._progress = function (stepValue) {
        // bread 'n butter
        var i;
        var prop;
        var fx;
        var val;
        var transforms;
        var tweenEffect;
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i]._progress(stepValue);
        }
        if (this._el.length) {
            // flip the number if we're going in reverse
            if (this._rv) {
                stepValue = stepValue * -1 + 1;
            }
            transforms = [];
            for (prop in this._fx) {
                fx = this._fx[prop];
                if (fx.from && fx.to) {
                    tweenEffect = fx.from.num !== fx.to.num;
                    if (tweenEffect) {
                        this.hasTween = true;
                    }
                    if (stepValue === 0) {
                        // FROM
                        val = fx.from.val;
                    } else if (stepValue === 1) {
                        // TO
                        val = fx.to.val;
                    } else if (tweenEffect) {
                        // EVERYTHING IN BETWEEN
                        val = (fx.to.num - fx.from.num) * stepValue + fx.from.num + fx.to.unit;
                    } else {
                        val = null;
                    }
                    if (val !== null) {
                        if (fx.trans) {
                            transforms.push(prop + '(' + val + ')');
                        } else {
                            for (i = 0; i < this._el.length; i++) {
                                // ******** DOM WRITE ****************
                                this._el[i].style[prop] = val;
                            }
                        }
                    }
                }
            }
            // place all transforms on the same property
            if (transforms.length) {
                if (!SUPPORTS_WILL_CHANGE) {
                    // if the element doesn't support will-change
                    // then auto add translateZ for transform properties
                    transforms.push('translateZ(0px)');
                }
                for (i = 0; i < this._el.length; i++) {
                    // ******** DOM WRITE ****************
                    this._el[i].style[dom_1.CSS.transform] = transforms.join(' ');
                }
            }
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._setTrans = function (duration, forcedLinearEasing) {
        var i;
        var easing;
        // set the TRANSITION properties inline on the element
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i]._setTrans(duration, forcedLinearEasing);
        }
        if (Object.keys(this._fx).length) {
            for (i = 0; i < this._el.length; i++) {
                // all parent/child animations should have the same duration
                // ******** DOM WRITE ****************
                this._el[i].style[dom_1.CSS.transitionDuration] = duration + 'ms';
                // each animation can have a different easing
                easing = forcedLinearEasing ? 'linear' : this.getEasing();
                if (easing) {
                    // ******** DOM WRITE ****************
                    this._el[i].style[dom_1.CSS.transitionTimingFn] = easing;
                }
            }
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._willChg = function (addWillChange) {
        var i;
        var wc;
        var prop;
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i]._willChg(addWillChange);
        }
        if (SUPPORTS_WILL_CHANGE) {
            wc = [];
            if (addWillChange) {
                for (prop in this._fx) {
                    if (this._fx[prop].wc !== '') {
                        if (this._fx[prop].wc === 'webkitTransform') {
                            wc.push('transform', '-webkit-transform');
                        } else {
                            wc.push(this._fx[prop].wc);
                        }
                    }
                }
            }
            for (i = 0; i < this._el.length; i++) {
                // ******** DOM WRITE ****************
                this._el[i].style['willChange'] = wc.join(',');
            }
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._before = function () {
        // before the RENDER_DELAY
        // before the animations have started
        var i;
        var j;
        var prop;
        var ele;
        // stage all of the child animations
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i]._before();
        }
        if (!this._rv) {
            for (i = 0; i < this._el.length; i++) {
                ele = this._el[i];
                // css classes to add before the animation
                for (j = 0; j < this._bfAdd.length; j++) {
                    // ******** DOM WRITE ****************
                    ele.classList.add(this._bfAdd[j]);
                }
                // css classes to remove before the animation
                for (j = 0; j < this._bfRmv.length; j++) {
                    // ******** DOM WRITE ****************
                    ele.classList.remove(this._bfRmv[j]);
                }
                // inline styles to add before the animation
                for (prop in this._bfSty) {
                    // ******** DOM WRITE ****************
                    ele.style[prop] = this._bfSty[prop];
                }
            }
        }
    };
    /**
     * DOM READ
     */
    Animation.prototype._beforeReadFn = function () {
        var i;
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM READ ****************
            this._c[i]._beforeReadFn();
        }
        for (i = 0; i < this._bfReadFns.length; i++) {
            // ******** DOM READ ****************
            this._bfReadFns[i]();
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._beforeWriteFn = function () {
        var i;
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i]._beforeWriteFn();
        }
        for (i = 0; i < this._bfReadFns.length; i++) {
            // ******** DOM WRITE ****************
            this._bfWriteFns[i]();
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype._after = function () {
        // after the animations have finished
        var i;
        var j;
        var prop;
        var ele;
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i]._after();
        }
        for (i = 0; i < this._el.length; i++) {
            ele = this._el[i];
            // remove the transition duration/easing
            // ******** DOM WRITE ****************
            ele.style[dom_1.CSS.transitionDuration] = '';
            // ******** DOM WRITE ****************
            ele.style[dom_1.CSS.transitionTimingFn] = '';
            if (this._rv) {
                // finished in reverse direction
                // css classes that were added before the animation should be removed
                for (j = 0; j < this._bfAdd.length; j++) {
                    // ******** DOM WRITE ****************
                    ele.classList.remove(this._bfAdd[j]);
                }
                // css classes that were removed before the animation should be added
                for (j = 0; j < this._bfRmv.length; j++) {
                    // ******** DOM WRITE ****************
                    ele.classList.add(this._bfRmv[j]);
                }
                // inline styles that were added before the animation should be removed
                for (prop in this._bfSty) {
                    // ******** DOM WRITE ****************
                    ele.style[prop] = '';
                }
            } else {
                // finished in forward direction
                // css classes to add after the animation
                for (j = 0; j < this._afAdd.length; j++) {
                    // ******** DOM WRITE ****************
                    ele.classList.add(this._afAdd[j]);
                }
                // css classes to remove after the animation
                for (j = 0; j < this._afRmv.length; j++) {
                    // ******** DOM WRITE ****************
                    ele.classList.remove(this._afRmv[j]);
                }
                // inline styles to add after the animation
                for (prop in this._afSty) {
                    // ******** DOM WRITE ****************
                    ele.style[prop] = this._afSty[prop];
                }
            }
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype.progressStart = function () {
        for (var i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i].progressStart();
        }
        // ******** DOM WRITE ****************
        this._before();
        // force no duration, linear easing
        // ******** DOM WRITE ****************
        this._setTrans(0, true);
    };
    /**
     * DOM WRITE
     */
    Animation.prototype.progressStep = function (stepValue) {
        var now = Date.now();
        // only update if the last update was more than 16ms ago
        if (now - 16 > this._lastUpd) {
            this._lastUpd = now;
            stepValue = Math.min(1, Math.max(0, stepValue));
            for (var i = 0; i < this._c.length; i++) {
                // ******** DOM WRITE ****************
                this._c[i].progressStep(stepValue);
            }
            if (this._rv) {
                // if the animation is going in reverse then
                // flip the step value: 0 becomes 1, 1 becomes 0
                stepValue = stepValue * -1 + 1;
            }
            // ******** DOM WRITE ****************
            this._progress(stepValue);
        }
    };
    /**
     * DOM WRITE
     */
    Animation.prototype.progressEnd = function (shouldComplete, currentStepValue) {
        console.debug('Animation, progressEnd, shouldComplete', shouldComplete, 'currentStepValue', currentStepValue);
        for (var i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i].progressEnd(shouldComplete, currentStepValue);
        }
        // set all the animations to their final position
        // ******** DOM WRITE ****************
        this._progress(shouldComplete ? 1 : 0);
        // if it's already at the final position, or close, then it's done
        // otherwise we need to add a transition end event listener
        if (currentStepValue < 0.05 || currentStepValue > 0.95) {
            // the progress was already left off at the point that is finished
            // for example, the left menu was dragged all the way open already
            // ******** DOM WRITE ****************
            this._after();
            // ******** DOM WRITE ****************
            this._willChg(false);
            this._didFinish(shouldComplete);
        } else {
            // the stepValue was left off at a point when it needs to finish transition still
            // for example, the left menu was opened 75% and needs to finish opening
            // ******** DOM WRITE ****************
            this._asyncEnd(64, shouldComplete);
            // force quick duration, linear easing
            // ******** DOM WRITE ****************
            this._setTrans(64, true);
        }
    };
    /**
     * POSSIBLE DOM READ/WRITE
     */
    Animation.prototype.onFinish = function (callback, onceTimeCallback, clearOnFinishCallacks) {
        if (onceTimeCallback === void 0) {
            onceTimeCallback = false;
        }
        if (clearOnFinishCallacks === void 0) {
            clearOnFinishCallacks = false;
        }
        if (clearOnFinishCallacks) {
            this._fFns = [];
            this._fOnceFns = [];
        }
        if (onceTimeCallback) {
            this._fOnceFns.push(callback);
        } else {
            this._fFns.push(callback);
        }
        return this;
    };
    /**
     * POSSIBLE DOM READ/WRITE
     */
    Animation.prototype._didFinish = function (hasCompleted) {
        this.isPlaying = false;
        this.hasCompleted = hasCompleted;
        var i;
        for (i = 0; i < this._fFns.length; i++) {
            this._fFns[i](this);
        }
        for (i = 0; i < this._fOnceFns.length; i++) {
            this._fOnceFns[i](this);
        }
        this._fOnceFns = [];
    };
    /**
     * NO DOM
     */
    Animation.prototype.reverse = function (shouldReverse) {
        if (shouldReverse === void 0) {
            shouldReverse = true;
        }
        for (var i = 0; i < this._c.length; i++) {
            this._c[i].reverse(shouldReverse);
        }
        this._rv = shouldReverse;
        return this;
    };
    /**
     * DOM WRITE
     */
    Animation.prototype.destroy = function (removeElement) {
        var i;
        var ele;
        for (i = 0; i < this._c.length; i++) {
            // ******** DOM WRITE ****************
            this._c[i].destroy(removeElement);
        }
        if (removeElement) {
            for (i = 0; i < this._el.length; i++) {
                ele = this._el[i];
                // ******** DOM WRITE ****************
                ele.parentNode && ele.parentNode.removeChild(ele);
            }
        }
        this._clearAsync();
        this._reset();
    };
    /**
     * NO DOM
     */
    Animation.prototype._transEl = function () {
        // get the lowest level element that has an Animation
        var i;
        var targetEl;
        for (i = 0; i < this._c.length; i++) {
            targetEl = this._c[i]._transEl();
            if (targetEl) {
                return targetEl;
            }
        }
        return this.hasTween && this._el.length ? this._el[0] : null;
    };
    // ***** STATIC CLASSES *********
    Animation.create = function (name, opts) {
        if (opts === void 0) {
            opts = {};
        }
        var AnimationClass = AnimationRegistry[name];
        if (!AnimationClass) {
            // couldn't find an animation by the given name
            // fallback to just the base Animation class
            AnimationClass = Animation;
        }
        return new AnimationClass(null, opts);
    };
    Animation.register = function (name, AnimationClass) {
        AnimationRegistry[name] = AnimationClass;
    };
    return Animation;
}();
exports.Animation = Animation;
var TRANSFORMS = {
    'translateX': 1, 'translateY': 1, 'translateZ': 1,
    'scale': 1, 'scaleX': 1, 'scaleY': 1, 'scaleZ': 1,
    'rotate': 1, 'rotateX': 1, 'rotateY': 1, 'rotateZ': 1,
    'skewX': 1, 'skewY': 1, 'perspective': 1
};
var CSS_VALUE_REGEX = /(^-?\d*\.?\d*)(.*)/;
var SUPPORTS_WILL_CHANGE = typeof document.documentElement.style['willChange'] !== 'undefined';
var AnimationRegistry = {};

/***/ },
/* 148 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * @name MenuController
 * @description
 * The MenuController is a provider which makes it easy to control a [Menu](../Menu).
 * Its methods can be used to display the menu, enable the menu, toggle the menu, and more.
 * The controller will grab a reference to the menu by the `side`, `id`, or, if neither
 * of these are passed to it, it will grab the first menu it finds.
 *
 *
 * @usage
 *
 * Add a basic menu component to start with. See the [Menu](../Menu) API docs
 * for more information on adding menu components.
 *
 * ```html
 * <ion-menu [content]="mycontent">
 *   <ion-content>
 *     <ion-list>
 *     ...
 *     </ion-list>
 *   </ion-content>
 * </ion-menu>
 *
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * To call the controller methods, inject the `MenuController` provider
 * into the page. Then, create some methods for opening, closing, and
 * toggling the menu.
 *
 * ```ts
 * import {Component} from '@angular/core';
 * import {MenuController} from 'ionic-angular';
 *
 * @Component({...})
 * export class MyPage {
 *
 *  constructor(private menu: MenuController) {
 *
 *  }
 *
 *  openMenu() {
 *    this.menu.open();
 *  }
 *
 *  closeMenu() {
 *    this.menu.close();
 *  }
 *
 *  toggleMenu() {
 *    this.menu.toggle();
 *  }
 *
 * }
 * ```
 *
 * Since only one menu exists, the `MenuController` will grab the
 * correct menu and call the correct method for each.
 *
 *
 * ### Multiple Menus on Different Sides
 *
 * For applications with both a left and right menu, the desired menu can be
 * grabbed by passing the `side` of the menu. If nothing is passed, it will
 * default to the `"left"` menu.
 *
 * ```html
 * <ion-menu side="left" [content]="mycontent">...</ion-menu>
 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * ```ts
 *  toggleLeftMenu() {
 *    this.menu.toggle();
 *  }
 *
 *  toggleRightMenu() {
 *    this.menu.toggle('right');
 *  }
 * ```
 *
 *
 * ### Multiple Menus on the Same Side
 *
 * An application can have multiple menus on the same side. In order to determine
 * the menu to control, an `id` should be passed. In the example below, the menu
 * with the `authenticated` id will be enabled, and the menu with the `unauthenticated`
 * id will be disabled.
 *
 * ```html
 * <ion-menu id="authenticated" side="left" [content]="mycontent">...</ion-menu>
 * <ion-menu id="unauthenticated" side="left" [content]="mycontent">...</ion-menu>
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * ```ts
 *  enableAuthenticatedMenu() {
 *    this.menu.enable(true, 'authenticated');
 *    this.menu.enable(false, 'unauthenticated');
 *  }
 * ```
 *
 * Note: if an app only has one menu, there is no reason to pass an `id`.
 *
 *
 * @demo /docs/v2/demos/menu/
 *
 * @see {@link /docs/v2/components#menus Menu Component Docs}
 * @see {@link ../Menu Menu API Docs}
 *
 */

var MenuController = function () {
    function MenuController() {
        this._menus = [];
    }
    /**
     * Progamatically open the Menu.
     * @return {Promise} returns a promise when the menu is fully opened
     */
    MenuController.prototype.open = function (menuId) {
        var menu = this.get(menuId);
        if (menu) {
            return menu.open();
        }
        return Promise.resolve(false);
    };
    /**
     * Progamatically close the Menu. If no `menuId` is given as the first
     * argument then it'll close any menu which is open. If a `menuId`
     * is given then it'll close that exact menu.
     * @param {string} [menuId]  Optionally get the menu by its id, or side.
     * @return {Promise} returns a promise when the menu is fully closed
     */
    MenuController.prototype.close = function (menuId) {
        var menu;
        if (menuId) {
            // find the menu by its id
            menu = this.get(menuId);
        } else {
            // find the menu that is open
            menu = this._menus.find(function (m) {
                return m.isOpen;
            });
        }
        if (menu) {
            // close the menu
            return menu.close();
        }
        return Promise.resolve(false);
    };
    MenuController.prototype.tempDisable = function (temporarilyDisable) {
        this._menus.forEach(function (menu) {
            menu.tempDisable(temporarilyDisable);
        });
    };
    /**
     * Toggle the menu. If it's closed, it will open, and if opened, it
     * will close.
     * @param {string} [menuId]  Optionally get the menu by its id, or side.
     * @return {Promise} returns a promise when the menu has been toggled
     */
    MenuController.prototype.toggle = function (menuId) {
        var menu = this.get(menuId);
        if (menu) {
            return menu.toggle();
        }
        return Promise.resolve(false);
    };
    /**
     * Used to enable or disable a menu. For example, there could be multiple
     * left menus, but only one of them should be able to be opened at the same
     * time. If there are multiple menus on the same side, then enabling one menu
     * will also automatically disable all the others that are on the same side.
     * @param {string} [menuId]  Optionally get the menu by its id, or side.
     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
     */
    MenuController.prototype.enable = function (shouldEnable, menuId) {
        var menu = this.get(menuId);
        if (menu) {
            return menu.enable(shouldEnable);
        }
    };
    /**
     * Used to enable or disable the ability to swipe open the menu.
     * @param {boolean} shouldEnable  True if it should be swipe-able, false if not.
     * @param {string} [menuId]  Optionally get the menu by its id, or side.
     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
     */
    MenuController.prototype.swipeEnable = function (shouldEnable, menuId) {
        var menu = this.get(menuId);
        if (menu) {
            return menu.swipeEnable(shouldEnable);
        }
    };
    /**
     * @return {boolean} Returns true if the menu is currently open, otherwise false.
     */
    MenuController.prototype.isOpen = function (menuId) {
        var menu = this.get(menuId);
        return menu && menu.isOpen || false;
    };
    /**
     * @return {boolean} Returns true if the menu is currently enabled, otherwise false.
     */
    MenuController.prototype.isEnabled = function (menuId) {
        var menu = this.get(menuId);
        return menu && menu.enabled || false;
    };
    /**
     * Used to get a menu instance. If a `menuId` is not provided then it'll
     * return the first menu found. If a `menuId` is `left` or `right`, then
     * it'll return the enabled menu on that side. Otherwise, if a `menuId` is
     * provided, then it'll try to find the menu using the menu's `id`
     * property. If a menu is not found then it'll return `null`.
     * @param {string} [menuId]  Optionally get the menu by its id, or side.
     * @return {Menu}  Returns the instance of the menu if found, otherwise `null`.
     */
    MenuController.prototype.get = function (menuId) {
        var menu;
        if (menuId === 'left' || menuId === 'right') {
            // there could be more than one menu on the same side
            // so first try to get the enabled one
            menu = this._menus.find(function (m) {
                return m.side === menuId && m.enabled;
            });
            if (menu) return menu;
            // didn't find a menu side that is enabled
            // so try to get the first menu side found
            return this._menus.find(function (m) {
                return m.side === menuId;
            }) || null;
        } else if (menuId) {
            // the menuId was not left or right
            // so try to get the menu by its "id"
            return this._menus.find(function (m) {
                return m.id === menuId;
            }) || null;
        }
        // return the first enabled menu
        menu = this._menus.find(function (m) {
            return m.enabled;
        });
        if (menu) return menu;
        // get the first menu in the array, if one exists
        return this._menus.length ? this._menus[0] : null;
    };
    /**
     * @return {Array<Menu>}  Returns an array of all menu instances.
     */
    MenuController.prototype.getMenus = function () {
        return this._menus;
    };
    /**
     * @private
     */
    MenuController.prototype.register = function (menu) {
        this._menus.push(menu);
    };
    /**
     * @private
     */
    MenuController.prototype.unregister = function (menu) {
        var index = this._menus.indexOf(menu);
        if (index > -1) {
            this._menus.splice(index, 1);
        }
    };
    /**
     * @private
     */
    MenuController.registerType = function (name, cls) {
        menuTypes[name] = cls;
    };
    /**
     * @private
     */
    MenuController.create = function (type, menuCmp, platform) {
        return new menuTypes[type](menuCmp, platform);
    };
    return MenuController;
}();
exports.MenuController = MenuController;
var menuTypes = {};

/***/ },
/* 149 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * @name NavParams
 * @description
 * NavParams are an object that exists on a page and can contain data for that particular view.
 * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible
 * option with a simple `get` method.
 *
 * @usage
 * ```ts
 * export class MyClass{
 *  constructor(private params: NavParams){
 *    // userParams is an object we have in our nav-parameters
 *    this.params.get('userParams');
 *  }
 * }
 * ```
 * @demo /docs/v2/demos/nav-params/
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 * @see {@link ../NavController/ NavController API Docs}
 * @see {@link ../Nav/ Nav API Docs}
 * @see {@link ../NavPush/ NavPush API Docs}
 */

var NavParams = function () {
  /**
   * @private
   * @param {TODO} data  TODO
   */
  function NavParams(data) {
    if (data === void 0) {
      data = {};
    }
    this.data = data;
  }
  /**
   * Get the value of a nav-parameter for the current view
   *
   * ```ts
   * export class MyClass{
   *  constructor(private params: NavParams){
   *    // userParams is an object we have in our nav-parameters
   *    this.params.get('userParams');
   *  }
   * }
   * ```
   *
   *
   * @param {string} parameter Which param you want to look up
   */
  NavParams.prototype.get = function (param) {
    return this.data[param];
  };
  return NavParams;
}();
exports.NavParams = NavParams;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__toolbar_toolbar__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_view_controller__ = __webpack_require__(33);
/* unused harmony export BackButton *//* unused harmony export BackButtonText *//* unused harmony export ToolbarBackground */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return Navbar; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return NavbarTemplate; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};








var BackButton = function (_Ion) {
    _inherits(BackButton, _Ion);

    function BackButton(_nav, elementRef, navbar) {
        _classCallCheck(this, BackButton);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BackButton).call(this, elementRef));

        _this._nav = _nav;
        navbar && navbar.setBackButtonRef(elementRef);
        return _this;
    }

    _createClass(BackButton, [{
        key: "goBack",
        value: function goBack(ev) {
            ev.stopPropagation();
            ev.preventDefault();
            this._nav && this._nav.pop();
        }
    }]);

    return BackButton;
}(__WEBPACK_IMPORTED_MODULE_3__ion__["a" /* Ion */]);
BackButton = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '.back-button',
    host: {
        '(click)': 'goBack($event)'
    }
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return Navbar;
}))), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__nav_nav_controller__["a" /* NavController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, Navbar])], BackButton);
var BackButtonText = function BackButtonText(elementRef, navbar) {
    _classCallCheck(this, BackButtonText);

    navbar.setBackButtonTextRef(elementRef);
};
BackButtonText = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '.back-button-text'
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return Navbar;
}))), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object, Navbar])], BackButtonText);
var ToolbarBackground = function ToolbarBackground(elementRef, navbar) {
    _classCallCheck(this, ToolbarBackground);

    navbar.setBackgroundRef(elementRef);
};
ToolbarBackground = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '.toolbar-background'
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return Navbar;
}))), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _d || Object, Navbar])], ToolbarBackground);
/**
 * @name Navbar
 * @description
 * Navbar acts as the navigational toolbar, which also comes with a back
 * button. A navbar can contain a `ion-title`, any number of buttons,
 * a segment, or a searchbar. Navbars must be placed within an
 * `<ion-header>` in order for them to be placed above the content.
 *
 * @usage
 * ```html
 * <ion-header>
 *
 *   <ion-navbar>
 *     <button menuToggle>
 *       <ion-icon name="menu"></ion-icon>
 *     </button>
 *
 *     <ion-title>
 *       Page Title
 *     </ion-title>
 *
 *     <ion-buttons end>
 *       <button (click)="openModal()">
 *         <ion-icon name="options"></ion-icon>
 *       </button>
 *     </ion-buttons>
 *   </ion-navbar>
 *
 * </ion-header>
 * ```
 *
 * @demo /docs/v2/demos/navbar/
 * @see {@link ../../toolbar/Toolbar/ Toolbar API Docs}
 */
var Navbar = function (_ToolbarBase) {
    _inherits(Navbar, _ToolbarBase);

    function Navbar(_app, viewCtrl, elementRef, config) {
        _classCallCheck(this, Navbar);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Navbar).call(this, elementRef));

        _this2._app = _app;
        _this2._hidden = false;
        _this2._hideBb = false;
        viewCtrl && viewCtrl.setNavbar(_this2);
        _this2._bbIcon = config.get('backButtonIcon');
        _this2._bbText = config.get('backButtonText');
        _this2._sbPadding = config.getBoolean('statusbarPadding', false);
        return _this2;
    }
    /**
     * @input {boolean} whether the back button should be shown or not
     */

    _createClass(Navbar, [{
        key: "setBackButtonText",

        /**
         * @private
         */
        value: function setBackButtonText(text) {
            this._bbText = text;
        }
        /**
         * @private
         */

    }, {
        key: "getBackButtonRef",
        value: function getBackButtonRef() {
            return this._bbRef;
        }
        /**
         * @private
         */

    }, {
        key: "setBackButtonRef",
        value: function setBackButtonRef(backButtonElementRef) {
            this._bbRef = backButtonElementRef;
        }
        /**
         * @private
         */

    }, {
        key: "getBackButtonTextRef",
        value: function getBackButtonTextRef() {
            return this._bbtRef;
        }
        /**
         * @private
         */

    }, {
        key: "setBackButtonTextRef",
        value: function setBackButtonTextRef(backButtonTextElementRef) {
            this._bbtRef = backButtonTextElementRef;
        }
        /**
         * @private
         */

    }, {
        key: "setBackgroundRef",
        value: function setBackgroundRef(backgrouneElementRef) {
            this._bgRef = backgrouneElementRef;
        }
        /**
         * @private
         */

    }, {
        key: "getBackgroundRef",
        value: function getBackgroundRef() {
            return this._bgRef;
        }
        /**
         * @private
         */

    }, {
        key: "didEnter",
        value: function didEnter() {
            try {
                this._app.setTitle(this.getTitleText());
            } catch (e) {
                console.error(e);
            }
        }
        /**
         * @private
         */

    }, {
        key: "setHidden",
        value: function setHidden(isHidden) {
            // used to display none/block the navbar
            this._hidden = isHidden;
        }
    }, {
        key: "hideBackButton",
        get: function get() {
            return this._hideBb;
        },
        set: function set(val) {
            this._hideBb = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
        }
    }]);

    return Navbar;
}(__WEBPACK_IMPORTED_MODULE_6__toolbar_toolbar__["a" /* ToolbarBase */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Navbar.prototype, "hideBackButton", null);
Navbar = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-navbar',
    template: '<div class="toolbar-background"></div>' + '<button category="bar-button" class="back-button" [hidden]="_hideBb">' + '<span class="button-inner">' + '<ion-icon class="back-button-icon" [name]="_bbIcon"></ion-icon>' + '<span class="back-button-text">' + '<span class="back-default">{{_bbText}}</span>' + '</span>' + '</span>' + '</button>' + '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' + '<ng-content select="ion-buttons[start]"></ng-content>' + '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' + '<div class="toolbar-content">' + '<ng-content></ng-content>' + '</div>',
    host: {
        '[hidden]': '_hidden',
        'class': 'toolbar',
        '[class.statusbar-padding]': '_sbPadding'
    },
    directives: [BackButton, BackButtonText, ToolbarBackground]
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_7__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_view_controller__["a" /* ViewController */]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _h || Object])], Navbar);
/**
 * @private
*/
var NavbarTemplate = function NavbarTemplate() {
    _classCallCheck(this, NavbarTemplate);

    // deprecated warning: added 2016-06-14, beta.10
    console.warn('ion-navbar no longer requires *navbar attribute. Please restructure header to:\n' + '<ion-header>\n' + '  <ion-navbar>\n' + '    ...\n' + '  </ion-navbar>\n' + '</ion-header>');
};
NavbarTemplate = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'template[navbar]'
}), __metadata('design:paramtypes', [])], NavbarTemplate);
var _a, _b, _c, _d, _e, _f, _g, _h;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "c", function() { return Header; });
/* harmony export */ __webpack_require__.d(exports, "d", function() { return Footer; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return ToolbarBase; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return Toolbar; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};




/**
 * @private
 */
var Header = function Header(viewCtrl) {
    _classCallCheck(this, Header);

    viewCtrl && viewCtrl.setHeader(this);
};
Header = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-header'
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */]) === 'function' && _a || Object])], Header);
/**
 * @private
 */
var Footer = function Footer(viewCtrl) {
    _classCallCheck(this, Footer);

    viewCtrl && viewCtrl.setFooter(this);
};
Footer = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-footer'
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */]) === 'function' && _b || Object])], Footer);
/**
 * @private
 */
var ToolbarBase = function (_Ion) {
    _inherits(ToolbarBase, _Ion);

    function ToolbarBase(elementRef) {
        _classCallCheck(this, ToolbarBase);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarBase).call(this, elementRef));

        _this.itemRefs = [];
        _this.titleRef = null;
        return _this;
    }
    /**
     * @private
     */

    _createClass(ToolbarBase, [{
        key: "setTitleCmp",
        value: function setTitleCmp(titleCmp) {
            this.titleCmp = titleCmp;
        }
        /**
         * @private
         * Returns the toolbar title text if it exists or an empty string
         */

    }, {
        key: "getTitleText",
        value: function getTitleText() {
            return this.titleCmp && this.titleCmp.getTitleText() || '';
        }
        /**
         * @private
         */

    }, {
        key: "getTitleRef",
        value: function getTitleRef() {
            return this.titleCmp && this.titleCmp.elementRef;
        }
        /**
         * @private
         * A toolbar items include the left and right side `ion-buttons`,
         * and every `menu-toggle`. It does not include the `ion-title`.
         * @returns {TODO} Array of this toolbar's item ElementRefs.
         */

    }, {
        key: "getItemRefs",
        value: function getItemRefs() {
            return this.itemRefs;
        }
        /**
         * @private
         */

    }, {
        key: "addItemRef",
        value: function addItemRef(itemElementRef) {
            this.itemRefs.push(itemElementRef);
        }
    }]);

    return ToolbarBase;
}(__WEBPACK_IMPORTED_MODULE_2__ion__["a" /* Ion */]);
/**
 * @name Toolbar
 * @description
 * A Toolbar is a generic bar that is positioned above or below content.
 * Unlike a [Navbar](../../nav/Navbar), a toolbar can be used as a subheader.
 * When toolbars are placed within an `<ion-header>` or `<ion-footer>`,
 * the toolbars stay fixed in their respective location. When placed within
 * `<ion-content>`, toolbars will scroll with the content.
 *
 *
 * ### Buttons in a Toolbar
 * Buttons placed in a toolbar should be placed inside of the `<ion-buttons>`
 * element. An exception to this is a [menuToggle](../../menu/MenuToggle) button.
 * It should not be placed inside of the `<ion-buttons>` element. Both the
 * `<ion-buttons>` element and the `menuToggle` can be positioned inside of the
 * toolbar using different properties. The below chart has a description of each
 * property.
 *
 * | Property    | Description                                                                                                           |
 * |-------------|-----------------------------------------------------------------------------------------------------------------------|
 * | `start`     | Positions element to the left of the content in `ios` mode, and directly to the right in `md` and `wp` mode.    |
 * | `end`       | Positions element to the right of the content in `ios` mode, and to the far right in `md` and `wp` mode.        |
 * | `left`      | Positions element to the left of all other elements.                                                            |
 * | `right`     | Positions element to the right of all other elements.                                                           |
 *
 *
 * ### Multiple Toolbars
 * Toolbars can be stacked up vertically in `<ion-header>`, `<ion-content>`, and
 * `<ion-footer>` elements. However, toolbars also come with borders on both
 * the top and bottom of the toolbar. To give developers full control of the
 * design, Ionic also includes the `no-border-bottom` and `no-border-top` attributes.
 * For example, sometimes two vertically stacked toolbars may have different
 * background colors, in this case it might be best to leave a border between them.
 * However, if they have the same background color, the app may look best without
 * a border between them. The main point here is, it's entirely up to the app's design
 * to decide when and when not to show borders between toolbars, and to do so then
 * each toolbar can individually set `no-border-bottom` and `no-border-top` attributes.
 *
 *
 * @usage
 * ```html
 * <ion-header>
 *
 *   <ion-toolbar no-border-bottom>
 *     <ion-buttons start>
 *       <button>
 *         <ion-icon name="contact"></ion-icon>
 *       </button>
 *       <button>
 *         <ion-icon name="search"></ion-icon>
 *       </button>
 *     </ion-buttons>
 *     <ion-title>My Toolbar Title</ion-title>
 *   </ion-toolbar>
 *
 *   <ion-toolbar no-border-top>
 *     <ion-title>I'm a subheader</ion-title>
 *   </ion-toolbar>
 *
 * <ion-header>
 *
 *
 * <ion-content>
 *
 *   <ion-toolbar>
 *     <ion-title>Scrolls with the content</ion-title>
 *   </ion-toolbar>
 *
 * </ion-content>
 *
 *
 * <ion-footer>
 *
 *   <ion-toolbar no-border-bottom>
 *     <ion-title>I'm a subfooter</ion-title>
 *     <ion-buttons right>
 *       <button>
 *         <ion-icon name="menu"></ion-icon>
 *       </button>
 *     </ion-buttons>
 *   </ion-toolbar>
 *
 *   <ion-toolbar no-border-top>
 *     <ion-title>I'm a footer</ion-title>
 *     <ion-buttons end>
 *       <button>
 *         <ion-icon name="more"></ion-icon>
 *       </button>
 *       <button>
 *         <ion-icon name="options"></ion-icon>
 *       </button>
 *     </ion-buttons>
 *   </ion-toolbar>
 *
 * </ion-footer>
 *  ```
 *
 * @demo /docs/v2/demos/toolbar/
 * @see {@link ../../navbar/Navbar/ Navbar API Docs}
 */
var Toolbar = function (_ToolbarBase) {
    _inherits(Toolbar, _ToolbarBase);

    function Toolbar(viewCtrl, header, footer, config, elementRef) {
        _classCallCheck(this, Toolbar);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Toolbar).call(this, elementRef));

        if (viewCtrl && (header || footer)) {
            // only toolbars within headers and footer are view toolbars
            // toolbars within the content are not view toolbars, since they
            // are apart of the content, and could be anywhere within the content
            viewCtrl.setToolbarRef(elementRef);
        }
        _this2._sbPadding = config.getBoolean('statusbarPadding');
        return _this2;
    }

    return Toolbar;
}(ToolbarBase);
Toolbar = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-toolbar',
    template: '<div class="toolbar-background"></div>' + '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' + '<ng-content select="ion-buttons[start]"></ng-content>' + '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' + '<div class="toolbar-content">' + '<ng-content></ng-content>' + '</div>',
    host: {
        'class': 'toolbar',
        '[class.statusbar-padding]': '_sbPadding'
    },
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */]) === 'function' && _c || Object, Header, Footer, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _e || Object])], Toolbar);
var _a, _b, _c, _d, _e;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* unused harmony export PointerEvents */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return UIEventManager; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * @private
 */
var PointerEvents = function () {
    function PointerEvents(ele, pointerDown, pointerMove, pointerUp, zone, option) {
        var _this = this;

        _classCallCheck(this, PointerEvents);

        this.ele = ele;
        this.pointerDown = pointerDown;
        this.pointerMove = pointerMove;
        this.pointerUp = pointerUp;
        this.zone = zone;
        this.option = option;
        this.rmTouchStart = null;
        this.rmTouchMove = null;
        this.rmTouchEnd = null;
        this.rmMouseStart = null;
        this.rmMouseMove = null;
        this.rmMouseUp = null;
        this.lastTouchEvent = 0;
        this.mouseWait = 2 * 1000;
        this.rmTouchStart = listenEvent(ele, 'touchstart', zone, option, function (ev) {
            return _this.handleTouchStart(ev);
        });
        this.rmMouseStart = listenEvent(ele, 'mousedown', zone, option, function (ev) {
            return _this.handleMouseDown(ev);
        });
    }

    _createClass(PointerEvents, [{
        key: 'handleTouchStart',
        value: function handleTouchStart(ev) {
            var _this2 = this;

            this.lastTouchEvent = Date.now() + this.mouseWait;
            if (!this.pointerDown(ev)) {
                return;
            }
            if (!this.rmTouchMove) {
                this.rmTouchMove = listenEvent(this.ele, 'touchmove', this.zone, this.option, this.pointerMove);
            }
            if (!this.rmTouchEnd) {
                this.rmTouchEnd = listenEvent(this.ele, 'touchend', this.zone, this.option, function (ev) {
                    return _this2.handleTouchEnd(ev);
                });
            }
        }
    }, {
        key: 'handleMouseDown',
        value: function handleMouseDown(ev) {
            var _this3 = this;

            if (this.lastTouchEvent > Date.now()) {
                console.debug('mousedown event dropped because of previous touch');
                return;
            }
            if (!this.pointerDown(ev)) {
                return;
            }
            if (!this.rmMouseMove) {
                this.rmMouseMove = listenEvent(window, 'mousemove', this.zone, this.option, this.pointerMove);
            }
            if (!this.rmMouseUp) {
                this.rmMouseUp = listenEvent(window, 'mouseup', this.zone, this.option, function (ev) {
                    return _this3.handleMouseUp(ev);
                });
            }
        }
    }, {
        key: 'handleTouchEnd',
        value: function handleTouchEnd(ev) {
            this.rmTouchMove && this.rmTouchMove();
            this.rmTouchMove = null;
            this.rmTouchEnd && this.rmTouchEnd();
            this.rmTouchEnd = null;
            this.pointerUp(ev);
        }
    }, {
        key: 'handleMouseUp',
        value: function handleMouseUp(ev) {
            this.rmMouseMove && this.rmMouseMove();
            this.rmMouseMove = null;
            this.rmMouseUp && this.rmMouseUp();
            this.rmMouseUp = null;
            this.pointerUp(ev);
        }
    }, {
        key: 'stop',
        value: function stop() {
            this.rmTouchMove && this.rmTouchMove();
            this.rmTouchEnd && this.rmTouchEnd();
            this.rmTouchMove = null;
            this.rmTouchEnd = null;
            this.rmMouseMove && this.rmMouseMove();
            this.rmMouseUp && this.rmMouseUp();
            this.rmMouseMove = null;
            this.rmMouseUp = null;
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.rmTouchStart && this.rmTouchStart();
            this.rmTouchStart = null;
            this.rmMouseStart && this.rmMouseStart();
            this.rmMouseStart = null;
            this.stop();
            this.pointerDown = null;
            this.pointerMove = null;
            this.pointerUp = null;
            this.ele = null;
        }
    }]);

    return PointerEvents;
}();
/**
 * @private
 */
var UIEventManager = function () {
    function UIEventManager() {
        var zoneWrapped = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

        _classCallCheck(this, UIEventManager);

        this.zoneWrapped = zoneWrapped;
        this.events = [];
    }

    _createClass(UIEventManager, [{
        key: 'listenRef',
        value: function listenRef(ref, eventName, callback, option) {
            return this.listen(ref.nativeElement, eventName, callback, option);
        }
    }, {
        key: 'pointerEventsRef',
        value: function pointerEventsRef(ref, pointerStart, pointerMove, pointerEnd, option) {
            return this.pointerEvents(ref.nativeElement, pointerStart, pointerMove, pointerEnd, option);
        }
    }, {
        key: 'pointerEvents',
        value: function pointerEvents(element, pointerDown, pointerMove, pointerUp) {
            var option = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

            if (!element) {
                return;
            }
            var submanager = new PointerEvents(element, pointerDown, pointerMove, pointerUp, this.zoneWrapped, option);
            var removeFunc = function removeFunc() {
                return submanager.destroy();
            };
            this.events.push(removeFunc);
            return submanager;
        }
    }, {
        key: 'listen',
        value: function listen(element, eventName, callback) {
            var option = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

            if (!element) {
                return;
            }
            var removeFunc = listenEvent(element, eventName, this.zoneWrapped, option, callback);
            this.events.push(removeFunc);
            return removeFunc;
        }
    }, {
        key: 'unlistenAll',
        value: function unlistenAll() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var event = _step.value;

                    event();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.events.length = 0;
        }
    }]);

    return UIEventManager;
}();
function listenEvent(ele, eventName, zoneWrapped, option, callback) {
    var rawEvent = '__zone_symbol__addEventListener' in ele && !zoneWrapped;
    if (rawEvent) {
        ele.__zone_symbol__addEventListener(eventName, callback, option);
        return function () {
            return ele.__zone_symbol__removeEventListener(eventName, callback);
        };
    } else {
        ele.addEventListener(eventName, callback, option);
        return function () {
            return ele.removeEventListener(eventName, callback);
        };
    }
}

/***/ },
/* 153 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * @private
 */

var PointerEvents = function () {
    function PointerEvents(ele, pointerDown, pointerMove, pointerUp, zone, option) {
        var _this = this;
        this.ele = ele;
        this.pointerDown = pointerDown;
        this.pointerMove = pointerMove;
        this.pointerUp = pointerUp;
        this.zone = zone;
        this.option = option;
        this.rmTouchStart = null;
        this.rmTouchMove = null;
        this.rmTouchEnd = null;
        this.rmMouseStart = null;
        this.rmMouseMove = null;
        this.rmMouseUp = null;
        this.lastTouchEvent = 0;
        this.mouseWait = 2 * 1000;
        this.rmTouchStart = listenEvent(ele, 'touchstart', zone, option, function (ev) {
            return _this.handleTouchStart(ev);
        });
        this.rmMouseStart = listenEvent(ele, 'mousedown', zone, option, function (ev) {
            return _this.handleMouseDown(ev);
        });
    }
    PointerEvents.prototype.handleTouchStart = function (ev) {
        var _this = this;
        this.lastTouchEvent = Date.now() + this.mouseWait;
        if (!this.pointerDown(ev)) {
            return;
        }
        if (!this.rmTouchMove) {
            this.rmTouchMove = listenEvent(this.ele, 'touchmove', this.zone, this.option, this.pointerMove);
        }
        if (!this.rmTouchEnd) {
            this.rmTouchEnd = listenEvent(this.ele, 'touchend', this.zone, this.option, function (ev) {
                return _this.handleTouchEnd(ev);
            });
        }
    };
    PointerEvents.prototype.handleMouseDown = function (ev) {
        var _this = this;
        if (this.lastTouchEvent > Date.now()) {
            console.debug('mousedown event dropped because of previous touch');
            return;
        }
        if (!this.pointerDown(ev)) {
            return;
        }
        if (!this.rmMouseMove) {
            this.rmMouseMove = listenEvent(window, 'mousemove', this.zone, this.option, this.pointerMove);
        }
        if (!this.rmMouseUp) {
            this.rmMouseUp = listenEvent(window, 'mouseup', this.zone, this.option, function (ev) {
                return _this.handleMouseUp(ev);
            });
        }
    };
    PointerEvents.prototype.handleTouchEnd = function (ev) {
        this.rmTouchMove && this.rmTouchMove();
        this.rmTouchMove = null;
        this.rmTouchEnd && this.rmTouchEnd();
        this.rmTouchEnd = null;
        this.pointerUp(ev);
    };
    PointerEvents.prototype.handleMouseUp = function (ev) {
        this.rmMouseMove && this.rmMouseMove();
        this.rmMouseMove = null;
        this.rmMouseUp && this.rmMouseUp();
        this.rmMouseUp = null;
        this.pointerUp(ev);
    };
    PointerEvents.prototype.stop = function () {
        this.rmTouchMove && this.rmTouchMove();
        this.rmTouchEnd && this.rmTouchEnd();
        this.rmTouchMove = null;
        this.rmTouchEnd = null;
        this.rmMouseMove && this.rmMouseMove();
        this.rmMouseUp && this.rmMouseUp();
        this.rmMouseMove = null;
        this.rmMouseUp = null;
    };
    PointerEvents.prototype.destroy = function () {
        this.rmTouchStart && this.rmTouchStart();
        this.rmTouchStart = null;
        this.rmMouseStart && this.rmMouseStart();
        this.rmMouseStart = null;
        this.stop();
        this.pointerDown = null;
        this.pointerMove = null;
        this.pointerUp = null;
        this.ele = null;
    };
    return PointerEvents;
}();
exports.PointerEvents = PointerEvents;
/**
 * @private
 */
var UIEventManager = function () {
    function UIEventManager(zoneWrapped) {
        if (zoneWrapped === void 0) {
            zoneWrapped = true;
        }
        this.zoneWrapped = zoneWrapped;
        this.events = [];
    }
    UIEventManager.prototype.listenRef = function (ref, eventName, callback, option) {
        return this.listen(ref.nativeElement, eventName, callback, option);
    };
    UIEventManager.prototype.pointerEventsRef = function (ref, pointerStart, pointerMove, pointerEnd, option) {
        return this.pointerEvents(ref.nativeElement, pointerStart, pointerMove, pointerEnd, option);
    };
    UIEventManager.prototype.pointerEvents = function (element, pointerDown, pointerMove, pointerUp, option) {
        if (option === void 0) {
            option = false;
        }
        if (!element) {
            return;
        }
        var submanager = new PointerEvents(element, pointerDown, pointerMove, pointerUp, this.zoneWrapped, option);
        var removeFunc = function removeFunc() {
            return submanager.destroy();
        };
        this.events.push(removeFunc);
        return submanager;
    };
    UIEventManager.prototype.listen = function (element, eventName, callback, option) {
        if (option === void 0) {
            option = false;
        }
        if (!element) {
            return;
        }
        var removeFunc = listenEvent(element, eventName, this.zoneWrapped, option, callback);
        this.events.push(removeFunc);
        return removeFunc;
    };
    UIEventManager.prototype.unlistenAll = function () {
        for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
            var event_1 = _a[_i];
            event_1();
        }
        this.events.length = 0;
    };
    return UIEventManager;
}();
exports.UIEventManager = UIEventManager;
function listenEvent(ele, eventName, zoneWrapped, option, callback) {
    var rawEvent = '__zone_symbol__addEventListener' in ele && !zoneWrapped;
    if (rawEvent) {
        ele.__zone_symbol__addEventListener(eventName, callback, option);
        return function () {
            return ele.__zone_symbol__removeEventListener(eventName, callback);
        };
    } else {
        ele.addEventListener(eventName, callback, option);
        return function () {
            return ele.removeEventListener(eventName, callback);
        };
    }
}

/***/ },
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var default_iterable_differ_1 = __webpack_require__(257);
var default_keyvalue_differ_1 = __webpack_require__(395);
var iterable_differs_1 = __webpack_require__(396);
var keyvalue_differs_1 = __webpack_require__(397);
var change_detection_util_1 = __webpack_require__(393);
exports.SimpleChange = change_detection_util_1.SimpleChange;
exports.ValueUnwrapper = change_detection_util_1.ValueUnwrapper;
exports.WrappedValue = change_detection_util_1.WrappedValue;
exports.devModeEqual = change_detection_util_1.devModeEqual;
exports.looseIdentical = change_detection_util_1.looseIdentical;
exports.uninitialized = change_detection_util_1.uninitialized;
var change_detector_ref_1 = __webpack_require__(613);
exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
var constants_1 = __webpack_require__(394);
exports.CHANGE_DETECTION_STRATEGY_VALUES = constants_1.CHANGE_DETECTION_STRATEGY_VALUES;
exports.CHANGE_DETECTOR_STATE_VALUES = constants_1.CHANGE_DETECTOR_STATE_VALUES;
exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
exports.ChangeDetectorState = constants_1.ChangeDetectorState;
exports.isDefaultChangeDetectionStrategy = constants_1.isDefaultChangeDetectionStrategy;
var default_iterable_differ_2 = __webpack_require__(257);
exports.CollectionChangeRecord = default_iterable_differ_2.CollectionChangeRecord;
exports.DefaultIterableDifferFactory = default_iterable_differ_2.DefaultIterableDifferFactory;
var default_iterable_differ_3 = __webpack_require__(257);
exports.DefaultIterableDiffer = default_iterable_differ_3.DefaultIterableDiffer;
var default_keyvalue_differ_2 = __webpack_require__(395);
exports.DefaultKeyValueDifferFactory = default_keyvalue_differ_2.DefaultKeyValueDifferFactory;
exports.KeyValueChangeRecord = default_keyvalue_differ_2.KeyValueChangeRecord;
var iterable_differs_2 = __webpack_require__(396);
exports.IterableDiffers = iterable_differs_2.IterableDiffers;
var keyvalue_differs_2 = __webpack_require__(397);
exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
/**
 * Structural diffing for `Object`s and `Map`s.
 */
exports.keyValDiff =
/*@ts2dart_const*/[new default_keyvalue_differ_1.DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */
exports.iterableDiff =
/*@ts2dart_const*/[new default_iterable_differ_1.DefaultIterableDifferFactory()];
exports.defaultIterableDiffers = new iterable_differs_1.IterableDiffers(exports.iterableDiff);
exports.defaultKeyValueDiffers = new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff);
//# sourceMappingURL=change_detection.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
/**
 * A parameter metadata that specifies a dependency.
 *
 * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))
 *
 * ```typescript
 * class Engine {}
 *
 * @Injectable()
 * class Car {
 *   engine;
 *   constructor(@Inject("MyEngine") engine:Engine) {
 *     this.engine = engine;
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([
 *  {provide: "MyEngine", useClass: Engine},
 *  Car
 * ]);
 *
 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
 * ```
 *
 * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.
 *
 * ### Example
 *
 * ```typescript
 * class Engine {}
 *
 * @Injectable()
 * class Car {
 *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)
 * }
 *
 * var injector = Injector.resolveAndCreate([Engine, Car]);
 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
 * ```
 * @ts2dart_const
 * @stable
 */
var InjectMetadata = function () {
    function InjectMetadata(token /** TODO #9100 */) {
        this.token = token;
    }
    InjectMetadata.prototype.toString = function () {
        return "@Inject(" + lang_1.stringify(this.token) + ")";
    };
    return InjectMetadata;
}();
exports.InjectMetadata = InjectMetadata;
/**
 * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
 * the dependency is not found.
 *
 * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))
 *
 * ```typescript
 * class Engine {}
 *
 * @Injectable()
 * class Car {
 *   engine;
 *   constructor(@Optional() engine:Engine) {
 *     this.engine = engine;
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([Car]);
 * expect(injector.get(Car).engine).toBeNull();
 * ```
 * @ts2dart_const
 * @stable
 */
var OptionalMetadata = function () {
    function OptionalMetadata() {}
    OptionalMetadata.prototype.toString = function () {
        return "@Optional()";
    };
    return OptionalMetadata;
}();
exports.OptionalMetadata = OptionalMetadata;
/**
 * `DependencyMetadata` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 * @ts2dart_const
 * @stable
 */
var DependencyMetadata = function () {
    function DependencyMetadata() {}
    Object.defineProperty(DependencyMetadata.prototype, "token", {
        get: function get() {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    return DependencyMetadata;
}();
exports.DependencyMetadata = DependencyMetadata;
/**
 * A marker metadata that marks a class as available to {@link Injector} for creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))
 *
 * ```typescript
 * @Injectable()
 * class UsefulService {}
 *
 * @Injectable()
 * class NeedsService {
 *   constructor(public service:UsefulService) {}
 * }
 *
 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
 * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);
 * ```
 * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that
 * does not have `@Injectable` marker, as shown in the example below.
 *
 * ```typescript
 * class UsefulService {}
 *
 * class NeedsService {
 *   constructor(public service:UsefulService) {}
 * }
 *
 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
 * expect(() => injector.get(NeedsService)).toThrowError();
 * ```
 * @ts2dart_const
 * @stable
 */
var InjectableMetadata = function () {
    function InjectableMetadata() {}
    return InjectableMetadata;
}();
exports.InjectableMetadata = InjectableMetadata;
/**
 * Specifies that an {@link Injector} should retrieve a dependency only from itself.
 *
 * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))
 *
 * ```typescript
 * class Dependency {
 * }
 *
 * @Injectable()
 * class NeedsDependency {
 *   dependency;
 *   constructor(@Self() dependency:Dependency) {
 *     this.dependency = dependency;
 *   }
 * }
 *
 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
 * var nd = inj.get(NeedsDependency);
 *
 * expect(nd.dependency instanceof Dependency).toBe(true);
 *
 * var inj = Injector.resolveAndCreate([Dependency]);
 * var child = inj.resolveAndCreateChild([NeedsDependency]);
 * expect(() => child.get(NeedsDependency)).toThrowError();
 * ```
 * @ts2dart_const
 * @stable
 */
var SelfMetadata = function () {
    function SelfMetadata() {}
    SelfMetadata.prototype.toString = function () {
        return "@Self()";
    };
    return SelfMetadata;
}();
exports.SelfMetadata = SelfMetadata;
/**
 * Specifies that the dependency resolution should start from the parent injector.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))
 *
 * ```typescript
 * class Dependency {
 * }
 *
 * @Injectable()
 * class NeedsDependency {
 *   dependency;
 *   constructor(@SkipSelf() dependency:Dependency) {
 *     this.dependency = dependency;
 *   }
 * }
 *
 * var parent = Injector.resolveAndCreate([Dependency]);
 * var child = parent.resolveAndCreateChild([NeedsDependency]);
 * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);
 *
 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
 * expect(() => inj.get(NeedsDependency)).toThrowError();
 * ```
 * @ts2dart_const
 * @stable
 */
var SkipSelfMetadata = function () {
    function SkipSelfMetadata() {}
    SkipSelfMetadata.prototype.toString = function () {
        return "@SkipSelf()";
    };
    return SkipSelfMetadata;
}();
exports.SkipSelfMetadata = SkipSelfMetadata;
/**
 * Specifies that an injector should retrieve a dependency from any injector until reaching the
 * closest host.
 *
 * In Angular, a component element is automatically declared as a host for all the injectors in
 * its view.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))
 *
 * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.
 * So `ParentCmp` is the host of `ChildDirective`.
 *
 * `ChildDirective` depends on two services: `HostService` and `OtherService`.
 * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.
 *
 *```typescript
 * class OtherService {}
 * class HostService {}
 *
 * @Directive({
 *   selector: 'child-directive'
 * })
 * class ChildDirective {
 *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){
 *     console.log("os is null", os);
 *     console.log("hs is NOT null", hs);
 *   }
 * }
 *
 * @Component({
 *   selector: 'parent-cmp',
 *   providers: [HostService],
 *   template: `
 *     Dir: <child-directive></child-directive>
 *   `,
 *   directives: [ChildDirective]
 * })
 * class ParentCmp {
 * }
 *
 * @Component({
 *   selector: 'app',
 *   providers: [OtherService],
 *   template: `
 *     Parent: <parent-cmp></parent-cmp>
 *   `,
 *   directives: [ParentCmp]
 * })
 * class App {
 * }
 *
 * bootstrap(App);
 *```
 * @ts2dart_const
 * @stable
 */
var HostMetadata = function () {
    function HostMetadata() {}
    HostMetadata.prototype.toString = function () {
        return "@Host()";
    };
    return HostMetadata;
}();
exports.HostMetadata = HostMetadata;
//# sourceMappingURL=metadata.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(53);
var PromiseObservable_1 = __webpack_require__(129);
var toPromise_1 = __webpack_require__(130);
var lang_1 = __webpack_require__(11);
var Observable_1 = __webpack_require__(39);
exports.Observable = Observable_1.Observable;
var Subject_2 = __webpack_require__(53);
exports.Subject = Subject_2.Subject;
var promise_1 = __webpack_require__(618);
exports.PromiseCompleter = promise_1.PromiseCompleter;
exports.PromiseWrapper = promise_1.PromiseWrapper;
var TimerWrapper = function () {
    function TimerWrapper() {}
    TimerWrapper.setTimeout = function (fn, millis) {
        return lang_1.global.setTimeout(fn, millis);
    };
    TimerWrapper.clearTimeout = function (id) {
        lang_1.global.clearTimeout(id);
    };
    TimerWrapper.setInterval = function (fn, millis) {
        return lang_1.global.setInterval(fn, millis);
    };
    TimerWrapper.clearInterval = function (id) {
        lang_1.global.clearInterval(id);
    };
    return TimerWrapper;
}();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = function () {
    function ObservableWrapper() {}
    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
    ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {
        if (onComplete === void 0) {
            onComplete = function onComplete() {};
        }
        onError = typeof onError === 'function' && onError || lang_1.noop;
        onComplete = typeof onComplete === 'function' && onComplete || lang_1.noop;
        return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });
    };
    ObservableWrapper.isObservable = function (obs) {
        return !!obs.subscribe;
    };
    /**
     * Returns whether `obs` has any subscribers listening to events.
     */
    ObservableWrapper.hasSubscribers = function (obs) {
        return obs.observers.length > 0;
    };
    ObservableWrapper.dispose = function (subscription) {
        subscription.unsubscribe();
    };
    /**
     * @deprecated - use callEmit() instead
     */
    ObservableWrapper.callNext = function (emitter, value) {
        emitter.emit(value);
    };
    ObservableWrapper.callEmit = function (emitter, value) {
        emitter.emit(value);
    };
    ObservableWrapper.callError = function (emitter, error) {
        emitter.error(error);
    };
    ObservableWrapper.callComplete = function (emitter) {
        emitter.complete();
    };
    ObservableWrapper.fromPromise = function (promise) {
        return PromiseObservable_1.PromiseObservable.create(promise);
    };
    ObservableWrapper.toPromise = function (obj) {
        return toPromise_1.toPromise.call(obj);
    };
    return ObservableWrapper;
}();
exports.ObservableWrapper = ObservableWrapper;
/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * @Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   @Output() open: EventEmitter<any> = new EventEmitter();
 *   @Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * @stable
 */
var EventEmitter = function (_super) {
    __extends(EventEmitter, _super);
    /**
     * Creates an instance of [EventEmitter], which depending on [isAsync],
     * delivers events synchronously or asynchronously.
     */
    function EventEmitter(isAsync) {
        if (isAsync === void 0) {
            isAsync = false;
        }
        _super.call(this);
        this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function (value) {
        _super.prototype.next.call(this, value);
    };
    /**
     * @deprecated - use .emit(value) instead
     */
    EventEmitter.prototype.next = function (value) {
        _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
        var schedulerFn;
        var errorFn = function errorFn(err) {
            return null;
        };
        var completeFn = function completeFn() {
            return null;
        };
        if (generatorOrNext && (typeof generatorOrNext === 'undefined' ? 'undefined' : _typeof(generatorOrNext)) === 'object') {
            schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                setTimeout(function () {
                    return generatorOrNext.next(value);
                });
            } : function (value /** TODO #9100 */) {
                generatorOrNext.next(value);
            };
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? function (err) {
                    setTimeout(function () {
                        return generatorOrNext.error(err);
                    });
                } : function (err) {
                    generatorOrNext.error(err);
                };
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? function () {
                    setTimeout(function () {
                        return generatorOrNext.complete();
                    });
                } : function () {
                    generatorOrNext.complete();
                };
            }
        } else {
            schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                setTimeout(function () {
                    return generatorOrNext(value);
                });
            } : function (value /** TODO #9100 */) {
                generatorOrNext(value);
            };
            if (error) {
                errorFn = this.__isAsync ? function (err) {
                    setTimeout(function () {
                        return error(err);
                    });
                } : function (err) {
                    error(err);
                };
            }
            if (complete) {
                completeFn = this.__isAsync ? function () {
                    setTimeout(function () {
                        return complete();
                    });
                } : function () {
                    complete();
                };
            }
        }
        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
}(Subject_1.Subject);
exports.EventEmitter = EventEmitter;
//# sourceMappingURL=async.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var element_ref_1 = __webpack_require__(266);
var view_container_ref_1 = __webpack_require__(622);
var view_type_1 = __webpack_require__(136);
/**
 * An AppElement is created for elements that have a ViewContainerRef,
 * a nested component or a <template> element to keep data around
 * that is needed for later instantiations.
 */
var AppElement = function () {
    function AppElement(index, parentIndex, parentView, nativeElement) {
        this.index = index;
        this.parentIndex = parentIndex;
        this.parentView = parentView;
        this.nativeElement = nativeElement;
        this.nestedViews = null;
        this.componentView = null;
    }
    Object.defineProperty(AppElement.prototype, "elementRef", {
        get: function get() {
            return new element_ref_1.ElementRef(this.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppElement.prototype, "vcRef", {
        get: function get() {
            return new view_container_ref_1.ViewContainerRef_(this);
        },
        enumerable: true,
        configurable: true
    });
    AppElement.prototype.initComponent = function (component, componentConstructorViewQueries, view) {
        this.component = component;
        this.componentConstructorViewQueries = componentConstructorViewQueries;
        this.componentView = view;
    };
    Object.defineProperty(AppElement.prototype, "parentInjector", {
        get: function get() {
            return this.parentView.injector(this.parentIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppElement.prototype, "injector", {
        get: function get() {
            return this.parentView.injector(this.index);
        },
        enumerable: true,
        configurable: true
    });
    AppElement.prototype.mapNestedViews = function (nestedViewClass, callback) {
        var result = [];
        if (lang_1.isPresent(this.nestedViews)) {
            this.nestedViews.forEach(function (nestedView) {
                if (nestedView.clazz === nestedViewClass) {
                    result.push(callback(nestedView));
                }
            });
        }
        return result;
    };
    AppElement.prototype.attachView = function (view, viewIndex) {
        if (view.type === view_type_1.ViewType.COMPONENT) {
            throw new exceptions_1.BaseException("Component views can't be moved!");
        }
        var nestedViews = this.nestedViews;
        if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
        }
        collection_1.ListWrapper.insert(nestedViews, viewIndex, view);
        var refRenderNode;
        if (viewIndex > 0) {
            var prevView = nestedViews[viewIndex - 1];
            refRenderNode = prevView.lastRootNode;
        } else {
            refRenderNode = this.nativeElement;
        }
        if (lang_1.isPresent(refRenderNode)) {
            view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
        }
        view.addToContentChildren(this);
    };
    AppElement.prototype.detachView = function (viewIndex) {
        var view = collection_1.ListWrapper.removeAt(this.nestedViews, viewIndex);
        if (view.type === view_type_1.ViewType.COMPONENT) {
            throw new exceptions_1.BaseException("Component views can't be moved!");
        }
        view.detach();
        view.removeFromContentChildren(this);
        return view;
    };
    return AppElement;
}();
exports.AppElement = AppElement;
//# sourceMappingURL=element.js.map

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__headers__ = __webpack_require__(138);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ResponseOptions; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return BaseResponseOptions; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





/**
 * Creates a response options object to be optionally provided when instantiating a
 * {@link Response}.
 *
 * This class is based on the `ResponseInit` description in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#responseinit).
 *
 * All values are null by default. Typical defaults can be found in the
 * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
 *
 * This class may be used in tests to build {@link Response Responses} for
 * mock responses (see {@link MockBackend}).
 *
 * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
 *
 * ```typescript
 * import {ResponseOptions, Response} from '@angular/http';
 *
 * var options = new ResponseOptions({
 *   body: '{"name":"Jeff"}'
 * });
 * var res = new Response(options);
 *
 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
 * ```
 */
var ResponseOptions = function () {
    function ResponseOptions() {
        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var body = _ref.body;
        var status = _ref.status;
        var headers = _ref.headers;
        var statusText = _ref.statusText;
        var type = _ref.type;
        var url = _ref.url;

        _classCallCheck(this, ResponseOptions);

        this.body = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(body) ? body : null;
        this.status = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(status) ? status : null;
        this.headers = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(headers) ? headers : null;
        this.statusText = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(statusText) ? statusText : null;
        this.type = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(type) ? type : null;
        this.url = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(url) ? url : null;
    }
    /**
     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
     * override
     * existing values. This method will not change the values of the instance on which it is being
     * called.
     *
     * This may be useful when sharing a base `ResponseOptions` object inside tests,
     * where certain properties may change from test to test.
     *
     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
     *
     * ```typescript
     * import {ResponseOptions, Response} from '@angular/http';
     *
     * var options = new ResponseOptions({
     *   body: {name: 'Jeff'}
     * });
     * var res = new Response(options.merge({
     *   url: 'https://google.com'
     * }));
     * console.log('options.url:', options.url); // null
     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
     * console.log('res.url:', res.url); // https://google.com
     * ```
     */


    _createClass(ResponseOptions, [{
        key: 'merge',
        value: function merge(options) {
            return new ResponseOptions({
                body: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.body) ? options.body : this.body,
                status: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.status) ? options.status : this.status,
                headers: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.headers) ? options.headers : this.headers,
                statusText: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.statusText) ? options.statusText : this.statusText,
                type: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.type) ? options.type : this.type,
                url: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.url) ? options.url : this.url
            });
        }
    }]);

    return ResponseOptions;
}();
var BaseResponseOptions = function (_ResponseOptions) {
    _inherits(BaseResponseOptions, _ResponseOptions);

    function BaseResponseOptions() {
        _classCallCheck(this, BaseResponseOptions);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(BaseResponseOptions).call(this, { status: 200, statusText: 'Ok', type: __WEBPACK_IMPORTED_MODULE_2__enums__["a" /* ResponseType */].Default, headers: new __WEBPACK_IMPORTED_MODULE_3__headers__["a" /* Headers */]() }));
    }

    return BaseResponseOptions;
}(ResponseOptions);
/** @nocollapse */
BaseResponseOptions.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
BaseResponseOptions.ctorParameters = [];
//# sourceMappingURL=base_response_options.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__enums__ = __webpack_require__(88);
/* harmony export */ exports["d"] = normalizeMethodName;
/* harmony export */ __webpack_require__.d(exports, "c", function() { return isSuccess; });/* harmony export */ exports["b"] = getResponseURL;/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__, "e")) __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["e"]; });



function normalizeMethodName(method) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["g" /* isString */])(method)) {
        var originalMethod = method;
        method = method.replace(/(\w)(\w*)/g, function (g0, g1, g2) {
            return g1.toUpperCase() + g2.toLowerCase();
        });
        method = __WEBPACK_IMPORTED_MODULE_2__enums__["b" /* RequestMethod */][method];
        if (typeof method !== 'number') throw __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__["b" /* makeTypeError */])('Invalid request method. The method "' + originalMethod + '" is not supported.');
    }
    return method;
}
var isSuccess = function isSuccess(status) {
    return status >= 200 && status < 300;
};
function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return;
}

//# sourceMappingURL=http_utils.js.map

/***/ },
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var ion_1 = __webpack_require__(58);
var util_1 = __webpack_require__(7);
var nav_controller_1 = __webpack_require__(51);
var toolbar_1 = __webpack_require__(202);
var view_controller_1 = __webpack_require__(43);
var BackButton = function (_super) {
    __extends(BackButton, _super);
    function BackButton(_nav, elementRef, navbar) {
        _super.call(this, elementRef);
        this._nav = _nav;
        navbar && navbar.setBackButtonRef(elementRef);
    }
    BackButton.prototype.goBack = function (ev) {
        ev.stopPropagation();
        ev.preventDefault();
        this._nav && this._nav.pop();
    };
    /** @nocollapse */
    BackButton.decorators = [{ type: core_1.Directive, args: [{
            selector: '.back-button',
            host: {
                '(click)': 'goBack($event)'
            }
        }] }];
    /** @nocollapse */
    BackButton.ctorParameters = [{ type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }, { type: core_1.ElementRef }, { type: Navbar, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [core_1.forwardRef(function () {
                return Navbar;
            })] }] }];
    return BackButton;
}(ion_1.Ion);
exports.BackButton = BackButton;
var BackButtonText = function () {
    function BackButtonText(elementRef, navbar) {
        navbar.setBackButtonTextRef(elementRef);
    }
    /** @nocollapse */
    BackButtonText.decorators = [{ type: core_1.Directive, args: [{
            selector: '.back-button-text'
        }] }];
    /** @nocollapse */
    BackButtonText.ctorParameters = [{ type: core_1.ElementRef }, { type: Navbar, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () {
                return Navbar;
            })] }] }];
    return BackButtonText;
}();
exports.BackButtonText = BackButtonText;
var ToolbarBackground = function () {
    function ToolbarBackground(elementRef, navbar) {
        navbar.setBackgroundRef(elementRef);
    }
    /** @nocollapse */
    ToolbarBackground.decorators = [{ type: core_1.Directive, args: [{
            selector: '.toolbar-background'
        }] }];
    /** @nocollapse */
    ToolbarBackground.ctorParameters = [{ type: core_1.ElementRef }, { type: Navbar, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () {
                return Navbar;
            })] }] }];
    return ToolbarBackground;
}();
exports.ToolbarBackground = ToolbarBackground;
var Navbar = function (_super) {
    __extends(Navbar, _super);
    function Navbar(_app, viewCtrl, elementRef, config) {
        _super.call(this, elementRef);
        this._app = _app;
        this._hidden = false;
        this._hideBb = false;
        viewCtrl && viewCtrl.setNavbar(this);
        this._bbIcon = config.get('backButtonIcon');
        this._bbText = config.get('backButtonText');
        this._sbPadding = config.getBoolean('statusbarPadding', false);
    }
    Object.defineProperty(Navbar.prototype, "hideBackButton", {
        get: function get() {
            return this._hideBb;
        },
        set: function set(val) {
            this._hideBb = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Navbar.prototype.setBackButtonText = function (text) {
        this._bbText = text;
    };
    /**
     * @private
     */
    Navbar.prototype.getBackButtonRef = function () {
        return this._bbRef;
    };
    /**
     * @private
     */
    Navbar.prototype.setBackButtonRef = function (backButtonElementRef) {
        this._bbRef = backButtonElementRef;
    };
    /**
     * @private
     */
    Navbar.prototype.getBackButtonTextRef = function () {
        return this._bbtRef;
    };
    /**
     * @private
     */
    Navbar.prototype.setBackButtonTextRef = function (backButtonTextElementRef) {
        this._bbtRef = backButtonTextElementRef;
    };
    /**
     * @private
     */
    Navbar.prototype.setBackgroundRef = function (backgrouneElementRef) {
        this._bgRef = backgrouneElementRef;
    };
    /**
     * @private
     */
    Navbar.prototype.getBackgroundRef = function () {
        return this._bgRef;
    };
    /**
     * @private
     */
    Navbar.prototype.didEnter = function () {
        try {
            this._app.setTitle(this.getTitleText());
        } catch (e) {
            console.error(e);
        }
    };
    /**
     * @private
     */
    Navbar.prototype.setHidden = function (isHidden) {
        // used to display none/block the navbar
        this._hidden = isHidden;
    };
    /** @nocollapse */
    Navbar.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-navbar',
            template: '<div class="toolbar-background"></div>' + '<button category="bar-button" class="back-button" [hidden]="_hideBb">' + '<span class="button-inner">' + '<ion-icon class="back-button-icon" [name]="_bbIcon"></ion-icon>' + '<span class="back-button-text">' + '<span class="back-default">{{_bbText}}</span>' + '</span>' + '</span>' + '</button>' + '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' + '<ng-content select="ion-buttons[start]"></ng-content>' + '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' + '<div class="toolbar-content">' + '<ng-content></ng-content>' + '</div>',
            host: {
                '[hidden]': '_hidden',
                'class': 'toolbar',
                '[class.statusbar-padding]': '_sbPadding'
            },
            directives: [BackButton, BackButtonText, ToolbarBackground]
        }] }];
    /** @nocollapse */
    Navbar.ctorParameters = [{ type: app_1.App }, { type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: core_1.ElementRef }, { type: config_1.Config }];
    /** @nocollapse */
    Navbar.propDecorators = {
        'hideBackButton': [{ type: core_1.Input }]
    };
    return Navbar;
}(toolbar_1.ToolbarBase);
exports.Navbar = Navbar;
var NavbarTemplate = function () {
    function NavbarTemplate() {
        // deprecated warning: added 2016-06-14, beta.10
        console.warn('ion-navbar no longer requires *navbar attribute. Please restructure header to:\n' + '<ion-header>\n' + '  <ion-navbar>\n' + '    ...\n' + '  </ion-navbar>\n' + '</ion-header>');
    }
    /** @nocollapse */
    NavbarTemplate.decorators = [{ type: core_1.Directive, args: [{
            selector: 'template[navbar]'
        }] }];
    /** @nocollapse */
    NavbarTemplate.ctorParameters = [];
    return NavbarTemplate;
}();
exports.NavbarTemplate = NavbarTemplate;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var config_1 = __webpack_require__(16);
var ion_1 = __webpack_require__(58);
var view_controller_1 = __webpack_require__(43);
var Header = function () {
    function Header(viewCtrl) {
        viewCtrl && viewCtrl.setHeader(this);
    }
    /** @nocollapse */
    Header.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-header'
        }] }];
    /** @nocollapse */
    Header.ctorParameters = [{ type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }];
    return Header;
}();
exports.Header = Header;
var Footer = function () {
    function Footer(viewCtrl) {
        viewCtrl && viewCtrl.setFooter(this);
    }
    /** @nocollapse */
    Footer.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-footer'
        }] }];
    /** @nocollapse */
    Footer.ctorParameters = [{ type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }];
    return Footer;
}();
exports.Footer = Footer;
/**
 * @private
 */
var ToolbarBase = function (_super) {
    __extends(ToolbarBase, _super);
    function ToolbarBase(elementRef) {
        _super.call(this, elementRef);
        this.itemRefs = [];
        this.titleRef = null;
    }
    /**
     * @private
     */
    ToolbarBase.prototype.setTitleCmp = function (titleCmp) {
        this.titleCmp = titleCmp;
    };
    /**
     * @private
     * Returns the toolbar title text if it exists or an empty string
     */
    ToolbarBase.prototype.getTitleText = function () {
        return this.titleCmp && this.titleCmp.getTitleText() || '';
    };
    /**
     * @private
     */
    ToolbarBase.prototype.getTitleRef = function () {
        return this.titleCmp && this.titleCmp.elementRef;
    };
    /**
     * @private
     * A toolbar items include the left and right side `ion-buttons`,
     * and every `menu-toggle`. It does not include the `ion-title`.
     * @returns {TODO} Array of this toolbar's item ElementRefs.
     */
    ToolbarBase.prototype.getItemRefs = function () {
        return this.itemRefs;
    };
    /**
     * @private
     */
    ToolbarBase.prototype.addItemRef = function (itemElementRef) {
        this.itemRefs.push(itemElementRef);
    };
    return ToolbarBase;
}(ion_1.Ion);
exports.ToolbarBase = ToolbarBase;
var Toolbar = function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(viewCtrl, header, footer, config, elementRef) {
        _super.call(this, elementRef);
        if (viewCtrl && (header || footer)) {
            // only toolbars within headers and footer are view toolbars
            // toolbars within the content are not view toolbars, since they
            // are apart of the content, and could be anywhere within the content
            viewCtrl.setToolbarRef(elementRef);
        }
        this._sbPadding = config.getBoolean('statusbarPadding');
    }
    /** @nocollapse */
    Toolbar.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-toolbar',
            template: '<div class="toolbar-background"></div>' + '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' + '<ng-content select="ion-buttons[start]"></ng-content>' + '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' + '<div class="toolbar-content">' + '<ng-content></ng-content>' + '</div>',
            host: {
                'class': 'toolbar',
                '[class.statusbar-padding]': '_sbPadding'
            },
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }] }];
    /** @nocollapse */
    Toolbar.ctorParameters = [{ type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: Header, decorators: [{ type: core_1.Optional }] }, { type: Footer, decorators: [{ type: core_1.Optional }] }, { type: config_1.Config }, { type: core_1.ElementRef }];
    return Toolbar;
}(ToolbarBase);
exports.Toolbar = Toolbar;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Button; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};



/**
  * @name Button
  * @module ionic
  *
  * @description
  * Buttons are simple components in Ionic. They can consist of text and icons
  * and be enhanced by a wide range of attributes.
  *
  * @property [outline] - A transparent button with a border.
  * @property [clear] - A transparent button without a border.
  * @property [round] - A button with rounded corners.
  * @property [block] - A button that fills its parent container with a border-radius.
  * @property [full] - A button that fills its parent container without a border-radius or borders on the left/right.
  * @property [small] - A button with size small.
  * @property [large] - A button with size large.
  * @property [disabled] - A disabled button.
  * @property [fab] - A floating action button.
  * @property [fab-left] - Position a fab button to the left.
  * @property [fab-right] - Position a fab button to the right.
  * @property [fab-center] - Position a fab button towards the center.
  * @property [fab-top] - Position a fab button towards the top.
  * @property [fab-bottom] - Position a fab button towards the bottom.
  * @property [fab-fixed] - Makes a fab button have a fixed position.
  * @property [color] - Dynamically set which predefined color this button should use (e.g. primary, secondary, danger, etc).
  *
  * @demo /docs/v2/demos/button/
  * @see {@link /docs/v2/components#buttons Button Component Docs}
 */
var Button = function () {
    function Button(config, _elementRef, _renderer, ionItem) {
        _classCallCheck(this, Button);

        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._role = 'button'; // bar-button/item-button
        this._size = null; // large/small/default
        this._style = 'default'; // outline/clear/solid
        this._shape = null; // round/fab
        this._display = null; // block/full
        this._colors = []; // primary/secondary
        this._icon = null; // left/right/only
        this._disabled = false; // disabled
        this.isItem = ionItem === '';
        var element = _elementRef.nativeElement;
        if (config.get('hoverCSS') === false) {
            _renderer.setElementClass(_elementRef.nativeElement, 'disable-hover', true);
        }
        if (element.hasAttribute('ion-item')) {
            // no need to put on these classes for an ion-item
            this._role = null;
            return;
        }
        if (element.hasAttribute('disabled')) {
            this._disabled = true;
        }
        this._readAttrs(element);
    }
    /**
     * @input {string} Large button.
     */

    _createClass(Button, [{
        key: "_attr",
        value: function _attr(type, attrName, attrValue) {
            this._setClass(this[type], false);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(attrValue)) {
                this[type] = attrName;
                this._setClass(attrName, true);
            } else {
                // Special handling for '_style' which defaults to 'default'.
                this[type] = type === '_style' ? 'default' : null;
            }
            if (type === '_style') {
                this._setColor(attrName, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(attrValue));
            }
        }
        /**
         * @input {string} Dynamically set which predefined color this button should use (e.g. primary, secondary, danger, etc).
         */

    }, {
        key: "ngOnInit",

        /**
         * @private
         */
        value: function ngOnInit() {
            // If the button has a role applied to it
            if (this.category) {
                this.setRole(this.category);
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            this._init = true;
            this._readIcon(this._elementRef.nativeElement);
            this._assignCss(true);
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentChecked",
        value: function ngAfterContentChecked() {
            this._readIcon(this._elementRef.nativeElement);
            this._assignCss(true);
        }
        /**
         * @private
         */

    }, {
        key: "addClass",
        value: function addClass(className) {
            this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
        }
        /**
         * @private
         */

    }, {
        key: "setRole",
        value: function setRole(val) {
            this._role = val;
        }
        /**
         * @private
         */

    }, {
        key: "_readIcon",
        value: function _readIcon(element) {
            // figure out if and where the icon lives in the button
            var childNodes = element.childNodes;
            if (childNodes.length > 0) {
                childNodes = childNodes[0].childNodes;
            }
            var childNode = void 0;
            var nodes = [];
            for (var i = 0, l = childNodes.length; i < l; i++) {
                childNode = childNodes[i];
                if (childNode.nodeType === 3) {
                    // text node
                    if (childNode.textContent.trim() !== '') {
                        nodes.push(TEXT);
                    }
                } else if (childNode.nodeType === 1) {
                    if (childNode.nodeName === 'ION-ICON') {
                        // icon element node
                        nodes.push(ICON);
                    } else {
                        // element other than an <ion-icon>
                        nodes.push(TEXT);
                    }
                }
            }
            // Remove any classes that are set already
            this._setClass(this._icon, false);
            if (nodes.length > 1) {
                if (nodes[0] === ICON && nodes[1] === TEXT) {
                    this._icon = 'icon-left';
                } else if (nodes[0] === TEXT && nodes[1] === ICON) {
                    this._icon = 'icon-right';
                }
            } else if (nodes.length === 1 && nodes[0] === ICON) {
                this._icon = 'icon-only';
            }
        }
        /**
         * @private
         */

    }, {
        key: "_readAttrs",
        value: function _readAttrs(element) {
            var elementAttrs = element.attributes;
            var attrName = void 0;
            for (var i = 0, l = elementAttrs.length; i < l; i++) {
                if (elementAttrs[i].value !== '') continue;
                attrName = elementAttrs[i].name;
                if (BUTTON_STYLE_ATTRS.indexOf(attrName) > -1) {
                    this._style = attrName;
                } else if (BUTTON_DISPLAY_ATTRS.indexOf(attrName) > -1) {
                    this._display = attrName;
                } else if (BUTTON_SHAPE_ATTRS.indexOf(attrName) > -1) {
                    this._shape = attrName;
                } else if (BUTTON_SIZE_ATTRS.indexOf(attrName) > -1) {
                    this._size = attrName;
                } else if (!IGNORE_ATTRS.test(attrName)) {
                    this._colors.push(attrName);
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "_assignCss",
        value: function _assignCss(assignCssClass) {
            var role = this._role;
            if (role) {
                this._renderer.setElementClass(this._elementRef.nativeElement, role, assignCssClass); // button
                this._setClass(this._style, assignCssClass); // button-clear
                this._setClass(this._shape, assignCssClass); // button-round
                this._setClass(this._display, assignCssClass); // button-full
                this._setClass(this._size, assignCssClass); // button-small
                this._setClass(this._icon, assignCssClass); // button-icon-left
                this._setColor(this._style, assignCssClass); // button-secondary, button-clear-secondary
            }
        }
        /**
         * @private
         */

    }, {
        key: "_setClass",
        value: function _setClass(type, assignCssClass) {
            if (type && this._init) {
                this._renderer.setElementClass(this._elementRef.nativeElement, this._role + '-' + type.toLowerCase(), assignCssClass);
            }
        }
        /**
         * @private
         */

    }, {
        key: "_setColor",
        value: function _setColor(type, assignCssClass) {
            var _this = this;

            if (type && this._init) {
                // Support array to allow removal of many styles at once.
                var styles = type instanceof Array ? type : [type];
                styles.forEach(function (styleName) {
                    // If the role is not a bar-button, don't apply the solid style
                    styleName = _this._role !== 'bar-button' && styleName === 'solid' ? 'default' : styleName;
                    var colorStyle = styleName !== null && styleName !== 'default' ? styleName.toLowerCase() + '-' : '';
                    _this._colors.forEach(function (colorName) {
                        _this._setClass(colorStyle + colorName, assignCssClass); // button-secondary, button-clear-secondary
                    });
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: "large",
        set: function set(val) {
            this._attr('_size', 'large', val);
        }
        /**
         * @input {string} Small button.
         */

    }, {
        key: "small",
        set: function set(val) {
            this._attr('_size', 'small', val);
        }
        /**
         * @input {string} Default button.
         */

    }, {
        key: "default",
        set: function set(val) {
            this._attr('_size', 'default', val);
        }
        /**
         * @input {string} A transparent button with a border.
         */

    }, {
        key: "outline",
        set: function set(val) {
            this._attr('_style', 'outline', val);
        }
        /**
         * @input {string} A transparent button without a border.
         */

    }, {
        key: "clear",
        set: function set(val) {
            this._attr('_style', 'clear', val);
        }
        /**
         * @input {string} Force a solid button. Useful for buttons within an item.
         */

    }, {
        key: "solid",
        set: function set(val) {
            this._attr('_style', 'solid', val);
        }
        /**
         * @input {string} A button with rounded corners.
         */

    }, {
        key: "round",
        set: function set(val) {
            this._attr('_shape', 'round', val);
        }
        /**
         * @input {string} A button that fills its parent container with a border-radius.
         */

    }, {
        key: "block",
        set: function set(val) {
            this._attr('_display', 'block', val);
        }
        /**
         * @input {string} A button that fills its parent container without a border-radius or borders on the left/right.
         */

    }, {
        key: "full",
        set: function set(val) {
            this._attr('_display', 'full', val);
        }
    }, {
        key: "color",
        set: function set(val) {
            // Clear the colors for all styles including the default one.
            this._setColor(BUTTON_STYLE_ATTRS.concat(['default']), false);
            // Support array input which is also supported via multiple attributes (e.g. primary, secondary, etc).
            this._colors = val instanceof Array ? val : [val];
            // Set the colors for the currently effective style.
            this._setColor(this._style, true);
        }
    }], [{
        key: "setRoles",
        value: function setRoles(contentButtonChildren, role) {
            var buttons = contentButtonChildren.toArray();
            buttons.forEach(function (button) {
                button.setRole(role);
            });
        }
    }]);

    return Button;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Button.prototype, "category", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "large", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "small", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "default", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "outline", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "clear", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "solid", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "round", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "block", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "full", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Button.prototype, "color", null);
Button = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'button:not([ion-item]),[button]',
    template: '<span class="button-inner">' + '<ng-content></ng-content>' + '</span>' + '<ion-button-effect></ion-button-effect>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('ion-item')), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _c || Object, String])], Button);
var BUTTON_SIZE_ATTRS = ['large', 'small', 'default'];
var BUTTON_STYLE_ATTRS = ['clear', 'outline', 'solid'];
var BUTTON_SHAPE_ATTRS = ['round', 'fab'];
var BUTTON_DISPLAY_ATTRS = ['block', 'full'];
var IGNORE_ATTRS = /_ng|button|left|right/;
var TEXT = 1;
var ICON = 2;
var _a, _b, _c;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__item_item_sliding_gesture__ = __webpack_require__(897);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__item_item_reorder_gesture__ = __webpack_require__(896);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return List; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return ListHeader; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};







/**
 * The List is a widely used interface element in almost any mobile app,
 * and can include content ranging from basic text all the way to
 * buttons, toggles, icons, and thumbnails.
 *
 * Both the list, which contains items, and the list items themselves
 * can be any HTML element.
 *
 * Using the List and Item components make it easy to support various
 * interaction modes such as swipe to edit, drag to reorder, and
 * removing items.
 *
 * @demo /docs/v2/demos/list/
 * @see {@link /docs/v2/components#lists List Component Docs}
 *
 */
var List = function (_Ion) {
    _inherits(List, _Ion);

    function List(elementRef, _rendered, _zone, _content) {
        _classCallCheck(this, List);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(List).call(this, elementRef));

        _this._rendered = _rendered;
        _this._zone = _zone;
        _this._content = _content;
        _this._enableReorder = false;
        _this._enableSliding = false;
        _this._lastToIndex = -1;
        _this.ionItemReorder = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        return _this;
    }
    /**
     * @private
     */

    _createClass(List, [{
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._slidingGesture && this._slidingGesture.destroy();
            this._reorderGesture && this._reorderGesture.destroy();
        }
        /**
         * Enable the sliding items.
         *
         * ```ts
         * import {Component, ViewChild} from '@angular/core';
         * import {List} from 'ionic-angular';
         *
         * @Component({...})
         * export class MyClass {
         *   @ViewChild(List) list: List;
         *
         *   constructor() { }
         *
         *   stopSliding() {
         *     this.list.enableSlidingItems(false);
         *   }
         * }
         * ```
         * @param {boolean} shouldEnable whether the item-sliding should be enabled or not
         */

    }, {
        key: "enableSlidingItems",
        value: function enableSlidingItems(shouldEnable) {
            var _this2 = this;

            if (this._enableSliding === shouldEnable) {
                return;
            }
            this._enableSliding = shouldEnable;
            if (shouldEnable) {
                console.debug('enableSlidingItems');
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_dom__["nativeTimeout"])(function () {
                    return _this2._slidingGesture = new __WEBPACK_IMPORTED_MODULE_4__item_item_sliding_gesture__["a" /* ItemSlidingGesture */](_this2);
                });
            } else {
                this._slidingGesture && this._slidingGesture.unlisten();
            }
        }
        /**
         * Close the open sliding item.
         *
         * ```ts
         * import {Component, ViewChild} from '@angular/core';
         * import {List} from 'ionic-angular';
         *
         * @Component({...})
         * export class MyClass {
         *   @ViewChild(List) list: List;
         *
         *   constructor() { }
         *
         *   closeItems() {
         *     this.list.closeSlidingItems();
         *   }
         * }
         * ```
         */

    }, {
        key: "closeSlidingItems",
        value: function closeSlidingItems() {
            this._slidingGesture && this._slidingGesture.closeOpened();
        }
    }, {
        key: "setCssClass",
        value: function setCssClass(classname, add) {
            this._rendered.setElementClass(this.getNativeElement(), classname, add);
        }
    }, {
        key: "reorderStart",
        value: function reorderStart() {
            this.setCssClass('reorder-active', true);
        }
        /**
         * @private
         */

    }, {
        key: "reorderEmit",
        value: function reorderEmit(fromIndex, toIndex) {
            var _this3 = this;

            this.reorderReset();
            if (fromIndex !== toIndex) {
                this._zone.run(function () {
                    _this3.ionItemReorder.emit({
                        from: fromIndex,
                        to: toIndex
                    });
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: "scrollContent",
        value: function scrollContent(scroll) {
            var scrollTop = this._content.getScrollTop() + scroll;
            if (scroll !== 0) {
                this._content.scrollTo(0, scrollTop, 0);
            }
            return scrollTop;
        }
        /**
         * @private
         */

    }, {
        key: "reorderReset",
        value: function reorderReset() {
            var children = this.elementRef.nativeElement.children;
            var len = children.length;
            this.setCssClass('reorder-active', false);
            for (var i = 0; i < len; i++) {
                children[i].style.transform = '';
            }
            this._lastToIndex = -1;
        }
        /**
         * @private
         */

    }, {
        key: "reorderMove",
        value: function reorderMove(fromIndex, toIndex, itemHeight) {
            if (this._lastToIndex === -1) {
                this._lastToIndex = fromIndex;
            }
            var lastToIndex = this._lastToIndex;
            this._lastToIndex = toIndex;
            // TODO: I think both loops can be merged into a single one
            // but I had no luck last time I tried
            /********* DOM READ ********** */
            var children = this.elementRef.nativeElement.children;
            /********* DOM WRITE ********* */
            if (toIndex >= lastToIndex) {
                for (var i = lastToIndex; i <= toIndex; i++) {
                    if (i !== fromIndex) {
                        children[i].style.transform = i > fromIndex ? "translateY(" + -itemHeight + "px)" : '';
                    }
                }
            }
            if (toIndex <= lastToIndex) {
                for (var i = toIndex; i <= lastToIndex; i++) {
                    if (i !== fromIndex) {
                        children[i].style.transform = i < fromIndex ? "translateY(" + itemHeight + "px)" : '';
                    }
                }
            }
        }
    }, {
        key: "reorder",
        get: function get() {
            return this._enableReorder;
        },
        set: function set(val) {
            var _this4 = this;

            var enabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isTrueProperty"])(val);
            if (this._enableReorder === enabled) {
                return;
            }
            this._enableReorder = enabled;
            if (enabled) {
                console.debug('enableReorderItems');
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_dom__["nativeTimeout"])(function () {
                    return _this4._reorderGesture = new __WEBPACK_IMPORTED_MODULE_5__item_item_reorder_gesture__["a" /* ItemReorderGesture */](_this4);
                });
            } else {
                this._reorderGesture && this._reorderGesture.destroy();
            }
        }
    }]);

    return List;
}(__WEBPACK_IMPORTED_MODULE_2__ion__["a" /* Ion */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], List.prototype, "ionItemReorder", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], List.prototype, "reorder", null);
List = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-list',
    host: {
        '[class.reorder-enabled]': '_enableReorder'
    }
}), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__content_content__["a" /* Content */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__content_content__["a" /* Content */]) === 'function' && _e || Object])], List);
/**
 * @private
 */
var ListHeader = function () {
    function ListHeader(_renderer, _elementRef, _id) {
        _classCallCheck(this, ListHeader);

        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._id = _id;
    }

    _createClass(ListHeader, [{
        key: "id",
        get: function get() {
            return this._id;
        },
        set: function set(val) {
            this._id = val;
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
        }
    }]);

    return ListHeader;
}();
ListHeader = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-list-header'
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('id')), __metadata('design:paramtypes', [typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _g || Object, String])], ListHeader);
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__platform_platform__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__tab_button__ = __webpack_require__(907);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__tab_highlight__ = __webpack_require__(908);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Tabs; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};













/**
 * @name Tabs
 * @description
 * Tabs make it easy to navigate between different pages or functional
 * aspects of an app. The Tabs component, written as `<ion-tabs>`, is
 * a container of individual [Tab](../Tab/) components.
 *
 * ### Placement
 *
 * The position of the tabs relative to the content varies based on
 * the mode. By default, the tabs are placed at the bottom of the screen
 * for `ios` mode, and at the top for the `md` and `wp` modes. You can
 * configure the position using the `tabbarPlacement` property on the
 * `<ion-tabs>` element, or in your app's [config](../../config/Config/).
 * See the [Input Properties](#input-properties) below for the available
 * values of `tabbarPlacement`.
 *
 * ### Layout
 *
 * The layout for all of the tabs can be defined using the `tabbarLayout`
 * property. If the individual tab has a title and icon, the icons will
 * show on top of the title by default. All tabs can be changed by setting
 * the value of `tabbarLayout` on the `<ion-tabs>` element, or in your
 * app's [config](../../config/Config/). For example, this is useful if
 * you want to show tabs with a title only on Android, but show icons
 * and a title for iOS. See the [Input Properties](#input-properties)
 * below for the available values of `tabbarLayout`.
 *
 * ### Selecting a Tab
 *
 * There are different ways you can select a specific tab from the tabs
 * component. You can use the `selectedIndex` property to set the index
 * on the `<ion-tabs>` element, or you can call `select()` from the `Tabs`
 * instance after creation. See [usage](#usage) below for more information.
 *
 * @usage
 *
 * You can add a basic tabs template to a `@Component` using the following
 * template:
 *
 * ```html
 * <ion-tabs>
 *   <ion-tab [root]="tab1Root"></ion-tab>
 *   <ion-tab [root]="tab2Root"></ion-tab>
 *   <ion-tab [root]="tab3Root"></ion-tab>
 * </ion-tabs>
 * ```
 *
 * Where `tab1Root`, `tab2Root`, and `tab3Root` are each a page:
 *
 *```ts
 * @Component({
 *   templateUrl: 'build/pages/tabs/tabs.html'
 * })
 * export class TabsPage {
 *   // this tells the tabs component which Pages
 *   // should be each tab's root Page
 *   tab1Root = Page1;
 *   tab2Root = Page2;
 *   tab3Root = Page3;
 *
 *   constructor() {
 *
 *   }
 * }
 *```
 *
 * By default, the first tab will be selected upon navigation to the
 * Tabs page. We can change the selected tab by using `selectedIndex`
 * on the `<ion-tabs>` element:
 *
 * ```html
 * <ion-tabs selectedIndex="2">
 *   <ion-tab [root]="tab1Root"></ion-tab>
 *   <ion-tab [root]="tab2Root"></ion-tab>
 *   <ion-tab [root]="tab3Root"></ion-tab>
 * </ion-tabs>
 * ```
 *
 * Since the index starts at `0`, this will select the 3rd tab which has
 * root set to `tab3Root`. If you wanted to change it dynamically from
 * your class, you could use [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding).
 *
 * Alternatively, you can grab the `Tabs` instance and call the `select()`
 * method. This requires the `<ion-tabs>` element to have an `id`. For
 * example, set the value of `id` to `myTabs`:
 *
 * ```html
 * <ion-tabs #myTabs>
 *   <ion-tab [root]="tab1Root"></ion-tab>
 *   <ion-tab [root]="tab2Root"></ion-tab>
 *   <ion-tab [root]="tab3Root"></ion-tab>
 * </ion-tabs>
 * ```
 *
 * Then in your class you can grab the `Tabs` instance and call `select()`,
 * passing the index of the tab as the argument. Here we're grabbing the tabs
 * by using ViewChild.
 *
 *```ts
 * export class TabsPage {
 *
 * @ViewChild('myTabs') tabRef: Tabs;
 *
 * ionViewDidEnter() {
 *   this.tabRef.select(2);
 *  }
 *
 * }
 *```
 *
 * @demo /docs/v2/demos/tabs/
 *
 * @see {@link /docs/v2/components#tabs Tabs Component Docs}
 * @see {@link ../Tab Tab API Docs}
 * @see {@link ../../config/Config Config API Docs}
 *
 */
var Tabs = function (_Ion) {
    _inherits(Tabs, _Ion);

    function Tabs(parent, viewCtrl, _app, _config, _elementRef, _platform, _renderer) {
        _classCallCheck(this, Tabs);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tabs).call(this, _elementRef));

        _this._app = _app;
        _this._config = _config;
        _this._elementRef = _elementRef;
        _this._platform = _platform;
        _this._renderer = _renderer;
        _this._ids = -1;
        _this._tabs = [];
        _this._onReady = null;
        /**
         * @private
         */
        _this.selectHistory = [];
        /**
         * @input {any} Expression to evaluate when the tab changes.
         */
        _this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.parent = parent;
        _this.id = ++tabIds;
        _this.subPages = _config.getBoolean('tabSubPages');
        _this._useHighlight = _config.getBoolean('tabbarHighlight');
        _this._sbPadding = _config.getBoolean('statusbarPadding');
        if (parent) {
            // this Tabs has a parent Nav
            parent.registerChildNav(_this);
        } else if (_this._app) {
            // this is the root navcontroller for the entire app
            _this._app.setRootNav(_this);
        }
        // Tabs may also be an actual ViewController which was navigated to
        // if Tabs is static and not navigated to within a NavController
        // then skip this and don't treat it as it's own ViewController
        if (viewCtrl) {
            viewCtrl.setContent(_this);
            viewCtrl.setContentRef(_elementRef);
            viewCtrl.loaded = function (done) {
                _this._onReady = done;
            };
        }
        return _this;
    }
    /**
     * @private
     */

    _createClass(Tabs, [{
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            var _this2 = this;

            this._setConfig('tabbarPlacement', 'bottom');
            this._setConfig('tabbarLayout', 'icon-top');
            if (this._useHighlight) {
                this._platform.onResize(function () {
                    _this2._highlight.select(_this2.getSelected());
                });
            }
            var preloadTabs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isBlank"])(this.preloadTabs) ? this._config.getBoolean('preloadTabs') : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isTrueProperty"])(this.preloadTabs);
            // get the selected index
            var selectedIndex = this.selectedIndex ? parseInt(this.selectedIndex, 10) : 0;
            // ensure the selectedIndex isn't a hidden or disabled tab
            // also find the first available index incase we need it later
            var availableIndex = -1;
            this._tabs.forEach(function (tab, index) {
                if (tab.enabled && tab.show && availableIndex < 0) {
                    // we know this tab index is safe to show
                    availableIndex = index;
                }
                if (index === selectedIndex && (!tab.enabled || !tab.show)) {
                    // the selectedIndex is not safe to show
                    selectedIndex = -1;
                }
            });
            if (selectedIndex < 0) {
                // the selected index wasn't safe to show
                // instead use an available index found to be safe to show
                selectedIndex = availableIndex;
            }
            this._tabs.forEach(function (tab, index) {
                if (index === selectedIndex) {
                    _this2.select(tab);
                } else if (preloadTabs) {
                    tab.preload(1000 * index);
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: "_setConfig",
        value: function _setConfig(attrKey, fallback) {
            var val = this[attrKey];
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isBlank"])(val)) {
                val = this._config.get(attrKey, fallback);
            }
            this._renderer.setElementAttribute(this._elementRef.nativeElement, attrKey, val);
        }
        /**
         * @private
         */

    }, {
        key: "add",
        value: function add(tab) {
            tab.id = this.id + '-' + ++this._ids;
            this._tabs.push(tab);
        }
        /**
         * @param {number|Tab} tabOrIndex Index, or the Tab instance, of the tab to select.
         */

    }, {
        key: "select",
        value: function select(tabOrIndex) {
            var _this3 = this;

            var selectedTab = typeof tabOrIndex === 'number' ? this.getByIndex(tabOrIndex) : tabOrIndex;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isBlank"])(selectedTab)) {
                return;
            }
            var deselectedTab = this.getSelected();
            if (selectedTab === deselectedTab) {
                // no change
                return this._touchActive(selectedTab);
            }
            console.debug('Tabs, select', selectedTab.id);
            var opts = {
                animate: false
            };
            var deselectedPage = void 0;
            if (deselectedTab) {
                deselectedPage = deselectedTab.getActive();
                deselectedPage && deselectedPage.fireWillLeave();
            }
            var selectedPage = selectedTab.getActive();
            selectedPage && selectedPage.fireWillEnter();
            selectedTab.load(opts, function (initialLoad) {
                selectedTab.ionSelect.emit(selectedTab);
                _this3.ionChange.emit(selectedTab);
                if (selectedTab.root) {
                    // only show the selectedTab if it has a root
                    // it's possible the tab is only for opening modal's or signing out
                    // and doesn't actually have content. In the case there's no content
                    // for a tab then do nothing and leave the current view as is
                    _this3._tabs.forEach(function (tab) {
                        tab.setSelected(tab === selectedTab);
                    });
                    if (_this3._useHighlight) {
                        _this3._highlight.select(selectedTab);
                    }
                }
                selectedPage && selectedPage.fireDidEnter();
                deselectedPage && deselectedPage.fireDidLeave();
                if (_this3._onReady) {
                    _this3._onReady();
                    _this3._onReady = null;
                }
                // track the order of which tabs have been selected, by their index
                // do not track if the tab index is the same as the previous
                if (_this3.selectHistory[_this3.selectHistory.length - 1] !== selectedTab.id) {
                    _this3.selectHistory.push(selectedTab.id);
                }
                // if this is not the Tab's initial load then we need
                // to refresh the tabbar and content dimensions to be sure
                // they're lined up correctly
                if (!initialLoad && selectedPage) {
                    var content = selectedPage.getContent();
                    if (content && content instanceof __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */]) {
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_dom__["nativeRaf"])(function () {
                            content.readDimensions();
                            content.writeDimensions();
                        });
                    }
                }
            });
        }
        /**
         * Get the previously selected Tab which is currently not disabled or hidden.
         * @param {boolean} trimHistory If the selection history should be trimmed up to the previous tab selection or not.
         * @returns {Tab}
         */

    }, {
        key: "previousTab",
        value: function previousTab() {
            var _this4 = this;

            var trimHistory = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

            // walk backwards through the tab selection history
            // and find the first previous tab that is enabled and shown
            console.debug('run previousTab', this.selectHistory);
            for (var i = this.selectHistory.length - 2; i >= 0; i--) {
                var tab = this._tabs.find(function (t) {
                    return t.id === _this4.selectHistory[i];
                });
                if (tab && tab.enabled && tab.show) {
                    if (trimHistory) {
                        this.selectHistory.splice(i + 1);
                    }
                    return tab;
                }
            }
            return null;
        }
        /**
         * @param {number} index Index of the tab you want to get
         * @returns {Tab} Returns the tab who's index matches the one passed
         */

    }, {
        key: "getByIndex",
        value: function getByIndex(index) {
            if (index < this._tabs.length && index > -1) {
                return this._tabs[index];
            }
            return null;
        }
        /**
         * @return {Tab} Returns the currently selected tab
         */

    }, {
        key: "getSelected",
        value: function getSelected() {
            for (var i = 0; i < this._tabs.length; i++) {
                if (this._tabs[i].isSelected) {
                    return this._tabs[i];
                }
            }
            return null;
        }
        /**
         * @private
         */

    }, {
        key: "getActiveChildNav",
        value: function getActiveChildNav() {
            return this.getSelected();
        }
        /**
         * @private
         */

    }, {
        key: "getIndex",
        value: function getIndex(tab) {
            return this._tabs.indexOf(tab);
        }
        /**
         * @private
         * "Touch" the active tab, going back to the root view of the tab
         * or optionally letting the tab handle the event
         */

    }, {
        key: "_touchActive",
        value: function _touchActive(tab) {
            var active = tab.getActive();
            if (!active) {
                return Promise.resolve();
            }
            var instance = active.instance;
            // If they have a custom tab selected handler, call it
            if (instance.ionSelected) {
                return instance.ionSelected();
            }
            // If we're a few pages deep, pop to root
            if (tab.length() > 1) {
                // Pop to the root view
                return tab.popToRoot();
            }
            // Otherwise, if the page we're on is not our real root, reset it to our
            // default root type
            if (tab.root !== active.componentType) {
                return tab.setRoot(tab.root);
            }
            // And failing all of that, we do something safe and secure
            return Promise.resolve();
        }
        /**
         * @private
         * Returns the root NavController. Returns `null` if Tabs is not
         * within a NavController.
         * @returns {NavController}
         */

    }, {
        key: "setTabbarPosition",

        /**
         * @private
         * DOM WRITE
         */
        value: function setTabbarPosition(top, bottom) {
            if (this._top !== top || this._bottom !== bottom) {
                var tabbarEle = this._tabbar.nativeElement;
                tabbarEle.style.top = top > -1 ? top + 'px' : '';
                tabbarEle.style.bottom = bottom > -1 ? bottom + 'px' : '';
                tabbarEle.classList.add('show-tabbar');
                this._top = top;
                this._bottom = bottom;
            }
        }
    }, {
        key: "rootNav",
        get: function get() {
            var nav = this.parent;
            while (nav && nav.parent) {
                nav = nav.parent;
            }
            return nav;
        }
    }]);

    return Tabs;
}(__WEBPACK_IMPORTED_MODULE_5__ion__["a" /* Ion */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Tabs.prototype, "selectedIndex", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Tabs.prototype, "preloadTabs", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Tabs.prototype, "tabbarLayout", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Tabs.prototype, "tabbarPlacement", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Tabs.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_11__tab_highlight__["a" /* TabHighlight */]), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_11__tab_highlight__["a" /* TabHighlight */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_11__tab_highlight__["a" /* TabHighlight */]) === 'function' && _b || Object)], Tabs.prototype, "_highlight", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('tabbar'), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object)], Tabs.prototype, "_tabbar", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('portal', { read: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _d || Object)], Tabs.prototype, "portal", void 0);
Tabs = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-tabs',
    template: '<ion-tabbar role="tablist" #tabbar>' + '<a *ngFor="let t of _tabs" [tab]="t" class="tab-button" [class.tab-disabled]="!t.enabled" [class.tab-hidden]="!t.show" role="tab" href="#" (ionSelect)="select($event)">' + '<ion-icon *ngIf="t.tabIcon" [name]="t.tabIcon" [isActive]="t.isSelected" class="tab-button-icon"></ion-icon>' + '<span *ngIf="t.tabTitle" class="tab-button-text">{{t.tabTitle}}</span>' + '<ion-badge *ngIf="t.tabBadge" class="tab-badge" [ngClass]="\'badge-\' + t.tabBadgeStyle">{{t.tabBadge}}</ion-badge>' + '<ion-button-effect></ion-button-effect>' + '</a>' + '<tab-highlight></tab-highlight>' + '</ion-tabbar>' + '<ng-content></ng-content>' + '<div #portal tab-portal></div>',
    directives: [__WEBPACK_IMPORTED_MODULE_10__tab_button__["a" /* TabButton */], __WEBPACK_IMPORTED_MODULE_11__tab_highlight__["a" /* TabHighlight */], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgFor"]],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_8__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_nav_controller__["a" /* NavController */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_12__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_12__nav_view_controller__["a" /* ViewController */]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_9__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__platform_platform__["Platform"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _l || Object])], Tabs);
var tabIds = -1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_platform_browser_dynamic__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_http__ = __webpack_require__(410);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_click_block__ = __webpack_require__(326);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_events__ = __webpack_require__(505);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_feature_detect__ = __webpack_require__(925);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__directives__ = __webpack_require__(501);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_menu_menu_controller__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__platform_platform__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__util_scroll_view__ = __webpack_require__(506);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_tap_click_tap_click__ = __webpack_require__(497);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__translation_translate__ = __webpack_require__(325);
/* harmony export */ exports["ionicBootstrap"] = ionicBootstrap;/* harmony export */ exports["ionicPostBootstrap"] = ionicPostBootstrap;/* harmony export */ exports["ionicProviders"] = ionicProviders;/* harmony export */ exports["addSelector"] = addSelector;

















var _reflect = Reflect;
/**
 * @name ionicBootstrap
 * @description
 * `ionicBootstrap` allows you to bootstrap your entire application. Similar to Angular's `bootstrap`, `ionicBootstrap`
 * takes a root component in order to start the app. You can pass along any providers that you may want to inject into your
 * app as an array for the second argument. You can also pass a config object as the third argument to configure your app's settings.
 *
 * @usage
 *
 * ```ts
 * import { ionicBootstrap } from 'ionic-angular';
 * import { Component } from '@angular/core';
 *
 * @Component({
 *   templateUrl: 'build/app.html',
 * })
 * export class MyClass{}
 *
 * ionicBootstrap(MyClass, null, {tabbarPlacement: 'bottom'})
 * ```
 */
function ionicBootstrap(appRootComponent, customProviders, config) {
    // get all Ionic Providers
    var providers = ionicProviders(customProviders, config);
    // automatically set "ion-app" selector to users root component
    addSelector(appRootComponent, 'ion-app');
    cssReady(function () {
        // call angular bootstrap
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_platform_browser_dynamic__["bootstrap"])(appRootComponent, providers).then(function (ngComponentRef) {
            // ionic app has finished bootstrapping
            ionicPostBootstrap(ngComponentRef);
        });
    });
}
/**
 * @private
 */
function ionicPostBootstrap(ngComponentRef) {
    var app = ngComponentRef.injector.get(__WEBPACK_IMPORTED_MODULE_3__components_app_app__["a" /* App */]);
    app.setAppInjector(ngComponentRef.injector);
    // prepare platform ready
    var platform = ngComponentRef.injector.get(__WEBPACK_IMPORTED_MODULE_14__platform_platform__["Platform"]);
    platform.setZone(ngComponentRef.injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"]));
    platform.prepareReady();
    // TODO: Use PLATFORM_INITIALIZER
    ngComponentRef.injector.get(__WEBPACK_IMPORTED_MODULE_16__components_tap_click_tap_click__["a" /* TapClick */]);
    return ngComponentRef;
}
var cssLoadAttempt = 0;
function cssReady(done) {
    var appEle = document.body.querySelector('ion-app');
    if (!appEle || appEle.clientHeight > 0 || cssLoadAttempt > 300) {
        done();
    } else {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["nativeRaf"])(function () {
            cssLoadAttempt++;
            cssReady(done);
        });
    }
}
/**
 * @private
 */
function ionicProviders(customProviders, config) {
    // create an instance of Config
    if (!(config instanceof __WEBPACK_IMPORTED_MODULE_6__config__["Config"])) {
        config = new __WEBPACK_IMPORTED_MODULE_6__config__["Config"](config);
    }
    // enable production mode if config set to true
    if (config.getBoolean('prodMode')) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["enableProdMode"])();
    }
    // create an instance of Platform
    var platform = new __WEBPACK_IMPORTED_MODULE_14__platform_platform__["Platform"]();
    // initialize platform
    platform.setUrl(window.location.href);
    platform.setUserAgent(window.navigator.userAgent);
    platform.setNavigatorPlatform(window.navigator.platform);
    platform.load(config);
    config.setPlatform(platform);
    var clickBlock = new __WEBPACK_IMPORTED_MODULE_4__util_click_block__["ClickBlock"]();
    var events = new __WEBPACK_IMPORTED_MODULE_7__util_events__["Events"]();
    var featureDetect = new __WEBPACK_IMPORTED_MODULE_8__util_feature_detect__["a" /* FeatureDetect */]();
    setupDom(window, document, config, platform, clickBlock, featureDetect);
    bindEvents(window, document, platform, events);
    var providers = [__WEBPACK_IMPORTED_MODULE_3__components_app_app__["a" /* App */], __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_4__util_click_block__["ClickBlock"], { useValue: clickBlock }), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_6__config__["Config"], { useValue: config }), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_7__util_events__["Events"], { useValue: events }), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_8__util_feature_detect__["a" /* FeatureDetect */], { useValue: featureDetect }), __WEBPACK_IMPORTED_MODULE_9__util_form__["Form"], __WEBPACK_IMPORTED_MODULE_12__util_keyboard__["Keyboard"], __WEBPACK_IMPORTED_MODULE_13__components_menu_menu_controller__["a" /* MenuController */], __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_14__platform_platform__["Platform"], { useValue: platform }), __WEBPACK_IMPORTED_MODULE_17__translation_translate__["Translate"], __WEBPACK_IMPORTED_MODULE_16__components_tap_click_tap_click__["a" /* TapClick */], __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["provide"])(__WEBPACK_IMPORTED_MODULE_1__angular_core__["PLATFORM_DIRECTIVES"], { useValue: __WEBPACK_IMPORTED_MODULE_10__directives__["IONIC_DIRECTIVES"], multi: true }), __WEBPACK_IMPORTED_MODULE_2__angular_http__["HTTP_PROVIDERS"]];
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__util_util__["isPresent"])(customProviders)) {
        providers.push(customProviders);
    }
    return providers;
}
function setupDom(window, document, config, platform, clickBlock, featureDetect) {
    var bodyEle = document.body;
    var mode = config.get('mode');
    // if dynamic mode links have been added the fire up the correct one
    var modeLinkAttr = mode + '-href';
    var linkEle = document.head.querySelector('link[' + modeLinkAttr + ']');
    if (linkEle) {
        var href = linkEle.getAttribute(modeLinkAttr);
        linkEle.removeAttribute(modeLinkAttr);
        linkEle.href = href;
    }
    // set the mode class name
    // ios/md/wp
    bodyEle.classList.add(mode);
    // language and direction
    platform.setDir(document.documentElement.dir, false);
    platform.setLang(document.documentElement.lang, false);
    var versions = platform.versions();
    platform.platforms().forEach(function (platformName) {
        // platform-ios
        var platformClass = 'platform-' + platformName;
        bodyEle.classList.add(platformClass);
        var platformVersion = versions[platformName];
        if (platformVersion) {
            // platform-ios9
            platformClass += platformVersion.major;
            bodyEle.classList.add(platformClass);
            // platform-ios9_3
            bodyEle.classList.add(platformClass + '_' + platformVersion.minor);
        }
    });
    // touch devices should not use :hover CSS pseudo
    // enable :hover CSS when the "hoverCSS" setting is not false
    if (config.getBoolean('hoverCSS', true) !== false) {
        bodyEle.classList.add('enable-hover');
    }
    if (config.getBoolean('clickBlock', true) !== false) {
        clickBlock.enable();
    }
    // run feature detection tests
    featureDetect.run(window, document);
}
/**
 * Bind some global events and publish on the 'app' channel
 */
function bindEvents(window, document, platform, events) {
    window.addEventListener('online', function (ev) {
        events.publish('app:online', ev);
    }, false);
    window.addEventListener('offline', function (ev) {
        events.publish('app:offline', ev);
    }, false);
    window.addEventListener('orientationchange', function (ev) {
        events.publish('app:rotated', ev);
    });
    // When that status taps, we respond
    window.addEventListener('statusTap', function (ev) {
        // TODO: Make this more better
        var el = document.elementFromPoint(platform.width() / 2, platform.height() / 2);
        if (!el) {
            return;
        }
        var content = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["closest"])(el, 'scroll-content');
        if (content) {
            var scroll = new __WEBPACK_IMPORTED_MODULE_15__util_scroll_view__["a" /* ScrollView */](content);
            scroll.scrollTo(0, 0, 300);
        }
    });
    // start listening for resizes XXms after the app starts
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["nativeTimeout"])(function () {
        window.addEventListener('resize', function () {
            platform.windowResize();
        });
    }, 2000);
}
/**
 * @private
 */
function addSelector(type, selector) {
    if (type) {
        var annotations = _reflect.getMetadata('annotations', type);
        if (annotations && !annotations[0].selector) {
            annotations[0].selector = selector;
            _reflect.defineMetadata('annotations', annotations, type);
        }
    }
}

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_datetime_util__ = __webpack_require__(503);

/* harmony export */ __webpack_require__.d(exports, "d", function() { return dom; });/* harmony namespace reexport */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__util_util__["defaults"]; }); __webpack_require__.d(exports, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__util_util__["assign"]; }); __webpack_require__.d(exports, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__util_util__["clamp"]; });
/* unused harmony namespace reexport */

var dom = __WEBPACK_IMPORTED_MODULE_0__util_dom__;



/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var animation_1 = __webpack_require__(147);
/**
 * @private
 *
 * - play
 * - Add before classes - DOM WRITE
 * - Remove before classes - DOM WRITE
 * - Add before inline styles - DOM WRITE
 * - set inline FROM styles - DOM WRITE
 * - RAF
 * - read toolbar dimensions - DOM READ
 * - write content top/bottom padding - DOM WRITE
 * - set css transition duration/easing - DOM WRITE
 * - RAF
 * - set inline TO styles - DOM WRITE
 */
var Transition = function (_super) {
    __extends(Transition, _super);
    function Transition(enteringView, leavingView, opts) {
        _super.call(this, null, {
            renderDelay: opts.renderDelay
        });
        this.enteringView = enteringView;
    }
    Transition.createTransition = function (enteringView, leavingView, opts) {
        var TransitionClass = TransitionRegistry[opts.animation];
        if (!TransitionClass) {
            // didn't find a transition animation, default to ios-transition
            TransitionClass = TransitionRegistry['ios-transition'];
        }
        return new TransitionClass(enteringView, leavingView, opts);
    };
    Transition.register = function (name, TransitionClass) {
        TransitionRegistry[name] = TransitionClass;
    };
    return Transition;
}(animation_1.Animation);
exports.Transition = Transition;
var TransitionRegistry = {};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
var domUtil = __webpack_require__(17);
exports.dom = domUtil;
__export(__webpack_require__(7));
__export(__webpack_require__(511));

/***/ },
/* 210 */
/***/ function(module, exports) {

"use strict";
"use strict";

(function (Key) {
    Key[Key["ENTER"] = 13] = "ENTER";
    Key[Key["ESCAPE"] = 27] = "ESCAPE";
    Key[Key["TAB"] = 9] = "TAB";
})(exports.Key || (exports.Key = {}));
var Key = exports.Key;
;

/***/ },
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
/* @ts2dart_const */
var DefaultIterableDifferFactory = function () {
    function DefaultIterableDifferFactory() {}
    DefaultIterableDifferFactory.prototype.supports = function (obj) {
        return collection_1.isListLikeIterable(obj);
    };
    DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
        return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
}();
exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
var trackByIdentity = function trackByIdentity(index, item) {
    return item;
};
/**
 * @stable
 */
var DefaultIterableDiffer = function () {
    function DefaultIterableDiffer(_trackByFn) {
        this._trackByFn = _trackByFn;
        this._length = null;
        this._collection = null;
        // Keeps track of the used records at any point in time (during & across `_check()` calls)
        this._linkedRecords = null;
        // Keeps track of the removed records at any point in time during `_check()` calls.
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        // Keeps track of records where custom track by is the same, but item identity has changed
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = lang_1.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
        get: function get() {
            return this._collection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
        get: function get() {
            return this._length;
        },
        enumerable: true,
        configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
        var record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
        var record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
        var record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
        var record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
        var record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
        var record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.diff = function (collection) {
        if (lang_1.isBlank(collection)) collection = [];
        if (!collection_1.isListLikeIterable(collection)) {
            throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
        }
        if (this.check(collection)) {
            return this;
        } else {
            return null;
        }
    };
    DefaultIterableDiffer.prototype.onDestroy = function () {};
    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
    DefaultIterableDiffer.prototype.check = function (collection) {
        var _this = this;
        this._reset();
        var record = this._itHead;
        var mayBeDirty = false;
        var index;
        var item;
        var itemTrackBy;
        if (lang_1.isArray(collection)) {
            var list = collection;
            this._length = collection.length;
            for (index = 0; index < this._length; index++) {
                item = list[index];
                itemTrackBy = this._trackByFn(index, item);
                if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                } else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                }
                record = record._next;
            }
        } else {
            index = 0;
            collection_1.iterateListLike(collection, function (item /** TODO #9100 */) {
                itemTrackBy = _this._trackByFn(index, item);
                if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {
                    record = _this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                } else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!lang_1.looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
                }
                record = record._next;
                index++;
            });
            this._length = index;
        }
        this._truncate(record);
        this._collection = collection;
        return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
         * changes.
         */
        get: function get() {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var record;
            var nextRecord;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
        }
    };
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
        // The previous record after which we will append the current one.
        var previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        } else {
            previousRecord = record._prev;
            // Remove the record from the collection since we know it does not match the item.
            this._remove(record);
        }
        // Attempt to see if we have seen the item before.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
        if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            // But first we need to check if identity changed, so we can update in view if necessary
            if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
        } else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (record !== null) {
                // It is an item which we have evicted earlier: reinsert it back into the list.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                this._reinsertAfter(record, previousRecord, index);
            } else {
                // It is a new item: add it.
                record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
            }
        }
        return record;
    };
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
        } else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    };
    /**
     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
     *
     * - `record` The first excess {@link CollectionChangeRecord}.
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._truncate = function (record) {
        // Anything after that needs to be removed;
        while (record !== null) {
            var nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
        }
    };
    /** @internal */
    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        var prev = record._prevRemoved;
        var next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        } else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        } else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            // todo(vicb)
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
        } else {
            // todo(vicb)
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
        // todo(vicb)
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        var next = prevRecord === null ? this._itHead : prevRecord._next;
        // todo(vicb)
        // assert(next != record);
        // assert(prevRecord != record);
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        } else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        } else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._remove = function (record) {
        return this._addToRemovals(this._unlink(record));
    };
    /** @internal */
    DefaultIterableDiffer.prototype._unlink = function (record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        var prev = record._prev;
        var next = record._next;
        // todo(vicb)
        // assert((record._prev = null) === null);
        // assert((record._next = null) === null);
        if (prev === null) {
            this._itHead = next;
        } else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        } else {
            next._prev = prev;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
        // todo(vicb)
        // assert(record._nextMoved === null);
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            // todo(vicb)
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
        } else {
            // todo(vicb)
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            // todo(vicb)
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        } else {
            // todo(vicb)
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
        } else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
    };
    DefaultIterableDiffer.prototype.toString = function () {
        var list = [];
        this.forEachItem(function (record /** TODO #9100 */) {
            return list.push(record);
        });
        var previous = [];
        this.forEachPreviousItem(function (record /** TODO #9100 */) {
            return previous.push(record);
        });
        var additions = [];
        this.forEachAddedItem(function (record /** TODO #9100 */) {
            return additions.push(record);
        });
        var moves = [];
        this.forEachMovedItem(function (record /** TODO #9100 */) {
            return moves.push(record);
        });
        var removals = [];
        this.forEachRemovedItem(function (record /** TODO #9100 */) {
            return removals.push(record);
        });
        var identityChanges = [];
        this.forEachIdentityChange(function (record /** TODO #9100 */) {
            return identityChanges.push(record);
        });
        return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
}();
exports.DefaultIterableDiffer = DefaultIterableDiffer;
/**
 * @stable
 */
var CollectionChangeRecord = function () {
    function CollectionChangeRecord(item, trackById) {
        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._prev = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._prevDup = null;
        /** @internal */
        this._nextDup = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextMoved = null;
        /** @internal */
        this._nextIdentityChange = null;
    }
    CollectionChangeRecord.prototype.toString = function () {
        return this.previousIndex === this.currentIndex ? lang_1.stringify(this.item) : lang_1.stringify(this.item) + '[' + lang_1.stringify(this.previousIndex) + '->' + lang_1.stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
}();
exports.CollectionChangeRecord = CollectionChangeRecord;
// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
var _DuplicateItemRecordList = function () {
    function _DuplicateItemRecordList() {
        /** @internal */
        this._head = null;
        /** @internal */
        this._tail = null;
    }
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     */
    _DuplicateItemRecordList.prototype.add = function (record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        } else {
            // todo(vicb)
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    };
    // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and
    // CollectionChangeRecord.currentIndex >= afterIndex
    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
        var record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((afterIndex === null || afterIndex < record.currentIndex) && lang_1.looseIdentical(record.trackById, trackById)) {
                return record;
            }
        }
        return null;
    };
    /**
     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     */
    _DuplicateItemRecordList.prototype.remove = function (record) {
        // todo(vicb)
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        var prev = record._prevDup;
        var next = record._nextDup;
        if (prev === null) {
            this._head = next;
        } else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        } else {
            next._prevDup = prev;
        }
        return this._head === null;
    };
    return _DuplicateItemRecordList;
}();
var _DuplicateMap = function () {
    function _DuplicateMap() {
        this.map = new Map();
    }
    _DuplicateMap.prototype.put = function (record) {
        // todo(vicb) handle corner cases
        var key = lang_1.getMapKey(record.trackById);
        var duplicates = this.map.get(key);
        if (!lang_1.isPresent(duplicates)) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    };
    /**
     * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
     * have already iterated over, we use the afterIndex to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the last `a` not the first or second.
     */
    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
        if (afterIndex === void 0) {
            afterIndex = null;
        }
        var key = lang_1.getMapKey(trackById);
        var recordList = this.map.get(key);
        return lang_1.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
    };
    /**
     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     */
    _DuplicateMap.prototype.remove = function (record) {
        var key = lang_1.getMapKey(record.trackById);
        // todo(vicb)
        // assert(this.map.containsKey(key));
        var recordList = this.map.get(key);
        // Remove the list of duplicates when it gets empty
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
        get: function get() {
            return this.map.size === 0;
        },
        enumerable: true,
        configurable: true
    });
    _DuplicateMap.prototype.clear = function () {
        this.map.clear();
    };
    _DuplicateMap.prototype.toString = function () {
        return '_DuplicateMap(' + lang_1.stringify(this.map) + ')';
    };
    return _DuplicateMap;
}();
//# sourceMappingURL=default_iterable_differ.js.map

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */
"use strict";

function __export(m) {
  for (var p in m) {
    if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}
var metadata_1 = __webpack_require__(177);
exports.HostMetadata = metadata_1.HostMetadata;
exports.InjectMetadata = metadata_1.InjectMetadata;
exports.InjectableMetadata = metadata_1.InjectableMetadata;
exports.OptionalMetadata = metadata_1.OptionalMetadata;
exports.SelfMetadata = metadata_1.SelfMetadata;
exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
// we have to reexport * because Dart and TS export two different sets of types
__export(__webpack_require__(259));
var forward_ref_1 = __webpack_require__(260);
exports.forwardRef = forward_ref_1.forwardRef;
exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
var injector_1 = __webpack_require__(261);
exports.Injector = injector_1.Injector;
var reflective_injector_1 = __webpack_require__(616);
exports.ReflectiveInjector = reflective_injector_1.ReflectiveInjector;
var provider_1 = __webpack_require__(262);
exports.Binding = provider_1.Binding;
exports.ProviderBuilder = provider_1.ProviderBuilder;
exports.bind = provider_1.bind;
exports.Provider = provider_1.Provider;
exports.provide = provider_1.provide;
var reflective_provider_1 = __webpack_require__(398);
exports.ResolvedReflectiveFactory = reflective_provider_1.ResolvedReflectiveFactory;
var reflective_key_1 = __webpack_require__(264);
exports.ReflectiveKey = reflective_key_1.ReflectiveKey;
var reflective_exceptions_1 = __webpack_require__(263);
exports.NoProviderError = reflective_exceptions_1.NoProviderError;
exports.AbstractProviderError = reflective_exceptions_1.AbstractProviderError;
exports.CyclicDependencyError = reflective_exceptions_1.CyclicDependencyError;
exports.InstantiationError = reflective_exceptions_1.InstantiationError;
exports.InvalidProviderError = reflective_exceptions_1.InvalidProviderError;
exports.NoAnnotationError = reflective_exceptions_1.NoAnnotationError;
exports.OutOfBoundsError = reflective_exceptions_1.OutOfBoundsError;
var opaque_token_1 = __webpack_require__(614);
exports.OpaqueToken = opaque_token_1.OpaqueToken;
//# sourceMappingURL=di.js.map

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var decorators_1 = __webpack_require__(629);
var metadata_1 = __webpack_require__(177);
/**
 * Factory for creating {@link InjectMetadata}.
 * @stable
 * @Annotation
 */
exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
/**
 * Factory for creating {@link OptionalMetadata}.
 * @stable
 * @Annotation
 */
exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
/**
 * Factory for creating {@link InjectableMetadata}.
 * @stable
 * @Annotation
 */
exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
/**
 * Factory for creating {@link SelfMetadata}.
 * @stable
 * @Annotation
 */
exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
/**
 * Factory for creating {@link HostMetadata}.
 * @stable
 * @Annotation
 */
exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
/**
 * Factory for creating {@link SkipSelfMetadata}.
 * @stable
 * @Annotation
 */
exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);
//# sourceMappingURL=decorators.js.map

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared,
 * but not yet defined. It is also used when the `token` which we use when creating a query is not
 * yet defined.
 *
 * ### Example
 * {@example core/di/ts/forward_ref/forward_ref.ts region='forward_ref'}
 * @experimental
 */
function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function () {
        return lang_1.stringify(this());
    };
    return forwardRefFn;
}
exports.forwardRef = forwardRef;
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
 *
 * ```typescript
 * var ref = forwardRef(() => "refValue");
 * expect(resolveForwardRef(ref)).toEqual("refValue");
 * expect(resolveForwardRef("regularValue")).toEqual("regularValue");
 * ```
 *
 * See: {@link forwardRef}
 * @experimental
 */
function resolveForwardRef(type) {
    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
        return type();
    } else {
        return type;
    }
}
exports.resolveForwardRef = resolveForwardRef;
//# sourceMappingURL=forward_ref.js.map

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var exceptions_1 = __webpack_require__(29);
var _THROW_IF_NOT_FOUND = new Object();
exports.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
/**
 * @stable
 */
var Injector = function () {
  function Injector() {}
  /**
   * Retrieves an instance from the injector based on the provided token.
   * If not found:
   * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to
   * Injector.THROW_IF_NOT_FOUND is given
   * - Returns the `notFoundValue` otherwise
   *
   * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))
   *
   * ```typescript
   * var injector = ReflectiveInjector.resolveAndCreate([
   *   {provide: "validToken", useValue: "Value"}
   * ]);
   * expect(injector.get("validToken")).toEqual("Value");
   * expect(() => injector.get("invalidToken")).toThrowError();
   * ```
   *
   * `Injector` returns itself when given `Injector` as a token.
   *
   * ```typescript
   * var injector = ReflectiveInjector.resolveAndCreate([]);
   * expect(injector.get(Injector)).toBe(injector);
   * ```
   */
  Injector.prototype.get = function (token, notFoundValue) {
    return exceptions_1.unimplemented();
  };
  Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  return Injector;
}();
exports.Injector = Injector;
//# sourceMappingURL=injector.js.map

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
/**
 * Describes how the {@link Injector} should instantiate a given token.
 *
 * See {@link provide}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))
 *
 * ```javascript
 * var injector = Injector.resolveAndCreate([
 *   new Provider("message", { useValue: 'Hello' })
 * ]);
 *
 * expect(injector.get("message")).toEqual('Hello');
 * ```
 * @ts2dart_const
 * @deprecated
 */
var Provider = function () {
    function Provider(token /** TODO #9100 */, _a) {
        var useClass = _a.useClass,
            useValue = _a.useValue,
            useExisting = _a.useExisting,
            useFactory = _a.useFactory,
            deps = _a.deps,
            multi = _a.multi;
        this.token = token;
        this.useClass = useClass;
        this.useValue = useValue;
        this.useExisting = useExisting;
        this.useFactory = useFactory;
        this.dependencies = deps;
        this._multi = multi;
    }
    Object.defineProperty(Provider.prototype, "multi", {
        // TODO: Provide a full working example after alpha38 is released.
        /**
         * Creates multiple providers matching the same token (a multi-provider).
         *
         * Multi-providers are used for creating pluggable service, where the system comes
         * with some default providers, and the user can register additional providers.
         * The combination of the default providers and the additional providers will be
         * used to drive the behavior of the system.
         *
         * ### Example
         *
         * ```typescript
         * var injector = Injector.resolveAndCreate([
         *   new Provider("Strings", { useValue: "String1", multi: true}),
         *   new Provider("Strings", { useValue: "String2", multi: true})
         * ]);
         *
         * expect(injector.get("Strings")).toEqual(["String1", "String2"]);
         * ```
         *
         * Multi-providers and regular providers cannot be mixed. The following
         * will throw an exception:
         *
         * ```typescript
         * var injector = Injector.resolveAndCreate([
         *   new Provider("Strings", { useValue: "String1", multi: true }),
         *   new Provider("Strings", { useValue: "String2"})
         * ]);
         * ```
         */
        get: function get() {
            return lang_1.normalizeBool(this._multi);
        },
        enumerable: true,
        configurable: true
    });
    return Provider;
}();
exports.Provider = Provider;
/**
 * See {@link Provider} instead.
 *
 * @deprecated
 * @ts2dart_const
 */
var Binding = function (_super) {
    __extends(Binding, _super);
    function Binding(token /** TODO #9100 */, _a) {
        var toClass = _a.toClass,
            toValue = _a.toValue,
            toAlias = _a.toAlias,
            toFactory = _a.toFactory,
            deps = _a.deps,
            multi = _a.multi;
        _super.call(this, token, {
            useClass: toClass,
            useValue: toValue,
            useExisting: toAlias,
            useFactory: toFactory,
            deps: deps,
            multi: multi
        });
    }
    Object.defineProperty(Binding.prototype, "toClass", {
        /**
         * @deprecated
         */
        get: function get() {
            return this.useClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binding.prototype, "toAlias", {
        /**
         * @deprecated
         */
        get: function get() {
            return this.useExisting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binding.prototype, "toFactory", {
        /**
         * @deprecated
         */
        get: function get() {
            return this.useFactory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binding.prototype, "toValue", {
        /**
         * @deprecated
         */
        get: function get() {
            return this.useValue;
        },
        enumerable: true,
        configurable: true
    });
    return Binding;
}(Provider);
exports.Binding = Binding;
/**
 * Creates a {@link Provider}.
 *
 * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,
 * or
 * to an existing `token`.
 * See {@link ProviderBuilder} for more details.
 *
 * The `token` is most commonly a class or {@link OpaqueToken-class.html}.
 *
 * @deprecated
 */
function bind(token /** TODO #9100 */) {
    return new ProviderBuilder(token);
}
exports.bind = bind;
/**
 * Helper class for the {@link bind} function.
 * @deprecated
 */
var ProviderBuilder = function () {
    function ProviderBuilder(token /** TODO #9100 */) {
        this.token = token;
    }
    /**
     * Binds a DI token to a class.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))
     *
     * Because `toAlias` and `toClass` are often confused, the example contains
     * both use cases for easy comparison.
     *
     * ```typescript
     * class Vehicle {}
     *
     * class Car extends Vehicle {}
     *
     * var injectorClass = Injector.resolveAndCreate([
     *   Car,
     *   {provide: Vehicle, useClass: Car}
     * ]);
     * var injectorAlias = Injector.resolveAndCreate([
     *   Car,
     *   {provide: Vehicle, useExisting: Car}
     * ]);
     *
     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
     *
     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
     * ```
     */
    ProviderBuilder.prototype.toClass = function (type) {
        if (!lang_1.isType(type)) {
            throw new exceptions_1.BaseException("Trying to create a class provider but \"" + lang_1.stringify(type) + "\" is not a class!");
        }
        return new Provider(this.token, { useClass: type });
    };
    /**
     * Binds a DI token to a value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   {provide: 'message', useValue: 'Hello'}
     * ]);
     *
     * expect(injector.get('message')).toEqual('Hello');
     * ```
     */
    ProviderBuilder.prototype.toValue = function (value) {
        return new Provider(this.token, { useValue: value });
    };
    /**
     * Binds a DI token to an existing token.
     *
     * Angular will return the same instance as if the provided token was used. (This is
     * in contrast to `useClass` where a separate instance of `useClass` will be returned.)
     *
     * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))
     *
     * Because `toAlias` and `toClass` are often confused, the example contains
     * both use cases for easy comparison.
     *
     * ```typescript
     * class Vehicle {}
     *
     * class Car extends Vehicle {}
     *
     * var injectorAlias = Injector.resolveAndCreate([
     *   Car,
     *   {provide: Vehicle, useExisting: Car}
     * ]);
     * var injectorClass = Injector.resolveAndCreate([
     *   Car,
     *   {provide: Vehicle, useClass: Car})
     * ]);
     *
     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
     *
     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
     * ```
     */
    ProviderBuilder.prototype.toAlias = function (aliasToken) {
        if (lang_1.isBlank(aliasToken)) {
            throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
        }
        return new Provider(this.token, { useExisting: aliasToken });
    };
    /**
     * Binds a DI token to a function which computes the value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   {provide: Number, useFactory: () => { return 1+2; }},
     *   {provide: String, useFactory: (v) => { return "Value: " + v; }, deps: [Number]}
     * ]);
     *
     * expect(injector.get(Number)).toEqual(3);
     * expect(injector.get(String)).toEqual('Value: 3');
     * ```
     */
    ProviderBuilder.prototype.toFactory = function (factory, dependencies) {
        if (!lang_1.isFunction(factory)) {
            throw new exceptions_1.BaseException("Trying to create a factory provider but \"" + lang_1.stringify(factory) + "\" is not a function!");
        }
        return new Provider(this.token, { useFactory: factory, deps: dependencies });
    };
    return ProviderBuilder;
}();
exports.ProviderBuilder = ProviderBuilder;
/**
 * Creates a {@link Provider}.
 *
 * See {@link Provider} for more details.
 *
 * <!-- TODO: improve the docs -->
 * @deprecated
 */
function provide(token /** TODO #9100 */, _a) {
    var useClass = _a.useClass,
        useValue = _a.useValue,
        useExisting = _a.useExisting,
        useFactory = _a.useFactory,
        deps = _a.deps,
        multi = _a.multi;
    return new Provider(token, {
        useClass: useClass,
        useValue: useValue,
        useExisting: useExisting,
        useFactory: useFactory,
        deps: deps,
        multi: multi
    });
}
exports.provide = provide;
//# sourceMappingURL=provider.js.map

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
        if (collection_1.ListWrapper.contains(res, keys[i])) {
            res.push(keys[i]);
            return res;
        } else {
            res.push(keys[i]);
        }
    }
    return res;
}
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
        var tokenStrs = reversed.map(function (k) {
            return lang_1.stringify(k.token);
        });
        return ' (' + tokenStrs.join(' -> ') + ')';
    } else {
        return '';
    }
}
/**
 * Base class for all errors arising from misconfigured providers.
 * @stable
 */
var AbstractProviderError = function (_super) {
    __extends(AbstractProviderError, _super);
    function AbstractProviderError(injector, key, constructResolvingMessage) {
        _super.call(this, 'DI Exception');
        this.keys = [key];
        this.injectors = [injector];
        this.constructResolvingMessage = constructResolvingMessage;
        this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractProviderError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
        this.message = this.constructResolvingMessage(this.keys);
    };
    Object.defineProperty(AbstractProviderError.prototype, "context", {
        get: function get() {
            return this.injectors[this.injectors.length - 1].debugContext();
        },
        enumerable: true,
        configurable: true
    });
    return AbstractProviderError;
}(exceptions_1.BaseException);
exports.AbstractProviderError = AbstractProviderError;
/**
 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
 * {@link Injector} does not have a {@link Provider} for {@link Key}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 * @stable
 */
var NoProviderError = function (_super) {
    __extends(NoProviderError, _super);
    function NoProviderError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
        });
    }
    return NoProviderError;
}(AbstractProviderError);
exports.NoProviderError = NoProviderError;
/**
 * Thrown when dependencies form a cycle.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 * @stable
 */
var CyclicDependencyError = function (_super) {
    __extends(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
        });
    }
    return CyclicDependencyError;
}(AbstractProviderError);
exports.CyclicDependencyError = CyclicDependencyError;
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);

 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 * @stable
 */
var InstantiationError = function (_super) {
    __extends(InstantiationError, _super);
    function InstantiationError(injector, originalException /** TODO #9100 */, originalStack /** TODO #9100 */, key) {
        _super.call(this, 'DI Exception', originalException, originalStack, null);
        this.keys = [key];
        this.injectors = [injector];
    }
    InstantiationError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
        get: function get() {
            var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
            return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
        get: function get() {
            return this.keys[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "context", {
        get: function get() {
            return this.injectors[this.injectors.length - 1].debugContext();
        },
        enumerable: true,
        configurable: true
    });
    return InstantiationError;
}(exceptions_1.WrappedException);
exports.InstantiationError = InstantiationError;
/**
 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
 * creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 * @stable
 */
var InvalidProviderError = function (_super) {
    __extends(InvalidProviderError, _super);
    function InvalidProviderError(provider /** TODO #9100 */) {
        _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    return InvalidProviderError;
}(exceptions_1.BaseException);
exports.InvalidProviderError = InvalidProviderError;
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 * @stable
 */
var NoAnnotationError = function (_super) {
    __extends(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc /** TODO #9100 */, params) {
        _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    NoAnnotationError._genMessage = function (typeOrFunc /** TODO #9100 */, params) {
        var signature = [];
        for (var i = 0, ii = params.length; i < ii; i++) {
            var parameter = params[i];
            if (lang_1.isBlank(parameter) || parameter.length == 0) {
                signature.push('?');
            } else {
                signature.push(parameter.map(lang_1.stringify).join(' '));
            }
        }
        return 'Cannot resolve all parameters for \'' + lang_1.stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + lang_1.stringify(typeOrFunc) + '\' is decorated with Injectable.';
    };
    return NoAnnotationError;
}(exceptions_1.BaseException);
exports.NoAnnotationError = NoAnnotationError;
/**
 * Thrown when getting an object by index.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 * @stable
 */
var OutOfBoundsError = function (_super) {
    __extends(OutOfBoundsError, _super);
    function OutOfBoundsError(index /** TODO #9100 */) {
        _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
}(exceptions_1.BaseException);
exports.OutOfBoundsError = OutOfBoundsError;
// TODO: add a working example after alpha38 is released
/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   new Provider("Strings", {useValue: "string1", multi: true}),
 *   new Provider("Strings", {useValue: "string2", multi: false})
 * ])).toThrowError();
 * ```
 */
var MixingMultiProvidersWithRegularProvidersError = function (_super) {
    __extends(MixingMultiProvidersWithRegularProvidersError, _super);
    function MixingMultiProvidersWithRegularProvidersError(provider1 /** TODO #9100 */, provider2 /** TODO #9100 */) {
        _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
}(exceptions_1.BaseException);
exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;
//# sourceMappingURL=reflective_exceptions.js.map

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var forward_ref_1 = __webpack_require__(260);
/**
 * A unique object used for retrieving items from the {@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 * @experimental
 */
var ReflectiveKey = function () {
    /**
     * Private
     */
    function ReflectiveKey(token, id) {
        this.token = token;
        this.id = id;
        if (lang_1.isBlank(token)) {
            throw new exceptions_1.BaseException('Token must be defined!');
        }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
        /**
         * Returns a stringified token.
         */
        get: function get() {
            return lang_1.stringify(this.token);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Retrieves a `Key` for a token.
     */
    ReflectiveKey.get = function (token) {
        return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
        /**
         * @returns the number of keys registered in the system.
         */
        get: function get() {
            return _globalKeyRegistry.numberOfKeys;
        },
        enumerable: true,
        configurable: true
    });
    return ReflectiveKey;
}();
exports.ReflectiveKey = ReflectiveKey;
/**
 * @internal
 */
var KeyRegistry = function () {
    function KeyRegistry() {
        this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function (token) {
        if (token instanceof ReflectiveKey) return token;
        if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
        }
        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
        get: function get() {
            return this._allKeys.size;
        },
        enumerable: true,
        configurable: true
    });
    return KeyRegistry;
}();
exports.KeyRegistry = KeyRegistry;
var _globalKeyRegistry = new KeyRegistry();
//# sourceMappingURL=reflective_key.js.map

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var view_utils_1 = __webpack_require__(267);
/**
 * Represents an instance of a Component created via a {@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
 * method.
 * @stable
 */
var ComponentRef = function () {
    function ComponentRef() {}
    Object.defineProperty(ComponentRef.prototype, "location", {
        /**
         * Location of the Host Element of this Component Instance.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "injector", {
        /**
         * The injector on which the component instance exists.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "instance", {
        /**
         * The instance of the Component.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "hostView", {
        /**
         * The {@link ViewRef} of the Host View of this Component instance.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
        /**
         * The {@link ChangeDetectorRef} of the Component instance.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "componentType", {
        /**
         * The component type.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    return ComponentRef;
}();
exports.ComponentRef = ComponentRef;
var ComponentRef_ = function (_super) {
    __extends(ComponentRef_, _super);
    function ComponentRef_(_hostElement, _componentType) {
        _super.call(this);
        this._hostElement = _hostElement;
        this._componentType = _componentType;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
        get: function get() {
            return this._hostElement.elementRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
        get: function get() {
            return this._hostElement.injector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
        get: function get() {
            return this._hostElement.component;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
        get: function get() {
            return this._hostElement.parentView.ref;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
        get: function get() {
            return this._hostElement.parentView.ref;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
        get: function get() {
            return this._componentType;
        },
        enumerable: true,
        configurable: true
    });
    ComponentRef_.prototype.destroy = function () {
        this._hostElement.parentView.destroy();
    };
    ComponentRef_.prototype.onDestroy = function (callback) {
        this.hostView.onDestroy(callback);
    };
    return ComponentRef_;
}(ComponentRef);
exports.ComponentRef_ = ComponentRef_;
/**
 * @experimental
 * @ts2dart_const
 */
var EMPTY_CONTEXT = new Object();
var ComponentFactory = function () {
    function ComponentFactory(selector, _viewFactory, _componentType) {
        this.selector = selector;
        this._viewFactory = _viewFactory;
        this._componentType = _componentType;
    }
    Object.defineProperty(ComponentFactory.prototype, "componentType", {
        get: function get() {
            return this._componentType;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a new component.
     */
    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
        if (projectableNodes === void 0) {
            projectableNodes = null;
        }
        if (rootSelectorOrNode === void 0) {
            rootSelectorOrNode = null;
        }
        var vu = injector.get(view_utils_1.ViewUtils);
        if (lang_1.isBlank(projectableNodes)) {
            projectableNodes = [];
        }
        // Note: Host views don't need a declarationAppElement!
        var hostView = this._viewFactory(vu, injector, null);
        var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
        return new ComponentRef_(hostElement, this._componentType);
    };
    return ComponentFactory;
}();
exports.ComponentFactory = ComponentFactory;
//# sourceMappingURL=component_factory.js.map

/***/ },
/* 266 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * A wrapper around a native element inside of a View.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 */
// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
// i.e. users have to ask for what they need. With that, we can build better analysis tools
// and could do better codegen in the future.

var ElementRef = function () {
    function ElementRef(nativeElement) {
        this.nativeElement = nativeElement;
    }
    return ElementRef;
}();
exports.ElementRef = ElementRef;
//# sourceMappingURL=element_ref.js.map

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var application_tokens_1 = __webpack_require__(612);
var change_detection_1 = __webpack_require__(176);
var change_detection_util_1 = __webpack_require__(393);
var decorators_1 = __webpack_require__(259);
var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var api_1 = __webpack_require__(627);
var security_1 = __webpack_require__(628);
var element_1 = __webpack_require__(179);
var exceptions_2 = __webpack_require__(402);
var ViewUtils = function () {
    function ViewUtils(_renderer, _appId, sanitizer) {
        this._renderer = _renderer;
        this._appId = _appId;
        this._nextCompTypeId = 0;
        this.sanitizer = sanitizer;
    }
    /**
     * Used by the generated code
     */
    ViewUtils.prototype.createRenderComponentType = function (templateUrl, slotCount, encapsulation, styles) {
        return new api_1.RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles);
    };
    /** @internal */
    ViewUtils.prototype.renderComponent = function (renderComponentType) {
        return this._renderer.renderComponent(renderComponentType);
    };
    /** @nocollapse */
    ViewUtils.decorators = [{ type: decorators_1.Injectable }];
    /** @nocollapse */
    ViewUtils.ctorParameters = [{ type: api_1.RootRenderer }, { type: undefined, decorators: [{ type: decorators_1.Inject, args: [application_tokens_1.APP_ID] }] }, { type: security_1.SanitizationService }];
    return ViewUtils;
}();
exports.ViewUtils = ViewUtils;
function flattenNestedViewRenderNodes(nodes) {
    return _flattenNestedViewRenderNodes(nodes, []);
}
exports.flattenNestedViewRenderNodes = flattenNestedViewRenderNodes;
function _flattenNestedViewRenderNodes(nodes, renderNodes) {
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node instanceof element_1.AppElement) {
            var appEl = node;
            renderNodes.push(appEl.nativeElement);
            if (lang_1.isPresent(appEl.nestedViews)) {
                for (var k = 0; k < appEl.nestedViews.length; k++) {
                    _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
                }
            }
        } else {
            renderNodes.push(node);
        }
    }
    return renderNodes;
}
var EMPTY_ARR = [];
function ensureSlotCount(projectableNodes, expectedSlotCount) {
    var res;
    if (lang_1.isBlank(projectableNodes)) {
        res = EMPTY_ARR;
    } else if (projectableNodes.length < expectedSlotCount) {
        var givenSlotCount = projectableNodes.length;
        res = collection_1.ListWrapper.createFixedSize(expectedSlotCount);
        for (var i = 0; i < expectedSlotCount; i++) {
            res[i] = i < givenSlotCount ? projectableNodes[i] : EMPTY_ARR;
        }
    } else {
        res = projectableNodes;
    }
    return res;
}
exports.ensureSlotCount = ensureSlotCount;
exports.MAX_INTERPOLATION_VALUES = 9;
function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new exceptions_1.BaseException("Does not support more than 9 expressions");
    }
}
exports.interpolate = interpolate;
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
        if (!change_detection_1.devModeEqual(oldValue, newValue)) {
            throw new exceptions_2.ExpressionChangedAfterItHasBeenCheckedException(oldValue, newValue, null);
        }
        return false;
    } else {
        return !lang_1.looseIdentical(oldValue, newValue);
    }
}
exports.checkBinding = checkBinding;
function arrayLooseIdentical(a, b) {
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; ++i) {
        if (!lang_1.looseIdentical(a[i], b[i])) return false;
    }
    return true;
}
exports.arrayLooseIdentical = arrayLooseIdentical;
function mapLooseIdentical(m1, m2) {
    var k1 = collection_1.StringMapWrapper.keys(m1);
    var k2 = collection_1.StringMapWrapper.keys(m2);
    if (k1.length != k2.length) {
        return false;
    }
    var key;
    for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (!lang_1.looseIdentical(m1[key], m2[key])) {
            return false;
        }
    }
    return true;
}
exports.mapLooseIdentical = mapLooseIdentical;
function castByValue(input, value) {
    return input;
}
exports.castByValue = castByValue;
exports.EMPTY_ARRAY = [];
exports.EMPTY_MAP = {};
function pureProxy1(fn) {
    var result;
    var v0;
    v0 = change_detection_util_1.uninitialized;
    return function (p0) {
        if (!lang_1.looseIdentical(v0, p0)) {
            v0 = p0;
            result = fn(p0);
        }
        return result;
    };
}
exports.pureProxy1 = pureProxy1;
function pureProxy2(fn) {
    var result;
    var v0 /** TODO #9100 */, v1;
    v0 = v1 = change_detection_util_1.uninitialized;
    return function (p0, p1) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1)) {
            v0 = p0;
            v1 = p1;
            result = fn(p0, p1);
        }
        return result;
    };
}
exports.pureProxy2 = pureProxy2;
function pureProxy3(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2;
    v0 = v1 = v2 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            result = fn(p0, p1, p2);
        }
        return result;
    };
}
exports.pureProxy3 = pureProxy3;
function pureProxy4(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3;
    v0 = v1 = v2 = v3 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            result = fn(p0, p1, p2, p3);
        }
        return result;
    };
}
exports.pureProxy4 = pureProxy4;
function pureProxy5(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3 /** TODO #9100 */, v4;
    v0 = v1 = v2 = v3 = v4 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3, p4) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            result = fn(p0, p1, p2, p3, p4);
        }
        return result;
    };
}
exports.pureProxy5 = pureProxy5;
function pureProxy6(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3 /** TODO #9100 */, v4 /** TODO #9100 */, v5;
    v0 = v1 = v2 = v3 = v4 = v5 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3, p4, p5) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            result = fn(p0, p1, p2, p3, p4, p5);
        }
        return result;
    };
}
exports.pureProxy6 = pureProxy6;
function pureProxy7(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3 /** TODO #9100 */, v4 /** TODO #9100 */, v5 /** TODO #9100 */, v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3, p4, p5, p6) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            result = fn(p0, p1, p2, p3, p4, p5, p6);
        }
        return result;
    };
}
exports.pureProxy7 = pureProxy7;
function pureProxy8(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3 /** TODO #9100 */, v4 /** TODO #9100 */, v5 /** TODO #9100 */, v6 /** TODO #9100 */, v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3, p4, p5, p6, p7) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
        }
        return result;
    };
}
exports.pureProxy8 = pureProxy8;
function pureProxy9(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3 /** TODO #9100 */, v4 /** TODO #9100 */, v5 /** TODO #9100 */, v6 /** TODO #9100 */, v7 /** TODO #9100 */, v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7) || !lang_1.looseIdentical(v8, p8)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
        }
        return result;
    };
}
exports.pureProxy9 = pureProxy9;
function pureProxy10(fn) {
    var result;
    var v0 /** TODO #9100 */, v1 /** TODO #9100 */, v2 /** TODO #9100 */, v3 /** TODO #9100 */, v4 /** TODO #9100 */, v5 /** TODO #9100 */, v6 /** TODO #9100 */, v7 /** TODO #9100 */, v8 /** TODO #9100 */, v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = change_detection_util_1.uninitialized;
    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
        if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7) || !lang_1.looseIdentical(v8, p8) || !lang_1.looseIdentical(v9, p9)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            v9 = p9;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
        }
        return result;
    };
}
exports.pureProxy10 = pureProxy10;
//# sourceMappingURL=view_utils.js.map

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return BrowserXhr; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


var BrowserXhr = function () {
    function BrowserXhr() {
        _classCallCheck(this, BrowserXhr);
    }

    _createClass(BrowserXhr, [{
        key: 'build',
        value: function build() {
            return new XMLHttpRequest();
        }
    }]);

    return BrowserXhr;
}();
/** @nocollapse */
BrowserXhr.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
BrowserXhr.ctorParameters = [];
//# sourceMappingURL=browser_xhr.js.map

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__headers__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__http_utils__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__url_search_params__ = __webpack_require__(272);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return RequestOptions; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return BaseRequestOptions; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







/**
 * Creates a request options object to be optionally provided when instantiating a
 * {@link Request}.
 *
 * This class is based on the `RequestInit` description in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#requestinit).
 *
 * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
 * class, which sub-classes `RequestOptions`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
 *
 * ```typescript
 * import {RequestOptions, Request, RequestMethod} from '@angular/http';
 *
 * var options = new RequestOptions({
 *   method: RequestMethod.Post,
 *   url: 'https://google.com'
 * });
 * var req = new Request(options);
 * console.log('req.method:', RequestMethod[req.method]); // Post
 * console.log('options.url:', options.url); // https://google.com
 * ```
 */
var RequestOptions = function () {
    function RequestOptions() {
        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var method = _ref.method;
        var headers = _ref.headers;
        var body = _ref.body;
        var url = _ref.url;
        var search = _ref.search;
        var withCredentials = _ref.withCredentials;

        _classCallCheck(this, RequestOptions);

        this.method = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(method) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__http_utils__["d" /* normalizeMethodName */])(method) : null;
        this.headers = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(headers) ? headers : null;
        this.body = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(body) ? body : null;
        this.url = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(url) ? url : null;
        this.search = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(search) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["g" /* isString */])(search) ? new __WEBPACK_IMPORTED_MODULE_5__url_search_params__["a" /* URLSearchParams */](search) : search : null;
        this.withCredentials = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(withCredentials) ? withCredentials : null;
    }
    /**
     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
     * existing values. This method will not change the values of the instance on which it is being
     * called.
     *
     * Note that `headers` and `search` will override existing values completely if present in
     * the `options` object. If these values should be merged, it should be done prior to calling
     * `merge` on the `RequestOptions` instance.
     *
     * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
     *
     * ```typescript
     * import {RequestOptions, Request, RequestMethod} from '@angular/http';
     *
     * var options = new RequestOptions({
     *   method: RequestMethod.Post
     * });
     * var req = new Request(options.merge({
     *   url: 'https://google.com'
     * }));
     * console.log('req.method:', RequestMethod[req.method]); // Post
     * console.log('options.url:', options.url); // null
     * console.log('req.url:', req.url); // https://google.com
     * ```
     */


    _createClass(RequestOptions, [{
        key: 'merge',
        value: function merge(options) {
            return new RequestOptions({
                method: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.method) ? options.method : this.method,
                headers: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.headers) ? options.headers : this.headers,
                body: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.body) ? options.body : this.body,
                url: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.url) ? options.url : this.url,
                search: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.search) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["g" /* isString */])(options.search) ? new __WEBPACK_IMPORTED_MODULE_5__url_search_params__["a" /* URLSearchParams */](options.search) : options.search.clone() : this.search,
                withCredentials: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(options.withCredentials) ? options.withCredentials : this.withCredentials
            });
        }
    }]);

    return RequestOptions;
}();
var BaseRequestOptions = function (_RequestOptions) {
    _inherits(BaseRequestOptions, _RequestOptions);

    function BaseRequestOptions() {
        _classCallCheck(this, BaseRequestOptions);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(BaseRequestOptions).call(this, { method: __WEBPACK_IMPORTED_MODULE_2__enums__["b" /* RequestMethod */].Get, headers: new __WEBPACK_IMPORTED_MODULE_3__headers__["a" /* Headers */]() }));
    }

    return BaseRequestOptions;
}(RequestOptions);
/** @nocollapse */
BaseRequestOptions.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
BaseRequestOptions.ctorParameters = [];
//# sourceMappingURL=base_request_options.js.map

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lang__ = __webpack_require__(40);

/* harmony export */ __webpack_require__.d(exports, "b", function() { return Map; });/* unused harmony export Set */
/* harmony export */ __webpack_require__.d(exports, "e", function() { return MapWrapper; });
/* harmony export */ __webpack_require__.d(exports, "c", function() { return StringMapWrapper; });
/* harmony export */ __webpack_require__.d(exports, "d", function() { return ListWrapper; });/* harmony export */ exports["a"] = isListLikeIterable;/* unused harmony export areIterablesEqual *//* harmony export */ exports["f"] = iterateListLike;/* unused harmony export SetWrapper */var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


var Map = __WEBPACK_IMPORTED_MODULE_0__lang__["a" /* global */].Map;
var Set = __WEBPACK_IMPORTED_MODULE_0__lang__["a" /* global */].Set;
// Safari and Internet Explorer do not support the iterable parameter to the
// Map constructor.  We work around that by manually adding the items.
var createMapFromPairs = function () {
    try {
        if (new Map([[1, 2]]).size === 1) {
            return function createMapFromPairs(pairs) {
                return new Map(pairs);
            };
        }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
        var map = new Map();
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
        }
        return map;
    };
}();
var createMapFromMap = function () {
    try {
        if (new Map(new Map())) {
            return function createMapFromMap(m) {
                return new Map(m);
            };
        }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
        var map = new Map();
        m.forEach(function (v, k) {
            map.set(k, v);
        });
        return map;
    };
}();
var _clearValues = function () {
    if (new Map().keys().next) {
        return function _clearValues(m) {
            var keyIterator = m.keys();
            var k;
            while (!(k = keyIterator.next()).done) {
                m.set(k.value, null);
            }
        };
    } else {
        return function _clearValuesWithForeEach(m) {
            m.forEach(function (v, k) {
                m.set(k, null);
            });
        };
    }
}();
// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
var _arrayFromMap = function () {
    try {
        if (new Map().values().next) {
            return function createArrayFromMap(m, getValues) {
                return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
        var res = ListWrapper.createFixedSize(m.size),
            i = 0;
        m.forEach(function (v, k) {
            res[i] = getValues ? v : k;
            i++;
        });
        return res;
    };
}();
var MapWrapper = function () {
    function MapWrapper() {
        _classCallCheck(this, MapWrapper);
    }

    _createClass(MapWrapper, null, [{
        key: 'clone',
        value: function clone(m) {
            return createMapFromMap(m);
        }
    }, {
        key: 'createFromStringMap',
        value: function createFromStringMap(stringMap) {
            var result = new Map();
            for (var prop in stringMap) {
                result.set(prop, stringMap[prop]);
            }
            return result;
        }
    }, {
        key: 'toStringMap',
        value: function toStringMap(m) {
            var r = {};
            m.forEach(function (v, k) {
                return r[k] = v;
            });
            return r;
        }
    }, {
        key: 'createFromPairs',
        value: function createFromPairs(pairs) {
            return createMapFromPairs(pairs);
        }
    }, {
        key: 'clearValues',
        value: function clearValues(m) {
            _clearValues(m);
        }
    }, {
        key: 'iterable',
        value: function iterable(m) {
            return m;
        }
    }, {
        key: 'keys',
        value: function keys(m) {
            return _arrayFromMap(m, false);
        }
    }, {
        key: 'values',
        value: function values(m) {
            return _arrayFromMap(m, true);
        }
    }]);

    return MapWrapper;
}();
/**
 * Wraps Javascript Objects
 */
var StringMapWrapper = function () {
    function StringMapWrapper() {
        _classCallCheck(this, StringMapWrapper);
    }

    _createClass(StringMapWrapper, null, [{
        key: 'create',
        value: function create() {
            // Note: We are not using Object.create(null) here due to
            // performance!
            // http://jsperf.com/ng2-object-create-null
            return {};
        }
    }, {
        key: 'contains',
        value: function contains(map, key) {
            return map.hasOwnProperty(key);
        }
    }, {
        key: 'get',
        value: function get(map, key) {
            return map.hasOwnProperty(key) ? map[key] : undefined;
        }
    }, {
        key: 'set',
        value: function set(map, key, value) {
            map[key] = value;
        }
    }, {
        key: 'keys',
        value: function keys(map) {
            return Object.keys(map);
        }
    }, {
        key: 'values',
        value: function values(map) {
            return Object.keys(map).reduce(function (r, a) {
                r.push(map[a]);
                return r;
            }, []);
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty(map) {
            for (var prop in map) {
                return false;
            }
            return true;
        }
    }, {
        key: 'delete',
        value: function _delete(map, key) {
            delete map[key];
        }
    }, {
        key: 'forEach',
        value: function forEach(map, callback) {
            for (var prop in map) {
                if (map.hasOwnProperty(prop)) {
                    callback(map[prop], prop);
                }
            }
        }
    }, {
        key: 'merge',
        value: function merge(m1, m2) {
            var m = {};
            for (var attr in m1) {
                if (m1.hasOwnProperty(attr)) {
                    m[attr] = m1[attr];
                }
            }
            for (var attr in m2) {
                if (m2.hasOwnProperty(attr)) {
                    m[attr] = m2[attr];
                }
            }
            return m;
        }
    }, {
        key: 'equals',
        value: function equals(m1, m2) {
            var k1 = Object.keys(m1);
            var k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            var key;
            for (var i = 0; i < k1.length; i++) {
                key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        }
    }]);

    return StringMapWrapper;
}();
var ListWrapper = function () {
    function ListWrapper() {
        _classCallCheck(this, ListWrapper);
    }

    _createClass(ListWrapper, null, [{
        key: 'createFixedSize',

        // JS has no way to express a statically fixed size list, but dart does so we
        // keep both methods.
        value: function createFixedSize(size) {
            return new Array(size);
        }
    }, {
        key: 'createGrowableSize',
        value: function createGrowableSize(size) {
            return new Array(size);
        }
    }, {
        key: 'clone',
        value: function clone(array) {
            return array.slice(0);
        }
    }, {
        key: 'forEachWithIndex',
        value: function forEachWithIndex(array, fn) {
            for (var i = 0; i < array.length; i++) {
                fn(array[i], i);
            }
        }
    }, {
        key: 'first',
        value: function first(array) {
            if (!array) return null;
            return array[0];
        }
    }, {
        key: 'last',
        value: function last(array) {
            if (!array || array.length == 0) return null;
            return array[array.length - 1];
        }
    }, {
        key: 'indexOf',
        value: function indexOf(array, value) {
            var startIndex = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

            return array.indexOf(value, startIndex);
        }
    }, {
        key: 'contains',
        value: function contains(list, el) {
            return list.indexOf(el) !== -1;
        }
    }, {
        key: 'reversed',
        value: function reversed(array) {
            var a = ListWrapper.clone(array);
            return a.reverse();
        }
    }, {
        key: 'concat',
        value: function concat(a, b) {
            return a.concat(b);
        }
    }, {
        key: 'insert',
        value: function insert(list, index, value) {
            list.splice(index, 0, value);
        }
    }, {
        key: 'removeAt',
        value: function removeAt(list, index) {
            var res = list[index];
            list.splice(index, 1);
            return res;
        }
    }, {
        key: 'removeAll',
        value: function removeAll(list, items) {
            for (var i = 0; i < items.length; ++i) {
                var index = list.indexOf(items[i]);
                list.splice(index, 1);
            }
        }
    }, {
        key: 'remove',
        value: function remove(list, el) {
            var index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        }
    }, {
        key: 'clear',
        value: function clear(list) {
            list.length = 0;
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty(list) {
            return list.length == 0;
        }
    }, {
        key: 'fill',
        value: function fill(list, value) {
            var start = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
            var end = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

            list.fill(value, start, end === null ? list.length : end);
        }
    }, {
        key: 'equals',
        value: function equals(a, b) {
            if (a.length != b.length) return false;
            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        }
    }, {
        key: 'slice',
        value: function slice(l) {
            var from = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
            var to = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            return l.slice(from, to === null ? undefined : to);
        }
    }, {
        key: 'splice',
        value: function splice(l, from, length) {
            return l.splice(from, length);
        }
    }, {
        key: 'sort',
        value: function sort(l, compareFn) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["b" /* isPresent */])(compareFn)) {
                l.sort(compareFn);
            } else {
                l.sort();
            }
        }
    }, {
        key: 'toString',
        value: function toString(l) {
            return l.toString();
        }
    }, {
        key: 'toJSON',
        value: function toJSON(l) {
            return JSON.stringify(l);
        }
    }, {
        key: 'maximum',
        value: function maximum(list, predicate) {
            if (list.length == 0) {
                return null;
            }
            var solution = null;
            var maxValue = -Infinity;
            for (var index = 0; index < list.length; index++) {
                var candidate = list[index];
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["c" /* isBlank */])(candidate)) {
                    continue;
                }
                var candidateValue = predicate(candidate);
                if (candidateValue > maxValue) {
                    solution = candidate;
                    maxValue = candidateValue;
                }
            }
            return solution;
        }
    }, {
        key: 'flatten',
        value: function flatten(list) {
            var target = [];
            _flattenArray(list, target);
            return target;
        }
    }, {
        key: 'addAll',
        value: function addAll(list, source) {
            for (var i = 0; i < source.length; i++) {
                list.push(source[i]);
            }
        }
    }]);

    return ListWrapper;
}();
function _flattenArray(source, target) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["b" /* isPresent */])(source)) {
        for (var i = 0; i < source.length; i++) {
            var item = source[i];
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["d" /* isArray */])(item)) {
                _flattenArray(item, target);
            } else {
                target.push(item);
            }
        }
    }
    return target;
}
function isListLikeIterable(obj) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["e" /* isJsObject */])(obj)) return false;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["d" /* isArray */])(obj) || !(obj instanceof Map) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["f" /* getSymbolIterator */])() in obj; // JS Iterable have a Symbol.iterator prop
}
function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["f" /* getSymbolIterator */])()]();
    var iterator2 = b[__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["f" /* getSymbolIterator */])()]();
    while (true) {
        var item1 = iterator1.next();
        var item2 = iterator2.next();
        if (item1.done && item2.done) return true;
        if (item1.done || item2.done) return false;
        if (!comparator(item1.value, item2.value)) return false;
    }
}
function iterateListLike(obj, fn) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["d" /* isArray */])(obj)) {
        for (var i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    } else {
        var iterator = obj[__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lang__["f" /* getSymbolIterator */])()]();
        var item;
        while (!(item = iterator.next()).done) {
            fn(item.value);
        }
    }
}
// Safari and Internet Explorer do not support the iterable parameter to the
// Set constructor.  We work around that by manually adding the items.
var createSetFromList = function () {
    var test = new Set([1, 2, 3]);
    if (test.size === 3) {
        return function createSetFromList(lst) {
            return new Set(lst);
        };
    } else {
        return function createSetAndPopulateFromList(lst) {
            var res = new Set(lst);
            if (res.size !== lst.length) {
                for (var i = 0; i < lst.length; i++) {
                    res.add(lst[i]);
                }
            }
            return res;
        };
    }
}();
var SetWrapper = function () {
    function SetWrapper() {
        _classCallCheck(this, SetWrapper);
    }

    _createClass(SetWrapper, null, [{
        key: 'createFromList',
        value: function createFromList(lst) {
            return createSetFromList(lst);
        }
    }, {
        key: 'has',
        value: function has(s, key) {
            return s.has(key);
        }
    }, {
        key: 'delete',
        value: function _delete(m, k) {
            m.delete(k);
        }
    }]);

    return SetWrapper;
}();
//# sourceMappingURL=collection.js.map

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__http_utils__ = __webpack_require__(181);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Response; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




/**
 * Creates `Response` instances from provided values.
 *
 * Though this object isn't
 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
 * add data to a view.
 *
 * ### Example
 *
 * ```
 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
 * ```
 *
 * The Response's interface is inspired by the Response constructor defined in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
 * can be accessed many times. There are other differences in the implementation, but this is the
 * most significant.
 */
var Response = function () {
    function Response(responseOptions) {
        _classCallCheck(this, Response);

        this._body = responseOptions.body;
        this.status = responseOptions.status;
        this.ok = this.status >= 200 && this.status <= 299;
        this.statusText = responseOptions.statusText;
        this.headers = responseOptions.headers;
        this.type = responseOptions.type;
        this.url = responseOptions.url;
    }
    /**
     * Not yet implemented
     */
    // TODO: Blob return type


    _createClass(Response, [{
        key: 'blob',
        value: function blob() {
            throw new __WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__["a" /* BaseException */]('"blob()" method not implemented on Response superclass');
        }
        /**
         * Attempts to return body as parsed `JSON` object, or raises an exception.
         */

    }, {
        key: 'json',
        value: function json() {
            var jsonResponse;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__http_utils__["a" /* isJsObject */])(this._body)) {
                jsonResponse = this._body;
            } else if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["g" /* isString */])(this._body)) {
                jsonResponse = __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["h" /* Json */].parse(this._body);
            }
            return jsonResponse;
        }
        /**
         * Returns the body as a string, presuming `toString()` can be called on the response body.
         */

    }, {
        key: 'text',
        value: function text() {
            return this._body.toString();
        }
        /**
         * Not yet implemented
         */
        // TODO: ArrayBuffer return type

    }, {
        key: 'arrayBuffer',
        value: function arrayBuffer() {
            throw new __WEBPACK_IMPORTED_MODULE_0__src_facade_exceptions__["a" /* BaseException */]('"arrayBuffer()" method not implemented on Response superclass');
        }
    }, {
        key: 'toString',
        value: function toString() {
            return 'Response with status: ' + this.status + ' ' + this.statusText + ' for URL: ' + this.url;
        }
    }]);

    return Response;
}();
//# sourceMappingURL=static_response.js.map

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_facade_collection__ = __webpack_require__(270);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_lang__ = __webpack_require__(40);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return URLSearchParams; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



function paramParser() {
    var rawParams = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    var map = new __WEBPACK_IMPORTED_MODULE_0__src_facade_collection__["b" /* Map */]();
    if (rawParams.length > 0) {
        var params = rawParams.split('&');
        params.forEach(function (param) {
            var split = param.split('=');
            var key = split[0];
            var val = split[1];
            var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(map.get(key)) ? map.get(key) : [];
            list.push(val);
            map.set(key, list);
        });
    }
    return map;
}
/**
 * Map-like representation of url search parameters, based on
 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
 * with several extensions for merging URLSearchParams objects:
 *   - setAll()
 *   - appendAll()
 *   - replaceAll()
 */
var URLSearchParams = function () {
    function URLSearchParams() {
        var rawParams = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

        _classCallCheck(this, URLSearchParams);

        this.rawParams = rawParams;
        this.paramsMap = paramParser(rawParams);
    }

    _createClass(URLSearchParams, [{
        key: 'clone',
        value: function clone() {
            var clone = new URLSearchParams();
            clone.appendAll(this);
            return clone;
        }
    }, {
        key: 'has',
        value: function has(param) {
            return this.paramsMap.has(param);
        }
    }, {
        key: 'get',
        value: function get(param) {
            var storedParam = this.paramsMap.get(param);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__src_facade_collection__["a" /* isListLikeIterable */])(storedParam)) {
                return __WEBPACK_IMPORTED_MODULE_0__src_facade_collection__["d" /* ListWrapper */].first(storedParam);
            } else {
                return null;
            }
        }
    }, {
        key: 'getAll',
        value: function getAll(param) {
            var mapParam = this.paramsMap.get(param);
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(mapParam) ? mapParam : [];
        }
    }, {
        key: 'set',
        value: function set(param, val) {
            var mapParam = this.paramsMap.get(param);
            var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(mapParam) ? mapParam : [];
            __WEBPACK_IMPORTED_MODULE_0__src_facade_collection__["d" /* ListWrapper */].clear(list);
            list.push(val);
            this.paramsMap.set(param, list);
        }
        // A merge operation
        // For each name-values pair in `searchParams`, perform `set(name, values[0])`
        //
        // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4], c=[8], b=[7]"
        //
        // TODO(@caitp): document this better

    }, {
        key: 'setAll',
        value: function setAll(searchParams) {
            var _this = this;

            searchParams.paramsMap.forEach(function (value, param) {
                var mapParam = _this.paramsMap.get(param);
                var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(mapParam) ? mapParam : [];
                __WEBPACK_IMPORTED_MODULE_0__src_facade_collection__["d" /* ListWrapper */].clear(list);
                list.push(value[0]);
                _this.paramsMap.set(param, list);
            });
        }
    }, {
        key: 'append',
        value: function append(param, val) {
            var mapParam = this.paramsMap.get(param);
            var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(mapParam) ? mapParam : [];
            list.push(val);
            this.paramsMap.set(param, list);
        }
        // A merge operation
        // For each name-values pair in `searchParams`, perform `append(name, value)`
        // for each value in `values`.
        //
        // E.g: "a=[1,2], c=[8]" + "a=[3,4], b=[7]" = "a=[1,2,3,4], c=[8], b=[7]"
        //
        // TODO(@caitp): document this better

    }, {
        key: 'appendAll',
        value: function appendAll(searchParams) {
            var _this2 = this;

            searchParams.paramsMap.forEach(function (value, param) {
                var mapParam = _this2.paramsMap.get(param);
                var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(mapParam) ? mapParam : [];
                for (var i = 0; i < value.length; ++i) {
                    list.push(value[i]);
                }
                _this2.paramsMap.set(param, list);
            });
        }
        // A merge operation
        // For each name-values pair in `searchParams`, perform `delete(name)`,
        // followed by `set(name, values)`
        //
        // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4,5,6], c=[8], b=[7]"
        //
        // TODO(@caitp): document this better

    }, {
        key: 'replaceAll',
        value: function replaceAll(searchParams) {
            var _this3 = this;

            searchParams.paramsMap.forEach(function (value, param) {
                var mapParam = _this3.paramsMap.get(param);
                var list = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_lang__["b" /* isPresent */])(mapParam) ? mapParam : [];
                __WEBPACK_IMPORTED_MODULE_0__src_facade_collection__["d" /* ListWrapper */].clear(list);
                for (var i = 0; i < value.length; ++i) {
                    list.push(value[i]);
                }
                _this3.paramsMap.set(param, list);
            });
        }
    }, {
        key: 'toString',
        value: function toString() {
            var paramsList = [];
            this.paramsMap.forEach(function (values, k) {
                values.forEach(function (v) {
                    return paramsList.push(k + '=' + encodeURIComponent(v));
                });
            });
            return paramsList.join('&');
        }
    }, {
        key: 'delete',
        value: function _delete(param) {
            this.paramsMap.delete(param);
        }
    }]);

    return URLSearchParams;
}();
//# sourceMappingURL=url_search_params.js.map

/***/ },
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var config_1 = __webpack_require__(16);
var util_1 = __webpack_require__(7);
var Button = function () {
    function Button(config, _elementRef, _renderer, ionItem) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._role = 'button'; // bar-button/item-button
        this._size = null; // large/small/default
        this._style = 'default'; // outline/clear/solid
        this._shape = null; // round/fab
        this._display = null; // block/full
        this._colors = []; // primary/secondary
        this._icon = null; // left/right/only
        this._disabled = false; // disabled
        this.isItem = ionItem === '';
        var element = _elementRef.nativeElement;
        if (config.get('hoverCSS') === false) {
            _renderer.setElementClass(_elementRef.nativeElement, 'disable-hover', true);
        }
        if (element.hasAttribute('ion-item')) {
            // no need to put on these classes for an ion-item
            this._role = null;
            return;
        }
        if (element.hasAttribute('disabled')) {
            this._disabled = true;
        }
        this._readAttrs(element);
    }
    Object.defineProperty(Button.prototype, "large", {
        set: function set(val) {
            this._attr('_size', 'large', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "small", {
        set: function set(val) {
            this._attr('_size', 'small', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "default", {
        set: function set(val) {
            this._attr('_size', 'default', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "outline", {
        set: function set(val) {
            this._attr('_style', 'outline', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "clear", {
        set: function set(val) {
            this._attr('_style', 'clear', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "solid", {
        set: function set(val) {
            this._attr('_style', 'solid', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "round", {
        set: function set(val) {
            this._attr('_shape', 'round', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "block", {
        set: function set(val) {
            this._attr('_display', 'block', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "full", {
        set: function set(val) {
            this._attr('_display', 'full', val);
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype._attr = function (type, attrName, attrValue) {
        this._setClass(this[type], false);
        if (util_1.isTrueProperty(attrValue)) {
            this[type] = attrName;
            this._setClass(attrName, true);
        } else {
            // Special handling for '_style' which defaults to 'default'.
            this[type] = type === '_style' ? 'default' : null;
        }
        if (type === '_style') {
            this._setColor(attrName, util_1.isTrueProperty(attrValue));
        }
    };
    Object.defineProperty(Button.prototype, "color", {
        set: function set(val) {
            // Clear the colors for all styles including the default one.
            this._setColor(BUTTON_STYLE_ATTRS.concat(['default']), false);
            // Support array input which is also supported via multiple attributes (e.g. primary, secondary, etc).
            this._colors = val instanceof Array ? val : [val];
            // Set the colors for the currently effective style.
            this._setColor(this._style, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Button.prototype.ngOnInit = function () {
        // If the button has a role applied to it
        if (this.category) {
            this.setRole(this.category);
        }
    };
    /**
     * @private
     */
    Button.prototype.ngAfterContentInit = function () {
        this._init = true;
        this._readIcon(this._elementRef.nativeElement);
        this._assignCss(true);
    };
    /**
     * @private
     */
    Button.prototype.ngAfterContentChecked = function () {
        this._readIcon(this._elementRef.nativeElement);
        this._assignCss(true);
    };
    /**
     * @private
     */
    Button.prototype.addClass = function (className) {
        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
    };
    /**
     * @private
     */
    Button.prototype.setRole = function (val) {
        this._role = val;
    };
    /**
     * @private
     */
    Button.prototype._readIcon = function (element) {
        // figure out if and where the icon lives in the button
        var childNodes = element.childNodes;
        if (childNodes.length > 0) {
            childNodes = childNodes[0].childNodes;
        }
        var childNode;
        var nodes = [];
        for (var i = 0, l = childNodes.length; i < l; i++) {
            childNode = childNodes[i];
            if (childNode.nodeType === 3) {
                // text node
                if (childNode.textContent.trim() !== '') {
                    nodes.push(TEXT);
                }
            } else if (childNode.nodeType === 1) {
                if (childNode.nodeName === 'ION-ICON') {
                    // icon element node
                    nodes.push(ICON);
                } else {
                    // element other than an <ion-icon>
                    nodes.push(TEXT);
                }
            }
        }
        // Remove any classes that are set already
        this._setClass(this._icon, false);
        if (nodes.length > 1) {
            if (nodes[0] === ICON && nodes[1] === TEXT) {
                this._icon = 'icon-left';
            } else if (nodes[0] === TEXT && nodes[1] === ICON) {
                this._icon = 'icon-right';
            }
        } else if (nodes.length === 1 && nodes[0] === ICON) {
            this._icon = 'icon-only';
        }
    };
    /**
     * @private
     */
    Button.prototype._readAttrs = function (element) {
        var elementAttrs = element.attributes;
        var attrName;
        for (var i = 0, l = elementAttrs.length; i < l; i++) {
            if (elementAttrs[i].value !== '') continue;
            attrName = elementAttrs[i].name;
            if (BUTTON_STYLE_ATTRS.indexOf(attrName) > -1) {
                this._style = attrName;
            } else if (BUTTON_DISPLAY_ATTRS.indexOf(attrName) > -1) {
                this._display = attrName;
            } else if (BUTTON_SHAPE_ATTRS.indexOf(attrName) > -1) {
                this._shape = attrName;
            } else if (BUTTON_SIZE_ATTRS.indexOf(attrName) > -1) {
                this._size = attrName;
            } else if (!IGNORE_ATTRS.test(attrName)) {
                this._colors.push(attrName);
            }
        }
    };
    /**
     * @private
     */
    Button.prototype._assignCss = function (assignCssClass) {
        var role = this._role;
        if (role) {
            this._renderer.setElementClass(this._elementRef.nativeElement, role, assignCssClass); // button
            this._setClass(this._style, assignCssClass); // button-clear
            this._setClass(this._shape, assignCssClass); // button-round
            this._setClass(this._display, assignCssClass); // button-full
            this._setClass(this._size, assignCssClass); // button-small
            this._setClass(this._icon, assignCssClass); // button-icon-left
            this._setColor(this._style, assignCssClass); // button-secondary, button-clear-secondary
        }
    };
    /**
     * @private
     */
    Button.prototype._setClass = function (type, assignCssClass) {
        if (type && this._init) {
            this._renderer.setElementClass(this._elementRef.nativeElement, this._role + '-' + type.toLowerCase(), assignCssClass);
        }
    };
    /**
     * @private
     */
    Button.prototype._setColor = function (type, assignCssClass) {
        var _this = this;
        if (type && this._init) {
            // Support array to allow removal of many styles at once.
            var styles = type instanceof Array ? type : [type];
            styles.forEach(function (styleName) {
                // If the role is not a bar-button, don't apply the solid style
                styleName = _this._role !== 'bar-button' && styleName === 'solid' ? 'default' : styleName;
                var colorStyle = styleName !== null && styleName !== 'default' ? styleName.toLowerCase() + '-' : '';
                _this._colors.forEach(function (colorName) {
                    _this._setClass(colorStyle + colorName, assignCssClass); // button-secondary, button-clear-secondary
                });
            });
        }
    };
    /**
     * @private
     */
    Button.setRoles = function (contentButtonChildren, role) {
        var buttons = contentButtonChildren.toArray();
        buttons.forEach(function (button) {
            button.setRole(role);
        });
    };
    /** @nocollapse */
    Button.decorators = [{ type: core_1.Component, args: [{
            selector: 'button:not([ion-item]),[button]',
            template: '<span class="button-inner">' + '<ng-content></ng-content>' + '</span>' + '<ion-button-effect></ion-button-effect>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Button.ctorParameters = [{ type: config_1.Config }, { type: core_1.ElementRef }, { type: core_1.Renderer }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['ion-item'] }] }];
    /** @nocollapse */
    Button.propDecorators = {
        'category': [{ type: core_1.Input }],
        'large': [{ type: core_1.Input }],
        'small': [{ type: core_1.Input }],
        'default': [{ type: core_1.Input }],
        'outline': [{ type: core_1.Input }],
        'clear': [{ type: core_1.Input }],
        'solid': [{ type: core_1.Input }],
        'round': [{ type: core_1.Input }],
        'block': [{ type: core_1.Input }],
        'full': [{ type: core_1.Input }],
        'color': [{ type: core_1.Input }]
    };
    return Button;
}();
exports.Button = Button;
var BUTTON_SIZE_ATTRS = ['large', 'small', 'default'];
var BUTTON_STYLE_ATTRS = ['clear', 'outline', 'solid'];
var BUTTON_SHAPE_ATTRS = ['round', 'fab'];
var BUTTON_DISPLAY_ATTRS = ['block', 'full'];
var IGNORE_ATTRS = /_ng|button|left|right/;
var TEXT = 1;
var ICON = 2;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var content_1 = __webpack_require__(111);
var ion_1 = __webpack_require__(58);
var util_1 = __webpack_require__(7);
var item_sliding_gesture_1 = __webpack_require__(859);
var item_reorder_gesture_1 = __webpack_require__(857);
var dom_1 = __webpack_require__(17);
var List = function (_super) {
    __extends(List, _super);
    function List(elementRef, _rendered, _zone, _content) {
        _super.call(this, elementRef);
        this._rendered = _rendered;
        this._zone = _zone;
        this._content = _content;
        this._enableReorder = false;
        this._enableSliding = false;
        this._lastToIndex = -1;
        this.ionItemReorder = new core_1.EventEmitter();
    }
    /**
     * @private
     */
    List.prototype.ngOnDestroy = function () {
        this._slidingGesture && this._slidingGesture.destroy();
        this._reorderGesture && this._reorderGesture.destroy();
    };
    /**
     * Enable the sliding items.
     *
     * ```ts
     * import {Component, ViewChild} from '@angular/core';
     * import {List} from 'ionic-angular';
     *
     * @Component({...})
     * export class MyClass {
     *   @ViewChild(List) list: List;
     *
     *   constructor() { }
     *
     *   stopSliding() {
     *     this.list.enableSlidingItems(false);
     *   }
     * }
     * ```
     * @param {boolean} shouldEnable whether the item-sliding should be enabled or not
     */
    List.prototype.enableSlidingItems = function (shouldEnable) {
        var _this = this;
        if (this._enableSliding === shouldEnable) {
            return;
        }
        this._enableSliding = shouldEnable;
        if (shouldEnable) {
            console.debug('enableSlidingItems');
            dom_1.nativeTimeout(function () {
                return _this._slidingGesture = new item_sliding_gesture_1.ItemSlidingGesture(_this);
            });
        } else {
            this._slidingGesture && this._slidingGesture.unlisten();
        }
    };
    /**
     * Close the open sliding item.
     *
     * ```ts
     * import {Component, ViewChild} from '@angular/core';
     * import {List} from 'ionic-angular';
     *
     * @Component({...})
     * export class MyClass {
     *   @ViewChild(List) list: List;
     *
     *   constructor() { }
     *
     *   closeItems() {
     *     this.list.closeSlidingItems();
     *   }
     * }
     * ```
     */
    List.prototype.closeSlidingItems = function () {
        this._slidingGesture && this._slidingGesture.closeOpened();
    };
    List.prototype.setCssClass = function (classname, add) {
        this._rendered.setElementClass(this.getNativeElement(), classname, add);
    };
    List.prototype.reorderStart = function () {
        this.setCssClass('reorder-active', true);
    };
    /**
     * @private
     */
    List.prototype.reorderEmit = function (fromIndex, toIndex) {
        var _this = this;
        this.reorderReset();
        if (fromIndex !== toIndex) {
            this._zone.run(function () {
                _this.ionItemReorder.emit({
                    from: fromIndex,
                    to: toIndex
                });
            });
        }
    };
    /**
     * @private
     */
    List.prototype.scrollContent = function (scroll) {
        var scrollTop = this._content.getScrollTop() + scroll;
        if (scroll !== 0) {
            this._content.scrollTo(0, scrollTop, 0);
        }
        return scrollTop;
    };
    /**
     * @private
     */
    List.prototype.reorderReset = function () {
        var children = this.elementRef.nativeElement.children;
        var len = children.length;
        this.setCssClass('reorder-active', false);
        for (var i = 0; i < len; i++) {
            children[i].style.transform = '';
        }
        this._lastToIndex = -1;
    };
    /**
     * @private
     */
    List.prototype.reorderMove = function (fromIndex, toIndex, itemHeight) {
        if (this._lastToIndex === -1) {
            this._lastToIndex = fromIndex;
        }
        var lastToIndex = this._lastToIndex;
        this._lastToIndex = toIndex;
        // TODO: I think both loops can be merged into a single one
        // but I had no luck last time I tried
        /********* DOM READ ********** */
        var children = this.elementRef.nativeElement.children;
        /********* DOM WRITE ********* */
        if (toIndex >= lastToIndex) {
            for (var i = lastToIndex; i <= toIndex; i++) {
                if (i !== fromIndex) {
                    children[i].style.transform = i > fromIndex ? "translateY(" + -itemHeight + "px)" : '';
                }
            }
        }
        if (toIndex <= lastToIndex) {
            for (var i = toIndex; i <= lastToIndex; i++) {
                if (i !== fromIndex) {
                    children[i].style.transform = i < fromIndex ? "translateY(" + itemHeight + "px)" : '';
                }
            }
        }
    };
    Object.defineProperty(List.prototype, "reorder", {
        get: function get() {
            return this._enableReorder;
        },
        set: function set(val) {
            var _this = this;
            var enabled = util_1.isTrueProperty(val);
            if (this._enableReorder === enabled) {
                return;
            }
            this._enableReorder = enabled;
            if (enabled) {
                console.debug('enableReorderItems');
                dom_1.nativeTimeout(function () {
                    return _this._reorderGesture = new item_reorder_gesture_1.ItemReorderGesture(_this);
                });
            } else {
                this._reorderGesture && this._reorderGesture.destroy();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    List.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-list',
            host: {
                '[class.reorder-enabled]': '_enableReorder'
            }
        }] }];
    /** @nocollapse */
    List.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }, { type: core_1.NgZone }, { type: content_1.Content, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    List.propDecorators = {
        'ionItemReorder': [{ type: core_1.Output }],
        'reorder': [{ type: core_1.Input }]
    };
    return List;
}(ion_1.Ion);
exports.List = List;
var ListHeader = function () {
    function ListHeader(_renderer, _elementRef, _id) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._id = _id;
    }
    Object.defineProperty(ListHeader.prototype, "id", {
        get: function get() {
            return this._id;
        },
        set: function set(val) {
            this._id = val;
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    ListHeader.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-list-header'
        }] }];
    /** @nocollapse */
    ListHeader.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['id'] }] }];
    return ListHeader;
}();
exports.ListHeader = ListHeader;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var keyboard_1 = __webpack_require__(95);
var util_1 = __webpack_require__(7);
var nav_controller_1 = __webpack_require__(51);
var nav_portal_1 = __webpack_require__(463);
var view_controller_1 = __webpack_require__(43);
var Nav = function (_super) {
    __extends(Nav, _super);
    function Nav(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler) {
        _super.call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler);
        this._hasInit = false;
        if (viewCtrl) {
            // an ion-nav can also act as an ion-page within a parent ion-nav
            // this would happen when an ion-nav nests a child ion-nav.
            viewCtrl.setContent(this);
            viewCtrl.setContentRef(elementRef);
        }
        if (parent) {
            // this Nav has a parent Nav
            parent.registerChildNav(this);
        } else if (app) {
            // this is the root navcontroller for the entire app
            this._app.setRootNav(this);
        }
    }
    Object.defineProperty(Nav.prototype, "_vp", {
        set: function set(val) {
            this.setViewport(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Nav.prototype.ngAfterViewInit = function () {
        this._hasInit = true;
        if (this._root) {
            if (typeof this._root !== 'function') {
                throw 'The [root] property in <ion-nav> must be given a reference to a component class from within the constructor.';
            }
            this.push(this._root);
        }
    };
    Object.defineProperty(Nav.prototype, "root", {
        get: function get() {
            return this._root;
        },
        set: function set(page) {
            this._root = page;
            if (this._hasInit) {
                this.setRoot(page);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Nav.prototype, "swipeBackEnabled", {
        get: function get() {
            return this._sbEnabled;
        },
        set: function set(val) {
            this._sbEnabled = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Nav.prototype, "_np", {
        get: function get() {
            return null;
        },
        set: function set(val) {
            this.setPortal(val.first);
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    Nav.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-nav',
            template: '<div #viewport nav-viewport></div><div class="nav-decor"></div><div nav-portal></div>',
            directives: [nav_portal_1.NavPortal],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Nav.ctorParameters = [{ type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }, { type: app_1.App }, { type: config_1.Config }, { type: keyboard_1.Keyboard }, { type: core_1.ElementRef }, { type: core_1.NgZone }, { type: core_1.Renderer }, { type: core_1.ComponentResolver }];
    /** @nocollapse */
    Nav.propDecorators = {
        '_vp': [{ type: core_1.ViewChild, args: ['viewport', { read: core_1.ViewContainerRef }] }],
        'root': [{ type: core_1.Input }],
        'swipeBackEnabled': [{ type: core_1.Input }],
        '_np': [{ type: core_1.ViewChildren, args: [nav_portal_1.NavPortal] }]
    };
    return Nav;
}(nav_controller_1.NavController);
exports.Nav = Nav;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var content_1 = __webpack_require__(111);
var ion_1 = __webpack_require__(58);
var util_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(17);
var nav_controller_1 = __webpack_require__(51);
var platform_1 = __webpack_require__(72);
var tab_button_1 = __webpack_require__(881);
var tab_highlight_1 = __webpack_require__(882);
var view_controller_1 = __webpack_require__(43);
var Tabs = function (_super) {
    __extends(Tabs, _super);
    function Tabs(parent, viewCtrl, _app, _config, _elementRef, _platform, _renderer) {
        var _this = this;
        _super.call(this, _elementRef);
        this._app = _app;
        this._config = _config;
        this._elementRef = _elementRef;
        this._platform = _platform;
        this._renderer = _renderer;
        this._ids = -1;
        this._tabs = [];
        this._onReady = null;
        /**
         * @private
         */
        this.selectHistory = [];
        this.ionChange = new core_1.EventEmitter();
        this.parent = parent;
        this.id = ++tabIds;
        this.subPages = _config.getBoolean('tabSubPages');
        this._useHighlight = _config.getBoolean('tabbarHighlight');
        this._sbPadding = _config.getBoolean('statusbarPadding');
        if (parent) {
            // this Tabs has a parent Nav
            parent.registerChildNav(this);
        } else if (this._app) {
            // this is the root navcontroller for the entire app
            this._app.setRootNav(this);
        }
        // Tabs may also be an actual ViewController which was navigated to
        // if Tabs is static and not navigated to within a NavController
        // then skip this and don't treat it as it's own ViewController
        if (viewCtrl) {
            viewCtrl.setContent(this);
            viewCtrl.setContentRef(_elementRef);
            viewCtrl.loaded = function (done) {
                _this._onReady = done;
            };
        }
    }
    /**
     * @private
     */
    Tabs.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._setConfig('tabbarPlacement', 'bottom');
        this._setConfig('tabbarLayout', 'icon-top');
        if (this._useHighlight) {
            this._platform.onResize(function () {
                _this._highlight.select(_this.getSelected());
            });
        }
        var preloadTabs = util_1.isBlank(this.preloadTabs) ? this._config.getBoolean('preloadTabs') : util_1.isTrueProperty(this.preloadTabs);
        // get the selected index
        var selectedIndex = this.selectedIndex ? parseInt(this.selectedIndex, 10) : 0;
        // ensure the selectedIndex isn't a hidden or disabled tab
        // also find the first available index incase we need it later
        var availableIndex = -1;
        this._tabs.forEach(function (tab, index) {
            if (tab.enabled && tab.show && availableIndex < 0) {
                // we know this tab index is safe to show
                availableIndex = index;
            }
            if (index === selectedIndex && (!tab.enabled || !tab.show)) {
                // the selectedIndex is not safe to show
                selectedIndex = -1;
            }
        });
        if (selectedIndex < 0) {
            // the selected index wasn't safe to show
            // instead use an available index found to be safe to show
            selectedIndex = availableIndex;
        }
        this._tabs.forEach(function (tab, index) {
            if (index === selectedIndex) {
                _this.select(tab);
            } else if (preloadTabs) {
                tab.preload(1000 * index);
            }
        });
    };
    /**
     * @private
     */
    Tabs.prototype._setConfig = function (attrKey, fallback) {
        var val = this[attrKey];
        if (util_1.isBlank(val)) {
            val = this._config.get(attrKey, fallback);
        }
        this._renderer.setElementAttribute(this._elementRef.nativeElement, attrKey, val);
    };
    /**
     * @private
     */
    Tabs.prototype.add = function (tab) {
        tab.id = this.id + '-' + ++this._ids;
        this._tabs.push(tab);
    };
    /**
     * @param {number|Tab} tabOrIndex Index, or the Tab instance, of the tab to select.
     */
    Tabs.prototype.select = function (tabOrIndex) {
        var _this = this;
        var selectedTab = typeof tabOrIndex === 'number' ? this.getByIndex(tabOrIndex) : tabOrIndex;
        if (util_1.isBlank(selectedTab)) {
            return;
        }
        var deselectedTab = this.getSelected();
        if (selectedTab === deselectedTab) {
            // no change
            return this._touchActive(selectedTab);
        }
        console.debug('Tabs, select', selectedTab.id);
        var opts = {
            animate: false
        };
        var deselectedPage;
        if (deselectedTab) {
            deselectedPage = deselectedTab.getActive();
            deselectedPage && deselectedPage.fireWillLeave();
        }
        var selectedPage = selectedTab.getActive();
        selectedPage && selectedPage.fireWillEnter();
        selectedTab.load(opts, function (initialLoad) {
            selectedTab.ionSelect.emit(selectedTab);
            _this.ionChange.emit(selectedTab);
            if (selectedTab.root) {
                // only show the selectedTab if it has a root
                // it's possible the tab is only for opening modal's or signing out
                // and doesn't actually have content. In the case there's no content
                // for a tab then do nothing and leave the current view as is
                _this._tabs.forEach(function (tab) {
                    tab.setSelected(tab === selectedTab);
                });
                if (_this._useHighlight) {
                    _this._highlight.select(selectedTab);
                }
            }
            selectedPage && selectedPage.fireDidEnter();
            deselectedPage && deselectedPage.fireDidLeave();
            if (_this._onReady) {
                _this._onReady();
                _this._onReady = null;
            }
            // track the order of which tabs have been selected, by their index
            // do not track if the tab index is the same as the previous
            if (_this.selectHistory[_this.selectHistory.length - 1] !== selectedTab.id) {
                _this.selectHistory.push(selectedTab.id);
            }
            // if this is not the Tab's initial load then we need
            // to refresh the tabbar and content dimensions to be sure
            // they're lined up correctly
            if (!initialLoad && selectedPage) {
                var content = selectedPage.getContent();
                if (content && content instanceof content_1.Content) {
                    dom_1.nativeRaf(function () {
                        content.readDimensions();
                        content.writeDimensions();
                    });
                }
            }
        });
    };
    /**
     * Get the previously selected Tab which is currently not disabled or hidden.
     * @param {boolean} trimHistory If the selection history should be trimmed up to the previous tab selection or not.
     * @returns {Tab}
     */
    Tabs.prototype.previousTab = function (trimHistory) {
        var _this = this;
        if (trimHistory === void 0) {
            trimHistory = true;
        }
        // walk backwards through the tab selection history
        // and find the first previous tab that is enabled and shown
        console.debug('run previousTab', this.selectHistory);
        for (var i = this.selectHistory.length - 2; i >= 0; i--) {
            var tab = this._tabs.find(function (t) {
                return t.id === _this.selectHistory[i];
            });
            if (tab && tab.enabled && tab.show) {
                if (trimHistory) {
                    this.selectHistory.splice(i + 1);
                }
                return tab;
            }
        }
        return null;
    };
    /**
     * @param {number} index Index of the tab you want to get
     * @returns {Tab} Returns the tab who's index matches the one passed
     */
    Tabs.prototype.getByIndex = function (index) {
        if (index < this._tabs.length && index > -1) {
            return this._tabs[index];
        }
        return null;
    };
    /**
     * @return {Tab} Returns the currently selected tab
     */
    Tabs.prototype.getSelected = function () {
        for (var i = 0; i < this._tabs.length; i++) {
            if (this._tabs[i].isSelected) {
                return this._tabs[i];
            }
        }
        return null;
    };
    /**
     * @private
     */
    Tabs.prototype.getActiveChildNav = function () {
        return this.getSelected();
    };
    /**
     * @private
     */
    Tabs.prototype.getIndex = function (tab) {
        return this._tabs.indexOf(tab);
    };
    /**
     * @private
     * "Touch" the active tab, going back to the root view of the tab
     * or optionally letting the tab handle the event
     */
    Tabs.prototype._touchActive = function (tab) {
        var active = tab.getActive();
        if (!active) {
            return Promise.resolve();
        }
        var instance = active.instance;
        // If they have a custom tab selected handler, call it
        if (instance.ionSelected) {
            return instance.ionSelected();
        }
        // If we're a few pages deep, pop to root
        if (tab.length() > 1) {
            // Pop to the root view
            return tab.popToRoot();
        }
        // Otherwise, if the page we're on is not our real root, reset it to our
        // default root type
        if (tab.root !== active.componentType) {
            return tab.setRoot(tab.root);
        }
        // And failing all of that, we do something safe and secure
        return Promise.resolve();
    };
    Object.defineProperty(Tabs.prototype, "rootNav", {
        /**
         * @private
         * Returns the root NavController. Returns `null` if Tabs is not
         * within a NavController.
         * @returns {NavController}
         */
        get: function get() {
            var nav = this.parent;
            while (nav && nav.parent) {
                nav = nav.parent;
            }
            return nav;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * DOM WRITE
     */
    Tabs.prototype.setTabbarPosition = function (top, bottom) {
        if (this._top !== top || this._bottom !== bottom) {
            var tabbarEle = this._tabbar.nativeElement;
            tabbarEle.style.top = top > -1 ? top + 'px' : '';
            tabbarEle.style.bottom = bottom > -1 ? bottom + 'px' : '';
            tabbarEle.classList.add('show-tabbar');
            this._top = top;
            this._bottom = bottom;
        }
    };
    /** @nocollapse */
    Tabs.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-tabs',
            template: '<ion-tabbar role="tablist" #tabbar>' + '<a *ngFor="let t of _tabs" [tab]="t" class="tab-button" [class.tab-disabled]="!t.enabled" [class.tab-hidden]="!t.show" role="tab" href="#" (ionSelect)="select($event)">' + '<ion-icon *ngIf="t.tabIcon" [name]="t.tabIcon" [isActive]="t.isSelected" class="tab-button-icon"></ion-icon>' + '<span *ngIf="t.tabTitle" class="tab-button-text">{{t.tabTitle}}</span>' + '<ion-badge *ngIf="t.tabBadge" class="tab-badge" [ngClass]="\'badge-\' + t.tabBadgeStyle">{{t.tabBadge}}</ion-badge>' + '<ion-button-effect></ion-button-effect>' + '</a>' + '<tab-highlight></tab-highlight>' + '</ion-tabbar>' + '<ng-content></ng-content>' + '<div #portal tab-portal></div>',
            directives: [tab_button_1.TabButton, tab_highlight_1.TabHighlight, common_1.NgIf, common_1.NgFor],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Tabs.ctorParameters = [{ type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }, { type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: app_1.App }, { type: config_1.Config }, { type: core_1.ElementRef }, { type: platform_1.Platform }, { type: core_1.Renderer }];
    /** @nocollapse */
    Tabs.propDecorators = {
        'selectedIndex': [{ type: core_1.Input }],
        'preloadTabs': [{ type: core_1.Input }],
        'tabbarLayout': [{ type: core_1.Input }],
        'tabbarPlacement': [{ type: core_1.Input }],
        'ionChange': [{ type: core_1.Output }],
        '_highlight': [{ type: core_1.ViewChild, args: [tab_highlight_1.TabHighlight] }],
        '_tabbar': [{ type: core_1.ViewChild, args: ['tabbar'] }],
        'portal': [{ type: core_1.ViewChild, args: ['portal', { read: core_1.ViewContainerRef }] }]
    };
    return Tabs;
}(ion_1.Ion);
exports.Tabs = Tabs;
var tabIds = -1;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Backdrop; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var DISABLE_SCROLL = 'disable-scroll';
/**
 * @private
 */
var Backdrop_1 = function () {
    function Backdrop(elementRef) {
        _classCallCheck(this, Backdrop);

        this.elementRef = elementRef;
        this.pushed = false;
        this.disableScroll = true;
    }

    _createClass(Backdrop, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isTrueProperty"])(this.disableScroll)) {
                Backdrop_1.push();
                this.pushed = true;
            }
        }
    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            if (this.pushed) {
                Backdrop_1.pop();
                this.pushed = false;
            }
        }
    }], [{
        key: "push",
        value: function push() {
            if (this.nuBackDrops === 0) {
                console.debug('adding .disable-scroll to body');
                document.body.classList.add(DISABLE_SCROLL);
            } else {
                console.warn('several backdrops on screen? probably a bug');
            }
            this.nuBackDrops++;
        }
    }, {
        key: "pop",
        value: function pop() {
            if (this.nuBackDrops === 0) {
                console.error('pop requires a push');
                return;
            }
            this.nuBackDrops--;
            if (this.nuBackDrops === 0) {
                console.debug('removing .disable-scroll from body');
                document.body.classList.remove(DISABLE_SCROLL);
            }
        }
    }]);

    return Backdrop;
}();
var Backdrop = Backdrop_1;
Backdrop.nuBackDrops = 0;
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Backdrop.prototype, "disableScroll", void 0);
Backdrop = Backdrop_1 = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-backdrop',
    host: {
        'role': 'presentation',
        'tappable': '',
        'disable-activated': ''
    }
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object])], Backdrop);
var _a;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_config__ = __webpack_require__(12);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Icon; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @name Icon
 * @description
 * Icons can be used on their own, or inside of a number of Ionic components.
 * For a full list of available icons, check out the
 * [Ionicons docs](../../../../ionicons).
 *
 * One feature of Ionicons in Ionic is when icon names are set, the actual icon
 * which is rendered can change slightly depending on the mode the app is
 * running from. For example, by setting the icon name of `alarm`, on iOS the
 * icon will automatically apply `ios-alarm`, and on Material Design it will
 * automatically apply `md-alarm`. This allows the developer to write the
 * markup once while Ionic applies the appropriate icon based on the mode.
 *
 * @usage
 * ```html
 * <!-- automatically uses the correct "star" icon depending on the mode -->
 * <ion-icon name="star"></ion-icon>
 *
 * <!-- explicity set the icon for each mode -->
 * <ion-icon ios="ios-home" md="md-home"></ion-icon>
 *
 * <!-- always use the same icon, no matter what the mode -->
 * <ion-icon name="ios-clock"></ion-icon>
 * <ion-icon name="logo-twitter"></ion-icon>
 * ```
 *
 * @demo /docs/v2/demos/icon/
 * @see {@link /docs/v2/components#icons Icon Component Docs}
 *
 */
var Icon = function () {
    function Icon(config, _elementRef, _renderer) {
        _classCallCheck(this, Icon);

        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._name = '';
        this._ios = '';
        this._md = '';
        this._css = '';
        this.mode = config.get('iconMode');
    }
    /**
     * @private
     */

    _createClass(Icon, [{
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            if (this._css) {
                this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
            }
        }
        /**
         * @input {string} Icon to use. Will load the appropriate icon for each mode
         */

    }, {
        key: "update",

        /**
         * @private
         */
        value: function update() {
            var css = 'ion-';
            if (this._ios && this.mode === 'ios') {
                css += this._ios;
            } else if (this._md && this.mode === 'md') {
                css += this._md;
            } else {
                css += this._name;
            }
            if (this.mode === 'ios' && !this.isActive && css.indexOf('logo') < 0) {
                css += '-outline';
            }
            if (this._css !== css) {
                if (this._css) {
                    this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
                }
                this._css = css;
                this._renderer.setElementClass(this._elementRef.nativeElement, css, true);
                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', css.replace('ion-', '').replace('ios-', '').replace('md-', '').replace('-', ' '));
            }
        }
        /**
         * @private
         * @param {string} add class name
         */

    }, {
        key: "addClass",
        value: function addClass(className) {
            this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
        }
    }, {
        key: "name",
        get: function get() {
            return this._name;
        },
        set: function set(val) {
            if (!/^md-|^ios-|^logo-/.test(val)) {
                // this does not have one of the defaults
                // so lets auto add in the mode prefix for them
                val = this.mode + '-' + val;
            }
            this._name = val;
            this.update();
        }
        /**
         * @input {string} Explicitly set the icon to use on iOS
         */

    }, {
        key: "ios",
        get: function get() {
            return this._ios;
        },
        set: function set(val) {
            this._ios = val;
            this.update();
        }
        /**
         * @input {string} Explicitly set the icon to use on MD
         */

    }, {
        key: "md",
        get: function get() {
            return this._md;
        },
        set: function set(val) {
            this._md = val;
            this.update();
        }
        /**
         * @input {bool} Whether or not the icon has an "active" appearance. On iOS an active icon is filled in or full appearance, and an inactive icon on iOS will use an outlined version of the icon same icon. Material Design icons do not change appearance depending if they're active or not. The `isActive` property is largely used by the tabbar.
         */

    }, {
        key: "isActive",
        get: function get() {
            return this._isActive === undefined || this._isActive === true || this._isActive === 'true';
        },
        set: function set(val) {
            this._isActive = val;
            this.update();
        }
    }]);

    return Icon;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Icon.prototype, "name", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Icon.prototype, "ios", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Icon.prototype, "md", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Icon.prototype, "isActive", null);
Icon = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-icon',
    host: {
        'role': 'img'
    }
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _c || Object])], Icon);
var _a, _b, _c;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__platform_platform__ = __webpack_require__(61);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Img; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var Img = function () {
    function Img(_elementRef, _platform, _zone) {
        _classCallCheck(this, Img);

        this._elementRef = _elementRef;
        this._platform = _platform;
        this._zone = _zone;
        this._src = '';
        this._normalizeSrc = '';
        this._imgs = [];
        this._enabled = true;
    }

    _createClass(Img, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            this._init = true;
            this._update();
        }
    }, {
        key: "_update",
        value: function _update() {
            var _this = this;

            if (this._enabled && this._src !== '') {
                // actively update the image
                for (var i = this._imgs.length - 1; i >= 0; i--) {
                    if (this._imgs[i].src === this._normalizeSrc) {
                        // this is the active image
                        if (this._imgs[i].complete) {
                            this._loaded(true);
                        }
                    } else {
                        // no longer the active image
                        if (this._imgs[i].parentElement) {
                            this._imgs[i].parentElement.removeChild(this._imgs[i]);
                        }
                        this._imgs.splice(i, 1);
                    }
                }
                if (!this._imgs.length) {
                    this._zone.runOutsideAngular(function () {
                        var img = new Image();
                        img.style.width = _this._width;
                        img.style.height = _this._height;
                        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(_this.alt)) {
                            img.alt = _this.alt;
                        }
                        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(_this.title)) {
                            img.title = _this.title;
                        }
                        img.addEventListener('load', function () {
                            if (img.src === _this._normalizeSrc) {
                                _this._elementRef.nativeElement.appendChild(img);
                                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["nativeRaf"])(function () {
                                    _this._update();
                                });
                            }
                        });
                        img.src = _this._src;
                        _this._imgs.push(img);
                        _this._loaded(false);
                    });
                }
            } else {
                // do not actively update the image
                if (!this._imgs.some(function (img) {
                    return img.src === _this._normalizeSrc;
                })) {
                    this._loaded(false);
                }
            }
        }
    }, {
        key: "_loaded",
        value: function _loaded(isLoaded) {
            this._elementRef.nativeElement.classList[isLoaded ? 'add' : 'remove']('img-loaded');
        }
    }, {
        key: "enable",
        value: function enable(shouldEnable) {
            this._enabled = shouldEnable;
            this._update();
        }
    }, {
        key: "src",
        set: function set(val) {
            var tmpImg = new Image();
            tmpImg.src = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(val) ? val : '';
            this._src = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(val) ? val : '';
            this._normalizeSrc = tmpImg.src;
            if (this._init) {
                this._update();
            }
        }
    }, {
        key: "width",
        set: function set(val) {
            this._w = getUnitValue(val);
        }
    }, {
        key: "height",
        set: function set(val) {
            this._h = getUnitValue(val);
        }
    }, {
        key: "_width",
        get: function get() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(this._w) ? this._w : '';
        }
    }, {
        key: "_height",
        get: function get() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(this._h) ? this._h : '';
        }
    }]);

    return Img;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String), __metadata('design:paramtypes', [String])], Img.prototype, "src", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Img.prototype, "width", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Img.prototype, "height", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Img.prototype, "alt", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Img.prototype, "title", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostBinding"])('style.width'), __metadata('design:type', String)], Img.prototype, "_width", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostBinding"])('style.height'), __metadata('design:type', String)], Img.prototype, "_height", null);
Img = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-img',
    template: '<div class="img-placeholder" [style.height]="_h" [style.width]="_w"></div>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__platform_platform__["Platform"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _c || Object])], Img);
function getUnitValue(val) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(val)) {
        if (typeof val === 'string') {
            if (val.indexOf('%') > -1 || val.indexOf('px') > -1) {
                return val;
            }
            if (val.length) {
                return val + 'px';
            }
        } else if (typeof val === 'number') {
            return val + 'px';
        }
    }
    return '';
}
var _a, _b, _c;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__content_content__ = __webpack_require__(82);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return InfiniteScroll; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};


/**
 * @name InfiniteScroll
 * @description
 * The Infinite Scroll allows you to perform an action when the user
 * scrolls a specified distance from the bottom of the page.
 *
 * The expression assigned to the `infinite` event is called when
 * the user scrolls to the specified distance. When this expression
 * has finished its tasks, it should call the `complete()` method
 * on the infinite scroll instance.
 *
 * @usage
 * ```html
 * <ion-content>
 *
 *  <ion-list>
 *    <ion-item *ngFor="let i of items">{% raw %}{{i}}{% endraw %}</ion-item>
 *  </ion-list>
 *
 *  <ion-infinite-scroll (ionInfinite)="doInfinite($event)">
 *    <ion-infinite-scroll-content></ion-infinite-scroll-content>
 *  </ion-infinite-scroll>
 *
 * </ion-content>
 * ```
 *
 * ```ts
 * @Component({...})
 * export class NewsFeedPage {
 *   items = [];
 *
 *   constructor() {
 *     for (var i = 0; i < 30; i++) {
 *       this.items.push( this.items.length );
 *     }
 *   }
 *
 *   doInfinite(infiniteScroll) {
 *     console.log('Begin async operation');
 *
 *     setTimeout(() => {
 *       for (var i = 0; i < 30; i++) {
 *         this.items.push( this.items.length );
 *       }
 *
 *       console.log('Async operation has ended');
 *       infiniteScroll.complete();
 *     }, 500);
 *   }
 *
 * }
 * ```
 *
 *
 * ## Infinite Scroll Content
 *
 * By default, Ionic uses the infinite scroll spinner that looks
 * best for the platform the user is on. However, you can change the
 * default spinner or add text by adding properties to the
 * `ion-infinite-scroll-content` component.
 *
 *  ```html
 *  <ion-content>
 *
 *    <ion-infinite-scroll (ionInfinite)="doInfinite($event)">
 *      <ion-infinite-scroll-content
 *        loadingSpinner="bubbles"
 *        loadingText="Loading more data...">
 *      </ion-infinite-scroll-content>
 *    </ion-infinite-scroll>
 *
 *  </ion-content>
 *  ```
 *
 *
 * ## Further Customizing Infinite Scroll Content
 *
 * The `ion-infinite-scroll` component holds the infinite scroll logic.
 * It requires a child component in order to display the content.
 * Ionic uses `ion-infinite-scroll-content` by default. This component
 * displays the infinite scroll and changes the look depending
 * on the infinite scroll's state. Separating these components allows
 * developers to create their own infinite scroll content components.
 * You could replace our default content with custom SVG or CSS animations.
 *
 * @demo /docs/v2/demos/infinite-scroll/
 *
 */
var InfiniteScroll = function () {
    function InfiniteScroll(_content, _zone, _elementRef) {
        _classCallCheck(this, InfiniteScroll);

        this._content = _content;
        this._zone = _zone;
        this._elementRef = _elementRef;
        this._lastCheck = 0;
        this._highestY = 0;
        this._thr = '15%';
        this._thrPx = 0;
        this._thrPc = 0.15;
        this._init = false;
        this.state = STATE_ENABLED;
        /**
         * @output {event} The expression to call when the scroll reaches
         * the threshold distance. From within your infinite handler,
         * you must call the infinite scroll's `complete()` method when
         * your async operation has completed.
         */
        this.ionInfinite = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _content.addCssClass('has-infinite-scroll');
    }
    /**
     * @input {string} The threshold distance from the bottom
     * of the content to call the `infinite` output event when scrolled.
     * The threshold value can be either a percent, or
     * in pixels. For example, use the value of `10%` for the `infinite`
     * output event to get called when the user has scrolled 10%
     * from the bottom of the page. Use the value `100px` when the
     * scroll is within 100 pixels from the bottom of the page.
     * Default is `15%`.
     */

    _createClass(InfiniteScroll, [{
        key: "_onScroll",
        value: function _onScroll() {
            var _this = this;

            if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
                return 1;
            }
            var now = Date.now();
            if (this._lastCheck + 32 > now) {
                // no need to check less than every XXms
                return 2;
            }
            this._lastCheck = now;
            var infiniteHeight = this._elementRef.nativeElement.scrollHeight;
            if (!infiniteHeight) {
                // if there is no height of this element then do nothing
                return 3;
            }
            var d = this._content.getContentDimensions();
            var reloadY = d.contentHeight;
            if (this._thrPc) {
                reloadY += reloadY * this._thrPc;
            } else {
                reloadY += this._thrPx;
            }
            var distanceFromInfinite = d.scrollHeight - infiniteHeight - d.scrollTop - reloadY;
            if (distanceFromInfinite < 0) {
                this._zone.run(function () {
                    if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                        _this.state = STATE_LOADING;
                        _this.ionInfinite.emit(_this);
                    }
                });
                return 5;
            }
            return 6;
        }
        /**
         * Call `complete()` within the `infinite` output event handler when
         * your async operation has completed. For example, the `loading`
         * state is while the app is performing an asynchronous operation,
         * such as receiving more data from an AJAX request to add more items
         * to a data list. Once the data has been received and UI updated, you
         * then call this method to signify that the loading has completed.
         * This method will change the infinite scroll's state from `loading`
         * to `enabled`.
         */

    }, {
        key: "complete",
        value: function complete() {
            this.state = STATE_ENABLED;
        }
        /**
         * Call `enable(false)` to disable the infinite scroll from actively
         * trying to receive new data while scrolling. This method is useful
         * when it is known that there is no more data that can be added, and
         * the infinite scroll is no longer needed.
         * @param {boolean} shouldEnable  If the infinite scroll should be
         * enabled or not. Setting to `false` will remove scroll event listeners
         * and hide the display.
         */

    }, {
        key: "enable",
        value: function enable(shouldEnable) {
            this.state = shouldEnable ? STATE_ENABLED : STATE_DISABLED;
            this._setListeners(shouldEnable);
        }
    }, {
        key: "_setListeners",
        value: function _setListeners(shouldListen) {
            var _this2 = this;

            if (this._init) {
                if (shouldListen) {
                    if (!this._scLsn) {
                        this._zone.runOutsideAngular(function () {
                            _this2._scLsn = _this2._content.addScrollListener(_this2._onScroll.bind(_this2));
                        });
                    }
                } else {
                    this._scLsn && this._scLsn();
                    this._scLsn = null;
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            this._init = true;
            this._setListeners(this.state !== STATE_DISABLED);
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._setListeners(false);
        }
    }, {
        key: "threshold",
        get: function get() {
            return this._thr;
        },
        set: function set(val) {
            this._thr = val;
            if (val.indexOf('%') > -1) {
                this._thrPx = 0;
                this._thrPc = parseFloat(val) / 100;
            } else {
                this._thrPx = parseFloat(val);
                this._thrPc = 0;
            }
        }
    }]);

    return InfiniteScroll;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], InfiniteScroll.prototype, "threshold", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], InfiniteScroll.prototype, "ionInfinite", void 0);
InfiniteScroll = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-infinite-scroll'
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"])()), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__content_content__["a" /* Content */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__content_content__["a" /* Content */]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _d || Object])], InfiniteScroll);
var STATE_ENABLED = 'enabled';
var STATE_DISABLED = 'disabled';
var STATE_LOADING = 'loading';
var _a, _b, _c, _d;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Label; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};

/**
 * @name Label
 * @description
 * Labels are placed inside of an `ion-item` element and can be used
 * to describe an `ion-input`, `ion-toggle`, `ion-checkbox`, and more.
 *
 * @property [fixed] - A persistent label that sits next the input.
 * @property [floating] - A label that will float about the input if the input is empty or loses focus.
 * @property [stacked] - A stacked label will always appear on top of the input.

 *
 * @usage
 * ```html
 *  <ion-item>
 *    <ion-label>Username</ion-label>
 *    <ion-input></ion-input>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label fixed>Website</ion-label>
 *    <ion-input type="url"></ion-input>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label floating>Email</ion-label>
 *    <ion-input type="email"></ion-input>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label stacked>Phone</ion-label>
 *    <ion-input type="tel"></ion-input>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label>Toggle</ion-label>
 *    <ion-toggle></ion-toggle>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label>Checkbox</ion-label>
 *    <ion-checkbox></ion-checkbox>
 *  </ion-item>
 * ```
 *
 * @demo /docs/v2/demos/label/
 * @see {@link ../../../../components#inputs Input Component Docs}
 * @see {@link ../../input/Input Input API Docs}
 *
 */
var Label = function () {
    function Label(_elementRef, _renderer, isFloating, isStacked, isFixed, isInset) {
        _classCallCheck(this, Label);

        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.type = isFloating === '' ? 'floating' : isStacked === '' ? 'stacked' : isFixed === '' ? 'fixed' : isInset === '' ? 'inset' : null;
    }
    /**
     * @private
     */

    _createClass(Label, [{
        key: "addClass",

        /**
         * @private
         * @param {string} add class name
         */
        value: function addClass(className) {
            this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
        }
    }, {
        key: "id",
        get: function get() {
            return this._id;
        },
        set: function set(val) {
            this._id = val;
            if (val) {
                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
            }
        }
        /**
         * @private
         */

    }, {
        key: "text",
        get: function get() {
            return this._elementRef.nativeElement.textContent || '';
        }
    }]);

    return Label;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Label.prototype, "id", null);
Label = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-label'
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('floating')), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('stacked')), __param(4, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('fixed')), __param(5, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('inset')), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _b || Object, String, String, String, String])], Label);
var _a, _b;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Option; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @name Option
 * @description
 * `ion-option` is a child component of `ion-select`. Similar to the native option element, `ion-option` can take a value and a checked property.
 *
 * @demo /docs/v2/demos/item-sliding/
 */
var Option = function () {
    function Option(_elementRef) {
        _classCallCheck(this, Option);

        this._elementRef = _elementRef;
        this._checked = false;
        /**
         * @input {any} Event to evaluate when option is selected
         */
        this.ionSelect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    /**
     * @input {boolean} Whether or not the option is already checked and selected
     */

    _createClass(Option, [{
        key: "checked",
        get: function get() {
            return this._checked;
        },
        set: function set(val) {
            this._checked = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isTrueProperty"])(val);
        }
        /**
         * @input {any} The value of the option
         */

    }, {
        key: "value",
        get: function get() {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isPresent"])(this._value)) {
                return this._value;
            }
            return this.text;
        },
        set: function set(val) {
            this._value = val;
        }
        /**
         * @private
         */

    }, {
        key: "text",
        get: function get() {
            return this._elementRef.nativeElement.textContent;
        }
    }]);

    return Option;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Option.prototype, "ionSelect", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Option.prototype, "checked", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Option.prototype, "value", null);
Option = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-option'
}), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object])], Option);
var _a, _b;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__list_list__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return RadioGroup; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var RADIO_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Provider"](__WEBPACK_IMPORTED_MODULE_1__angular_common__["NG_VALUE_ACCESSOR"], { useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return RadioGroup;
    }), multi: true });
/**
 * @name RadioGroup
 * @description
 * A radio group is a group of [radio buttons](../RadioButton). It allows
 * a user to select at most one radio button from a set. Checking one radio
 * button that belongs to a radio group unchecks any previous checked
 * radio button within the same group.
 *
 * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html)
 * for more information on forms and inputs.
 *
 * @usage
 * ```html
 * <ion-list radio-group [(ngModel)]="autoManufacturers">
 *
 *   <ion-list-header>
 *     Auto Manufacturers
 *   </ion-list-header>
 *
 *   <ion-item>
 *     <ion-label>Cord</ion-label>
 *     <ion-radio value="cord"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Duesenberg</ion-label>
 *     <ion-radio value="duesenberg"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Hudson</ion-label>
 *     <ion-radio value="hudson"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Packard</ion-label>
 *     <ion-radio value="packard"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Studebaker</ion-label>
 *     <ion-radio value="studebaker"></ion-radio>
 *   </ion-item>
 *
 * </ion-list>
 * ```
 *
 * @demo /docs/v2/demos/radio/
 * @see {@link /docs/v2/components#radio Radio Component Docs}
 * @see {@link ../RadioButton RadioButton API Docs}
*/
var RadioGroup = function () {
    function RadioGroup(_renderer, _elementRef) {
        _classCallCheck(this, RadioGroup);

        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._btns = [];
        this._ids = -1;
        this._init = false;
        /**
         * @output {any} expression to be evaluated when selection has been changed
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.id = ++radioGroupIds;
    }
    /**
     * @private
     */

    _createClass(RadioGroup, [{
        key: "writeValue",
        value: function writeValue(val) {
            console.debug('radio group, writeValue', val);
            this.value = val;
            if (this._init) {
                this._update();
                this.onTouched();
                this.ionChange.emit(val);
            }
            this._init = true;
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            var activeButton = this._btns.find(function (b) {
                return b.checked;
            });
            if (activeButton) {
                this._setActive(activeButton);
            }
        }
        /**
         * @private
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            var _this = this;

            this._fn = fn;
            this.onChange = function (val) {
                // onChange used when there's an ngControl
                console.debug('radio group, onChange', val);
                fn(val);
                _this.value = val;
                _this._update();
                _this.onTouched();
                _this.ionChange.emit(val);
            };
        }
        /**
         * @private
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
        /**
         * @private
         */

    }, {
        key: "_update",
        value: function _update() {
            var _this2 = this;

            // loop through each of the radiobuttons
            var hasChecked = false;
            this._btns.forEach(function (radioButton) {
                // check this radiobutton if its value is
                // the same as the radiogroups value
                radioButton.checked = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isCheckedProperty"])(_this2.value, radioButton.value) && !hasChecked;
                if (radioButton.checked) {
                    // if this button is checked, then set it as
                    // the radiogroup's active descendant
                    _this2._setActive(radioButton);
                    hasChecked = true;
                }
            });
        }
    }, {
        key: "_setActive",
        value: function _setActive(radioButton) {
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-activedescendant', radioButton.id);
        }
        /**
         * @private
         */

    }, {
        key: "add",
        value: function add(button) {
            var _this3 = this;

            this._btns.push(button);
            // listen for radiobutton select events
            button.ionSelect.subscribe(function (val) {
                // this radiobutton has been selected
                _this3.onChange(val);
            });
            return this.id + '-' + ++this._ids;
        }
        /**
         * @private
         */

    }, {
        key: "remove",
        value: function remove(button) {
            var index = this._btns.indexOf(button);
            if (index > -1) {
                if (button.value === this.value) {
                    this.value = null;
                }
                this._btns.splice(index, 1);
            }
        }
        /**
         * @private
         */

    }, {
        key: "onChange",

        /**
         * @private
         */
        value: function onChange(val) {
            // onChange used when there is not an ngControl
            console.debug('radio group, onChange w/out ngControl', val);
            this.value = val;
            this._update();
            this.onTouched();
            this.ionChange.emit(val);
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched() {}
    }, {
        key: "_header",
        set: function set(header) {
            if (header) {
                if (!header.id) {
                    header.id = 'rg-hdr-' + this.id;
                }
                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-describedby', header.id);
            }
        }
    }]);

    return RadioGroup;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], RadioGroup.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"])(__WEBPACK_IMPORTED_MODULE_2__list_list__["b" /* ListHeader */]), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], RadioGroup.prototype, "_header", null);
RadioGroup = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[radio-group]',
    host: {
        '[attr.aria-activedescendant]': 'activeId',
        'role': 'radiogroup'
    },
    providers: [RADIO_VALUE_ACCESSOR]
}), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object])], RadioGroup);
var radioGroupIds = -1;
var _a, _b, _c;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_ui_event_manager__ = __webpack_require__(152);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Refresher; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};





/**
 * @name Refresher
 * @description
 * The Refresher provides pull-to-refresh functionality on a content component.
 * Place the `ion-refresher` as the first child of your `ion-content` element.
 *
 * Pages can then listen to the refresher's various output events. The
 * `refresh` output event is fired when the user has pulled down far
 * enough to kick off the refreshing process. Once the async operation
 * has completed and the refreshing should end, call `complete()`.
 *
 * Note: Do not wrap the `ion-refresher` in a `*ngIf`. It will not render
 * properly this way. Please use the `enabled` property instead to
 * display or hide the refresher.
 *
 * @usage
 * ```html
 * <ion-content>
 *
 *   <ion-refresher (ionRefresh)="doRefresh($event)">
 *     <ion-refresher-content></ion-refresher-content>
 *   </ion-refresher>
 *
 * </ion-content>
 * ```
 *
 * ```ts
 * @Component({...})
 * export class NewsFeedPage {
 *
 *   doRefresh(refresher) {
 *     console.log('Begin async operation', refresher);
 *
 *     setTimeout(() => {
 *       console.log('Async operation has ended');
 *       refresher.complete();
 *     }, 2000);
 *   }
 *
 * }
 * ```
 *
 *
 * ## Refresher Content
 *
 * By default, Ionic provides the pulling icon and refreshing spinner that
 * looks best for the platform the user is on. However, you can change the
 * default icon and spinner, along with adding text for each state by
 * adding properties to the child `ion-refresher-content` component.
 *
 *  ```html
 *  <ion-content>
 *
 *    <ion-refresher (ionRefresh)="doRefresh($event)">
 *      <ion-refresher-content
 *        pullingIcon="arrow-dropdown"
 *        pullingText="Pull to refresh"
 *        refreshingSpinner="circles"
 *        refreshingText="Refreshing...">
 *      </ion-refresher-content>
 *    </ion-refresher>
 *
 *  </ion-content>
 *  ```
 *
 *
 * ## Further Customizing Refresher Content
 *
 * The `ion-refresher` component holds the refresh logic.
 * It requires a child component in order to display the content.
 * Ionic uses `ion-refresher-content` by default. This component
 * displays the refresher and changes the look depending
 * on the refresher's state. Separating these components
 * allows developers to create their own refresher content
 * components. You could replace our default content with
 * custom SVG or CSS animations.
 *
 * @demo /docs/v2/demos/refresher/
 *
 */
var Refresher = function () {
    function Refresher(_content, _zone) {
        _classCallCheck(this, Refresher);

        this._content = _content;
        this._zone = _zone;
        this._appliedStyles = false;
        this._lastCheck = 0;
        this._isEnabled = true;
        this._events = new __WEBPACK_IMPORTED_MODULE_4__util_ui_event_manager__["a" /* UIEventManager */](false);
        this._top = '';
        /**
         * The current state which the refresher is in. The refresher's states include:
         *
         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.
         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.
         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.
         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.
         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.
         * - `completing` - The `refreshing` state has finished and the refresher is in the process of closing itself. Once closed, the refresher will go back to the `inactive` state.
         */
        this.state = STATE_INACTIVE;
        /**
         * The Y coordinate of where the user started to the pull down the content.
         */
        this.startY = null;
        /**
         * The current touch or mouse event's Y coordinate.
         */
        this.currentY = null;
        /**
         * The distance between the start of the pull and the current touch or
         * mouse event's Y coordinate.
         */
        this.deltaY = null;
        /**
         * A number representing how far down the user has pulled.
         * The number `0` represents the user hasn't pulled down at all. The
         * number `1`, and anything greater than `1`, represents that the user
         * has pulled far enough down that when they let go then the refresh will
         * happen. If they let go and the number is less than `1`, then the
         * refresh will not happen, and the content will return to it's original
         * position.
         */
        this.progress = 0;
        /**
         * @input {number} The min distance the user must pull down until the
         * refresher can go into the `refreshing` state. Default is `60`.
         */
        this.pullMin = 60;
        /**
         * @input {number} The maximum distance of the pull until the refresher
         * will automatically go into the `refreshing` state. By default, the pull
         * maximum will be the result of `pullMin + 60`.
         */
        this.pullMax = this.pullMin + 60;
        /**
         * @input {number} How many milliseconds it takes to close the refresher. Default is `280`.
         */
        this.closeDuration = 280;
        /**
         * @input {number} How many milliseconds it takes the refresher to to snap back to the `refreshing` state. Default is `280`.
         */
        this.snapbackDuration = 280;
        /**
         * @output {event} When the user lets go and has pulled down far enough, which would be
         * farther than the `pullMin`, then your refresh hander if fired and the state is
         * updated to `refreshing`. From within your refresh handler, you must call the
         * `complete()` method when your async operation has completed.
         */
        this.ionRefresh = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} While the user is pulling down the content and exposing the refresher.
         */
        this.ionPull = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the user begins to start pulling down.
         */
        this.ionStart = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _content.addCssClass('has-refresher');
    }
    /**
     * @input {boolean} If the refresher is enabled or not. This should be used in place of an `ngIf`. Default is `true`.
     */

    _createClass(Refresher, [{
        key: "_onStart",
        value: function _onStart(ev) {
            // if multitouch then get out immediately
            if (ev.touches && ev.touches.length > 1) {
                return false;
            }
            if (this.state !== STATE_INACTIVE) {
                return false;
            }
            var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
            // if the scrollTop is greater than zero then it's
            // not possible to pull the content down yet
            if (scrollHostScrollTop > 0) {
                return false;
            }
            var coord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["pointerCoord"])(ev);
            console.debug('Pull-to-refresh, onStart', ev.type, 'y:', coord.y);
            if (this._content.adjustedTop > 0) {
                var newTop = this._content.adjustedTop + 'px';
                if (this._top !== newTop) {
                    this._top = newTop;
                }
            }
            this.startY = this.currentY = coord.y;
            this.progress = 0;
            this.state = STATE_PULLING;
            return true;
        }
    }, {
        key: "_onMove",
        value: function _onMove(ev) {
            var _this = this;

            // this method can get called like a bazillion times per second,
            // so it's built to be as efficient as possible, and does its
            // best to do any DOM read/writes only when absolutely necessary
            // if multitouch then get out immediately
            if (ev.touches && ev.touches.length > 1) {
                return 1;
            }
            // do nothing if it's actively refreshing
            // or it's in the process of closing
            // or this was never a startY
            if (this.startY === null || this.state === STATE_REFRESHING || this.state === STATE_CANCELLING || this.state === STATE_COMPLETING) {
                return 2;
            }
            // if we just updated stuff less than 16ms ago
            // then don't check again, just chillout plz
            var now = Date.now();
            if (this._lastCheck + 16 > now) {
                return 3;
            }
            // remember the last time we checked all this
            this._lastCheck = now;
            // get the current pointer coordinates
            var coord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["pointerCoord"])(ev);
            this.currentY = coord.y;
            // it's now possible they could be pulling down the content
            // how far have they pulled so far?
            this.deltaY = coord.y - this.startY;
            // don't bother if they're scrolling up
            // and have not already started dragging
            if (this.deltaY <= 0) {
                // the current Y is higher than the starting Y
                // so they scrolled up enough to be ignored
                this.progress = 0;
                if (this.state !== STATE_INACTIVE) {
                    this._zone.run(function () {
                        _this.state = STATE_INACTIVE;
                    });
                }
                if (this._appliedStyles) {
                    // reset the styles only if they were applied
                    this._setCss(0, '', false, '');
                    return 5;
                }
                return 6;
            }
            if (this.state === STATE_INACTIVE) {
                // this refresh is not already actively pulling down
                // get the content's scrollTop
                var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
                // if the scrollTop is greater than zero then it's
                // not possible to pull the content down yet
                if (scrollHostScrollTop > 0) {
                    this.progress = 0;
                    this.startY = null;
                    return 7;
                }
                // content scrolled all the way to the top, and dragging down
                this.state = STATE_PULLING;
            }
            // prevent native scroll events
            ev.preventDefault();
            // the refresher is actively pulling at this point
            // move the scroll element within the content element
            this._setCss(this.deltaY, '0ms', true, '');
            if (!this.deltaY) {
                // don't continue if there's no delta yet
                this.progress = 0;
                return 8;
            }
            // so far so good, let's run this all back within zone now
            this._zone.run(function () {
                _this._onMoveInZone();
            });
        }
    }, {
        key: "_onMoveInZone",
        value: function _onMoveInZone() {
            // set pull progress
            this.progress = this.deltaY / this.pullMin;
            // emit "start" if it hasn't started yet
            if (!this._didStart) {
                this._didStart = true;
                this.ionStart.emit(this);
            }
            // emit "pulling" on every move
            this.ionPull.emit(this);
            // do nothing if the delta is less than the pull threshold
            if (this.deltaY < this.pullMin) {
                // ensure it stays in the pulling state, cuz its not ready yet
                this.state = STATE_PULLING;
                return 2;
            }
            if (this.deltaY > this.pullMax) {
                // they pulled farther than the max, so kick off the refresh
                this._beginRefresh();
                return 3;
            }
            // pulled farther than the pull min!!
            // it is now in the `ready` state!!
            // if they let go then it'll refresh, kerpow!!
            this.state = STATE_READY;
            return 4;
        }
    }, {
        key: "_onEnd",
        value: function _onEnd(ev) {
            var _this2 = this;

            // only run in a zone when absolutely necessary
            if (this.state === STATE_READY) {
                this._zone.run(function () {
                    // they pulled down far enough, so it's ready to refresh
                    _this2._beginRefresh();
                });
            } else if (this.state === STATE_PULLING) {
                this._zone.run(function () {
                    // they were pulling down, but didn't pull down far enough
                    // set the content back to it's original location
                    // and close the refresher
                    // set that the refresh is actively cancelling
                    _this2.cancel();
                });
            }
            // reset on any touchend/mouseup
            this.startY = null;
        }
    }, {
        key: "_beginRefresh",
        value: function _beginRefresh() {
            // assumes we're already back in a zone
            // they pulled down far enough, so it's ready to refresh
            this.state = STATE_REFRESHING;
            // place the content in a hangout position while it thinks
            this._setCss(this.pullMin, this.snapbackDuration + 'ms', true, '');
            // emit "refresh" because it was pulled down far enough
            // and they let go to begin refreshing
            this.ionRefresh.emit(this);
        }
        /**
         * Call `complete()` when your async operation has completed.
         * For example, the `refreshing` state is while the app is performing
         * an asynchronous operation, such as receiving more data from an
         * AJAX request. Once the data has been received, you then call this
         * method to signify that the refreshing has completed and to close
         * the refresher. This method also changes the refresher's state from
         * `refreshing` to `completing`.
         */

    }, {
        key: "complete",
        value: function complete() {
            this._close(STATE_COMPLETING, '120ms');
        }
        /**
         * Changes the refresher's state from `refreshing` to `cancelling`.
         */

    }, {
        key: "cancel",
        value: function cancel() {
            this._close(STATE_CANCELLING, '');
        }
    }, {
        key: "_close",
        value: function _close(state, delay) {
            var timer;
            function close(ev) {
                // closing is done, return to inactive state
                if (ev) {
                    clearTimeout(timer);
                }
                this.state = STATE_INACTIVE;
                this.progress = 0;
                this._didStart = this.startY = this.currentY = this.deltaY = null;
                this._setCss(0, '0ms', false, '');
            }
            // create fallback timer incase something goes wrong with transitionEnd event
            timer = setTimeout(close.bind(this), 600);
            // create transition end event on the content's scroll element
            this._content.onScrollElementTransitionEnd(close.bind(this));
            // reset set the styles on the scroll element
            // set that the refresh is actively cancelling/completing
            this.state = state;
            this._setCss(0, '', true, delay);
            if (this._pointerEvents) {
                this._pointerEvents.stop();
            }
        }
    }, {
        key: "_setCss",
        value: function _setCss(y, duration, overflowVisible, delay) {
            this._appliedStyles = y > 0;
            var content = this._content;
            content.setScrollElementStyle(__WEBPACK_IMPORTED_MODULE_2__util_dom__["CSS"].transform, y > 0 ? 'translateY(' + y + 'px) translateZ(0px)' : 'translateZ(0px)');
            content.setScrollElementStyle(__WEBPACK_IMPORTED_MODULE_2__util_dom__["CSS"].transitionDuration, duration);
            content.setScrollElementStyle(__WEBPACK_IMPORTED_MODULE_2__util_dom__["CSS"].transitionDelay, delay);
            content.setScrollElementStyle('overflow', overflowVisible ? 'hidden' : '');
        }
    }, {
        key: "_setListeners",
        value: function _setListeners(shouldListen) {
            this._events.unlistenAll();
            this._pointerEvents = null;
            if (shouldListen) {
                this._pointerEvents = this._events.pointerEvents(this._content.getScrollElement(), this._onStart.bind(this), this._onMove.bind(this), this._onEnd.bind(this));
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngOnInit",
        value: function ngOnInit() {
            // bind event listeners
            // save the unregister listener functions to use onDestroy
            this._setListeners(this._isEnabled);
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._setListeners(false);
        }
    }, {
        key: "enabled",
        get: function get() {
            return this._isEnabled;
        },
        set: function set(val) {
            this._isEnabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isTrueProperty"])(val);
            this._setListeners(this._isEnabled);
        }
    }]);

    return Refresher;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Refresher.prototype, "pullMin", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Refresher.prototype, "pullMax", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Refresher.prototype, "closeDuration", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Refresher.prototype, "snapbackDuration", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Refresher.prototype, "enabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Refresher.prototype, "ionRefresh", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], Refresher.prototype, "ionPull", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _c || Object)], Refresher.prototype, "ionStart", void 0);
Refresher = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-refresher',
    host: {
        '[class.refresher-active]': 'state !== "inactive"',
        '[style.top]': '_top'
    }
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"])()), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__content_content__["a" /* Content */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__content_content__["a" /* Content */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _e || Object])], Refresher);
var STATE_INACTIVE = 'inactive';
var STATE_PULLING = 'pulling';
var STATE_READY = 'ready';
var STATE_REFRESHING = 'refreshing';
var STATE_CANCELLING = 'cancelling';
var STATE_COMPLETING = 'completing';
var _a, _b, _c, _d, _e;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs__ = __webpack_require__(205);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Tab; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};








/**
 * @name Tab
 * @description
 * The Tab component, written `<ion-tab>`, is styled based on the mode and should
 * be used in conjunction with the [Tabs](../Tabs/) component.
 *
 * Each tab has a separate navigation controller. For more information on using
 * navigation controllers take a look at the [NavController API Docs](../../nav/NavController/).
 *
 * See the [Tabs API Docs](../Tabs/) for more details on configuring Tabs.
 *
 * @usage
 *
 * To add a basic tab, you can use the following markup where the `root` property
 * is the page you want to load for that tab, `tabTitle` is the optional text to
 * display on the tab, and `tabIcon` is the optional [icon](../../icon/Icon/).
 *
 * ```html
 * <ion-tabs>
 *  <ion-tab [root]="chatRoot" tabTitle="Chat" tabIcon="chat"><ion-tab>
 * </ion-tabs>
 * ```
 *
 * Then, in your class you can set `chatRoot` to an imported class:
 *
 * ```ts
 * import {ChatPage} from '../chat/chat';
 *
 * export class Tabs {
 *   // here we'll set the property of chatRoot to
 *   // the imported class of ChatPage
 *   chatRoot = ChatPage;
 *
 *   constructor() {
 *
 *   }
 * }
 * ```
 *
 * You can also pass some parameters to the root page of the tab through
 * `rootParams`. Below we pass `chatParams` to the Chat tab:
 *
 * ```html
 * <ion-tabs>
 *  <ion-tab [root]="chatRoot" [rootParams]="chatParams" tabTitle="Chat" tabIcon="chat"><ion-tab>
 * </ion-tabs>
 * ```
 *
 * ```ts
 * export class Tabs {
 *   chatRoot = ChatPage;
 *
 *   // set some user information on chatParams
 *   chatParams = {
 *     user1: "admin",
 *     user2: "ionic"
 *   };
 *
 *   constructor() {
 *
 *   }
 * }
 * ```
 *
 * And in `ChatPage` you can get the data from `NavParams`:
 *
 * ```ts
 * export class ChatPage {
 *   constructor(navParams: NavParams) {
 *     console.log("Passed params", navParams.data);
 *   }
 * }
 * ```
 *
 * Sometimes you may want to call a method instead of navigating to a new
 * page. You can use the `(ionSelect)` event to call a method on your class when
 * the tab is selected. Below is an example of presenting a modal from one of
 * the tabs.
 *
 * ```html
 * <ion-tabs preloadTabs="false">
 *   <ion-tab (ionSelect)="chat()"></ion-tab>
 * </ion-tabs>
 * ```
 *
 * ```ts
 * export class Tabs {
 *   constructor(nav: NavController) {
 *     this.nav = nav;
 *   }
 *
 *   chat() {
 *     let modal = Modal.create(ChatPage);
 *     this.nav.present(modal);
 *   }
 * }
 * ```
 *
 *
 * @demo /docs/v2/demos/tabs/
 * @see {@link /docs/v2/components#tabs Tabs Component Docs}
 * @see {@link ../../tabs/Tabs Tabs API Docs}
 * @see {@link ../../nav/Nav Nav API Docs}
 * @see {@link ../../nav/NavController NavController API Docs}
 */
var Tab = function (_NavController) {
    _inherits(Tab, _NavController);

    function Tab(parent, app, config, keyboard, elementRef, zone, renderer, compiler, _cd) {
        _classCallCheck(this, Tab);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tab).call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler));
        // A Tab is a NavController for its child pages

        _this.parent = parent;
        _this._cd = _cd;
        _this._isEnabled = true;
        _this._isShown = true;
        /**
         * @output {Tab} Method to call when the current tab is selected
         */
        _this.ionSelect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        parent.add(_this);
        if (parent.rootNav) {
            _this._sbEnabled = parent.rootNav.isSwipeBackEnabled();
        }
        _this._panelId = 'tabpanel-' + _this.id;
        _this._btnId = 'tab-' + _this.id;
        return _this;
    }
    /**
     * @input {boolean} If the tab is enabled or not. If the tab
     * is not enabled then the tab button will still show, however,
     * the button will appear grayed out and will not be clickable.
     * Defaults to `true`.
     */

    _createClass(Tab, [{
        key: "ngOnInit",

        /**
         * @private
         */
        value: function ngOnInit() {
            this.tabBadgeStyle = this.tabBadgeStyle ? this.tabBadgeStyle : 'default';
        }
        /**
         * @private
         */

    }, {
        key: "load",
        value: function load(opts, done) {
            if (!this._loaded && this.root) {
                this.push(this.root, this.rootParams, opts).then(function () {
                    done(true);
                });
                this._loaded = true;
            } else {
                done(false);
            }
        }
        /**
         * @private
         */

    }, {
        key: "preload",
        value: function preload(wait) {
            var _this2 = this;

            this._loadTmr = setTimeout(function () {
                if (!_this2._loaded) {
                    console.debug('Tabs, preload', _this2.id);
                    _this2.load({
                        animate: false,
                        preload: true
                    }, function () {});
                }
            }, wait);
        }
        /**
         * @private
         */

    }, {
        key: "loadPage",
        value: function loadPage(viewCtrl, viewport, opts, done) {
            var _this3 = this;

            var isTabSubPage = this.parent.subPages && viewCtrl.index > 0;
            if (isTabSubPage) {
                viewport = this.parent.portal;
            }
            _get(Object.getPrototypeOf(Tab.prototype), "loadPage", this).call(this, viewCtrl, viewport, opts, function () {
                if (isTabSubPage) {
                    // add the .tab-subpage css class to tabs pages that should act like subpages
                    var pageEleRef = viewCtrl.pageRef();
                    if (pageEleRef) {
                        _this3._renderer.setElementClass(pageEleRef.nativeElement, 'tab-subpage', true);
                    }
                }
                done();
            });
        }
        /**
         * @private
         */

    }, {
        key: "setSelected",
        value: function setSelected(isSelected) {
            this.isSelected = isSelected;
            if (isSelected) {
                // this is the selected tab, detect changes
                this._cd.reattach();
            } else {
                // this tab is not selected, do not detect changes
                this._cd.detach();
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",

        /**
         * @private
         */
        value: function ngOnDestroy() {
            clearTimeout(this._loadTmr);
            _get(Object.getPrototypeOf(Tab.prototype), "ngOnDestroy", this).call(this);
        }
    }, {
        key: "enabled",
        get: function get() {
            return this._isEnabled;
        },
        set: function set(val) {
            this._isEnabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
        }
        /**
         * @input {boolean} If the tab button is visible within the
         * tabbar or not. Defaults to `true`.
         */

    }, {
        key: "show",
        get: function get() {
            return this._isShown;
        },
        set: function set(val) {
            this._isShown = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
        }
        /**
         * @input {boolean} Whether it's possible to swipe-to-go-back on this tab or not.
         */

    }, {
        key: "swipeBackEnabled",
        get: function get() {
            return this._sbEnabled;
        },
        set: function set(val) {
            this._sbEnabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
        }
        /**
         * @private
         */

    }, {
        key: "_vp",
        set: function set(val) {
            this.setViewport(val);
        }
    }, {
        key: "index",
        get: function get() {
            return this.parent.getIndex(this);
        }
    }]);

    return Tab;
}(__WEBPACK_IMPORTED_MODULE_6__nav_nav_controller__["a" /* NavController */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Tab.prototype, "root", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Tab.prototype, "rootParams", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Tab.prototype, "tabTitle", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Tab.prototype, "tabIcon", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Tab.prototype, "tabBadge", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Tab.prototype, "tabBadgeStyle", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Tab.prototype, "enabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Tab.prototype, "show", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Tab.prototype, "swipeBackEnabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Tab.prototype, "ionSelect", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('viewport', { read: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _b || Object), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _c || Object])], Tab.prototype, "_vp", null);
Tab = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-tab',
    host: {
        '[class.show-tab]': 'isSelected',
        '[attr.id]': '_panelId',
        '[attr.aria-labelledby]': '_btnId',
        'role': 'tabpanel'
    },
    template: '<div #viewport></div><div class="nav-decor"></div>',
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return __WEBPACK_IMPORTED_MODULE_7__tabs__["a" /* Tabs */];
}))), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__tabs__["a" /* Tabs */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__tabs__["a" /* Tabs */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_5__util_keyboard__["Keyboard"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__util_keyboard__["Keyboard"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"]) === 'function' && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"]) === 'function' && _m || Object])], Tab);
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gesture__ = __webpack_require__(322);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(207);

/* harmony export */ __webpack_require__.d(exports, "DragGesture", function() { return DragGesture; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



/**
 * @private
 */
var DragGesture = function (_Gesture) {
    _inherits(DragGesture, _Gesture);

    function DragGesture(element) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, DragGesture);

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["a" /* defaults */])(opts, {});
        return _possibleConstructorReturn(this, Object.getPrototypeOf(DragGesture).call(this, element, opts));
    }

    _createClass(DragGesture, [{
        key: 'listen',
        value: function listen() {
            var _this2 = this;

            _get(Object.getPrototypeOf(DragGesture.prototype), 'listen', this).call(this);
            this.on('panstart', function (ev) {
                if (_this2.onDragStart(ev) !== false) {
                    _this2.dragging = true;
                }
            });
            this.on('panmove', function (ev) {
                if (!_this2.dragging) return;
                if (_this2.onDrag(ev) === false) {
                    _this2.dragging = false;
                }
            });
            this.on('panend', function (ev) {
                if (!_this2.dragging) return;
                _this2.onDragEnd(ev);
                _this2.dragging = false;
            });
        }
    }, {
        key: 'onDrag',
        value: function onDrag(ev) {
            return true;
        }
    }, {
        key: 'onDragStart',
        value: function onDragStart(ev) {
            return true;
        }
    }, {
        key: 'onDragEnd',
        value: function onDragEnd(ev) {}
    }]);

    return DragGesture;
}(__WEBPACK_IMPORTED_MODULE_0__gesture__["Gesture"]);

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__hammer__ = __webpack_require__(916);

/* harmony export */ __webpack_require__.d(exports, "Gesture", function() { return Gesture; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}



/**
 * @private
 * A gesture recognizer class.
 *
 * TODO(mlynch): Re-enable the DOM event simulation that was causing issues (or verify hammer does this already, it might);
 */
var Gesture = function () {
    function Gesture(element) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, Gesture);

        this._callbacks = {};
        this.isListening = false;
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["a" /* defaults */])(opts, {
            domEvents: true
        });
        this.element = element;
        // Map 'x' or 'y' string to hammerjs opts
        this.direction = opts.direction || 'x';
        opts.direction = this.direction === 'x' ? __WEBPACK_IMPORTED_MODULE_1__hammer__["a" /* DIRECTION_HORIZONTAL */] : __WEBPACK_IMPORTED_MODULE_1__hammer__["b" /* DIRECTION_VERTICAL */];
        this._options = opts;
    }

    _createClass(Gesture, [{
        key: 'options',
        value: function options(opts) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* assign */])(this._options, opts);
        }
    }, {
        key: 'on',
        value: function on(type, cb) {
            if (type === 'pinch' || type === 'rotate') {
                this._hammer.get('pinch').set({ enable: true });
            }
            this._hammer.on(type, cb);
            (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
        }
    }, {
        key: 'off',
        value: function off(type, cb) {
            this._hammer.off(type, this._callbacks[type] ? cb : null);
        }
    }, {
        key: 'listen',
        value: function listen() {
            if (!this.isListening) {
                this._hammer = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__hammer__["c" /* Hammer */])(this.element, this._options);
            }
            this.isListening = true;
        }
    }, {
        key: 'unlisten',
        value: function unlisten() {
            var eventType = void 0;
            var i = void 0;
            if (this._hammer && this.isListening) {
                for (eventType in this._callbacks) {
                    for (i = 0; i < this._callbacks[eventType].length; i++) {
                        this._hammer.off(eventType, this._callbacks[eventType]);
                    }
                }
                this._hammer.destroy();
            }
            this._callbacks = {};
            this._hammer = null;
            this.isListening = false;
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.unlisten();
            this.element = this._options = null;
        }
    }]);

    return Gesture;
}();

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__slide_gesture__ = __webpack_require__(502);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "SlideEdgeGesture", function() { return SlideEdgeGesture; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}




var SlideEdgeGesture = function (_SlideGesture) {
    _inherits(SlideEdgeGesture, _SlideGesture);

    function SlideEdgeGesture(element) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, SlideEdgeGesture);

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["defaults"])(opts, {
            edge: 'left',
            maxEdgeStart: 50
        });

        // Can check corners through use of eg 'left top'

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideEdgeGesture).call(this, element, opts));

        _this.edges = opts.edge.split(' ');
        _this.maxEdgeStart = opts.maxEdgeStart;
        return _this;
    }

    _createClass(SlideEdgeGesture, [{
        key: 'canStart',
        value: function canStart(ev) {
            var _this2 = this;

            this._d = this.getContainerDimensions();
            return this.edges.every(function (edge) {
                return _this2._checkEdge(edge, ev.center);
            });
        }
    }, {
        key: 'getContainerDimensions',
        value: function getContainerDimensions() {
            return {
                left: 0,
                top: 0,
                width: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["windowDimensions"])().width,
                height: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["windowDimensions"])().height
            };
        }
    }, {
        key: '_checkEdge',
        value: function _checkEdge(edge, pos) {
            switch (edge) {
                case 'left':
                    return pos.x <= this._d.left + this.maxEdgeStart;
                case 'right':
                    return pos.x >= this._d.width - this.maxEdgeStart;
                case 'top':
                    return pos.y <= this._d.top + this.maxEdgeStart;
                case 'bottom':
                    return pos.y >= this._d.height - this.maxEdgeStart;
            }
        }
    }]);

    return SlideEdgeGesture;
}(__WEBPACK_IMPORTED_MODULE_0__slide_gesture__["SlideGesture"]);

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "Storage", function() { return Storage; });
/* harmony export */ __webpack_require__.d(exports, "StorageEngine", function() { return StorageEngine; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * Storage is an easy way to store key/value pairs and other complicated
 * data in a way that uses a variety of storage engines underneath.
 *
 * For most cases, we recommend the SqlStorage system as it will store
 * data in a file in the app's sandbox. LocalStorage should ONLY be used
 * for temporary data as it may be 'cleaned up' by the operation system
 * during low disk space situations.
 */
/**
 * @private
*/

var Storage = function () {
    function Storage(strategyCls, options) {
        _classCallCheck(this, Storage);

        this._strategy = new strategyCls(options);
    }

    _createClass(Storage, [{
        key: 'get',
        value: function get(key) {
            return this._strategy.get(key);
        }
    }, {
        key: 'getJson',
        value: function getJson(key) {
            return this.get(key).then(function (value) {
                try {
                    return JSON.parse(value);
                } catch (e) {
                    console.warn('Storage getJson(): unable to parse value for key', key, ' as JSON');
                    throw e; // rethrowing exception so it can be handled with .catch()
                }
            });
        }
    }, {
        key: 'setJson',
        value: function setJson(key, value) {
            try {
                return this.set(key, JSON.stringify(value));
            } catch (e) {
                return Promise.reject(e);
            }
        }
    }, {
        key: 'set',
        value: function set(key, value) {
            return this._strategy.set(key, value);
        }
    }, {
        key: 'remove',
        value: function remove(key) {
            return this._strategy.remove(key);
        }
    }, {
        key: 'query',
        value: function query(_query, params) {
            return this._strategy.query(_query, params);
        }
    }, {
        key: 'clear',
        value: function clear() {
            return this._strategy.clear();
        }
    }]);

    return Storage;
}();
/**
 * @private
*/



var StorageEngine = function () {
    function StorageEngine() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, StorageEngine);
    }

    _createClass(StorageEngine, [{
        key: 'get',
        value: function get(key) {
            throw Error('get() not implemented for this storage engine');
        }
    }, {
        key: 'set',
        value: function set(key, value) {
            throw Error('set() not implemented for this storage engine');
        }
    }, {
        key: 'remove',
        value: function remove(key) {
            throw Error('remove() not implemented for this storage engine');
        }
    }, {
        key: 'query',
        value: function query(_query2, params) {
            throw Error('query() not implemented for this storage engine');
        }
    }, {
        key: 'clear',
        value: function clear() {
            throw Error('clear() not implemented for this storage engine');
        }
    }]);

    return StorageEngine;
}();



/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "Translate", function() { return Translate; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * @private
 * Provide multi-language and i18n support in your app. Translate works by
 * mapping full strings to language translated ones. That means that you don't
 * need to provide strings for your default language, just new languages.
 *
 * Note: The Angular team will be building an
 * [Localization/Internationalization](https://docs.google.com/document/d/1mwyOFsAD-bPoXTk3Hthq0CAcGXCUw-BtTJMR4nGTY-0/view#heading=h.ixg45w3363q)
 * provider, so this Translation provider may not be further developed.
 *
 * @usage
 * ```js
 * Translate.translations({
 *   'de': {
 *     'Welcome to MyApp': 'Willkommen auf'
 *   }
 * })
 *
 * Changing the default language:
 *
 * Translate.setLanguage('de');
 * ```
 *
 * Usage in a template:
 *
 * ```js
 * <span>{{ 'Welcome to MyApp' | translate }}
 * ```
 */
var Translate = function () {
    function Translate() {
        _classCallCheck(this, Translate);

        this._transMap = {};
        this._language = {};
    }

    _createClass(Translate, [{
        key: 'translations',
        value: function translations(lang, map) {
            this._transMap[lang] = map;
        }
    }, {
        key: 'setLanguage',
        value: function setLanguage(lang) {
            this._language = lang;
        }
    }, {
        key: 'getTranslations',
        value: function getTranslations(lang) {
            return this._transMap[lang];
        }
    }, {
        key: 'translate',
        value: function translate(key, lang) {
            // If the language isn't specified and we have no overridden one, return the string passed.
            if (!lang && !this._language) {
                return key;
            }
            var setLanguage = lang || this._language;
            var map = this.getTranslations(setLanguage);
            if (!map) {
                console.warn('I18N: No translation for key', key, 'using language', setLanguage);
                return '';
            }
            return this._getTranslation(map, key);
        }
    }, {
        key: '_getTranslation',
        value: function _getTranslation(map, key) {
            return map && map[key] || '';
        }
    }]);

    return Translate;
}();

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "ClickBlock", function() { return ClickBlock; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}


var CSS_CLICK_BLOCK = 'click-block-active';
var DEFAULT_EXPIRE = 330;
var cbEle = void 0;
var fallbackTimerId = void 0;
var isShowing = false;
/**
 * @private
 */
var ClickBlock = function () {
    function ClickBlock() {
        _classCallCheck(this, ClickBlock);

        this._enabled = false;
    }

    _createClass(ClickBlock, [{
        key: 'enable',
        value: function enable() {
            cbEle = document.createElement('click-block');
            document.body.appendChild(cbEle);
            cbEle.addEventListener('touchmove', function (ev) {
                ev.preventDefault();
                ev.stopPropagation();
            });
            this._enabled = true;
        }
    }, {
        key: 'show',
        value: function show(shouldShow, expire) {
            if (this._enabled) {
                if (shouldShow) {
                    _show(expire);
                } else {
                    hide();
                }
            }
        }
    }]);

    return ClickBlock;
}();
function _show(expire) {
    clearTimeout(fallbackTimerId);
    fallbackTimerId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__dom__["nativeTimeout"])(hide, expire || DEFAULT_EXPIRE);
    if (!isShowing) {
        cbEle.classList.add(CSS_CLICK_BLOCK);
        isShowing = true;
    }
}
function hide() {
    clearTimeout(fallbackTimerId);
    if (isShowing) {
        cbEle.classList.remove(CSS_CLICK_BLOCK);
        isShowing = false;
    }
}

/***/ },
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var lang_1 = __webpack_require__(11);
var lang_2 = __webpack_require__(11);
exports.looseIdentical = lang_2.looseIdentical;
exports.uninitialized = new Object();
function devModeEqual(a, b) {
    if (collection_1.isListLikeIterable(a) && collection_1.isListLikeIterable(b)) {
        return collection_1.areIterablesEqual(a, b, devModeEqual);
    } else if (!collection_1.isListLikeIterable(a) && !lang_1.isPrimitive(a) && !collection_1.isListLikeIterable(b) && !lang_1.isPrimitive(b)) {
        return true;
    } else {
        return lang_1.looseIdentical(a, b);
    }
}
exports.devModeEqual = devModeEqual;
/**
 * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the
 * reference
 * has not changed.
 *
 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 * @stable
 */
var WrappedValue = function () {
    function WrappedValue(wrapped) {
        this.wrapped = wrapped;
    }
    WrappedValue.wrap = function (value) {
        return new WrappedValue(value);
    };
    return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
/**
 * Helper class for unwrapping WrappedValue s
 */
var ValueUnwrapper = function () {
    function ValueUnwrapper() {
        this.hasWrappedValue = false;
    }
    ValueUnwrapper.prototype.unwrap = function (value) {
        if (value instanceof WrappedValue) {
            this.hasWrappedValue = true;
            return value.wrapped;
        }
        return value;
    };
    ValueUnwrapper.prototype.reset = function () {
        this.hasWrappedValue = false;
    };
    return ValueUnwrapper;
}();
exports.ValueUnwrapper = ValueUnwrapper;
/**
 * Represents a basic change from a previous to a new value.
 * @stable
 */
var SimpleChange = function () {
    function SimpleChange(previousValue, currentValue) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
    }
    /**
     * Check whether the new value is the first value assigned.
     */
    SimpleChange.prototype.isFirstChange = function () {
        return this.previousValue === exports.uninitialized;
    };
    return SimpleChange;
}();
exports.SimpleChange = SimpleChange;
//# sourceMappingURL=change_detection_util.js.map

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
/**
 * Describes the current state of the change detector.
 */
(function (ChangeDetectorState) {
  /**
   * `NeverChecked` means that the change detector has not been checked yet, and
   * initialization methods should be called during detection.
   */
  ChangeDetectorState[ChangeDetectorState["NeverChecked"] = 0] = "NeverChecked";
  /**
   * `CheckedBefore` means that the change detector has successfully completed at least
   * one detection previously.
   */
  ChangeDetectorState[ChangeDetectorState["CheckedBefore"] = 1] = "CheckedBefore";
  /**
   * `Errored` means that the change detector encountered an error checking a binding
   * or calling a directive lifecycle method and is now in an inconsistent state. Change
   * detectors in this state will no longer detect changes.
   */
  ChangeDetectorState[ChangeDetectorState["Errored"] = 2] = "Errored";
})(exports.ChangeDetectorState || (exports.ChangeDetectorState = {}));
var ChangeDetectorState = exports.ChangeDetectorState;
/**
 * Describes within the change detector which strategy will be used the next time change
 * detection is triggered.
 * @stable
 */
(function (ChangeDetectionStrategy) {
  /**
   * `CheckedOnce` means that after calling detectChanges the mode of the change detector
   * will become `Checked`.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
  /**
   * `Checked` means that the change detector should be skipped until its mode changes to
   * `CheckOnce`.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
  /**
   * `CheckAlways` means that after calling detectChanges the mode of the change detector
   * will remain `CheckAlways`.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
  /**
   * `Detached` means that the change detector sub tree is not a part of the main tree and
   * should be skipped.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
  /**
   * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
  /**
   * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
/**
 * List of possible {@link ChangeDetectionStrategy} values.
 */
exports.CHANGE_DETECTION_STRATEGY_VALUES = [ChangeDetectionStrategy.CheckOnce, ChangeDetectionStrategy.Checked, ChangeDetectionStrategy.CheckAlways, ChangeDetectionStrategy.Detached, ChangeDetectionStrategy.OnPush, ChangeDetectionStrategy.Default];
/**
 * List of possible {@link ChangeDetectorState} values.
 */
exports.CHANGE_DETECTOR_STATE_VALUES = [ChangeDetectorState.NeverChecked, ChangeDetectorState.CheckedBefore, ChangeDetectorState.Errored];
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
  return lang_1.isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
//# sourceMappingURL=constants.js.map

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
/* @ts2dart_const */
var DefaultKeyValueDifferFactory = function () {
    function DefaultKeyValueDifferFactory() {}
    DefaultKeyValueDifferFactory.prototype.supports = function (obj) {
        return obj instanceof Map || lang_1.isJsObject(obj);
    };
    DefaultKeyValueDifferFactory.prototype.create = function (cdRef) {
        return new DefaultKeyValueDiffer();
    };
    return DefaultKeyValueDifferFactory;
}();
exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
var DefaultKeyValueDiffer = function () {
    function DefaultKeyValueDiffer() {
        this._records = new Map();
        this._mapHead = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
        get: function get() {
            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
        var record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
        var record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
        var record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
        var record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
        var record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.diff = function (map) {
        if (lang_1.isBlank(map)) map = collection_1.MapWrapper.createFromPairs([]);
        if (!(map instanceof Map || lang_1.isJsObject(map))) {
            throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
        }
        if (this.check(map)) {
            return this;
        } else {
            return null;
        }
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function () {};
    DefaultKeyValueDiffer.prototype.check = function (map) {
        var _this = this;
        this._reset();
        var records = this._records;
        var oldSeqRecord = this._mapHead;
        var lastOldSeqRecord = null;
        var lastNewSeqRecord = null;
        var seqChanged = false;
        this._forEach(map, function (value /** TODO #9100 */, key /** TODO #9100 */) {
            var newSeqRecord;
            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
                newSeqRecord = oldSeqRecord;
                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
                    oldSeqRecord.currentValue = value;
                    _this._addToChanges(oldSeqRecord);
                }
            } else {
                seqChanged = true;
                if (oldSeqRecord !== null) {
                    oldSeqRecord._next = null;
                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                    _this._addToRemovals(oldSeqRecord);
                }
                if (records.has(key)) {
                    newSeqRecord = records.get(key);
                } else {
                    newSeqRecord = new KeyValueChangeRecord(key);
                    records.set(key, newSeqRecord);
                    newSeqRecord.currentValue = value;
                    _this._addToAdditions(newSeqRecord);
                }
            }
            if (seqChanged) {
                if (_this._isInRemovals(newSeqRecord)) {
                    _this._removeFromRemovals(newSeqRecord);
                }
                if (lastNewSeqRecord == null) {
                    _this._mapHead = newSeqRecord;
                } else {
                    lastNewSeqRecord._next = newSeqRecord;
                }
            }
            lastOldSeqRecord = oldSeqRecord;
            lastNewSeqRecord = newSeqRecord;
            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
        });
        this._truncate(lastOldSeqRecord, oldSeqRecord);
        return this.isDirty;
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var record;
            // Record the state of the mapping
            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            // todo(vicb) once assert is supported
            // assert(() {
            //  var r = _changesHead;
            //  while (r != null) {
            //    var nextRecord = r._nextChanged;
            //    r._nextChanged = null;
            //    r = nextRecord;
            //  }
            //
            //  r = _additionsHead;
            //  while (r != null) {
            //    var nextRecord = r._nextAdded;
            //    r._nextAdded = null;
            //    r = nextRecord;
            //  }
            //
            //  r = _removalsHead;
            //  while (r != null) {
            //    var nextRecord = r._nextRemoved;
            //    r._nextRemoved = null;
            //    r = nextRecord;
            //  }
            //
            //  return true;
            //});
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = this._removalsTail = null;
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
        while (record !== null) {
            if (lastRecord === null) {
                this._mapHead = null;
            } else {
                lastRecord._next = null;
            }
            var nextRecord = record._next;
            // todo(vicb) assert
            // assert((() {
            //  record._next = null;
            //  return true;
            //}));
            this._addToRemovals(record);
            lastRecord = record;
            record = nextRecord;
        }
        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
            rec.previousValue = rec.currentValue;
            rec.currentValue = null;
            this._records.delete(rec.key);
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
        return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
        // todo(vicb) assert
        // assert(record._next == null);
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        // assert(record._nextRemoved == null);
        // assert(record._prevRemoved == null);
        if (this._removalsHead === null) {
            this._removalsHead = this._removalsTail = record;
        } else {
            this._removalsTail._nextRemoved = record;
            record._prevRemoved = this._removalsTail;
            this._removalsTail = record;
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
        var next = record._next;
        if (prev === null) {
            this._mapHead = next;
        } else {
            prev._next = next;
        }
        // todo(vicb) assert
        // assert((() {
        //  record._next = null;
        //  return true;
        //})());
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
        // todo(vicb) assert
        // assert(record._next == null);
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        var prev = record._prevRemoved;
        var next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        } else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        } else {
            next._prevRemoved = prev;
        }
        record._prevRemoved = record._nextRemoved = null;
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
        // todo(vicb): assert
        // assert(record._next == null);
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        // assert(record._nextRemoved == null);
        // assert(record._prevRemoved == null);
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        } else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
        // todo(vicb) assert
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        // assert(record._nextRemoved == null);
        // assert(record._prevRemoved == null);
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        } else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
        }
    };
    DefaultKeyValueDiffer.prototype.toString = function () {
        var items = [];
        var previous = [];
        var changes = [];
        var additions = [];
        var removals = [];
        var record;
        for (record = this._mapHead; record !== null; record = record._next) {
            items.push(lang_1.stringify(record));
        }
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            previous.push(lang_1.stringify(record));
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            changes.push(lang_1.stringify(record));
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(lang_1.stringify(record));
        }
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(lang_1.stringify(record));
        }
        return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._forEach = function (obj /** TODO #9100 */, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        } else {
            collection_1.StringMapWrapper.forEach(obj, fn);
        }
    };
    return DefaultKeyValueDiffer;
}();
exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
/**
 * @stable
 */
var KeyValueChangeRecord = function () {
    function KeyValueChangeRecord(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextChanged = null;
    }
    KeyValueChangeRecord.prototype.toString = function () {
        return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' + lang_1.stringify(this.currentValue) + ']';
    };
    return KeyValueChangeRecord;
}();
exports.KeyValueChangeRecord = KeyValueChangeRecord;
//# sourceMappingURL=default_keyvalue_differ.js.map

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var di_1 = __webpack_require__(258);
var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 * @ts2dart_const
 * @stable
 */
var IterableDiffers = function () {
    /*@ts2dart_const*/
    function IterableDiffers(factories) {
        this.factories = factories;
    }
    IterableDiffers.create = function (factories, parent) {
        if (lang_1.isPresent(parent)) {
            var copied = collection_1.ListWrapper.clone(parent.factories);
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
        } else {
            return new IterableDiffers(factories);
        }
    };
    /**
     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {@link IterableDiffers} instance with the provided factories and return a new
     * {@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link IterableDiffer} available.
     *
     * ### Example
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     */
    IterableDiffers.extend = function (factories) {
        return new di_1.Provider(IterableDiffers, {
            useFactory: function useFactory(parent) {
                if (lang_1.isBlank(parent)) {
                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new exceptions_1.BaseException('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
        });
    };
    IterableDiffers.prototype.find = function (iterable) {
        var factory = this.factories.find(function (f) {
            return f.supports(iterable);
        });
        if (lang_1.isPresent(factory)) {
            return factory;
        } else {
            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "' of type '" + lang_1.getTypeNameForDebugging(iterable) + "'");
        }
    };
    return IterableDiffers;
}();
exports.IterableDiffers = IterableDiffers;
//# sourceMappingURL=iterable_differs.js.map

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var di_1 = __webpack_require__(258);
var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 * @ts2dart_const
 * @stable
 */
var KeyValueDiffers = function () {
    /*@ts2dart_const*/
    function KeyValueDiffers(factories) {
        this.factories = factories;
    }
    KeyValueDiffers.create = function (factories, parent) {
        if (lang_1.isPresent(parent)) {
            var copied = collection_1.ListWrapper.clone(parent.factories);
            factories = factories.concat(copied);
            return new KeyValueDiffers(factories);
        } else {
            return new KeyValueDiffers(factories);
        }
    };
    /**
     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
     * {@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link KeyValueDiffer} available.
     *
     * ### Example
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     */
    KeyValueDiffers.extend = function (factories) {
        return new di_1.Provider(KeyValueDiffers, {
            useFactory: function useFactory(parent) {
                if (lang_1.isBlank(parent)) {
                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new exceptions_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
        });
    };
    KeyValueDiffers.prototype.find = function (kv) {
        var factory = this.factories.find(function (f) {
            return f.supports(kv);
        });
        if (lang_1.isPresent(factory)) {
            return factory;
        } else {
            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
        }
    };
    return KeyValueDiffers;
}();
exports.KeyValueDiffers = KeyValueDiffers;
//# sourceMappingURL=keyvalue_differs.js.map

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
var collection_1 = __webpack_require__(31);
var reflection_1 = __webpack_require__(406);
var reflective_key_1 = __webpack_require__(264);
var metadata_1 = __webpack_require__(177);
var reflective_exceptions_1 = __webpack_require__(263);
var forward_ref_1 = __webpack_require__(260);
var provider_1 = __webpack_require__(262);
var provider_util_1 = __webpack_require__(615);
/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */
var ReflectiveDependency = function () {
    function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
        this.key = key;
        this.optional = optional;
        this.lowerBoundVisibility = lowerBoundVisibility;
        this.upperBoundVisibility = upperBoundVisibility;
        this.properties = properties;
    }
    ReflectiveDependency.fromKey = function (key) {
        return new ReflectiveDependency(key, false, null, null, []);
    };
    return ReflectiveDependency;
}();
exports.ReflectiveDependency = ReflectiveDependency;
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = function () {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
        get: function get() {
            return this.resolvedFactories[0];
        },
        enumerable: true,
        configurable: true
    });
    return ResolvedReflectiveProvider_;
}();
exports.ResolvedReflectiveProvider_ = ResolvedReflectiveProvider_;
/**
 * An internal resolved representation of a factory function created by resolving {@link Provider}.
 * @experimental
 */
var ResolvedReflectiveFactory = function () {
    function ResolvedReflectiveFactory(
    /**
     * Factory function which can return an instance of an object represented by a key.
     */
    factory,
    /**
     * Arguments (dependencies) to the `factory` function.
     */
    dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
}();
exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
/**
 * Resolve a single provider.
 */
function resolveReflectiveFactory(provider) {
    var factoryFn;
    var resolvedDeps;
    if (lang_1.isPresent(provider.useClass)) {
        var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
        factoryFn = reflection_1.reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    } else if (lang_1.isPresent(provider.useExisting)) {
        factoryFn = function factoryFn(aliasInstance /** TODO #9100 */) {
            return aliasInstance;
        };
        resolvedDeps = [ReflectiveDependency.fromKey(reflective_key_1.ReflectiveKey.get(provider.useExisting))];
    } else if (lang_1.isPresent(provider.useFactory)) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies);
    } else {
        factoryFn = function factoryFn() {
            return provider.useValue;
        };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
exports.resolveReflectiveFactory = resolveReflectiveFactory;
/**
 * Converts the {@link Provider} into {@link ResolvedProvider}.
 *
 * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
 * convenience provider syntax.
 */
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(reflective_key_1.ReflectiveKey.get(provider.token), [resolveReflectiveFactory(provider)], provider.multi);
}
exports.resolveReflectiveProvider = resolveReflectiveProvider;
/**
 * Resolve a list of Providers.
 */
function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []);
    var resolved = normalized.map(resolveReflectiveProvider);
    return collection_1.MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));
}
exports.resolveReflectiveProviders = resolveReflectiveProviders;
/**
 * Merges a list of ResolvedProviders into a list where
 * each key is contained exactly once and multi providers
 * have been merged.
 */
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
        var provider = providers[i];
        var existing = normalizedProvidersMap.get(provider.key.id);
        if (lang_1.isPresent(existing)) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw new reflective_exceptions_1.MixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (var j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            } else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        } else {
            var resolvedProvider;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, collection_1.ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
            } else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
exports.mergeResolvedReflectiveProviders = mergeResolvedReflectiveProviders;
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof lang_1.Type) {
            res.push(provider_1.provide(b, { useClass: b }));
        } else if (b instanceof provider_1.Provider) {
            res.push(b);
        } else if (provider_util_1.isProviderLiteral(b)) {
            res.push(provider_util_1.createProvider(b));
        } else if (b instanceof Array) {
            _normalizeProviders(b, res);
        } else if (b instanceof provider_1.ProviderBuilder) {
            throw new reflective_exceptions_1.InvalidProviderError(b.token);
        } else {
            throw new reflective_exceptions_1.InvalidProviderError(b);
        }
    });
    return res;
}
function constructDependencies(typeOrFunc, dependencies) {
    if (lang_1.isBlank(dependencies)) {
        return _dependenciesFor(typeOrFunc);
    } else {
        var params = dependencies.map(function (t) {
            return [t];
        });
        return dependencies.map(function (t) {
            return _extractToken(typeOrFunc, t, params);
        });
    }
}
exports.constructDependencies = constructDependencies;
function _dependenciesFor(typeOrFunc) {
    var params = reflection_1.reflector.parameters(typeOrFunc);
    if (lang_1.isBlank(params)) return [];
    if (params.some(lang_1.isBlank)) {
        throw new reflective_exceptions_1.NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) {
        return _extractToken(typeOrFunc, p, params);
    });
}
function _extractToken(typeOrFunc /** TODO #9100 */, metadata /** TODO #9100 */ /*any[] | any*/, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!lang_1.isArray(metadata)) {
        if (metadata instanceof metadata_1.InjectMetadata) {
            return _createDependency(metadata.token, optional, null, null, depProps);
        } else {
            return _createDependency(metadata, optional, null, null, depProps);
        }
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
        var paramMetadata = metadata[i];
        if (paramMetadata instanceof lang_1.Type) {
            token = paramMetadata;
        } else if (paramMetadata instanceof metadata_1.InjectMetadata) {
            token = paramMetadata.token;
        } else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
            optional = true;
        } else if (paramMetadata instanceof metadata_1.SelfMetadata) {
            upperBoundVisibility = paramMetadata;
        } else if (paramMetadata instanceof metadata_1.HostMetadata) {
            upperBoundVisibility = paramMetadata;
        } else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
            lowerBoundVisibility = paramMetadata;
        } else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
            if (lang_1.isPresent(paramMetadata.token)) {
                token = paramMetadata.token;
            }
            depProps.push(paramMetadata);
        }
    }
    token = forward_ref_1.resolveForwardRef(token);
    if (lang_1.isPresent(token)) {
        return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    } else {
        throw new reflective_exceptions_1.NoAnnotationError(typeOrFunc, params);
    }
}
function _createDependency(token /** TODO #9100 */, optional /** TODO #9100 */, lowerBoundVisibility /** TODO #9100 */, upperBoundVisibility /** TODO #9100 */, depProps /** TODO #9100 */) {
    return new ReflectiveDependency(reflective_key_1.ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
}
//# sourceMappingURL=reflective_provider.js.map

/***/ },
/* 399 */
/***/ function(module, exports) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * A base class for the WrappedException that can be used to identify
 * a WrappedException from ExceptionHandler without adding circular
 * dependency.
 */
var BaseWrappedException = function (_super) {
    __extends(BaseWrappedException, _super);
    function BaseWrappedException(message) {
        _super.call(this, message);
    }
    Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
        get: function get() {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
        get: function get() {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWrappedException.prototype, "originalException", {
        get: function get() {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
        get: function get() {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWrappedException.prototype, "context", {
        get: function get() {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWrappedException.prototype, "message", {
        get: function get() {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
//# sourceMappingURL=base_wrapped_exception.js.map

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var base_wrapped_exception_1 = __webpack_require__(399);
var collection_1 = __webpack_require__(31);
var lang_1 = __webpack_require__(11);
var _ArrayLogger = function () {
    function _ArrayLogger() {
        this.res = [];
    }
    _ArrayLogger.prototype.log = function (s) {
        this.res.push(s);
    };
    _ArrayLogger.prototype.logError = function (s) {
        this.res.push(s);
    };
    _ArrayLogger.prototype.logGroup = function (s) {
        this.res.push(s);
    };
    _ArrayLogger.prototype.logGroupEnd = function () {};
    ;
    return _ArrayLogger;
}();
/**
 * Provides a hook for centralized exception handling.
 *
 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
 * intercept error handling,
 * write a custom exception handler that replaces this default as appropriate for your app.
 *
 * ### Example
 *
 * ```javascript
 *
 * class MyExceptionHandler implements ExceptionHandler {
 *   call(error, stackTrace = null, reason = null) {
 *     // do something with the exception
 *   }
 * }
 *
 * bootstrap(MyApp, {provide: ExceptionHandler, useClass: MyExceptionHandler}])
 *
 * ```
 * @stable
 */
var ExceptionHandler = function () {
    function ExceptionHandler(_logger, _rethrowException) {
        if (_rethrowException === void 0) {
            _rethrowException = true;
        }
        this._logger = _logger;
        this._rethrowException = _rethrowException;
    }
    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
        if (stackTrace === void 0) {
            stackTrace = null;
        }
        if (reason === void 0) {
            reason = null;
        }
        var l = new _ArrayLogger();
        var e = new ExceptionHandler(l, false);
        e.call(exception, stackTrace, reason);
        return l.res.join('\n');
    };
    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
        if (stackTrace === void 0) {
            stackTrace = null;
        }
        if (reason === void 0) {
            reason = null;
        }
        var originalException = this._findOriginalException(exception);
        var originalStack = this._findOriginalStack(exception);
        var context = this._findContext(exception);
        this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
            this._logger.logError('STACKTRACE:');
            this._logger.logError(this._longStackTrace(stackTrace));
        }
        if (lang_1.isPresent(reason)) {
            this._logger.logError("REASON: " + reason);
        }
        if (lang_1.isPresent(originalException)) {
            this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
        }
        if (lang_1.isPresent(originalStack)) {
            this._logger.logError('ORIGINAL STACKTRACE:');
            this._logger.logError(this._longStackTrace(originalStack));
        }
        if (lang_1.isPresent(context)) {
            this._logger.logError('ERROR CONTEXT:');
            this._logger.logError(context);
        }
        this._logger.logGroupEnd();
        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
        // when an exception happens. If we do not rethrow, bootstrap will always succeed.
        if (this._rethrowException) throw exception;
    };
    /** @internal */
    ExceptionHandler.prototype._extractMessage = function (exception) {
        return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
    };
    /** @internal */
    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
    };
    /** @internal */
    ExceptionHandler.prototype._findContext = function (exception) {
        try {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
        } catch (e) {
            // exception.context can throw an exception. if it happens, we ignore the context.
            return null;
        }
    };
    /** @internal */
    ExceptionHandler.prototype._findOriginalException = function (exception) {
        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
        var e = exception.originalException;
        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
            e = e.originalException;
        }
        return e;
    };
    /** @internal */
    ExceptionHandler.prototype._findOriginalStack = function (exception) {
        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
        var e = exception;
        var stack = exception.originalStack;
        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
            e = e.originalException;
            if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                stack = e.originalStack;
            }
        }
        return stack;
    };
    return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var decorators_1 = __webpack_require__(259);
var async_1 = __webpack_require__(178);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var reflection_1 = __webpack_require__(406);
var component_factory_1 = __webpack_require__(265);
/**
 * Low-level service for loading {@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 * @experimental
 */
var ComponentResolver = function () {
    function ComponentResolver() {}
    return ComponentResolver;
}();
exports.ComponentResolver = ComponentResolver;
function _isComponentFactory(type) {
    return type instanceof component_factory_1.ComponentFactory;
}
var ReflectorComponentResolver = function (_super) {
    __extends(ReflectorComponentResolver, _super);
    function ReflectorComponentResolver() {
        _super.apply(this, arguments);
    }
    ReflectorComponentResolver.prototype.resolveComponent = function (component) {
        if (lang_1.isString(component)) {
            return async_1.PromiseWrapper.reject(new exceptions_1.BaseException("Cannot resolve component using '" + component + "'."), null);
        }
        var metadatas = reflection_1.reflector.annotations(component);
        var componentFactory = metadatas.find(_isComponentFactory);
        if (lang_1.isBlank(componentFactory)) {
            throw new exceptions_1.BaseException("No precompiled component " + lang_1.stringify(component) + " found");
        }
        return async_1.PromiseWrapper.resolve(componentFactory);
    };
    ReflectorComponentResolver.prototype.clearCache = function () {};
    /** @nocollapse */
    ReflectorComponentResolver.decorators = [{ type: decorators_1.Injectable }];
    return ReflectorComponentResolver;
}(ComponentResolver);
exports.ReflectorComponentResolver = ReflectorComponentResolver;
//# sourceMappingURL=component_resolver.js.map

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(29);
/**
 * An error thrown if application changes model breaking the top-down data flow.
 *
 * This exception is only thrown in dev mode.
 *
 * <!-- TODO: Add a link once the dev mode option is configurable -->
 *
 * ### Example
 *
 * ```typescript
 * @Component({
 *   selector: 'parent',
 *   template: `
 *     <child [prop]="parentProp"></child>
 *   `,
 *   directives: [forwardRef(() => Child)]
 * })
 * class Parent {
 *   parentProp = "init";
 * }
 *
 * @Directive({selector: 'child', inputs: ['prop']})
 * class Child {
 *   constructor(public parent: Parent) {}
 *
 *   set prop(v) {
 *     // this updates the parent property, which is disallowed during change detection
 *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
 *     this.parent.parentProp = "updated";
 *   }
 * }
 * ```
 * @stable
 */
var ExpressionChangedAfterItHasBeenCheckedException = function (_super) {
    __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
    function ExpressionChangedAfterItHasBeenCheckedException(oldValue, currValue, context) {
        _super.call(this, "Expression has changed after it was checked. " + ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
    }
    return ExpressionChangedAfterItHasBeenCheckedException;
}(exceptions_1.BaseException);
exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
/**
 * Thrown when an exception was raised during view creation, change detection or destruction.
 *
 * This error wraps the original exception to attach additional contextual information that can
 * be useful for debugging.
 * @stable
 */
var ViewWrappedException = function (_super) {
    __extends(ViewWrappedException, _super);
    function ViewWrappedException(originalException, originalStack, context) {
        _super.call(this, "Error in " + context.source, originalException, originalStack, context);
    }
    return ViewWrappedException;
}(exceptions_1.WrappedException);
exports.ViewWrappedException = ViewWrappedException;
/**
 * Thrown when a destroyed view is used.
 *
 * This error indicates a bug in the framework.
 *
 * This is an internal Angular error.
 * @stable
 */
var ViewDestroyedException = function (_super) {
    __extends(ViewDestroyedException, _super);
    function ViewDestroyedException(details) {
        _super.call(this, "Attempt to use a destroyed view: " + details);
    }
    return ViewDestroyedException;
}(exceptions_1.BaseException);
exports.ViewDestroyedException = ViewDestroyedException;
//# sourceMappingURL=exceptions.js.map

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(178);
var collection_1 = __webpack_require__(31);
var lang_1 = __webpack_require__(11);
var element_1 = __webpack_require__(179);
var view_ref_1 = __webpack_require__(623);
var view_type_1 = __webpack_require__(136);
var view_utils_1 = __webpack_require__(267);
var change_detection_1 = __webpack_require__(176);
var profile_1 = __webpack_require__(405);
var exceptions_1 = __webpack_require__(402);
var debug_context_1 = __webpack_require__(619);
var element_injector_1 = __webpack_require__(620);
var animation_group_player_1 = __webpack_require__(611);
var active_animation_players_map_1 = __webpack_require__(610);
var _scope_check = profile_1.wtfCreateScope("AppView#check(ascii id)");
/**
 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
 *
 */
var AppView = function () {
    function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
        this.clazz = clazz;
        this.componentType = componentType;
        this.type = type;
        this.viewUtils = viewUtils;
        this.parentInjector = parentInjector;
        this.declarationAppElement = declarationAppElement;
        this.cdMode = cdMode;
        this.contentChildren = [];
        this.viewChildren = [];
        this.viewContainerElement = null;
        // The names of the below fields must be kept in sync with codegen_name_util.ts or
        // change detection will fail.
        this.cdState = change_detection_1.ChangeDetectorState.NeverChecked;
        this.destroyed = false;
        this.activeAnimationPlayers = new active_animation_players_map_1.ActiveAnimationPlayersMap();
        this.ref = new view_ref_1.ViewRef_(this);
        if (type === view_type_1.ViewType.COMPONENT || type === view_type_1.ViewType.HOST) {
            this.renderer = viewUtils.renderComponent(componentType);
        } else {
            this.renderer = declarationAppElement.parentView.renderer;
        }
    }
    AppView.prototype.cancelActiveAnimation = function (element, animationName, removeAllAnimations) {
        if (removeAllAnimations === void 0) {
            removeAllAnimations = false;
        }
        if (removeAllAnimations) {
            this.activeAnimationPlayers.findAllPlayersByElement(element).forEach(function (player) {
                return player.destroy();
            });
        } else {
            var player = this.activeAnimationPlayers.find(element, animationName);
            if (lang_1.isPresent(player)) {
                player.destroy();
            }
        }
    };
    AppView.prototype.registerAndStartAnimation = function (element, animationName, player) {
        var _this = this;
        this.activeAnimationPlayers.set(element, animationName, player);
        player.onDone(function () {
            _this.activeAnimationPlayers.remove(element, animationName);
        });
        player.play();
    };
    AppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {
        this.context = context;
        var projectableNodes;
        switch (this.type) {
            case view_type_1.ViewType.COMPONENT:
                projectableNodes = view_utils_1.ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
                break;
            case view_type_1.ViewType.EMBEDDED:
                projectableNodes = this.declarationAppElement.parentView.projectableNodes;
                break;
            case view_type_1.ViewType.HOST:
                // Note: Don't ensure the slot count for the projectableNodes as we store
                // them only for the contained component view (which will later check the slot count...)
                projectableNodes = givenProjectableNodes;
                break;
        }
        this._hasExternalHostElement = lang_1.isPresent(rootSelectorOrNode);
        this.projectableNodes = projectableNodes;
        return this.createInternal(rootSelectorOrNode);
    };
    /**
     * Overwritten by implementations.
     * Returns the AppElement for the host element for ViewType.HOST.
     */
    AppView.prototype.createInternal = function (rootSelectorOrNode) {
        return null;
    };
    AppView.prototype.init = function (rootNodesOrAppElements, allNodes, disposables, subscriptions) {
        this.rootNodesOrAppElements = rootNodesOrAppElements;
        this.allNodes = allNodes;
        this.disposables = disposables;
        this.subscriptions = subscriptions;
        if (this.type === view_type_1.ViewType.COMPONENT) {
            // Note: the render nodes have been attached to their host element
            // in the ViewFactory already.
            this.declarationAppElement.parentView.viewChildren.push(this);
            this.dirtyParentQueriesInternal();
        }
    };
    AppView.prototype.selectOrCreateHostElement = function (elementName, rootSelectorOrNode, debugInfo) {
        var hostElement;
        if (lang_1.isPresent(rootSelectorOrNode)) {
            hostElement = this.renderer.selectRootElement(rootSelectorOrNode, debugInfo);
        } else {
            hostElement = this.renderer.createElement(null, elementName, debugInfo);
        }
        return hostElement;
    };
    AppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
        return this.injectorGetInternal(token, nodeIndex, notFoundResult);
    };
    /**
     * Overwritten by implementations
     */
    AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
        return notFoundResult;
    };
    AppView.prototype.injector = function (nodeIndex) {
        if (lang_1.isPresent(nodeIndex)) {
            return new element_injector_1.ElementInjector(this, nodeIndex);
        } else {
            return this.parentInjector;
        }
    };
    AppView.prototype.destroy = function () {
        if (this._hasExternalHostElement) {
            this.renderer.detachView(this.flatRootNodes);
        } else if (lang_1.isPresent(this.viewContainerElement)) {
            this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
        }
        this._destroyRecurse();
    };
    AppView.prototype._destroyRecurse = function () {
        if (this.destroyed) {
            return;
        }
        var children = this.contentChildren;
        for (var i = 0; i < children.length; i++) {
            children[i]._destroyRecurse();
        }
        children = this.viewChildren;
        for (var i = 0; i < children.length; i++) {
            children[i]._destroyRecurse();
        }
        this.destroyLocal();
        this.destroyed = true;
    };
    AppView.prototype.destroyLocal = function () {
        var _this = this;
        var hostElement = this.type === view_type_1.ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;
        for (var i = 0; i < this.disposables.length; i++) {
            this.disposables[i]();
        }
        for (var i = 0; i < this.subscriptions.length; i++) {
            async_1.ObservableWrapper.dispose(this.subscriptions[i]);
        }
        this.destroyInternal();
        this.dirtyParentQueriesInternal();
        if (this.activeAnimationPlayers.length == 0) {
            this.renderer.destroyView(hostElement, this.allNodes);
        } else {
            var player = new animation_group_player_1.AnimationGroupPlayer(this.activeAnimationPlayers.getAllPlayers());
            player.onDone(function () {
                _this.renderer.destroyView(hostElement, _this.allNodes);
            });
        }
    };
    /**
     * Overwritten by implementations
     */
    AppView.prototype.destroyInternal = function () {};
    /**
     * Overwritten by implementations
     */
    AppView.prototype.detachInternal = function () {};
    AppView.prototype.detach = function () {
        var _this = this;
        this.detachInternal();
        if (this.activeAnimationPlayers.length == 0) {
            this.renderer.detachView(this.flatRootNodes);
        } else {
            var player = new animation_group_player_1.AnimationGroupPlayer(this.activeAnimationPlayers.getAllPlayers());
            player.onDone(function () {
                _this.renderer.detachView(_this.flatRootNodes);
            });
        }
    };
    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
        get: function get() {
            return this.ref;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "parent", {
        get: function get() {
            return lang_1.isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "flatRootNodes", {
        get: function get() {
            return view_utils_1.flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "lastRootNode", {
        get: function get() {
            var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
            return _findLastRenderNode(lastNode);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Overwritten by implementations
     */
    AppView.prototype.dirtyParentQueriesInternal = function () {};
    AppView.prototype.detectChanges = function (throwOnChange) {
        var s = _scope_check(this.clazz);
        if (this.cdMode === change_detection_1.ChangeDetectionStrategy.Checked || this.cdState === change_detection_1.ChangeDetectorState.Errored) return;
        if (this.destroyed) {
            this.throwDestroyedError('detectChanges');
        }
        this.detectChangesInternal(throwOnChange);
        if (this.cdMode === change_detection_1.ChangeDetectionStrategy.CheckOnce) this.cdMode = change_detection_1.ChangeDetectionStrategy.Checked;
        this.cdState = change_detection_1.ChangeDetectorState.CheckedBefore;
        profile_1.wtfLeave(s);
    };
    /**
     * Overwritten by implementations
     */
    AppView.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    AppView.prototype.detectContentChildrenChanges = function (throwOnChange) {
        for (var i = 0; i < this.contentChildren.length; ++i) {
            var child = this.contentChildren[i];
            if (child.cdMode === change_detection_1.ChangeDetectionStrategy.Detached) continue;
            child.detectChanges(throwOnChange);
        }
    };
    AppView.prototype.detectViewChildrenChanges = function (throwOnChange) {
        for (var i = 0; i < this.viewChildren.length; ++i) {
            var child = this.viewChildren[i];
            if (child.cdMode === change_detection_1.ChangeDetectionStrategy.Detached) continue;
            child.detectChanges(throwOnChange);
        }
    };
    AppView.prototype.addToContentChildren = function (renderAppElement) {
        renderAppElement.parentView.contentChildren.push(this);
        this.viewContainerElement = renderAppElement;
        this.dirtyParentQueriesInternal();
    };
    AppView.prototype.removeFromContentChildren = function (renderAppElement) {
        collection_1.ListWrapper.remove(renderAppElement.parentView.contentChildren, this);
        this.dirtyParentQueriesInternal();
        this.viewContainerElement = null;
    };
    AppView.prototype.markAsCheckOnce = function () {
        this.cdMode = change_detection_1.ChangeDetectionStrategy.CheckOnce;
    };
    AppView.prototype.markPathToRootAsCheckOnce = function () {
        var c = this;
        while (lang_1.isPresent(c) && c.cdMode !== change_detection_1.ChangeDetectionStrategy.Detached) {
            if (c.cdMode === change_detection_1.ChangeDetectionStrategy.Checked) {
                c.cdMode = change_detection_1.ChangeDetectionStrategy.CheckOnce;
            }
            var parentEl = c.type === view_type_1.ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
            c = lang_1.isPresent(parentEl) ? parentEl.parentView : null;
        }
    };
    AppView.prototype.eventHandler = function (cb) {
        return cb;
    };
    AppView.prototype.throwDestroyedError = function (details) {
        throw new exceptions_1.ViewDestroyedException(details);
    };
    return AppView;
}();
exports.AppView = AppView;
var DebugAppView = function (_super) {
    __extends(DebugAppView, _super);
    function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
        _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);
        this.staticNodeDebugInfos = staticNodeDebugInfos;
        this._currentDebugContext = null;
    }
    DebugAppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {
        this._resetDebug();
        try {
            return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
        } catch (e) {
            this._rethrowWithContext(e, e.stack);
            throw e;
        }
    };
    DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
        this._resetDebug();
        try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
        } catch (e) {
            this._rethrowWithContext(e, e.stack);
            throw e;
        }
    };
    DebugAppView.prototype.detach = function () {
        this._resetDebug();
        try {
            _super.prototype.detach.call(this);
        } catch (e) {
            this._rethrowWithContext(e, e.stack);
            throw e;
        }
    };
    DebugAppView.prototype.destroyLocal = function () {
        this._resetDebug();
        try {
            _super.prototype.destroyLocal.call(this);
        } catch (e) {
            this._rethrowWithContext(e, e.stack);
            throw e;
        }
    };
    DebugAppView.prototype.detectChanges = function (throwOnChange) {
        this._resetDebug();
        try {
            _super.prototype.detectChanges.call(this, throwOnChange);
        } catch (e) {
            this._rethrowWithContext(e, e.stack);
            throw e;
        }
    };
    DebugAppView.prototype._resetDebug = function () {
        this._currentDebugContext = null;
    };
    DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
        return this._currentDebugContext = new debug_context_1.DebugContext(this, nodeIndex, rowNum, colNum);
    };
    DebugAppView.prototype._rethrowWithContext = function (e, stack) {
        if (!(e instanceof exceptions_1.ViewWrappedException)) {
            if (!(e instanceof exceptions_1.ExpressionChangedAfterItHasBeenCheckedException)) {
                this.cdState = change_detection_1.ChangeDetectorState.Errored;
            }
            if (lang_1.isPresent(this._currentDebugContext)) {
                throw new exceptions_1.ViewWrappedException(e, stack, this._currentDebugContext);
            }
        }
    };
    DebugAppView.prototype.eventHandler = function (cb) {
        var _this = this;
        var superHandler = _super.prototype.eventHandler.call(this, cb);
        return function (event /** TODO #9100 */) {
            _this._resetDebug();
            try {
                return superHandler(event);
            } catch (e) {
                _this._rethrowWithContext(e, e.stack);
                throw e;
            }
        };
    };
    return DebugAppView;
}(AppView);
exports.DebugAppView = DebugAppView;
function _findLastRenderNode(node) {
    var lastNode;
    if (node instanceof element_1.AppElement) {
        var appEl = node;
        lastNode = appEl.nativeElement;
        if (lang_1.isPresent(appEl.nestedViews)) {
            // Note: Views might have no root nodes at all!
            for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
                var nestedView = appEl.nestedViews[i];
                if (nestedView.rootNodesOrAppElements.length > 0) {
                    lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
                }
            }
        }
    } else {
        lastNode = node;
    }
    return lastNode;
}
//# sourceMappingURL=view.js.map

/***/ },
/* 404 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * Defines template and style encapsulation options available for Component's {@link View}.
 *
 * See {@link ViewMetadata#encapsulation}.
 * @stable
 */

(function (ViewEncapsulation) {
  /**
   * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
   * Element and pre-processing the style rules provided via
   * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
   * attribute to all selectors.
   *
   * This is the default option.
   */
  ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
  /**
   * Use the native encapsulation mechanism of the renderer.
   *
   * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
   * creating a ShadowRoot for Component's Host Element.
   */
  ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
  /**
   * Don't provide any template or style encapsulation.
   */
  ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
var ViewEncapsulation = exports.ViewEncapsulation;
exports.VIEW_ENCAPSULATION_VALUES = [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None];
/**
 * Metadata properties available for configuring Views.
 *
 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
 * within the template.
 *
 * When a component is instantiated, the template is loaded into the component's shadow root, and
 * the expressions and statements in the template are evaluated against the component.
 *
 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
 *
 * ### Example
 *
 * ```
 * @Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 *   directives: [GreetUser, Bold]
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 * @ts2dart_const
 */
var ViewMetadata = function () {
  function ViewMetadata(_a) {
    var _b = _a === void 0 ? {} : _a,
        templateUrl = _b.templateUrl,
        template = _b.template,
        directives = _b.directives,
        pipes = _b.pipes,
        encapsulation = _b.encapsulation,
        styles = _b.styles,
        styleUrls = _b.styleUrls,
        animations = _b.animations,
        interpolation = _b.interpolation;
    this.templateUrl = templateUrl;
    this.template = template;
    this.styleUrls = styleUrls;
    this.styles = styles;
    this.directives = directives;
    this.pipes = pipes;
    this.encapsulation = encapsulation;
    this.animations = animations;
    this.interpolation = interpolation;
  }
  return ViewMetadata;
}();
exports.ViewMetadata = ViewMetadata;
//# sourceMappingURL=view.js.map

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var impl = __webpack_require__(624);
// Change exports to const once https://github.com/angular/ts2dart/issues/150
/**
 * True if WTF is enabled.
 */
exports.wtfEnabled = impl.detectWTF();
function noopScope(arg0, arg1) {
  return null;
}
/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 * @experimental
 */
exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function (signature, flags) {
  return noopScope;
};
/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 * @experimental
 */
exports.wtfLeave = exports.wtfEnabled ? impl.leave : function (s, r) {
  return r;
};
/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 * @experimental
 */
exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function (rangeType, action) {
  return null;
};
/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 * @experimental
 */
exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function (r) {
  return null;
};
//# sourceMappingURL=profile.js.map

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var reflection_capabilities_1 = __webpack_require__(625);
var reflector_1 = __webpack_require__(407);
var reflector_2 = __webpack_require__(407);
exports.ReflectionInfo = reflector_2.ReflectionInfo;
exports.Reflector = reflector_2.Reflector;
/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */
exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
//# sourceMappingURL=reflection.js.map

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var reflector_reader_1 = __webpack_require__(626);
/**
 * Reflective information about a symbol, including annotations, interfaces, and other metadata.
 */
var ReflectionInfo = function () {
    function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
        this.annotations = annotations;
        this.parameters = parameters;
        this.factory = factory;
        this.interfaces = interfaces;
        this.propMetadata = propMetadata;
    }
    return ReflectionInfo;
}();
exports.ReflectionInfo = ReflectionInfo;
/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */
var Reflector = function (_super) {
    __extends(Reflector, _super);
    function Reflector(reflectionCapabilities) {
        _super.call(this);
        /** @internal */
        this._injectableInfo = new collection_1.Map();
        /** @internal */
        this._getters = new collection_1.Map();
        /** @internal */
        this._setters = new collection_1.Map();
        /** @internal */
        this._methods = new collection_1.Map();
        this._usedKeys = null;
        this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.updateCapabilities = function (caps) {
        this.reflectionCapabilities = caps;
    };
    Reflector.prototype.isReflectionEnabled = function () {
        return this.reflectionCapabilities.isReflectionEnabled();
    };
    /**
     * Causes `this` reflector to track keys used to access
     * {@link ReflectionInfo} objects.
     */
    Reflector.prototype.trackUsage = function () {
        this._usedKeys = new collection_1.Set();
    };
    /**
     * Lists types for which reflection information was not requested since
     * {@link #trackUsage} was called. This list could later be audited as
     * potential dead code.
     */
    Reflector.prototype.listUnusedKeys = function () {
        var _this = this;
        if (this._usedKeys == null) {
            throw new exceptions_1.BaseException('Usage tracking is disabled');
        }
        var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
        return allTypes.filter(function (key) {
            return !collection_1.SetWrapper.has(_this._usedKeys, key);
        });
    };
    Reflector.prototype.registerFunction = function (func, funcInfo) {
        this._injectableInfo.set(func, funcInfo);
    };
    Reflector.prototype.registerType = function (type, typeInfo) {
        this._injectableInfo.set(type, typeInfo);
    };
    Reflector.prototype.registerGetters = function (getters) {
        _mergeMaps(this._getters, getters);
    };
    Reflector.prototype.registerSetters = function (setters) {
        _mergeMaps(this._setters, setters);
    };
    Reflector.prototype.registerMethods = function (methods) {
        _mergeMaps(this._methods, methods);
    };
    Reflector.prototype.factory = function (type) {
        if (this._containsReflectionInfo(type)) {
            var res = this._getReflectionInfo(type).factory;
            return lang_1.isPresent(res) ? res : null;
        } else {
            return this.reflectionCapabilities.factory(type);
        }
    };
    Reflector.prototype.parameters = function (typeOrFunc) {
        if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).parameters;
            return lang_1.isPresent(res) ? res : [];
        } else {
            return this.reflectionCapabilities.parameters(typeOrFunc);
        }
    };
    Reflector.prototype.annotations = function (typeOrFunc) {
        if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).annotations;
            return lang_1.isPresent(res) ? res : [];
        } else {
            return this.reflectionCapabilities.annotations(typeOrFunc);
        }
    };
    Reflector.prototype.propMetadata = function (typeOrFunc) {
        if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).propMetadata;
            return lang_1.isPresent(res) ? res : {};
        } else {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
        }
    };
    Reflector.prototype.interfaces = function (type) {
        if (this._injectableInfo.has(type)) {
            var res = this._getReflectionInfo(type).interfaces;
            return lang_1.isPresent(res) ? res : [];
        } else {
            return this.reflectionCapabilities.interfaces(type);
        }
    };
    Reflector.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {
        var interfaces = this.interfaces(type);
        if (interfaces.indexOf(lcInterface) !== -1) {
            return true;
        } else {
            return this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);
        }
    };
    Reflector.prototype.getter = function (name) {
        if (this._getters.has(name)) {
            return this._getters.get(name);
        } else {
            return this.reflectionCapabilities.getter(name);
        }
    };
    Reflector.prototype.setter = function (name) {
        if (this._setters.has(name)) {
            return this._setters.get(name);
        } else {
            return this.reflectionCapabilities.setter(name);
        }
    };
    Reflector.prototype.method = function (name) {
        if (this._methods.has(name)) {
            return this._methods.get(name);
        } else {
            return this.reflectionCapabilities.method(name);
        }
    };
    /** @internal */
    Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
        if (lang_1.isPresent(this._usedKeys)) {
            this._usedKeys.add(typeOrFunc);
        }
        return this._injectableInfo.get(typeOrFunc);
    };
    /** @internal */
    Reflector.prototype._containsReflectionInfo = function (typeOrFunc) {
        return this._injectableInfo.has(typeOrFunc);
    };
    Reflector.prototype.importUri = function (type) {
        return this.reflectionCapabilities.importUri(type);
    };
    return Reflector;
}(reflector_reader_1.ReflectorReader);
exports.Reflector = Reflector;
function _mergeMaps(target, config) {
    collection_1.StringMapWrapper.forEach(config, function (v, k) {
        return target.set(k, v);
    });
}
//# sourceMappingURL=reflector.js.map

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var async_1 = __webpack_require__(178);
var exceptions_1 = __webpack_require__(29);
var ng_zone_impl_1 = __webpack_require__(409);
var ng_zone_impl_2 = __webpack_require__(409);
exports.NgZoneError = ng_zone_impl_2.NgZoneError;
/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
 * ```
 * import {Component, View, NgZone} from '@angular/core';
 * import {NgIf} from '@angular/common';
 *
 * @Component({
 *   selector: 'ng-zone-demo'.
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 *   directives: [NgIf]
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *       // reenter the Angular zone and display done
 *       this._ngZone.run(() => {console.log('Outside Done!') });
 *     }}));
 *   }
 *
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 * @experimental
 */
var NgZone = function () {
    function NgZone(_a) {
        var _this = this;
        var _b = _a.enableLongStackTrace,
            enableLongStackTrace = _b === void 0 ? false : _b;
        this._hasPendingMicrotasks = false;
        this._hasPendingMacrotasks = false;
        /** @internal */
        this._isStable = true;
        /** @internal */
        this._nesting = 0;
        /** @internal */
        this._onUnstable = new async_1.EventEmitter(false);
        /** @internal */
        this._onMicrotaskEmpty = new async_1.EventEmitter(false);
        /** @internal */
        this._onStable = new async_1.EventEmitter(false);
        /** @internal */
        this._onErrorEvents = new async_1.EventEmitter(false);
        this._zoneImpl = new ng_zone_impl_1.NgZoneImpl({
            trace: enableLongStackTrace,
            onEnter: function onEnter() {
                // console.log('ZONE.enter', this._nesting, this._isStable);
                _this._nesting++;
                if (_this._isStable) {
                    _this._isStable = false;
                    _this._onUnstable.emit(null);
                }
            },
            onLeave: function onLeave() {
                _this._nesting--;
                // console.log('ZONE.leave', this._nesting, this._isStable);
                _this._checkStable();
            },
            setMicrotask: function setMicrotask(hasMicrotasks) {
                _this._hasPendingMicrotasks = hasMicrotasks;
                _this._checkStable();
            },
            setMacrotask: function setMacrotask(hasMacrotasks) {
                _this._hasPendingMacrotasks = hasMacrotasks;
            },
            onError: function onError(error) {
                return _this._onErrorEvents.emit(error);
            }
        });
    }
    NgZone.isInAngularZone = function () {
        return ng_zone_impl_1.NgZoneImpl.isInAngularZone();
    };
    NgZone.assertInAngularZone = function () {
        if (!ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
            throw new exceptions_1.BaseException('Expected to be in Angular Zone, but it is not!');
        }
    };
    NgZone.assertNotInAngularZone = function () {
        if (ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
            throw new exceptions_1.BaseException('Expected to not be in Angular Zone, but it is!');
        }
    };
    NgZone.prototype._checkStable = function () {
        var _this = this;
        if (this._nesting == 0) {
            if (!this._hasPendingMicrotasks && !this._isStable) {
                try {
                    // console.log('ZONE.microtaskEmpty');
                    this._nesting++;
                    this._onMicrotaskEmpty.emit(null);
                } finally {
                    this._nesting--;
                    if (!this._hasPendingMicrotasks) {
                        try {
                            // console.log('ZONE.stable', this._nesting, this._isStable);
                            this.runOutsideAngular(function () {
                                return _this._onStable.emit(null);
                            });
                        } finally {
                            this._isStable = true;
                        }
                    }
                }
            }
        }
    };
    ;
    Object.defineProperty(NgZone.prototype, "onUnstable", {
        /**
         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         */
        get: function get() {
            return this._onUnstable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
        /**
         * Notifies when there is no more microtasks enqueue in the current VM Turn.
         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
         * For this reason this event can fire multiple times per VM Turn.
         */
        get: function get() {
            return this._onMicrotaskEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onStable", {
        /**
         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
         * implies we are about to relinquish VM turn.
         * This event gets called just once.
         */
        get: function get() {
            return this._onStable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onError", {
        /**
         * Notify that an error has been delivered.
         */
        get: function get() {
            return this._onErrorEvents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "isStable", {
        /**
         * Whether there are no outstanding microtasks or microtasks.
         */
        get: function get() {
            return this._isStable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
        /**
         * Whether there are any outstanding microtasks.
         */
        get: function get() {
            return this._hasPendingMicrotasks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
        /**
         * Whether there are any outstanding microtasks.
         */
        get: function get() {
            return this._hasPendingMacrotasks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     */
    NgZone.prototype.run = function (fn) {
        return this._zoneImpl.runInner(fn);
    };
    /**
     * Same as #run, except that synchronous errors are caught and forwarded
     * via `onError` and not rethrown.
     */
    NgZone.prototype.runGuarded = function (fn) {
        return this._zoneImpl.runInnerGuarded(fn);
    };
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
     */
    NgZone.prototype.runOutsideAngular = function (fn) {
        return this._zoneImpl.runOuter(fn);
    };
    return NgZone;
}();
exports.NgZone = NgZone;
//# sourceMappingURL=ng_zone.js.map

/***/ },
/* 409 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * Stores error information; delivered via [NgZone.onError] stream.
 * @deprecated
 */

var NgZoneError = function () {
    function NgZoneError(error, stackTrace) {
        this.error = error;
        this.stackTrace = stackTrace;
    }
    return NgZoneError;
}();
exports.NgZoneError = NgZoneError;
var NgZoneImpl = function () {
    function NgZoneImpl(_a) {
        var _this = this;
        var trace = _a.trace,
            onEnter = _a.onEnter,
            onLeave = _a.onLeave,
            setMicrotask = _a.setMicrotask,
            setMacrotask = _a.setMacrotask,
            onError = _a.onError;
        this.onEnter = onEnter;
        this.onLeave = onLeave;
        this.setMicrotask = setMicrotask;
        this.setMacrotask = setMacrotask;
        this.onError = onError;
        if (Zone) {
            this.outer = this.inner = Zone.current;
            if (Zone['wtfZoneSpec']) {
                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
            }
            if (trace && Zone['longStackTraceZoneSpec']) {
                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
            }
            this.inner = this.inner.fork({
                name: 'angular',
                properties: { 'isAngularZone': true },
                onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {
                    try {
                        _this.onEnter();
                        return delegate.invokeTask(target, task, applyThis, applyArgs);
                    } finally {
                        _this.onLeave();
                    }
                },
                onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {
                    try {
                        _this.onEnter();
                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
                    } finally {
                        _this.onLeave();
                    }
                },
                onHasTask: function onHasTask(delegate, current, target, hasTaskState) {
                    delegate.hasTask(target, hasTaskState);
                    if (current == target) {
                        // We are only interested in hasTask events which originate from our zone
                        // (A child hasTask event is not interesting to us)
                        if (hasTaskState.change == 'microTask') {
                            _this.setMicrotask(hasTaskState.microTask);
                        } else if (hasTaskState.change == 'macroTask') {
                            _this.setMacrotask(hasTaskState.macroTask);
                        }
                    }
                },
                onHandleError: function onHandleError(delegate, current, target, error) {
                    delegate.handleError(target, error);
                    _this.onError(new NgZoneError(error, error.stack));
                    return false;
                }
            });
        } else {
            throw new Error('Angular requires Zone.js polyfill.');
        }
    }
    NgZoneImpl.isInAngularZone = function () {
        return Zone.current.get('isAngularZone') === true;
    };
    NgZoneImpl.prototype.runInner = function (fn) {
        return this.inner.run(fn);
    };
    ;
    NgZoneImpl.prototype.runInnerGuarded = function (fn) {
        return this.inner.runGuarded(fn);
    };
    ;
    NgZoneImpl.prototype.runOuter = function (fn) {
        return this.outer.run(fn);
    };
    ;
    return NgZoneImpl;
}();
exports.NgZoneImpl = NgZoneImpl;
//# sourceMappingURL=ng_zone_impl.js.map

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__http__ = __webpack_require__(630);
/* harmony namespace reexport */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_0__http__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(exports, key, function() { return __WEBPACK_IMPORTED_MODULE_0__http__[key]; }) }(__WEBPACK_IMPORT_KEY__));

//# sourceMappingURL=index.js.map

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__facade_lang__ = __webpack_require__(40);
/* unused harmony export JSONP_HOME */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return BrowserJsonp; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var _nextRequestId = 0;
var JSONP_HOME = '__ng_jsonp__';
var _jsonpConnections = null;
function _getJsonpConnections() {
    if (_jsonpConnections === null) {
        _jsonpConnections = __WEBPACK_IMPORTED_MODULE_1__facade_lang__["a" /* global */][JSONP_HOME] = {};
    }
    return _jsonpConnections;
}
var BrowserJsonp = function () {
    function BrowserJsonp() {
        _classCallCheck(this, BrowserJsonp);
    }

    _createClass(BrowserJsonp, [{
        key: 'build',

        // Construct a <script> element with the specified URL
        value: function build(url) {
            var node = document.createElement('script');
            node.src = url;
            return node;
        }
    }, {
        key: 'nextRequestID',
        value: function nextRequestID() {
            return '__req' + _nextRequestId++;
        }
    }, {
        key: 'requestCallback',
        value: function requestCallback(id) {
            return JSONP_HOME + '.' + id + '.finished';
        }
    }, {
        key: 'exposeConnection',
        value: function exposeConnection(id, connection) {
            var connections = _getJsonpConnections();
            connections[id] = connection;
        }
    }, {
        key: 'removeConnection',
        value: function removeConnection(id) {
            var connections = _getJsonpConnections();
            connections[id] = null;
        }
        // Attach the <script> element to the DOM

    }, {
        key: 'send',
        value: function send(node) {
            document.body.appendChild(node);
        }
        // Remove <script> element from the DOM

    }, {
        key: 'cleanup',
        value: function cleanup(node) {
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
    }]);

    return BrowserJsonp;
}();
/** @nocollapse */
BrowserJsonp.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
//# sourceMappingURL=browser_jsonp.js.map

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ && __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default, 'a', __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__base_response_options__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__facade_exceptions__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__interfaces__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__static_response__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__browser_jsonp__ = __webpack_require__(411);

/* harmony export */ __webpack_require__.d(exports, "c", function() { return JSONPConnection; });/* unused harmony export JSONPConnection_ */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return JSONPBackend; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return JSONPBackend_; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }










var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
/**
 * Abstract base class for an in-flight JSONP request.
 */
var JSONPConnection = function JSONPConnection() {
    _classCallCheck(this, JSONPConnection);
};
var JSONPConnection_ = function (_JSONPConnection) {
    _inherits(JSONPConnection_, _JSONPConnection);

    function JSONPConnection_(req, _dom, baseResponseOptions) {
        _classCallCheck(this, JSONPConnection_);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(JSONPConnection_).call(this));

        _this._dom = _dom;
        _this.baseResponseOptions = baseResponseOptions;
        _this._finished = false;
        if (req.method !== __WEBPACK_IMPORTED_MODULE_3__enums__["b" /* RequestMethod */].Get) {
            throw __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__facade_exceptions__["b" /* makeTypeError */])(JSONP_ERR_WRONG_METHOD);
        }
        _this.request = req;
        _this.response = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function (responseObserver) {
            _this.readyState = __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Loading;
            var id = _this._id = _dom.nextRequestID();
            _dom.exposeConnection(id, _this);
            // Workaround Dart
            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
            var callback = _dom.requestCallback(_this._id);
            var url = req.url;
            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
                url = __WEBPACK_IMPORTED_MODULE_5__facade_lang__["i" /* StringWrapper */].replace(url, '=JSONP_CALLBACK&', '=' + callback + '&');
            } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ('=' + callback);
            }
            var script = _this._script = _dom.build(url);
            var onLoad = function onLoad(event) {
                if (_this.readyState === __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Cancelled) return;
                _this.readyState = __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Done;
                _dom.cleanup(script);
                if (!_this._finished) {
                    var _responseOptions = new __WEBPACK_IMPORTED_MODULE_2__base_response_options__["a" /* ResponseOptions */]({ body: JSONP_ERR_NO_CALLBACK, type: __WEBPACK_IMPORTED_MODULE_3__enums__["a" /* ResponseType */].Error, url: url });
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(baseResponseOptions)) {
                        _responseOptions = baseResponseOptions.merge(_responseOptions);
                    }
                    responseObserver.error(new __WEBPACK_IMPORTED_MODULE_7__static_response__["a" /* Response */](_responseOptions));
                    return;
                }
                var responseOptions = new __WEBPACK_IMPORTED_MODULE_2__base_response_options__["a" /* ResponseOptions */]({ body: _this._responseData, url: url });
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(_this.baseResponseOptions)) {
                    responseOptions = _this.baseResponseOptions.merge(responseOptions);
                }
                responseObserver.next(new __WEBPACK_IMPORTED_MODULE_7__static_response__["a" /* Response */](responseOptions));
                responseObserver.complete();
            };
            var onError = function onError(error) {
                if (_this.readyState === __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Cancelled) return;
                _this.readyState = __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Done;
                _dom.cleanup(script);
                var responseOptions = new __WEBPACK_IMPORTED_MODULE_2__base_response_options__["a" /* ResponseOptions */]({ body: error.message, type: __WEBPACK_IMPORTED_MODULE_3__enums__["a" /* ResponseType */].Error });
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(baseResponseOptions)) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                responseObserver.error(new __WEBPACK_IMPORTED_MODULE_7__static_response__["a" /* Response */](responseOptions));
            };
            script.addEventListener('load', onLoad);
            script.addEventListener('error', onError);
            _dom.send(script);
            return function () {
                _this.readyState = __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Cancelled;
                script.removeEventListener('load', onLoad);
                script.removeEventListener('error', onError);
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(script)) {
                    _this._dom.cleanup(script);
                }
            };
        });
        return _this;
    }

    _createClass(JSONPConnection_, [{
        key: 'finished',
        value: function finished(data) {
            // Don't leak connections
            this._finished = true;
            this._dom.removeConnection(this._id);
            if (this.readyState === __WEBPACK_IMPORTED_MODULE_3__enums__["c" /* ReadyState */].Cancelled) return;
            this._responseData = data;
        }
    }]);

    return JSONPConnection_;
}(JSONPConnection);
/**
 * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.
 */
var JSONPBackend = function (_ConnectionBackend) {
    _inherits(JSONPBackend, _ConnectionBackend);

    function JSONPBackend() {
        _classCallCheck(this, JSONPBackend);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(JSONPBackend).apply(this, arguments));
    }

    return JSONPBackend;
}(__WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ConnectionBackend */]);
var JSONPBackend_ = function (_JSONPBackend) {
    _inherits(JSONPBackend_, _JSONPBackend);

    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
        _classCallCheck(this, JSONPBackend_);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(JSONPBackend_).call(this));

        _this3._browserJSONP = _browserJSONP;
        _this3._baseResponseOptions = _baseResponseOptions;
        return _this3;
    }

    _createClass(JSONPBackend_, [{
        key: 'createConnection',
        value: function createConnection(request) {
            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
        }
    }]);

    return JSONPBackend_;
}(JSONPBackend);
/** @nocollapse */
JSONPBackend_.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
JSONPBackend_.ctorParameters = [{ type: __WEBPACK_IMPORTED_MODULE_8__browser_jsonp__["a" /* BrowserJsonp */] }, { type: __WEBPACK_IMPORTED_MODULE_2__base_response_options__["a" /* ResponseOptions */] }];
//# sourceMappingURL=jsonp_backend.js.map

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ && __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default, 'a', __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__base_response_options__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__headers__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__http_utils__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__interfaces__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__static_response__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__browser_xhr__ = __webpack_require__(268);

/* harmony export */ __webpack_require__.d(exports, "c", function() { return XHRConnection; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return CookieXSRFStrategy; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return XHRBackend; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }












var XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Creates connections using `XMLHttpRequest`. Given a fully-qualified
 * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
 * request.
 *
 * This class would typically not be created or interacted with directly inside applications, though
 * the {@link MockConnection} may be interacted with in tests.
 */
var XHRConnection = function () {
    function XHRConnection(req, browserXHR, baseResponseOptions) {
        var _this = this;

        _classCallCheck(this, XHRConnection);

        this.request = req;
        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (responseObserver) {
            var _xhr = browserXHR.build();
            _xhr.open(__WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */][req.method].toUpperCase(), req.url);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(req.withCredentials)) {
                _xhr.withCredentials = req.withCredentials;
            }
            // load event handler
            var onLoad = function onLoad() {
                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                // response/responseType properties were introduced in XHR Level2 spec (supported by
                // IE10)
                var body = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(_xhr.response) ? _xhr.response : _xhr.responseText;
                // Implicitly strip a potential XSSI prefix.
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["g" /* isString */])(body)) body = body.replace(XSSI_PREFIX, '');
                var headers = __WEBPACK_IMPORTED_MODULE_6__headers__["a" /* Headers */].fromResponseHeaderString(_xhr.getAllResponseHeaders());
                var url = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__http_utils__["b" /* getResponseURL */])(_xhr);
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status = _xhr.status === 1223 ? 204 : _xhr.status;
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status === 0) {
                    status = body ? 200 : 0;
                }
                var statusText = _xhr.statusText || 'OK';
                var responseOptions = new __WEBPACK_IMPORTED_MODULE_3__base_response_options__["a" /* ResponseOptions */]({ body: body, status: status, headers: headers, statusText: statusText, url: url });
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(baseResponseOptions)) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                var response = new __WEBPACK_IMPORTED_MODULE_9__static_response__["a" /* Response */](responseOptions);
                response.ok = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__http_utils__["c" /* isSuccess */])(status);
                if (response.ok) {
                    responseObserver.next(response);
                    // TODO(gdi2290): defer complete if array buffer until done
                    responseObserver.complete();
                    return;
                }
                responseObserver.error(response);
            };
            // error event handler
            var onError = function onError(err) {
                var responseOptions = new __WEBPACK_IMPORTED_MODULE_3__base_response_options__["a" /* ResponseOptions */]({
                    body: err,
                    type: __WEBPACK_IMPORTED_MODULE_4__enums__["a" /* ResponseType */].Error,
                    status: _xhr.status,
                    statusText: _xhr.statusText
                });
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(baseResponseOptions)) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                responseObserver.error(new __WEBPACK_IMPORTED_MODULE_9__static_response__["a" /* Response */](responseOptions));
            };
            _this.setDetectedContentType(req, _xhr);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(req.headers)) {
                req.headers.forEach(function (values, name) {
                    return _xhr.setRequestHeader(name, values.join(','));
                });
            }
            _xhr.addEventListener('load', onLoad);
            _xhr.addEventListener('error', onError);
            _xhr.send(_this.request.getBody());
            return function () {
                _xhr.removeEventListener('load', onLoad);
                _xhr.removeEventListener('error', onError);
                _xhr.abort();
            };
        });
    }

    _createClass(XHRConnection, [{
        key: 'setDetectedContentType',
        value: function setDetectedContentType(req /** TODO #9100 */, _xhr /** TODO #9100 */) {
            // Skip if a custom Content-Type header is provided
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(req.headers) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__facade_lang__["b" /* isPresent */])(req.headers.get('Content-Type'))) {
                return;
            }
            // Set the detected content type
            switch (req.contentType) {
                case __WEBPACK_IMPORTED_MODULE_4__enums__["d" /* ContentType */].NONE:
                    break;
                case __WEBPACK_IMPORTED_MODULE_4__enums__["d" /* ContentType */].JSON:
                    _xhr.setRequestHeader('Content-Type', 'application/json');
                    break;
                case __WEBPACK_IMPORTED_MODULE_4__enums__["d" /* ContentType */].FORM:
                    _xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');
                    break;
                case __WEBPACK_IMPORTED_MODULE_4__enums__["d" /* ContentType */].TEXT:
                    _xhr.setRequestHeader('Content-Type', 'text/plain');
                    break;
                case __WEBPACK_IMPORTED_MODULE_4__enums__["d" /* ContentType */].BLOB:
                    var blob = req.blob();
                    if (blob.type) {
                        _xhr.setRequestHeader('Content-Type', blob.type);
                    }
                    break;
            }
        }
    }]);

    return XHRConnection;
}();
/**
 * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
 * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF) for more
 * information on XSRF.
 *
 * Applications can configure custom cookie and header names by binding an instance of this class
 * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
 * details.
 */
var CookieXSRFStrategy = function () {
    function CookieXSRFStrategy() {
        var _cookieName = arguments.length <= 0 || arguments[0] === undefined ? 'XSRF-TOKEN' : arguments[0];

        var _headerName = arguments.length <= 1 || arguments[1] === undefined ? 'X-XSRF-TOKEN' : arguments[1];

        _classCallCheck(this, CookieXSRFStrategy);

        this._cookieName = _cookieName;
        this._headerName = _headerName;
    }

    _createClass(CookieXSRFStrategy, [{
        key: 'configureRequest',
        value: function configureRequest(req) {
            var xsrfToken = __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["__platform_browser_private__"].getDOM().getCookie(this._cookieName);
            if (xsrfToken && !req.headers.has(this._headerName)) {
                req.headers.set(this._headerName, xsrfToken);
            }
        }
    }]);

    return CookieXSRFStrategy;
}();
var XHRBackend = function () {
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
        _classCallCheck(this, XHRBackend);

        this._browserXHR = _browserXHR;
        this._baseResponseOptions = _baseResponseOptions;
        this._xsrfStrategy = _xsrfStrategy;
    }

    _createClass(XHRBackend, [{
        key: 'createConnection',
        value: function createConnection(request) {
            this._xsrfStrategy.configureRequest(request);
            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
        }
    }]);

    return XHRBackend;
}();
/** @nocollapse */
XHRBackend.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
XHRBackend.ctorParameters = [{ type: __WEBPACK_IMPORTED_MODULE_10__browser_xhr__["a" /* BrowserXhr */] }, { type: __WEBPACK_IMPORTED_MODULE_3__base_response_options__["a" /* ResponseOptions */] }, { type: __WEBPACK_IMPORTED_MODULE_8__interfaces__["b" /* XSRFStrategy */] }];
//# sourceMappingURL=xhr_backend.js.map

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return BaseWrappedException; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A base class for the WrappedException that can be used to identify
 * a WrappedException from ExceptionHandler without adding circular
 * dependency.
 */
var BaseWrappedException = function (_Error) {
    _inherits(BaseWrappedException, _Error);

    function BaseWrappedException(message) {
        _classCallCheck(this, BaseWrappedException);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(BaseWrappedException).call(this, message));
    }

    _createClass(BaseWrappedException, [{
        key: 'wrapperMessage',
        get: function get() {
            return '';
        }
    }, {
        key: 'wrapperStack',
        get: function get() {
            return null;
        }
    }, {
        key: 'originalException',
        get: function get() {
            return null;
        }
    }, {
        key: 'originalStack',
        get: function get() {
            return null;
        }
    }, {
        key: 'context',
        get: function get() {
            return null;
        }
    }, {
        key: 'message',
        get: function get() {
            return '';
        }
    }]);

    return BaseWrappedException;
}(Error);
//# sourceMappingURL=base_wrapped_exception.js.map

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__ = __webpack_require__(414);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__collection__ = __webpack_require__(270);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lang__ = __webpack_require__(40);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ExceptionHandler; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var _ArrayLogger = function () {
    function _ArrayLogger() {
        _classCallCheck(this, _ArrayLogger);

        this.res = [];
    }

    _createClass(_ArrayLogger, [{
        key: 'log',
        value: function log(s) {
            this.res.push(s);
        }
    }, {
        key: 'logError',
        value: function logError(s) {
            this.res.push(s);
        }
    }, {
        key: 'logGroup',
        value: function logGroup(s) {
            this.res.push(s);
        }
    }, {
        key: 'logGroupEnd',
        value: function logGroupEnd() {}
    }]);

    return _ArrayLogger;
}();
/**
 * Provides a hook for centralized exception handling.
 *
 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
 * intercept error handling,
 * write a custom exception handler that replaces this default as appropriate for your app.
 *
 * ### Example
 *
 * ```javascript
 *
 * class MyExceptionHandler implements ExceptionHandler {
 *   call(error, stackTrace = null, reason = null) {
 *     // do something with the exception
 *   }
 * }
 *
 * bootstrap(MyApp, {provide: ExceptionHandler, useClass: MyExceptionHandler}])
 *
 * ```
 * @stable
 */


var ExceptionHandler = function () {
    function ExceptionHandler(_logger) {
        var _rethrowException = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

        _classCallCheck(this, ExceptionHandler);

        this._logger = _logger;
        this._rethrowException = _rethrowException;
    }

    _createClass(ExceptionHandler, [{
        key: 'call',
        value: function call(exception) {
            var stackTrace = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
            var reason = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            var originalException = this._findOriginalException(exception);
            var originalStack = this._findOriginalStack(exception);
            var context = this._findContext(exception);
            this._logger.logGroup('EXCEPTION: ' + this._extractMessage(exception));
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(stackTrace) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["c" /* isBlank */])(originalStack)) {
                this._logger.logError('STACKTRACE:');
                this._logger.logError(this._longStackTrace(stackTrace));
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(reason)) {
                this._logger.logError('REASON: ' + reason);
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(originalException)) {
                this._logger.logError('ORIGINAL EXCEPTION: ' + this._extractMessage(originalException));
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(originalStack)) {
                this._logger.logError('ORIGINAL STACKTRACE:');
                this._logger.logError(this._longStackTrace(originalStack));
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(context)) {
                this._logger.logError('ERROR CONTEXT:');
                this._logger.logError(context);
            }
            this._logger.logGroupEnd();
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an exception happens. If we do not rethrow, bootstrap will always succeed.
            if (this._rethrowException) throw exception;
        }
        /** @internal */

    }, {
        key: '_extractMessage',
        value: function _extractMessage(exception) {
            return exception instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */] ? exception.wrapperMessage : exception.toString();
        }
        /** @internal */

    }, {
        key: '_longStackTrace',
        value: function _longStackTrace(stackTrace) {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__collection__["a" /* isListLikeIterable */])(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
        }
        /** @internal */

    }, {
        key: '_findContext',
        value: function _findContext(exception) {
            try {
                if (!(exception instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */])) return null;
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(exception.context) ? exception.context : this._findContext(exception.originalException);
            } catch (e) {
                // exception.context can throw an exception. if it happens, we ignore the context.
                return null;
            }
        }
        /** @internal */

    }, {
        key: '_findOriginalException',
        value: function _findOriginalException(exception) {
            if (!(exception instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */])) return null;
            var e = exception.originalException;
            while (e instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */] && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(e.originalException)) {
                e = e.originalException;
            }
            return e;
        }
        /** @internal */

    }, {
        key: '_findOriginalStack',
        value: function _findOriginalStack(exception) {
            if (!(exception instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */])) return null;
            var e = exception;
            var stack = exception.originalStack;
            while (e instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */] && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(e.originalException)) {
                e = e.originalException;
                if (e instanceof __WEBPACK_IMPORTED_MODULE_0__base_wrapped_exception__["a" /* BaseWrappedException */] && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lang__["b" /* isPresent */])(e.originalException)) {
                    stack = e.originalStack;
                }
            }
            return stack;
        }
    }], [{
        key: 'exceptionToString',
        value: function exceptionToString(exception) {
            var stackTrace = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
            var reason = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            var l = new _ArrayLogger();
            var e = new ExceptionHandler(l, false);
            e.call(exception, stackTrace, reason);
            return l.res.join('\n');
        }
    }]);

    return ExceptionHandler;
}();
//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_facade_exceptions__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__base_request_options__ = __webpack_require__(269);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__interfaces__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__static_request__ = __webpack_require__(417);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Http; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return Jsonp; });var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








function httpRequest(backend, request) {
    return backend.createConnection(request).response;
}
function mergeOptions(defaultOpts, providedOpts, method, url) {
    var newOptions = defaultOpts;
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_lang__["b" /* isPresent */])(providedOpts)) {
        // Hack so Dart can used named parameters
        return newOptions.merge(new __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */]({
            method: providedOpts.method || method,
            url: providedOpts.url || url,
            search: providedOpts.search,
            headers: providedOpts.headers,
            body: providedOpts.body,
            withCredentials: providedOpts.withCredentials
        }));
    }
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_lang__["b" /* isPresent */])(method)) {
        return newOptions.merge(new __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */]({ method: method, url: url }));
    } else {
        return newOptions.merge(new __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */]({ url: url }));
    }
}
var Http = function () {
    function Http(_backend, _defaultOptions) {
        _classCallCheck(this, Http);

        this._backend = _backend;
        this._defaultOptions = _defaultOptions;
    }
    /**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {@link BaseRequestOptions} before performing the request.
     */


    _createClass(Http, [{
        key: 'request',
        value: function request(url, options) {
            var responseObservable;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_lang__["g" /* isString */])(url)) {
                responseObservable = httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions, options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Get, url)));
            } else if (url instanceof __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */]) {
                responseObservable = httpRequest(this._backend, url);
            } else {
                throw __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_exceptions__["b" /* makeTypeError */])('First argument must be a url string or Request instance.');
            }
            return responseObservable;
        }
        /**
         * Performs a request with `get` http method.
         */

    }, {
        key: 'get',
        value: function get(url, options) {
            return httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions, options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Get, url)));
        }
        /**
         * Performs a request with `post` http method.
         */

    }, {
        key: 'post',
        value: function post(url, body, options) {
            return httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions.merge(new __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */]({ body: body })), options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Post, url)));
        }
        /**
         * Performs a request with `put` http method.
         */

    }, {
        key: 'put',
        value: function put(url, body, options) {
            return httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions.merge(new __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */]({ body: body })), options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Put, url)));
        }
        /**
         * Performs a request with `delete` http method.
         */

    }, {
        key: 'delete',
        value: function _delete(url, options) {
            return httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions, options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Delete, url)));
        }
        /**
         * Performs a request with `patch` http method.
         */

    }, {
        key: 'patch',
        value: function patch(url, body, options) {
            return httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions.merge(new __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */]({ body: body })), options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Patch, url)));
        }
        /**
         * Performs a request with `head` http method.
         */

    }, {
        key: 'head',
        value: function head(url, options) {
            return httpRequest(this._backend, new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions, options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Head, url)));
        }
    }]);

    return Http;
}();
/** @nocollapse */
Http.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
Http.ctorParameters = [{ type: __WEBPACK_IMPORTED_MODULE_5__interfaces__["a" /* ConnectionBackend */] }, { type: __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */] }];
var Jsonp = function (_Http) {
    _inherits(Jsonp, _Http);

    function Jsonp(backend, defaultOptions) {
        _classCallCheck(this, Jsonp);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Jsonp).call(this, backend, defaultOptions));
    }
    /**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {@link BaseRequestOptions} before performing the request.
     */


    _createClass(Jsonp, [{
        key: 'request',
        value: function request(url, options) {
            var responseObservable;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__src_facade_lang__["g" /* isString */])(url)) {
                url = new __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */](mergeOptions(this._defaultOptions, options, __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Get, url));
            }
            if (url instanceof __WEBPACK_IMPORTED_MODULE_6__static_request__["a" /* Request */]) {
                if (url.method !== __WEBPACK_IMPORTED_MODULE_4__enums__["b" /* RequestMethod */].Get) {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_exceptions__["b" /* makeTypeError */])('JSONP requests must use GET request method.');
                }
                responseObservable = httpRequest(this._backend, url);
            } else {
                throw __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_facade_exceptions__["b" /* makeTypeError */])('First argument must be a url string or Request instance.');
            }
            return responseObservable;
        }
    }]);

    return Jsonp;
}(Http);
/** @nocollapse */
Jsonp.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
Jsonp.ctorParameters = [{ type: __WEBPACK_IMPORTED_MODULE_5__interfaces__["a" /* ConnectionBackend */] }, { type: __WEBPACK_IMPORTED_MODULE_3__base_request_options__["a" /* RequestOptions */] }];
//# sourceMappingURL=http.js.map

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_facade_lang__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__headers__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__http_utils__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__url_search_params__ = __webpack_require__(272);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Request; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }






// TODO(jeffbcross): properly implement body accessors
/**
 * Creates `Request` instances from provided values.
 *
 * The Request's interface is inspired by the Request constructor defined in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#request-class),
 * but is considered a static value whose body can be accessed many times. There are other
 * differences in the implementation, but this is the most significant.
 *
 * `Request` instances are typically created by higher-level classes, like {@link Http} and
 * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
 * One such example is when creating services that wrap higher-level services, like {@link Http},
 * where it may be useful to generate a `Request` with arbitrary headers and search params.
 *
 * ```typescript
 * import {Injectable, Injector} from '@angular/core';
 * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';
 *
 * @Injectable()
 * class AutoAuthenticator {
 *   constructor(public http:Http) {}
 *   request(url:string) {
 *     return this.http.request(new Request({
 *       method: RequestMethod.Get,
 *       url: url,
 *       search: 'password=123'
 *     }));
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
 * var authenticator = injector.get(AutoAuthenticator);
 * authenticator.request('people.json').subscribe(res => {
 *   //URL should have included '?password=123'
 *   console.log('people', res.json());
 * });
 * ```
 */
var Request = function () {
    function Request(requestOptions) {
        _classCallCheck(this, Request);

        // TODO: assert that url is present
        var url = requestOptions.url;
        this.url = requestOptions.url;
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__src_facade_lang__["b" /* isPresent */])(requestOptions.search)) {
            var search = requestOptions.search.toString();
            if (search.length > 0) {
                var prefix = '?';
                if (__WEBPACK_IMPORTED_MODULE_0__src_facade_lang__["i" /* StringWrapper */].contains(this.url, '?')) {
                    prefix = this.url[this.url.length - 1] == '&' ? '' : '&';
                }
                // TODO: just delete search-query-looking string in url?
                this.url = url + prefix + search;
            }
        }
        this._body = requestOptions.body;
        this.contentType = this.detectContentType();
        this.method = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__http_utils__["d" /* normalizeMethodName */])(requestOptions.method);
        // TODO(jeffbcross): implement behavior
        // Defaults to 'omit', consistent with browser
        // TODO(jeffbcross): implement behavior
        this.headers = new __WEBPACK_IMPORTED_MODULE_2__headers__["a" /* Headers */](requestOptions.headers);
        this.withCredentials = requestOptions.withCredentials;
    }
    /**
     * Returns the request's body as string, assuming that body exists. If body is undefined, return
     * empty
     * string.
     */


    _createClass(Request, [{
        key: 'text',
        value: function text() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__src_facade_lang__["b" /* isPresent */])(this._body) ? this._body.toString() : '';
        }
        /**
         * Returns the request's body as JSON string, assuming that body exists. If body is undefined,
         * return
         * empty
         * string.
         */

    }, {
        key: 'json',
        value: function json() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__src_facade_lang__["b" /* isPresent */])(this._body) ? JSON.stringify(this._body) : '';
        }
        /**
         * Returns the request's body as array buffer, assuming that body exists. If body is undefined,
         * return
         * null.
         */

    }, {
        key: 'arrayBuffer',
        value: function arrayBuffer() {
            if (this._body instanceof ArrayBuffer) return this._body;
            throw 'The request body isn\'t an array buffer';
        }
        /**
         * Returns the request's body as blob, assuming that body exists. If body is undefined, return
         * null.
         */

    }, {
        key: 'blob',
        value: function blob() {
            if (this._body instanceof Blob) return this._body;
            if (this._body instanceof ArrayBuffer) return new Blob([this._body]);
            throw 'The request body isn\'t either a blob or an array buffer';
        }
        /**
         * Returns the content type of request's body based on its type.
         */

    }, {
        key: 'detectContentType',
        value: function detectContentType() {
            if (this._body == null) {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].NONE;
            } else if (this._body instanceof __WEBPACK_IMPORTED_MODULE_4__url_search_params__["a" /* URLSearchParams */]) {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].FORM;
            } else if (this._body instanceof FormData) {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].FORM_DATA;
            } else if (this._body instanceof Blob) {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].BLOB;
            } else if (this._body instanceof ArrayBuffer) {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].ARRAY_BUFFER;
            } else if (this._body && _typeof(this._body) == 'object') {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].JSON;
            } else {
                return __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].TEXT;
            }
        }
        /**
         * Returns the request's body according to its type. If body is undefined, return
         * null.
         */

    }, {
        key: 'getBody',
        value: function getBody() {
            switch (this.contentType) {
                case __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].JSON:
                    return this.json();
                case __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].FORM:
                    return this.text();
                case __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].FORM_DATA:
                    return this._body;
                case __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].TEXT:
                    return this.text();
                case __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].BLOB:
                    return this.blob();
                case __WEBPACK_IMPORTED_MODULE_1__enums__["d" /* ContentType */].ARRAY_BUFFER:
                    return this.arrayBuffer();
                default:
                    return null;
            }
        }
    }]);

    return Request;
}();
var noop = function noop() {};
var w = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' ? window : noop;
var FormData = w['FormData'] || noop;
var Blob = w['Blob'] || noop;
var ArrayBuffer = w['ArrayBuffer'] || noop;
//# sourceMappingURL=static_request.js.map

/***/ },
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var util_1 = __webpack_require__(7);
var DISABLE_SCROLL = 'disable-scroll';
var Backdrop = function () {
    function Backdrop(elementRef) {
        this.elementRef = elementRef;
        this.pushed = false;
        this.disableScroll = true;
    }
    Backdrop.push = function () {
        if (this.nuBackDrops === 0) {
            console.debug('adding .disable-scroll to body');
            document.body.classList.add(DISABLE_SCROLL);
        } else {
            console.warn('several backdrops on screen? probably a bug');
        }
        this.nuBackDrops++;
    };
    Backdrop.pop = function () {
        if (this.nuBackDrops === 0) {
            console.error('pop requires a push');
            return;
        }
        this.nuBackDrops--;
        if (this.nuBackDrops === 0) {
            console.debug('removing .disable-scroll from body');
            document.body.classList.remove(DISABLE_SCROLL);
        }
    };
    Backdrop.prototype.ngOnInit = function () {
        if (util_1.isTrueProperty(this.disableScroll)) {
            Backdrop.push();
            this.pushed = true;
        }
    };
    Backdrop.prototype.ngOnDestroy = function () {
        if (this.pushed) {
            Backdrop.pop();
            this.pushed = false;
        }
    };
    Backdrop.nuBackDrops = 0;
    /** @nocollapse */
    Backdrop.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-backdrop',
            host: {
                'role': 'presentation',
                'tappable': '',
                'disable-activated': ''
            }
        }] }];
    /** @nocollapse */
    Backdrop.ctorParameters = [{ type: core_1.ElementRef }];
    /** @nocollapse */
    Backdrop.propDecorators = {
        'disableScroll': [{ type: core_1.Input }]
    };
    return Backdrop;
}();
exports.Backdrop = Backdrop;

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var config_1 = __webpack_require__(16);
var Icon = function () {
    function Icon(config, _elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._name = '';
        this._ios = '';
        this._md = '';
        this._css = '';
        this.mode = config.get('iconMode');
    }
    /**
     * @private
     */
    Icon.prototype.ngOnDestroy = function () {
        if (this._css) {
            this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
        }
    };
    Object.defineProperty(Icon.prototype, "name", {
        get: function get() {
            return this._name;
        },
        set: function set(val) {
            if (!/^md-|^ios-|^logo-/.test(val)) {
                // this does not have one of the defaults
                // so lets auto add in the mode prefix for them
                val = this.mode + '-' + val;
            }
            this._name = val;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Icon.prototype, "ios", {
        get: function get() {
            return this._ios;
        },
        set: function set(val) {
            this._ios = val;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Icon.prototype, "md", {
        get: function get() {
            return this._md;
        },
        set: function set(val) {
            this._md = val;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Icon.prototype, "isActive", {
        get: function get() {
            return this._isActive === undefined || this._isActive === true || this._isActive === 'true';
        },
        set: function set(val) {
            this._isActive = val;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Icon.prototype.update = function () {
        var css = 'ion-';
        if (this._ios && this.mode === 'ios') {
            css += this._ios;
        } else if (this._md && this.mode === 'md') {
            css += this._md;
        } else {
            css += this._name;
        }
        if (this.mode === 'ios' && !this.isActive && css.indexOf('logo') < 0) {
            css += '-outline';
        }
        if (this._css !== css) {
            if (this._css) {
                this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
            }
            this._css = css;
            this._renderer.setElementClass(this._elementRef.nativeElement, css, true);
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', css.replace('ion-', '').replace('ios-', '').replace('md-', '').replace('-', ' '));
        }
    };
    /**
     * @private
     * @param {string} add class name
     */
    Icon.prototype.addClass = function (className) {
        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
    };
    /** @nocollapse */
    Icon.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-icon',
            host: {
                'role': 'img'
            }
        }] }];
    /** @nocollapse */
    Icon.ctorParameters = [{ type: config_1.Config }, { type: core_1.ElementRef }, { type: core_1.Renderer }];
    /** @nocollapse */
    Icon.propDecorators = {
        'name': [{ type: core_1.Input }],
        'ios': [{ type: core_1.Input }],
        'md': [{ type: core_1.Input }],
        'isActive': [{ type: core_1.Input }]
    };
    return Icon;
}();
exports.Icon = Icon;

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(17);
var util_1 = __webpack_require__(7);
var platform_1 = __webpack_require__(72);
var Img = function () {
    function Img(_elementRef, _platform, _zone) {
        this._elementRef = _elementRef;
        this._platform = _platform;
        this._zone = _zone;
        this._src = '';
        this._normalizeSrc = '';
        this._imgs = [];
        this._enabled = true;
    }
    Object.defineProperty(Img.prototype, "src", {
        set: function set(val) {
            var tmpImg = new Image();
            tmpImg.src = util_1.isPresent(val) ? val : '';
            this._src = util_1.isPresent(val) ? val : '';
            this._normalizeSrc = tmpImg.src;
            if (this._init) {
                this._update();
            }
        },
        enumerable: true,
        configurable: true
    });
    Img.prototype.ngOnInit = function () {
        this._init = true;
        this._update();
    };
    Img.prototype._update = function () {
        var _this = this;
        if (this._enabled && this._src !== '') {
            // actively update the image
            for (var i = this._imgs.length - 1; i >= 0; i--) {
                if (this._imgs[i].src === this._normalizeSrc) {
                    // this is the active image
                    if (this._imgs[i].complete) {
                        this._loaded(true);
                    }
                } else {
                    // no longer the active image
                    if (this._imgs[i].parentElement) {
                        this._imgs[i].parentElement.removeChild(this._imgs[i]);
                    }
                    this._imgs.splice(i, 1);
                }
            }
            if (!this._imgs.length) {
                this._zone.runOutsideAngular(function () {
                    var img = new Image();
                    img.style.width = _this._width;
                    img.style.height = _this._height;
                    if (util_1.isPresent(_this.alt)) {
                        img.alt = _this.alt;
                    }
                    if (util_1.isPresent(_this.title)) {
                        img.title = _this.title;
                    }
                    img.addEventListener('load', function () {
                        if (img.src === _this._normalizeSrc) {
                            _this._elementRef.nativeElement.appendChild(img);
                            dom_1.nativeRaf(function () {
                                _this._update();
                            });
                        }
                    });
                    img.src = _this._src;
                    _this._imgs.push(img);
                    _this._loaded(false);
                });
            }
        } else {
            // do not actively update the image
            if (!this._imgs.some(function (img) {
                return img.src === _this._normalizeSrc;
            })) {
                this._loaded(false);
            }
        }
    };
    Img.prototype._loaded = function (isLoaded) {
        this._elementRef.nativeElement.classList[isLoaded ? 'add' : 'remove']('img-loaded');
    };
    Img.prototype.enable = function (shouldEnable) {
        this._enabled = shouldEnable;
        this._update();
    };
    Object.defineProperty(Img.prototype, "width", {
        set: function set(val) {
            this._w = getUnitValue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Img.prototype, "height", {
        set: function set(val) {
            this._h = getUnitValue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Img.prototype, "_width", {
        get: function get() {
            return util_1.isPresent(this._w) ? this._w : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Img.prototype, "_height", {
        get: function get() {
            return util_1.isPresent(this._h) ? this._h : '';
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    Img.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-img',
            template: '<div class="img-placeholder" [style.height]="_h" [style.width]="_w"></div>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Img.ctorParameters = [{ type: core_1.ElementRef }, { type: platform_1.Platform }, { type: core_1.NgZone }];
    /** @nocollapse */
    Img.propDecorators = {
        'src': [{ type: core_1.Input }],
        'width': [{ type: core_1.Input }],
        'height': [{ type: core_1.Input }],
        'alt': [{ type: core_1.Input }],
        'title': [{ type: core_1.Input }],
        '_width': [{ type: core_1.HostBinding, args: ['style.width'] }],
        '_height': [{ type: core_1.HostBinding, args: ['style.height'] }]
    };
    return Img;
}();
exports.Img = Img;
function getUnitValue(val) {
    if (util_1.isPresent(val)) {
        if (typeof val === 'string') {
            if (val.indexOf('%') > -1 || val.indexOf('px') > -1) {
                return val;
            }
            if (val.length) {
                return val + 'px';
            }
        } else if (typeof val === 'number') {
            return val + 'px';
        }
    }
    return '';
}

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var content_1 = __webpack_require__(111);
var InfiniteScroll = function () {
    function InfiniteScroll(_content, _zone, _elementRef) {
        this._content = _content;
        this._zone = _zone;
        this._elementRef = _elementRef;
        this._lastCheck = 0;
        this._highestY = 0;
        this._thr = '15%';
        this._thrPx = 0;
        this._thrPc = 0.15;
        this._init = false;
        this.state = STATE_ENABLED;
        this.ionInfinite = new core_1.EventEmitter();
        _content.addCssClass('has-infinite-scroll');
    }
    Object.defineProperty(InfiniteScroll.prototype, "threshold", {
        get: function get() {
            return this._thr;
        },
        set: function set(val) {
            this._thr = val;
            if (val.indexOf('%') > -1) {
                this._thrPx = 0;
                this._thrPc = parseFloat(val) / 100;
            } else {
                this._thrPx = parseFloat(val);
                this._thrPc = 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    InfiniteScroll.prototype._onScroll = function () {
        var _this = this;
        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
            return 1;
        }
        var now = Date.now();
        if (this._lastCheck + 32 > now) {
            // no need to check less than every XXms
            return 2;
        }
        this._lastCheck = now;
        var infiniteHeight = this._elementRef.nativeElement.scrollHeight;
        if (!infiniteHeight) {
            // if there is no height of this element then do nothing
            return 3;
        }
        var d = this._content.getContentDimensions();
        var reloadY = d.contentHeight;
        if (this._thrPc) {
            reloadY += reloadY * this._thrPc;
        } else {
            reloadY += this._thrPx;
        }
        var distanceFromInfinite = d.scrollHeight - infiniteHeight - d.scrollTop - reloadY;
        if (distanceFromInfinite < 0) {
            this._zone.run(function () {
                if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                    _this.state = STATE_LOADING;
                    _this.ionInfinite.emit(_this);
                }
            });
            return 5;
        }
        return 6;
    };
    /**
     * Call `complete()` within the `infinite` output event handler when
     * your async operation has completed. For example, the `loading`
     * state is while the app is performing an asynchronous operation,
     * such as receiving more data from an AJAX request to add more items
     * to a data list. Once the data has been received and UI updated, you
     * then call this method to signify that the loading has completed.
     * This method will change the infinite scroll's state from `loading`
     * to `enabled`.
     */
    InfiniteScroll.prototype.complete = function () {
        this.state = STATE_ENABLED;
    };
    /**
     * Call `enable(false)` to disable the infinite scroll from actively
     * trying to receive new data while scrolling. This method is useful
     * when it is known that there is no more data that can be added, and
     * the infinite scroll is no longer needed.
     * @param {boolean} shouldEnable  If the infinite scroll should be
     * enabled or not. Setting to `false` will remove scroll event listeners
     * and hide the display.
     */
    InfiniteScroll.prototype.enable = function (shouldEnable) {
        this.state = shouldEnable ? STATE_ENABLED : STATE_DISABLED;
        this._setListeners(shouldEnable);
    };
    InfiniteScroll.prototype._setListeners = function (shouldListen) {
        var _this = this;
        if (this._init) {
            if (shouldListen) {
                if (!this._scLsn) {
                    this._zone.runOutsideAngular(function () {
                        _this._scLsn = _this._content.addScrollListener(_this._onScroll.bind(_this));
                    });
                }
            } else {
                this._scLsn && this._scLsn();
                this._scLsn = null;
            }
        }
    };
    /**
     * @private
     */
    InfiniteScroll.prototype.ngAfterContentInit = function () {
        this._init = true;
        this._setListeners(this.state !== STATE_DISABLED);
    };
    /**
     * @private
     */
    InfiniteScroll.prototype.ngOnDestroy = function () {
        this._setListeners(false);
    };
    /** @nocollapse */
    InfiniteScroll.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-infinite-scroll'
        }] }];
    /** @nocollapse */
    InfiniteScroll.ctorParameters = [{ type: content_1.Content, decorators: [{ type: core_1.Host }] }, { type: core_1.NgZone }, { type: core_1.ElementRef }];
    /** @nocollapse */
    InfiniteScroll.propDecorators = {
        'threshold': [{ type: core_1.Input }],
        'ionInfinite': [{ type: core_1.Output }]
    };
    return InfiniteScroll;
}();
exports.InfiniteScroll = InfiniteScroll;
var STATE_ENABLED = 'enabled';
var STATE_DISABLED = 'disabled';
var STATE_LOADING = 'loading';

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var config_1 = __webpack_require__(16);
var dom_1 = __webpack_require__(17);
var NativeInput = function () {
    function NativeInput(_elementRef, _renderer, config, ngControl) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.ngControl = ngControl;
        this.focusChange = new core_1.EventEmitter();
        this.valueChange = new core_1.EventEmitter();
        this._clone = config.getBoolean('inputCloning', false);
        this._blurring = config.getBoolean('inputBlurring', false);
    }
    NativeInput.prototype._change = function (ev) {
        this.valueChange.emit(ev.target.value);
    };
    NativeInput.prototype._focus = function () {
        var self = this;
        self.focusChange.emit(true);
        function docTouchEnd(ev) {
            var tapped = ev.target;
            if (tapped && self.element()) {
                if (tapped.tagName !== 'INPUT' && tapped.tagName !== 'TEXTAREA' && !tapped.classList.contains('input-cover')) {
                    self.element().blur();
                }
            }
        }
        if (self._blurring) {
            // automatically blur input if:
            // 1) this input has focus
            // 2) the newly tapped document element is not an input
            console.debug('input blurring enabled');
            document.addEventListener('touchend', docTouchEnd, true);
            self._unrefBlur = function () {
                console.debug('input blurring disabled');
                document.removeEventListener('touchend', docTouchEnd, true);
            };
        }
    };
    NativeInput.prototype._blur = function () {
        this.focusChange.emit(false);
        this.hideFocus(false);
        this._unrefBlur && this._unrefBlur();
        this._unrefBlur = null;
    };
    NativeInput.prototype.labelledBy = function (val) {
        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-labelledby', val);
    };
    NativeInput.prototype.isDisabled = function (val) {
        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'disabled', val ? '' : null);
    };
    NativeInput.prototype.setFocus = function () {
        // let's set focus to the element
        // but only if it does not already have focus
        if (document.activeElement !== this.element()) {
            this.element().focus();
        }
    };
    NativeInput.prototype.beginFocus = function (shouldFocus, inputRelativeY) {
        if (this._relocated !== shouldFocus) {
            var focusedInputEle = this.element();
            if (shouldFocus) {
                // we should focus into this element
                if (this._clone) {
                    // this platform needs the input to be cloned
                    // this allows for the actual input to receive the focus from
                    // the user's touch event, but before it receives focus, it
                    // moves the actual input to a location that will not screw
                    // up the app's layout, and does not allow the native browser
                    // to attempt to scroll the input into place (messing up headers/footers)
                    // the cloned input fills the area of where native input should be
                    // while the native input fakes out the browser by relocating itself
                    // before it receives the actual focus event
                    var clonedInputEle = cloneInput(focusedInputEle, 'cloned-focus');
                    focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
                    // move the native input to a location safe to receive focus
                    // according to the browser, the native input receives focus in an
                    // area which doesn't require the browser to scroll the input into place
                    focusedInputEle.style[dom_1.CSS.transform] = "translate3d(-9999px," + inputRelativeY + "px,0)";
                    focusedInputEle.style.opacity = '0';
                }
                // let's now set focus to the actual native element
                // at this point it is safe to assume the browser will not attempt
                // to scroll the input into view itself (screwing up headers/footers)
                this.setFocus();
                if (this._clone) {
                    focusedInputEle.classList.add('cloned-active');
                }
            } else {
                // should remove the focus
                if (this._clone) {
                    // should remove the cloned node
                    focusedInputEle.classList.remove('cloned-active');
                    focusedInputEle.style[dom_1.CSS.transform] = '';
                    focusedInputEle.style.opacity = '';
                    removeClone(focusedInputEle, 'cloned-focus');
                }
            }
            this._relocated = shouldFocus;
        }
    };
    NativeInput.prototype.hideFocus = function (shouldHideFocus) {
        var focusedInputEle = this.element();
        console.debug("native input hideFocus, shouldHideFocus: " + shouldHideFocus + ", input value: " + focusedInputEle.value);
        if (shouldHideFocus) {
            var clonedInputEle = cloneInput(focusedInputEle, 'cloned-move');
            focusedInputEle.classList.add('cloned-active');
            focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
        } else {
            focusedInputEle.classList.remove('cloned-active');
            removeClone(focusedInputEle, 'cloned-move');
        }
    };
    NativeInput.prototype.hasFocus = function () {
        return dom_1.hasFocus(this.element());
    };
    NativeInput.prototype.getValue = function () {
        return this.element().value;
    };
    NativeInput.prototype.setCssClass = function (cssClass, shouldAdd) {
        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
    };
    NativeInput.prototype.element = function () {
        return this._elementRef.nativeElement;
    };
    NativeInput.prototype.ngOnDestroy = function () {
        this._unrefBlur && this._unrefBlur();
    };
    /** @nocollapse */
    NativeInput.decorators = [{ type: core_1.Directive, args: [{
            selector: '.text-input'
        }] }];
    /** @nocollapse */
    NativeInput.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }, { type: config_1.Config }, { type: common_1.NgControl }];
    /** @nocollapse */
    NativeInput.propDecorators = {
        'focusChange': [{ type: core_1.Output }],
        'valueChange': [{ type: core_1.Output }],
        '_change': [{ type: core_1.HostListener, args: ['input', ['$event']] }],
        '_focus': [{ type: core_1.HostListener, args: ['focus'] }],
        '_blur': [{ type: core_1.HostListener, args: ['blur'] }]
    };
    return NativeInput;
}();
exports.NativeInput = NativeInput;
function cloneInput(focusedInputEle, addCssClass) {
    var clonedInputEle = focusedInputEle.cloneNode(true);
    clonedInputEle.classList.add('cloned-input');
    clonedInputEle.classList.add(addCssClass);
    clonedInputEle.setAttribute('aria-hidden', true);
    clonedInputEle.removeAttribute('aria-labelledby');
    clonedInputEle.tabIndex = -1;
    clonedInputEle.style.width = focusedInputEle.offsetWidth + 10 + 'px';
    clonedInputEle.style.height = focusedInputEle.offsetHeight + 'px';
    clonedInputEle.value = focusedInputEle.value;
    return clonedInputEle;
}
function removeClone(focusedInputEle, queryCssClass) {
    var clonedInputEle = focusedInputEle.parentElement.querySelector('.' + queryCssClass);
    if (clonedInputEle) {
        clonedInputEle.parentNode.removeChild(clonedInputEle);
    }
}
var NextInput = function () {
    function NextInput() {
        this.focused = new core_1.EventEmitter();
    }
    NextInput.prototype.receivedFocus = function () {
        console.debug('native-input, next-input received focus');
        this.focused.emit(true);
    };
    /** @nocollapse */
    NextInput.decorators = [{ type: core_1.Directive, args: [{
            selector: '[next-input]'
        }] }];
    /** @nocollapse */
    NextInput.propDecorators = {
        'focused': [{ type: core_1.Output }],
        'receivedFocus': [{ type: core_1.HostListener, args: ['focus'] }]
    };
    return NextInput;
}();
exports.NextInput = NextInput;

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var Label = function () {
    function Label(_elementRef, _renderer, isFloating, isStacked, isFixed, isInset) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.type = isFloating === '' ? 'floating' : isStacked === '' ? 'stacked' : isFixed === '' ? 'fixed' : isInset === '' ? 'inset' : null;
    }
    Object.defineProperty(Label.prototype, "id", {
        get: function get() {
            return this._id;
        },
        set: function set(val) {
            this._id = val;
            if (val) {
                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "text", {
        /**
         * @private
         */
        get: function get() {
            return this._elementRef.nativeElement.textContent || '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {string} add class name
     */
    Label.prototype.addClass = function (className) {
        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
    };
    /** @nocollapse */
    Label.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-label'
        }] }];
    /** @nocollapse */
    Label.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['floating'] }] }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['stacked'] }] }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['fixed'] }] }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['inset'] }] }];
    /** @nocollapse */
    Label.propDecorators = {
        'id': [{ type: core_1.Input }]
    };
    return Label;
}();
exports.Label = Label;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var keyboard_1 = __webpack_require__(95);
var nav_controller_1 = __webpack_require__(51);
var view_controller_1 = __webpack_require__(43);
var NavPortal = function (_super) {
    __extends(NavPortal, _super);
    function NavPortal(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler, viewPort) {
        _super.call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler);
        this.isPortal = true;
        this.setViewport(viewPort);
    }
    /** @nocollapse */
    NavPortal.decorators = [{ type: core_1.Directive, args: [{
            selector: '[nav-portal]'
        }] }];
    /** @nocollapse */
    NavPortal.ctorParameters = [{ type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }, { type: app_1.App }, { type: config_1.Config }, { type: keyboard_1.Keyboard }, { type: core_1.ElementRef }, { type: core_1.NgZone }, { type: core_1.Renderer }, { type: core_1.ComponentResolver }, { type: core_1.ViewContainerRef }];
    return NavPortal;
}(nav_controller_1.NavController);
exports.NavPortal = NavPortal;

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var util_1 = __webpack_require__(7);
var Option = function () {
    function Option(_elementRef) {
        this._elementRef = _elementRef;
        this._checked = false;
        this.ionSelect = new core_1.EventEmitter();
    }
    Object.defineProperty(Option.prototype, "checked", {
        get: function get() {
            return this._checked;
        },
        set: function set(val) {
            this._checked = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Option.prototype, "value", {
        get: function get() {
            if (util_1.isPresent(this._value)) {
                return this._value;
            }
            return this.text;
        },
        set: function set(val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Option.prototype, "text", {
        /**
         * @private
         */
        get: function get() {
            return this._elementRef.nativeElement.textContent;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    Option.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-option'
        }] }];
    /** @nocollapse */
    Option.ctorParameters = [{ type: core_1.ElementRef }];
    /** @nocollapse */
    Option.propDecorators = {
        'ionSelect': [{ type: core_1.Output }],
        'checked': [{ type: core_1.Input }],
        'value': [{ type: core_1.Input }]
    };
    return Option;
}();
exports.Option = Option;

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var list_1 = __webpack_require__(309);
var util_1 = __webpack_require__(7);
var RADIO_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () {
        return RadioGroup;
    }), multi: true });
var RadioGroup = function () {
    function RadioGroup(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._btns = [];
        this._ids = -1;
        this._init = false;
        this.ionChange = new core_1.EventEmitter();
        this.id = ++radioGroupIds;
    }
    /**
     * @private
     */
    RadioGroup.prototype.writeValue = function (val) {
        console.debug('radio group, writeValue', val);
        this.value = val;
        if (this._init) {
            this._update();
            this.onTouched();
            this.ionChange.emit(val);
        }
        this._init = true;
    };
    /**
     * @private
     */
    RadioGroup.prototype.ngAfterContentInit = function () {
        var activeButton = this._btns.find(function (b) {
            return b.checked;
        });
        if (activeButton) {
            this._setActive(activeButton);
        }
    };
    /**
     * @private
     */
    RadioGroup.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function (val) {
            // onChange used when there's an ngControl
            console.debug('radio group, onChange', val);
            fn(val);
            _this.value = val;
            _this._update();
            _this.onTouched();
            _this.ionChange.emit(val);
        };
    };
    /**
     * @private
     */
    RadioGroup.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @private
     */
    RadioGroup.prototype._update = function () {
        var _this = this;
        // loop through each of the radiobuttons
        var hasChecked = false;
        this._btns.forEach(function (radioButton) {
            // check this radiobutton if its value is
            // the same as the radiogroups value
            radioButton.checked = util_1.isCheckedProperty(_this.value, radioButton.value) && !hasChecked;
            if (radioButton.checked) {
                // if this button is checked, then set it as
                // the radiogroup's active descendant
                _this._setActive(radioButton);
                hasChecked = true;
            }
        });
    };
    RadioGroup.prototype._setActive = function (radioButton) {
        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-activedescendant', radioButton.id);
    };
    /**
     * @private
     */
    RadioGroup.prototype.add = function (button) {
        var _this = this;
        this._btns.push(button);
        // listen for radiobutton select events
        button.ionSelect.subscribe(function (val) {
            // this radiobutton has been selected
            _this.onChange(val);
        });
        return this.id + '-' + ++this._ids;
    };
    /**
     * @private
     */
    RadioGroup.prototype.remove = function (button) {
        var index = this._btns.indexOf(button);
        if (index > -1) {
            if (button.value === this.value) {
                this.value = null;
            }
            this._btns.splice(index, 1);
        }
    };
    Object.defineProperty(RadioGroup.prototype, "_header", {
        set: function set(header) {
            if (header) {
                if (!header.id) {
                    header.id = 'rg-hdr-' + this.id;
                }
                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-describedby', header.id);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    RadioGroup.prototype.onChange = function (val) {
        // onChange used when there is not an ngControl
        console.debug('radio group, onChange w/out ngControl', val);
        this.value = val;
        this._update();
        this.onTouched();
        this.ionChange.emit(val);
    };
    /**
     * @private
     */
    RadioGroup.prototype.onTouched = function () {};
    /** @nocollapse */
    RadioGroup.decorators = [{ type: core_1.Directive, args: [{
            selector: '[radio-group]',
            host: {
                '[attr.aria-activedescendant]': 'activeId',
                'role': 'radiogroup'
            },
            providers: [RADIO_VALUE_ACCESSOR]
        }] }];
    /** @nocollapse */
    RadioGroup.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }];
    /** @nocollapse */
    RadioGroup.propDecorators = {
        'ionChange': [{ type: core_1.Output }],
        '_header': [{ type: core_1.ContentChild, args: [list_1.ListHeader] }]
    };
    return RadioGroup;
}();
exports.RadioGroup = RadioGroup;
var radioGroupIds = -1;

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var content_1 = __webpack_require__(111);
var dom_1 = __webpack_require__(17);
var util_1 = __webpack_require__(7);
var ui_event_manager_1 = __webpack_require__(153);
var Refresher = function () {
    function Refresher(_content, _zone) {
        this._content = _content;
        this._zone = _zone;
        this._appliedStyles = false;
        this._lastCheck = 0;
        this._isEnabled = true;
        this._events = new ui_event_manager_1.UIEventManager(false);
        this._top = '';
        /**
         * The current state which the refresher is in. The refresher's states include:
         *
         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.
         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.
         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.
         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.
         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.
         * - `completing` - The `refreshing` state has finished and the refresher is in the process of closing itself. Once closed, the refresher will go back to the `inactive` state.
         */
        this.state = STATE_INACTIVE;
        /**
         * The Y coordinate of where the user started to the pull down the content.
         */
        this.startY = null;
        /**
         * The current touch or mouse event's Y coordinate.
         */
        this.currentY = null;
        /**
         * The distance between the start of the pull and the current touch or
         * mouse event's Y coordinate.
         */
        this.deltaY = null;
        /**
         * A number representing how far down the user has pulled.
         * The number `0` represents the user hasn't pulled down at all. The
         * number `1`, and anything greater than `1`, represents that the user
         * has pulled far enough down that when they let go then the refresh will
         * happen. If they let go and the number is less than `1`, then the
         * refresh will not happen, and the content will return to it's original
         * position.
         */
        this.progress = 0;
        this.pullMin = 60;
        this.pullMax = this.pullMin + 60;
        this.closeDuration = 280;
        this.snapbackDuration = 280;
        this.ionRefresh = new core_1.EventEmitter();
        this.ionPull = new core_1.EventEmitter();
        this.ionStart = new core_1.EventEmitter();
        _content.addCssClass('has-refresher');
    }
    Object.defineProperty(Refresher.prototype, "enabled", {
        get: function get() {
            return this._isEnabled;
        },
        set: function set(val) {
            this._isEnabled = util_1.isTrueProperty(val);
            this._setListeners(this._isEnabled);
        },
        enumerable: true,
        configurable: true
    });
    Refresher.prototype._onStart = function (ev) {
        // if multitouch then get out immediately
        if (ev.touches && ev.touches.length > 1) {
            return false;
        }
        if (this.state !== STATE_INACTIVE) {
            return false;
        }
        var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
        // if the scrollTop is greater than zero then it's
        // not possible to pull the content down yet
        if (scrollHostScrollTop > 0) {
            return false;
        }
        var coord = dom_1.pointerCoord(ev);
        console.debug('Pull-to-refresh, onStart', ev.type, 'y:', coord.y);
        if (this._content.adjustedTop > 0) {
            var newTop = this._content.adjustedTop + 'px';
            if (this._top !== newTop) {
                this._top = newTop;
            }
        }
        this.startY = this.currentY = coord.y;
        this.progress = 0;
        this.state = STATE_PULLING;
        return true;
    };
    Refresher.prototype._onMove = function (ev) {
        // this method can get called like a bazillion times per second,
        // so it's built to be as efficient as possible, and does its
        // best to do any DOM read/writes only when absolutely necessary
        var _this = this;
        // if multitouch then get out immediately
        if (ev.touches && ev.touches.length > 1) {
            return 1;
        }
        // do nothing if it's actively refreshing
        // or it's in the process of closing
        // or this was never a startY
        if (this.startY === null || this.state === STATE_REFRESHING || this.state === STATE_CANCELLING || this.state === STATE_COMPLETING) {
            return 2;
        }
        // if we just updated stuff less than 16ms ago
        // then don't check again, just chillout plz
        var now = Date.now();
        if (this._lastCheck + 16 > now) {
            return 3;
        }
        // remember the last time we checked all this
        this._lastCheck = now;
        // get the current pointer coordinates
        var coord = dom_1.pointerCoord(ev);
        this.currentY = coord.y;
        // it's now possible they could be pulling down the content
        // how far have they pulled so far?
        this.deltaY = coord.y - this.startY;
        // don't bother if they're scrolling up
        // and have not already started dragging
        if (this.deltaY <= 0) {
            // the current Y is higher than the starting Y
            // so they scrolled up enough to be ignored
            this.progress = 0;
            if (this.state !== STATE_INACTIVE) {
                this._zone.run(function () {
                    _this.state = STATE_INACTIVE;
                });
            }
            if (this._appliedStyles) {
                // reset the styles only if they were applied
                this._setCss(0, '', false, '');
                return 5;
            }
            return 6;
        }
        if (this.state === STATE_INACTIVE) {
            // this refresh is not already actively pulling down
            // get the content's scrollTop
            var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
            // if the scrollTop is greater than zero then it's
            // not possible to pull the content down yet
            if (scrollHostScrollTop > 0) {
                this.progress = 0;
                this.startY = null;
                return 7;
            }
            // content scrolled all the way to the top, and dragging down
            this.state = STATE_PULLING;
        }
        // prevent native scroll events
        ev.preventDefault();
        // the refresher is actively pulling at this point
        // move the scroll element within the content element
        this._setCss(this.deltaY, '0ms', true, '');
        if (!this.deltaY) {
            // don't continue if there's no delta yet
            this.progress = 0;
            return 8;
        }
        // so far so good, let's run this all back within zone now
        this._zone.run(function () {
            _this._onMoveInZone();
        });
    };
    Refresher.prototype._onMoveInZone = function () {
        // set pull progress
        this.progress = this.deltaY / this.pullMin;
        // emit "start" if it hasn't started yet
        if (!this._didStart) {
            this._didStart = true;
            this.ionStart.emit(this);
        }
        // emit "pulling" on every move
        this.ionPull.emit(this);
        // do nothing if the delta is less than the pull threshold
        if (this.deltaY < this.pullMin) {
            // ensure it stays in the pulling state, cuz its not ready yet
            this.state = STATE_PULLING;
            return 2;
        }
        if (this.deltaY > this.pullMax) {
            // they pulled farther than the max, so kick off the refresh
            this._beginRefresh();
            return 3;
        }
        // pulled farther than the pull min!!
        // it is now in the `ready` state!!
        // if they let go then it'll refresh, kerpow!!
        this.state = STATE_READY;
        return 4;
    };
    Refresher.prototype._onEnd = function (ev) {
        // only run in a zone when absolutely necessary
        var _this = this;
        if (this.state === STATE_READY) {
            this._zone.run(function () {
                // they pulled down far enough, so it's ready to refresh
                _this._beginRefresh();
            });
        } else if (this.state === STATE_PULLING) {
            this._zone.run(function () {
                // they were pulling down, but didn't pull down far enough
                // set the content back to it's original location
                // and close the refresher
                // set that the refresh is actively cancelling
                _this.cancel();
            });
        }
        // reset on any touchend/mouseup
        this.startY = null;
    };
    Refresher.prototype._beginRefresh = function () {
        // assumes we're already back in a zone
        // they pulled down far enough, so it's ready to refresh
        this.state = STATE_REFRESHING;
        // place the content in a hangout position while it thinks
        this._setCss(this.pullMin, this.snapbackDuration + 'ms', true, '');
        // emit "refresh" because it was pulled down far enough
        // and they let go to begin refreshing
        this.ionRefresh.emit(this);
    };
    /**
     * Call `complete()` when your async operation has completed.
     * For example, the `refreshing` state is while the app is performing
     * an asynchronous operation, such as receiving more data from an
     * AJAX request. Once the data has been received, you then call this
     * method to signify that the refreshing has completed and to close
     * the refresher. This method also changes the refresher's state from
     * `refreshing` to `completing`.
     */
    Refresher.prototype.complete = function () {
        this._close(STATE_COMPLETING, '120ms');
    };
    /**
     * Changes the refresher's state from `refreshing` to `cancelling`.
     */
    Refresher.prototype.cancel = function () {
        this._close(STATE_CANCELLING, '');
    };
    Refresher.prototype._close = function (state, delay) {
        var timer;
        function close(ev) {
            // closing is done, return to inactive state
            if (ev) {
                clearTimeout(timer);
            }
            this.state = STATE_INACTIVE;
            this.progress = 0;
            this._didStart = this.startY = this.currentY = this.deltaY = null;
            this._setCss(0, '0ms', false, '');
        }
        // create fallback timer incase something goes wrong with transitionEnd event
        timer = setTimeout(close.bind(this), 600);
        // create transition end event on the content's scroll element
        this._content.onScrollElementTransitionEnd(close.bind(this));
        // reset set the styles on the scroll element
        // set that the refresh is actively cancelling/completing
        this.state = state;
        this._setCss(0, '', true, delay);
        if (this._pointerEvents) {
            this._pointerEvents.stop();
        }
    };
    Refresher.prototype._setCss = function (y, duration, overflowVisible, delay) {
        this._appliedStyles = y > 0;
        var content = this._content;
        content.setScrollElementStyle(dom_1.CSS.transform, y > 0 ? 'translateY(' + y + 'px) translateZ(0px)' : 'translateZ(0px)');
        content.setScrollElementStyle(dom_1.CSS.transitionDuration, duration);
        content.setScrollElementStyle(dom_1.CSS.transitionDelay, delay);
        content.setScrollElementStyle('overflow', overflowVisible ? 'hidden' : '');
    };
    Refresher.prototype._setListeners = function (shouldListen) {
        this._events.unlistenAll();
        this._pointerEvents = null;
        if (shouldListen) {
            this._pointerEvents = this._events.pointerEvents(this._content.getScrollElement(), this._onStart.bind(this), this._onMove.bind(this), this._onEnd.bind(this));
        }
    };
    /**
     * @private
     */
    Refresher.prototype.ngOnInit = function () {
        // bind event listeners
        // save the unregister listener functions to use onDestroy
        this._setListeners(this._isEnabled);
    };
    /**
     * @private
     */
    Refresher.prototype.ngOnDestroy = function () {
        this._setListeners(false);
    };
    /** @nocollapse */
    Refresher.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-refresher',
            host: {
                '[class.refresher-active]': 'state !== "inactive"',
                '[style.top]': '_top'
            }
        }] }];
    /** @nocollapse */
    Refresher.ctorParameters = [{ type: content_1.Content, decorators: [{ type: core_1.Host }] }, { type: core_1.NgZone }];
    /** @nocollapse */
    Refresher.propDecorators = {
        'pullMin': [{ type: core_1.Input }],
        'pullMax': [{ type: core_1.Input }],
        'closeDuration': [{ type: core_1.Input }],
        'snapbackDuration': [{ type: core_1.Input }],
        'enabled': [{ type: core_1.Input }],
        'ionRefresh': [{ type: core_1.Output }],
        'ionPull': [{ type: core_1.Output }],
        'ionStart': [{ type: core_1.Output }]
    };
    return Refresher;
}();
exports.Refresher = Refresher;
var STATE_INACTIVE = 'inactive';
var STATE_PULLING = 'pulling';
var STATE_READY = 'ready';
var STATE_REFRESHING = 'refreshing';
var STATE_CANCELLING = 'cancelling';
var STATE_COMPLETING = 'completing';

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var dom_1 = __webpack_require__(17);
var Activator = function () {
    function Activator(app, config) {
        this.app = app;
        this._queue = [];
        this._active = [];
        this._css = config.get('activatedClass') || 'activated';
    }
    Activator.prototype.downAction = function (ev, activatableEle, startCoord) {
        // the user just pressed down
        var self = this;
        if (self.disableActivated(ev)) {
            return;
        }
        // queue to have this element activated
        self._queue.push(activatableEle);
        dom_1.rafFrames(2, function () {
            var activatableEle;
            for (var i = 0; i < self._queue.length; i++) {
                activatableEle = self._queue[i];
                if (activatableEle && activatableEle.parentNode) {
                    self._active.push(activatableEle);
                    activatableEle.classList.add(self._css);
                }
            }
            self._queue = [];
        });
    };
    Activator.prototype.upAction = function (ev, activatableEle, startCoord) {
        var _this = this;
        // the user was pressing down, then just let up
        dom_1.rafFrames(CLEAR_STATE_DEFERS, function () {
            _this.clearState();
        });
    };
    Activator.prototype.clearState = function () {
        var _this = this;
        // all states should return to normal
        if (!this.app.isEnabled()) {
            // the app is actively disabled, so don't bother deactivating anything.
            // this makes it easier on the GPU so it doesn't have to redraw any
            // buttons during a transition. This will retry in XX milliseconds.
            dom_1.nativeTimeout(function () {
                _this.clearState();
            }, 600);
        } else {
            // not actively transitioning, good to deactivate any elements
            this.deactivate();
        }
    };
    Activator.prototype.deactivate = function () {
        // remove the active class from all active elements
        var self = this;
        self._queue = [];
        dom_1.rafFrames(2, function () {
            for (var i = 0; i < self._active.length; i++) {
                self._active[i].classList.remove(self._css);
            }
            self._active = [];
        });
    };
    Activator.prototype.disableActivated = function (ev) {
        if (ev.defaultPrevented) return true;
        var targetEle = ev.target;
        for (var x = 0; x < 4; x++) {
            if (!targetEle) break;
            if (targetEle.hasAttribute('disable-activated')) return true;
            targetEle = targetEle.parentElement;
        }
        return false;
    };
    return Activator;
}();
exports.Activator = Activator;
var CLEAR_STATE_DEFERS = 5;

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var VirtualHeader = function () {
    function VirtualHeader(templateRef) {
        this.templateRef = templateRef;
    }
    /** @nocollapse */
    VirtualHeader.decorators = [{ type: core_1.Directive, args: [{ selector: '[virtualHeader]' }] }];
    /** @nocollapse */
    VirtualHeader.ctorParameters = [{ type: core_1.TemplateRef }];
    return VirtualHeader;
}();
exports.VirtualHeader = VirtualHeader;
var VirtualFooter = function () {
    function VirtualFooter(templateRef) {
        this.templateRef = templateRef;
    }
    /** @nocollapse */
    VirtualFooter.decorators = [{ type: core_1.Directive, args: [{ selector: '[virtualFooter]' }] }];
    /** @nocollapse */
    VirtualFooter.ctorParameters = [{ type: core_1.TemplateRef }];
    return VirtualFooter;
}();
exports.VirtualFooter = VirtualFooter;
var VirtualItem = function () {
    function VirtualItem(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    /** @nocollapse */
    VirtualItem.decorators = [{ type: core_1.Directive, args: [{ selector: '[virtualItem]' }] }];
    /** @nocollapse */
    VirtualItem.ctorParameters = [{ type: core_1.TemplateRef }, { type: core_1.ViewContainerRef }];
    return VirtualItem;
}();
exports.VirtualItem = VirtualItem;

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_key__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ActionSheet; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @name ActionSheet
 * @description
 * An Action Sheet is a dialog that lets the user choose from a set of
 * options. It appears on top of the app's content, and must be manually
 * dismissed by the user before they can resume interaction with the app.
 * Dangerous (destructive) options are made obvious in `ios` mode. There are easy
 * ways to cancel out of the action sheet, such as tapping the backdrop or
 * hitting the escape key on desktop.
 *
 * An action sheet is created from an array of `buttons`, with each button
 * including properties for its `text`, and optionally a `handler` and `role`.
 * If a handler returns `false` then the action sheet will not be dismissed. An
 * action sheet can also optionally have a `title`, `subTitle` and an `icon`.
 *
 * A button's `role` property can either be `destructive` or `cancel`. Buttons
 * without a role property will have the default look for the platform. Buttons
 * with the `cancel` role will always load as the bottom button, no matter where
 * they are in the array. All other buttons will be displayed in the order they
 * have been added to the `buttons` array. Note: We recommend that `destructive`
 * buttons are always the first button in the array, making them the top button.
 * Additionally, if the action sheet is dismissed by tapping the backdrop, then
 * it will fire the handler from the button with the cancel role.
 *
 * You can pass all of the action sheet's options in the first argument of
 * the create method: `ActionSheet.create(opts)`. Otherwise the action sheet's
 * instance has methods to add options, like `setTitle()` or `addButton()`.
 *
 * @usage
 * ```ts
 * constructor(nav: NavController) {
 *   this.nav = nav;
 * }
 *
 * presentActionSheet() {
 *   let actionSheet = ActionSheet.create({
 *     title: 'Modify your album',
 *     buttons: [
 *       {
 *         text: 'Destructive',
 *         role: 'destructive',
 *         handler: () => {
 *           console.log('Destructive clicked');
 *         }
 *       },
 *       {
 *         text: 'Archive',
 *         handler: () => {
 *           console.log('Archive clicked');
 *         }
 *       },
 *       {
 *         text: 'Cancel',
 *         role: 'cancel',
 *         handler: () => {
 *           console.log('Cancel clicked');
 *         }
 *       }
 *     ]
 *   });
 *
 *   this.nav.present(actionSheet);
 * }
 * ```
 *
 *
 * ### Dismissing And Async Navigation
 *
 * After an action sheet has been dismissed, the app may need to also transition
 * to another page depending on the handler's logic. However, because multiple
 * transitions were fired at roughly the same time, it's difficult for the
 * nav controller to cleanly animate multiple transitions that may
 * have been kicked off asynchronously. This is further described in the
 * [`Nav Transition Promises`](../../nav/NavController/#nav-transition-promises) section. For action sheets,
 * this means it's best to wait for the action sheet to finish its transition
 * out before starting a new transition on the same nav controller.
 *
 * In the example below, after the button has been clicked, its handler
 * waits on async operation to complete, *then* it uses `pop` to navigate
 * back a page in the same stack. The potential problem is that the async operation
 * may have been completed before the action sheet has even finished its transition
 * out. In this case, it's best to ensure the action sheet has finished its transition
 * out first, *then* start the next transition.
 *
 * ```ts
 * let actionSheet = ActionSheet.create({
 *   title: 'Hello',
 *   buttons: [{
 *     text: 'Ok',
 *     handler: () => {
 *       // user has clicked the action sheet button
 *       // begin the action sheet's dimiss transition
 *       let navTransition = actionSheet.dismiss();
 *
 *       // start some async method
 *       someAsyncOperation().then(() => {
 *         // once the async operation has completed
 *         // then run the next nav transition after the
 *         // first transition has finished animating out
 *
 *         navTransition.then(() => {
 *           this.nav.pop();
 *         });
 *       });
 *       return false;
 *     }
 *   }]
 * });
 *
 * this.nav.present(actionSheet);
 * ```
 *
 * It's important to note that the handler returns `false`. A feature of
 * button handlers is that they automatically dismiss the action sheet when their button
 * was clicked, however, we'll need more control regarding the transition. Because
 * the handler returns `false`, then the action sheet does not automatically dismiss
 * itself. Instead, you now have complete control of when the action sheet has finished
 * transitioning, and the ability to wait for the action sheet to finish transitioning
 * out before starting a new transition.
 *
 *
 * @demo /docs/v2/demos/action-sheet/
 * @see {@link /docs/v2/components#action-sheets ActionSheet Component Docs}
 */
var ActionSheet = function (_ViewController) {
    _inherits(ActionSheet, _ViewController);

    function ActionSheet() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, ActionSheet);

        opts.buttons = opts.buttons || [];
        opts.enableBackdropDismiss = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheet).call(this, ActionSheetCmp, opts));

        _this.isOverlay = true;
        // by default, actionsheets should not fire lifecycle events of other views
        // for example, when an actionsheets enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        _this.fireOtherLifecycles = false;
        return _this;
    }
    /**
    * @private
    */

    _createClass(ActionSheet, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = 'actionSheet' + (direction === 'back' ? 'Leave' : 'Enter');
            return this._nav && this._nav.config.get(key);
        }
        /**
         * @param {string} title Action sheet title
         */

    }, {
        key: "setTitle",
        value: function setTitle(title) {
            this.data.title = title;
        }
        /**
         * @param {string} subTitle Action sheet subtitle
         */

    }, {
        key: "setSubTitle",
        value: function setSubTitle(subTitle) {
            this.data.subTitle = subTitle;
        }
        /**
         * @param {object} button Action sheet button
         */

    }, {
        key: "addButton",
        value: function addButton(button) {
            this.data.buttons.push(button);
        }
        /**
         * Open an action sheet with the following options
         *
         * | Option                | Type       | Description                                                     |
         * |-----------------------|------------|-----------------------------------------------------------------|
         * | title                 |`string`    | The title for the actionsheet                                   |
         * | subTitle              |`string`    | The sub-title for the actionsheet                               |
         * | cssClass              |`string`    | An additional class for custom styles                           |
         * | enableBackdropDismiss |`boolean`   | If the actionsheet should close when the user taps the backdrop |
         * | buttons               |`array<any>`| An array of buttons to display                                  |
         *
         * For the buttons:
         *
         * | Option   | Type     | Description                                                                                                                                      |
         * |----------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------|
         * | text     | `string` | The buttons text                                                                                                                                 |
         * | icon     | `icon`   | The buttons icons                                                                                                                                |
         * | handler  | `any`    | An express the button should evaluate                                                                                                            |
         * | cssClass | `string` | An additional class for custom styles                                                                                                            |
         * | role     | `string` | How the button should be displayed, `destructive` or `cancel`. If not role is provided, it will display the button without any additional styles |
         *
         *
         *
         * @param {object} opts Action sheet options
         */

    }], [{
        key: "create",
        value: function create() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            return new ActionSheet(opts);
        }
    }]);

    return ActionSheet;
}(__WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]);
/**
* @private
*/
var ActionSheetCmp = function () {
    function ActionSheetCmp(_viewCtrl, _config, _elementRef, params, renderer) {
        _classCallCheck(this, ActionSheetCmp);

        this._viewCtrl = _viewCtrl;
        this._config = _config;
        this._elementRef = _elementRef;
        this.d = params.data;
        if (this.d.cssClass) {
            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
        }
        this.id = ++actionSheetIds;
        if (this.d.title) {
            this.hdrId = 'acst-hdr-' + this.id;
        }
        if (this.d.subTitle) {
            this.descId = 'acst-subhdr-' + this.id;
        }
    }

    _createClass(ActionSheetCmp, [{
        key: "ionViewLoaded",
        value: function ionViewLoaded() {
            var _this2 = this;

            // normalize the data
            var buttons = [];
            this.d.buttons.forEach(function (button) {
                if (typeof button === 'string') {
                    button = { text: button };
                }
                if (!button.cssClass) {
                    button.cssClass = '';
                }
                // deprecated warning
                if (button.style) {
                    console.warn('Action sheet "style" property has been renamed to "role"');
                    button.role = button.style;
                }
                if (button.role === 'cancel') {
                    _this2.d.cancelButton = button;
                } else {
                    if (button.role === 'destructive') {
                        button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';
                    } else if (button.role === 'selected') {
                        button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-selected';
                    }
                    buttons.push(button);
                }
            });
            this.d.buttons = buttons;
        }
    }, {
        key: "ionViewDidEnter",
        value: function ionViewDidEnter() {
            var activeElement = document.activeElement;
            if (document.activeElement) {
                activeElement.blur();
            }
            var focusableEle = this._elementRef.nativeElement.querySelector('button');
            if (focusableEle) {
                focusableEle.focus();
            }
            this.enabled = true;
        }
    }, {
        key: "_keyUp",
        value: function _keyUp(ev) {
            if (this.enabled && this._viewCtrl.isLast()) {
                if (ev.keyCode === __WEBPACK_IMPORTED_MODULE_6__util_key__["a" /* Key */].ESCAPE) {
                    console.debug('actionsheet, escape button');
                    this.bdClick();
                }
            }
        }
    }, {
        key: "click",
        value: function click(button, dismissDelay) {
            var _this3 = this;

            if (!this.enabled) {
                return;
            }
            var shouldDismiss = true;
            if (button.handler) {
                // a handler has been provided, execute it
                if (button.handler() === false) {
                    // if the return value of the handler is false then do not dismiss
                    shouldDismiss = false;
                }
            }
            if (shouldDismiss) {
                setTimeout(function () {
                    _this3.dismiss(button.role);
                }, dismissDelay || this._config.get('pageTransitionDelay'));
            }
        }
    }, {
        key: "bdClick",
        value: function bdClick() {
            if (this.enabled && this.d.enableBackdropDismiss) {
                if (this.d.cancelButton) {
                    this.click(this.d.cancelButton, 1);
                } else {
                    this.dismiss('backdrop');
                }
            }
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(null, role);
        }
    }]);

    return ActionSheetCmp;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], ActionSheetCmp.prototype, "_keyUp", null);
ActionSheetCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-action-sheet',
    template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="action-sheet-wrapper">' + '<div class="action-sheet-container">' + '<div class="action-sheet-group">' + '<div class="action-sheet-title" id="{{hdrId}}" *ngIf="d.title">{{d.title}}</div>' + '<div class="action-sheet-sub-title" id="{{descId}}" *ngIf="d.subTitle">{{d.subTitle}}</div>' + '<button category="action-sheet-button" (click)="click(b)" *ngFor="let b of d.buttons" class="disable-hover" [ngClass]="b.cssClass">' + '<ion-icon [name]="b.icon" *ngIf="b.icon" class="action-sheet-icon"></ion-icon> ' + '{{b.text}}' + '</button>' + '</div>' + '<div class="action-sheet-group" *ngIf="d.cancelButton">' + '<button category="action-sheet-button" (click)="click(d.cancelButton)" class="action-sheet-cancel disable-hover" [ngClass]="d.cancelButton.cssClass">' + '<ion-icon [name]="d.cancelButton.icon" *ngIf="d.cancelButton.icon" class="action-sheet-icon"></ion-icon> ' + '{{d.cancelButton.text}}' + '</button>' + '</div>' + '</div>' + '</div>',
    host: {
        'role': 'dialog',
        '[attr.aria-labelledby]': 'hdrId',
        '[attr.aria-describedby]': 'descId'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__config_config__["Config"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _e || Object])], ActionSheetCmp);

var ActionSheetSlideIn = function (_Transition) {
    _inherits(ActionSheetSlideIn, _Transition);

    function ActionSheetSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ActionSheetSlideIn);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.4);
        wrapper.fromTo('translateY', '100%', '0%');
        _this4.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
        return _this4;
    }

    return ActionSheetSlideIn;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('action-sheet-slide-in', ActionSheetSlideIn);

var ActionSheetSlideOut = function (_Transition2) {
    _inherits(ActionSheetSlideOut, _Transition2);

    function ActionSheetSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ActionSheetSlideOut);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.4, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        _this5.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(backdrop).add(wrapper);
        return _this5;
    }

    return ActionSheetSlideOut;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('action-sheet-slide-out', ActionSheetSlideOut);

var ActionSheetMdSlideIn = function (_Transition3) {
    _inherits(ActionSheetMdSlideIn, _Transition3);

    function ActionSheetMdSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ActionSheetMdSlideIn);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetMdSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.26);
        wrapper.fromTo('translateY', '100%', '0%');
        _this6.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
        return _this6;
    }

    return ActionSheetMdSlideIn;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('action-sheet-md-slide-in', ActionSheetMdSlideIn);

var ActionSheetMdSlideOut = function (_Transition4) {
    _inherits(ActionSheetMdSlideOut, _Transition4);

    function ActionSheetMdSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ActionSheetMdSlideOut);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetMdSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.26, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        _this7.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
        return _this7;
    }

    return ActionSheetMdSlideOut;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('action-sheet-md-slide-out', ActionSheetMdSlideOut);

var ActionSheetWpSlideIn = function (_Transition5) {
    _inherits(ActionSheetWpSlideIn, _Transition5);

    function ActionSheetWpSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ActionSheetWpSlideIn);

        var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetWpSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.16);
        wrapper.fromTo('translateY', '100%', '0%');
        _this8.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
        return _this8;
    }

    return ActionSheetWpSlideIn;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('action-sheet-wp-slide-in', ActionSheetWpSlideIn);

var ActionSheetWpSlideOut = function (_Transition6) {
    _inherits(ActionSheetWpSlideOut, _Transition6);

    function ActionSheetWpSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ActionSheetWpSlideOut);

        var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetWpSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.1, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        _this9.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
        return _this9;
    }

    return ActionSheetWpSlideOut;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('action-sheet-wp-slide-out', ActionSheetWpSlideOut);
var actionSheetIds = -1;
var _a, _b, _c, _d, _e;

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_key__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Alert; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @name Alert
 * @description
 * An Alert is a dialog that presents users with information or collects
 * information from the user using inputs. An alert appears on top
 * of the app's content, and must be manually dismissed by the user before
 * they can resume interaction with the app. It can also optionally have a
 * `title`, `subTitle` and `message`.
 *
 * You can pass all of the alert's options in the first argument of
 * the create method: `Alert.create(opts)`. Otherwise the alert's instance
 * has methods to add options, such as `setTitle()` or `addButton()`.
 *
 *
 * ### Alert Buttons
 *
 * In the array of `buttons`, each button includes properties for its `text`,
 * and optionally a `handler`. If a handler returns `false` then the alert
 * will not automatically be dismissed when the button is clicked. All
 * buttons will show  up in the order they have been added to the `buttons`
 * array, from left to right. Note: The right most button (the last one in
 * the array) is the main button.
 *
 * Optionally, a `role` property can be added to a button, such as `cancel`.
 * If a `cancel` role is on one of the buttons, then if the alert is
 * dismissed by tapping the backdrop, then it will fire the handler from
 * the button with a cancel role.
 *
 *
 * ### Alert Inputs
 *
 * Alerts can also include several different inputs whose data can be passed
 * back to the app. Inputs can be used as a simple way to prompt users for
 * information. Radios, checkboxes and text inputs are all accepted, but they
 * cannot be mixed. For example, an alert could have all radio button inputs,
 * or all checkbox inputs, but the same alert cannot mix radio and checkbox
 * inputs. Do note however, different types of "text"" inputs can be mixed,
 * such as `url`, `email`, `text`, etc. If you require a complex form UI
 * which doesn't fit within the guidelines of an alert then we recommend
 * building the form within a modal instead.
 *
 *
 * @usage
 * ```ts
 * constructor(nav: NavController) {
 *   this.nav = nav;
 * }
 *
 * presentAlert() {
 *   let alert = Alert.create({
 *     title: 'Low battery',
 *     subTitle: '10% of battery remaining',
 *     buttons: ['Dismiss']
 *   });
 *   this.nav.present(alert);
 * }
 *
 * presentConfirm() {
 *   let alert = Alert.create({
 *     title: 'Confirm purchase',
 *     message: 'Do you want to buy this book?',
 *     buttons: [
 *       {
 *         text: 'Cancel',
 *         role: 'cancel',
 *         handler: () => {
 *           console.log('Cancel clicked');
 *         }
 *       },
 *       {
 *         text: 'Buy',
 *         handler: () => {
 *           console.log('Buy clicked');
 *         }
 *       }
 *     ]
 *   });
 *   this.nav.present(alert);
 * }
 *
 * presentPrompt() {
 *   let alert = Alert.create({
 *     title: 'Login',
 *     inputs: [
 *       {
 *         name: 'username',
 *         placeholder: 'Username'
 *       },
 *       {
 *         name: 'password',
 *         placeholder: 'Password',
 *         type: 'password'
 *       }
 *     ],
 *     buttons: [
 *       {
 *         text: 'Cancel',
 *         role: 'cancel',
 *         handler: data => {
 *           console.log('Cancel clicked');
 *         }
 *       },
 *       {
 *         text: 'Login',
 *         handler: data => {
 *           if (User.isValid(data.username, data.password)) {
 *             // logged in!
 *           } else {
 *             // invalid login
 *             return false;
 *           }
 *         }
 *       }
 *     ]
 *   });
 *   this.nav.present(alert);
 * }
 * ```
 *
 *
 * ### Dismissing And Async Navigation
 *
 * After an alert has been dismissed, the app may need to also transition
 * to another page depending on the handler's logic. However, because multiple
 * transitions were fired at roughly the same time, it's difficult for the
 * nav controller to cleanly animate multiple transitions that may
 * have been kicked off asynchronously. This is further described in the
 * [`Nav Transition Promises`](../../nav/NavController) section. For alerts,
 * this means it's best to wait for the alert to finish its transition
 * out before starting a new transition on the same nav controller.
 *
 * In the example below, after the alert button has been clicked, its handler
 * waits on async operation to complete, *then* it uses `pop` to navigate
 * back a page in the same stack. The potential problem is that the async operation
 * may have been completed before the alert has even finished its transition
 * out. In this case, it's best to ensure the alert has finished its transition
 * out first, *then* start the next transition.
 *
 * ```ts
 * let alert = Alert.create({
 *   title: 'Hello',
 *   buttons: [{
 *     text: 'Ok',
 *     handler: () => {
 *       // user has clicked the alert button
 *       // begin the alert's dismiss transition
 *       let navTransition = alert.dismiss();
 *
 *       // start some async method
 *       someAsyncOperation().then(() => {
 *         // once the async operation has completed
 *         // then run the next nav transition after the
 *         // first transition has finished animating out
 *
 *         navTransition.then(() => {
 *           this.nav.pop();
 *         });
 *       });
 *       return false;
 *     }
 *   }]
 * });
 *
 * this.nav.present(alert);
 * ```
 *
 * It's important to note that the handler returns `false`. A feature of
 * button handlers is that they automatically dismiss the alert when their button
 * was clicked, however, we'll need more control regarding the transition. Because
 * the handler returns `false`, then the alert does not automatically dismiss
 * itself. Instead, you now have complete control of when the alert has finished
 * transitioning, and the ability to wait for the alert to finish transitioning
 * out before starting a new transition.
 *
 *
 * @demo /docs/v2/demos/alert/
 */
var Alert = function (_ViewController) {
    _inherits(Alert, _ViewController);

    function Alert() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, Alert);

        opts.inputs = opts.inputs || [];
        opts.buttons = opts.buttons || [];
        opts.enableBackdropDismiss = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Alert).call(this, AlertCmp, opts));

        _this.isOverlay = true;
        // by default, alerts should not fire lifecycle events of other views
        // for example, when an alert enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        _this.fireOtherLifecycles = false;
        return _this;
    }
    /**
    * @private
    */

    _createClass(Alert, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = direction === 'back' ? 'alertLeave' : 'alertEnter';
            return this._nav && this._nav.config.get(key);
        }
        /**
         * @param {string} title Alert title
         */

    }, {
        key: "setTitle",
        value: function setTitle(title) {
            this.data.title = title;
        }
        /**
         * @param {string} subTitle Alert subtitle
         */

    }, {
        key: "setSubTitle",
        value: function setSubTitle(subTitle) {
            this.data.subTitle = subTitle;
        }
        /**
         * @private
         */

    }, {
        key: "setBody",
        value: function setBody(message) {
            // deprecated warning
            console.warn('Alert setBody() has been renamed to setMessage()');
            this.setMessage(message);
        }
        /**
         * @param {string} message  Alert message content
         */

    }, {
        key: "setMessage",
        value: function setMessage(message) {
            this.data.message = message;
        }
        /**
         * @param {object} input Alert input
         */

    }, {
        key: "addInput",
        value: function addInput(input) {
            this.data.inputs.push(input);
        }
        /**
         * @param {any} button Alert button
         */

    }, {
        key: "addButton",
        value: function addButton(button) {
            this.data.buttons.push(button);
        }
        /**
         * @param {string} cssClass CSS class name to add to the alert's outer wrapper
         */

    }, {
        key: "setCssClass",
        value: function setCssClass(cssClass) {
            this.data.cssClass = cssClass;
        }
        /**
         *
         *  Alert options
         *
         *  | Property              | Type      | Description                                                               |
         *  |-----------------------|-----------|---------------------------------------------------------------------------|
         *  | title                 | `string`  | The string for the alert (optional)                                       |
         *  | subTitle              | `string`  | The subtitle for the alert (optional)                                     |
         *  | message               | `string`  | The message for the alert (optional)                                      |
         *  | cssClass              | `string`  | Any additional class for the alert (optional)                             |
         *  | inputs                | `array`   | An array of inputs for the alert. See input options. (optional)           |
         *  | buttons               | `array`   | An array of buttons for the alert. See buttons options. (optional)        |
         *  | enableBackdropDismiss | `boolean` | Whether the alert should be dismissed by tapping the backdrop (optional)  |
         *
         *
         *  Input options
         *
         *  | Property    | Type      | Description                                                     |
         *  |-------------|-----------|-----------------------------------------------------------------|
         *  | type        | `string`  | The type the input should be, text, tel, number, etc (optional) |
         *  | name        | `string`  | The name for the input (optional)                               |
         *  | placeholder | `string`  | The input's placeholder (optional, for textual/numeric inputs)  |
         *  | value       | `string`  | The input's value (optional)                                    |
         *  | label       | `string`  | The input's label (optional, only for radio/checkbox inputs)    |
         *  | checked     | `boolean` | Whether or not the input is checked or not (optional)           |
         *  | id          | `string`  | The input's id (optional)                                       |
         *
         *  Button options
         *
         *  | Property | Type     | Description                                                    |
         *  |----------|----------|----------------------------------------------------------------|
         *  | text     | `string` | The buttons displayed text                                     |
         *  | handler  | `any`    | Expression that should be evaluated when the button is pressed |
         *  | cssClass | `string` | An additional CSS class for the button                         |
         *  | role     | `string` | The buttons role, null or `cancel`                             |
         *
         * @param {object} opts Alert. See the table above
         */

    }], [{
        key: "create",
        value: function create() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            return new Alert(opts);
        }
    }]);

    return Alert;
}(__WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]);
/**
 * @private
 */
var AlertCmp = function () {
    function AlertCmp(_viewCtrl, _elementRef, _config, params, renderer) {
        _classCallCheck(this, AlertCmp);

        this._viewCtrl = _viewCtrl;
        this._elementRef = _elementRef;
        this._config = _config;
        this.d = params.data;
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(function (cssClass) {
                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = ++alertIds;
        this.descId = '';
        this.hdrId = 'alert-hdr-' + this.id;
        this.subHdrId = 'alert-subhdr-' + this.id;
        this.msgId = 'alert-msg-' + this.id;
        this.activeId = '';
        this.lastClick = 0;
        if (this.d.message) {
            this.descId = this.msgId;
        } else if (this.d.subTitle) {
            this.descId = this.subHdrId;
        }
        if (!this.d.message) {
            this.d.message = '';
        }
    }

    _createClass(AlertCmp, [{
        key: "ionViewLoaded",
        value: function ionViewLoaded() {
            var _this2 = this;

            // normalize the data
            var data = this.d;
            data.buttons = data.buttons.map(function (button) {
                if (typeof button === 'string') {
                    return { text: button };
                }
                return button;
            });
            data.inputs = data.inputs.map(function (input, index) {
                return {
                    type: input.type || 'text',
                    name: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(input.name) ? input.name : index,
                    placeholder: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(input.placeholder) ? input.placeholder : '',
                    value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(input.value) ? input.value : '',
                    label: input.label,
                    checked: !!input.checked,
                    id: 'alert-input-' + _this2.id + '-' + index
                };
            });
            // An alert can be created with several different inputs. Radios,
            // checkboxes and inputs are all accepted, but they cannot be mixed.
            var inputTypes = [];
            data.inputs.forEach(function (input) {
                if (inputTypes.indexOf(input.type) < 0) {
                    inputTypes.push(input.type);
                }
            });
            if (inputTypes.length > 1 && (inputTypes.indexOf('checkbox') > -1 || inputTypes.indexOf('radio') > -1)) {
                console.warn('Alert cannot mix input types: ' + inputTypes.join('/') + '. Please see alert docs for more info.');
            }
            this.inputType = inputTypes.length ? inputTypes[0] : null;
            var checkedInput = this.d.inputs.find(function (input) {
                return input.checked;
            });
            if (checkedInput) {
                this.activeId = checkedInput.id;
            }
        }
    }, {
        key: "_keyUp",
        value: function _keyUp(ev) {
            if (this.enabled && this._viewCtrl.isLast()) {
                if (ev.keyCode === __WEBPACK_IMPORTED_MODULE_6__util_key__["a" /* Key */].ENTER) {
                    if (this.lastClick + 1000 < Date.now()) {
                        // do not fire this click if there recently was already a click
                        // this can happen when the button has focus and used the enter
                        // key to click the button. However, both the click handler and
                        // this keyup event will fire, so only allow one of them to go.
                        console.debug('alert, enter button');
                        var button = this.d.buttons[this.d.buttons.length - 1];
                        this.btnClick(button);
                    }
                } else if (ev.keyCode === __WEBPACK_IMPORTED_MODULE_6__util_key__["a" /* Key */].ESCAPE) {
                    console.debug('alert, escape button');
                    this.bdClick();
                }
            }
        }
    }, {
        key: "ionViewDidEnter",
        value: function ionViewDidEnter() {
            var activeElement = document.activeElement;
            if (document.activeElement) {
                activeElement.blur();
            }
            var focusableEle = this._elementRef.nativeElement.querySelector('input,button');
            if (focusableEle) {
                focusableEle.focus();
            }
            this.enabled = true;
        }
    }, {
        key: "btnClick",
        value: function btnClick(button, dismissDelay) {
            var _this3 = this;

            if (!this.enabled) {
                return;
            }
            // keep the time of the most recent button click
            this.lastClick = Date.now();
            var shouldDismiss = true;
            if (button.handler) {
                // a handler has been provided, execute it
                // pass the handler the values from the inputs
                if (button.handler(this.getValues()) === false) {
                    // if the return value of the handler is false then do not dismiss
                    shouldDismiss = false;
                }
            }
            if (shouldDismiss) {
                setTimeout(function () {
                    _this3.dismiss(button.role);
                }, dismissDelay || this._config.get('pageTransitionDelay'));
            }
        }
    }, {
        key: "rbClick",
        value: function rbClick(checkedInput) {
            if (this.enabled) {
                this.d.inputs.forEach(function (input) {
                    input.checked = checkedInput === input;
                });
                this.activeId = checkedInput.id;
            }
        }
    }, {
        key: "cbClick",
        value: function cbClick(checkedInput) {
            if (this.enabled) {
                checkedInput.checked = !checkedInput.checked;
            }
        }
    }, {
        key: "bdClick",
        value: function bdClick() {
            if (this.enabled && this.d.enableBackdropDismiss) {
                var cancelBtn = this.d.buttons.find(function (b) {
                    return b.role === 'cancel';
                });
                if (cancelBtn) {
                    this.btnClick(cancelBtn, 1);
                } else {
                    this.dismiss('backdrop');
                }
            }
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(this.getValues(), role);
        }
    }, {
        key: "getValues",
        value: function getValues() {
            if (this.inputType === 'radio') {
                // this is an alert with radio buttons (single value select)
                // return the one value which is checked, otherwise undefined
                var checkedInput = this.d.inputs.find(function (i) {
                    return i.checked;
                });
                return checkedInput ? checkedInput.value : undefined;
            }
            if (this.inputType === 'checkbox') {
                // this is an alert with checkboxes (multiple value select)
                // return an array of all the checked values
                return this.d.inputs.filter(function (i) {
                    return i.checked;
                }).map(function (i) {
                    return i.value;
                });
            }
            // this is an alert with text inputs
            // return an object of all the values with the input name as the key
            var values = {};
            this.d.inputs.forEach(function (i) {
                values[i.name] = i.value;
            });
            return values;
        }
    }]);

    return AlertCmp;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], AlertCmp.prototype, "_keyUp", null);
AlertCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-alert',
    template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="alert-wrapper">' + '<div class="alert-head">' + '<h2 id="{{hdrId}}" class="alert-title" *ngIf="d.title" [innerHTML]="d.title"></h2>' + '<h3 id="{{subHdrId}}" class="alert-sub-title" *ngIf="d.subTitle" [innerHTML]="d.subTitle"></h3>' + '</div>' + '<div id="{{msgId}}" class="alert-message" [innerHTML]="d.message"></div>' + '<div *ngIf="d.inputs.length" [ngSwitch]="inputType">' + '<template ngSwitchCase="radio">' + '<div class="alert-radio-group" role="radiogroup" [attr.aria-labelledby]="hdrId" [attr.aria-activedescendant]="activeId">' + '<button category="alert-radio-button" *ngFor="let i of d.inputs" (click)="rbClick(i)" [attr.aria-checked]="i.checked" [attr.id]="i.id" class="alert-tappable alert-radio" role="radio">' + '<div class="alert-radio-icon"><div class="alert-radio-inner"></div></div>' + '<div class="alert-radio-label">' + '{{i.label}}' + '</div>' + '</button>' + '</div>' + '</template>' + '<template ngSwitchCase="checkbox">' + '<div class="alert-checkbox-group">' + '<button category="alert-checkbox-button" *ngFor="let i of d.inputs" (click)="cbClick(i)" [attr.aria-checked]="i.checked" class="alert-tappable alert-checkbox" role="checkbox">' + '<div class="alert-checkbox-icon"><div class="alert-checkbox-inner"></div></div>' + '<div class="alert-checkbox-label">' + '{{i.label}}' + '</div>' + '</button>' + '</div>' + '</template>' + '<template ngSwitchDefault>' + '<div class="alert-input-group">' + '<div *ngFor="let i of d.inputs" class="alert-input-wrapper">' + '<input [placeholder]="i.placeholder" [(ngModel)]="i.value" [type]="i.type" class="alert-input">' + '</div>' + '</div>' + '</template>' + '</div>' + '<div class="alert-button-group" [ngClass]="{vertical: d.buttons.length>2}">' + '<button category="alert-button" *ngFor="let b of d.buttons" (click)="btnClick(b)" [ngClass]="b.cssClass">' + '{{b.text}}' + '</button>' + '</div>' + '</div>',
    host: {
        'role': 'dialog',
        '[attr.aria-labelledby]': 'hdrId',
        '[attr.aria-describedby]': 'descId'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__config_config__["Config"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _e || Object])], AlertCmp);
/**
 * Animations for alerts
 */

var AlertPopIn = function (_Transition) {
    _inherits(AlertPopIn, _Transition);

    function AlertPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, AlertPopIn);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
        backdrop.fromTo('opacity', 0.01, 0.3);
        _this4.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this4;
    }

    return AlertPopIn;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('alert-pop-in', AlertPopIn);

var AlertPopOut = function (_Transition2) {
    _inherits(AlertPopOut, _Transition2);

    function AlertPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, AlertPopOut);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
        backdrop.fromTo('opacity', 0.3, 0);
        _this5.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this5;
    }

    return AlertPopOut;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('alert-pop-out', AlertPopOut);

var AlertMdPopIn = function (_Transition3) {
    _inherits(AlertMdPopIn, _Transition3);

    function AlertMdPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, AlertMdPopIn);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertMdPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
        backdrop.fromTo('opacity', 0.01, 0.5);
        _this6.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this6;
    }

    return AlertMdPopIn;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('alert-md-pop-in', AlertMdPopIn);

var AlertMdPopOut = function (_Transition4) {
    _inherits(AlertMdPopOut, _Transition4);

    function AlertMdPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, AlertMdPopOut);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertMdPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
        backdrop.fromTo('opacity', 0.5, 0);
        _this7.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this7;
    }

    return AlertMdPopOut;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('alert-md-pop-out', AlertMdPopOut);

var AlertWpPopIn = function (_Transition5) {
    _inherits(AlertWpPopIn, _Transition5);

    function AlertWpPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, AlertWpPopIn);

        var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertWpPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
        backdrop.fromTo('opacity', 0.01, 0.5);
        _this8.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(backdrop).add(wrapper);
        return _this8;
    }

    return AlertWpPopIn;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('alert-wp-pop-in', AlertWpPopIn);

var AlertWpPopOut = function (_Transition6) {
    _inherits(AlertWpPopOut, _Transition6);

    function AlertWpPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, AlertWpPopOut);

        var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertWpPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
        backdrop.fromTo('opacity', 0.5, 0);
        _this9.easing('ease-out').duration(150).add(backdrop).add(wrapper);
        return _this9;
    }

    return AlertWpPopOut;
}(__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_3__transitions_transition__["Transition"].register('alert-wp-pop-out', AlertWpPopOut);
var alertIds = -1;
var _a, _b, _c, _d, _e;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_config__ = __webpack_require__(12);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Badge; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
  * @name Badge
  * @module ionic
  * @description
  * Badges are simple components in Ionic containing numbers or text. You can display a badge to indicate that there is new information associated with the item it is on.
  * @see {@link /docs/v2/components/#badges Badges Component Docs}

 */
var Badge = function () {
    function Badge(config, _elementRef, _renderer) {
        _classCallCheck(this, Badge);

        this._elementRef = _elementRef;
        this._renderer = _renderer;
        var element = _elementRef.nativeElement;
        this._readAttrs(element);
    }
    /**
     * @private
     */

    _createClass(Badge, [{
        key: "_readAttrs",
        value: function _readAttrs(element) {
            var elementAttrs = element.attributes;
            var attrName = void 0;
            for (var i = 0, l = elementAttrs.length; i < l; i++) {
                if (elementAttrs[i].value !== '') continue;
                attrName = elementAttrs[i].name;
                // Ignore attributes item-left, item-right
                if (attrName.indexOf('item') === -1) {
                    this._setClass(attrName);
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "_setClass",
        value: function _setClass(color) {
            this._renderer.setElementClass(this._elementRef.nativeElement, 'badge-' + color, true);
        }
    }]);

    return Badge;
}();
Badge = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-badge'
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _c || Object])], Badge);
var _a, _b, _c;

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* unused harmony export CHECKBOX_VALUE_ACCESSOR */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return Checkbox; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};





var CHECKBOX_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Provider"](__WEBPACK_IMPORTED_MODULE_1__angular_common__["NG_VALUE_ACCESSOR"], { useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return Checkbox;
    }), multi: true });
/**
 * @name Checkbox
 * @module ionic
 *
 * @description
 * The Checkbox is a simple component styled based on the mode. It can be
 * placed in an `ion-item` or used as a stand-alone checkbox.
 *
 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
 * for more info on forms and inputs.
 *
 *
 * @usage
 * ```html
 *
 *  <ion-list>
 *
 *    <ion-item>
 *      <ion-label>Pepperoni</ion-label>
 *      <ion-checkbox [(ngModel)]="pepperoni"></ion-checkbox>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Sausage</ion-label>
 *      <ion-checkbox [(ngModel)]="sausage" disabled="true"></ion-checkbox>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Mushrooms</ion-label>
 *      <ion-checkbox [(ngModel)]="mushrooms"></ion-checkbox>
 *    </ion-item>
 *
 *  </ion-list>
 * ```
 *
 * @demo /docs/v2/demos/checkbox/
 * @see {@link /docs/v2/components#checkbox Checkbox Component Docs}
 */
var Checkbox = function () {
    function Checkbox(_form, _item) {
        _classCallCheck(this, Checkbox);

        this._form = _form;
        this._item = _item;
        this._checked = false;
        this._disabled = false;
        /**
         * @output {Checkbox} expression to evaluate when the checkbox value changes
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _form.register(this);
        if (_item) {
            this.id = 'chk-' + _item.registerInput('checkbox');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-checkbox', true);
        }
    }
    /**
     * @private
     */

    _createClass(Checkbox, [{
        key: "_click",
        value: function _click(ev) {
            console.debug('checkbox, checked');
            ev.preventDefault();
            ev.stopPropagation();
            this.onChange(!this._checked);
        }
        /**
         * @input {boolean} whether or not the checkbox is checked (defaults to false)
         */

    }, {
        key: "_setChecked",

        /**
         * @private
         */
        value: function _setChecked(isChecked) {
            if (isChecked !== this._checked) {
                this._checked = isChecked;
                if (this._init) {
                    this.ionChange.emit(this);
                }
                this._item && this._item.setCssClass('item-checkbox-checked', isChecked);
            }
        }
        /**
         * @private
         */

    }, {
        key: "writeValue",
        value: function writeValue(val) {
            this._setChecked(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val));
        }
        /**
         * @private
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            var _this = this;

            this._fn = fn;
            this.onChange = function (isChecked) {
                console.debug('checkbox, onChange', isChecked);
                fn(isChecked);
                _this._setChecked(isChecked);
                _this.onTouched();
            };
        }
        /**
         * @private
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
        /**
         * @input {boolean} whether or not the checkbox is disabled or not.
         */

    }, {
        key: "onChange",

        /**
         * @private
         */
        value: function onChange(isChecked) {
            // used when this input does not have an ngModel or ngControl
            console.debug('checkbox, onChange (no ngModel)', isChecked);
            this._setChecked(isChecked);
            this.onTouched();
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched() {}
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            this._init = true;
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
        }
    }, {
        key: "checked",
        get: function get() {
            return this._checked;
        },
        set: function set(val) {
            this._setChecked(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val));
            this.onChange(this._checked);
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-checkbox-disabled', this._disabled);
        }
    }]);

    return Checkbox;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Checkbox.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Checkbox.prototype, "_click", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Checkbox.prototype, "checked", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Checkbox.prototype, "disabled", null);
Checkbox = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-checkbox',
    template: '<div class="checkbox-icon" [class.checkbox-checked]="_checked">' + '<div class="checkbox-inner"></div>' + '</div>' + '<button role="checkbox" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
    host: {
        '[class.checkbox-disabled]': '_disabled'
    },
    providers: [CHECKBOX_VALUE_ACCESSOR],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__util_form__["Form"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__item_item__["a" /* Item */]) === 'function' && _c || Object])], Checkbox);
var _a, _b, _c;

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__picker_picker__ = __webpack_require__(485);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_datetime_util__ = __webpack_require__(503);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_nav_controller__ = __webpack_require__(52);
/* unused harmony export DATETIME_VALUE_ACCESSOR */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return DateTime; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};









var DATETIME_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Provider"](__WEBPACK_IMPORTED_MODULE_1__angular_common__["NG_VALUE_ACCESSOR"], { useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return DateTime;
    }), multi: true });
/**
 * @name DateTime
 * @description
 * The DateTime component is used to present an interface which makes it easy for
 * users to select dates and times. Tapping on `<ion-datetime>` will display a picker
 * interface that slides up from the bottom of the page. The picker then displays
 * scrollable columns that can be used to individually select years, months, days,
 * hours and minute values. The DateTime component is similar to the native
 * `<input type="datetime-local">` element, however, Ionic's DateTime component makes
 * it easy to display the date and time in a preferred format, and manage the datetime
 * values.
 *
 * ```html
 * <ion-item>
 *   <ion-label>Date</ion-label>
 *   <ion-datetime displayFormat="MM/DD/YYYY" [(ngModel)]="myDate"></ion-datetime>
 * </ion-item>
 * ```
 *
 *
 * ## Display and Picker Formats
 *
 * The DateTime component displays the values in two places: in the `<ion-datetime>`
 * component, and in the interface that is presented from the bottom of the screen.
 * The following chart lists all of the formats that can be used.
 *
 * | Format  | Description                    | Example                 |
 * |---------|--------------------------------|-------------------------|
 * | `YYYY`  | Year, 4 digits                 | `2018`                  |
 * | `YY`    | Year, 2 digits                 | `18`                    |
 * | `M`     | Month                          | `1` ... `12`            |
 * | `MM`    | Month, leading zero            | `01` ... `12`           |
 * | `MMM`   | Month, short name              | `Jan`                   |
 * | `MMMM`  | Month, full name               | `January`               |
 * | `D`     | Day                            | `1` ... `31`            |
 * | `DD`    | Day, leading zero              | `01` ... `31`           |
 * | `DDD`   | Day, short name                | `Fri`                   |
 * | `DDDD`  | Day, full name                 | `Friday`                |
 * | `H`     | Hour, 24-hour                  | `0` ... `23`            |
 * | `HH`    | Hour, 24-hour, leading zero    | `00` ... `23`           |
 * | `h`     | Hour, 12-hour                  | `1` ... `12`            |
 * | `hh`    | Hour, 12-hour, leading zero    | `01` ... `12`           |
 * | `a`     | 12-hour time period, lowercase | `am` `pm`               |
 * | `A`     | 12-hour time period, uppercase | `AM` `PM`               |
 * | `m`     | Minute                         | `1` ... `59`            |
 * | `mm`    | Minute, leading zero           | `01` ... `59`           |
 * | `s`     | Second                         | `1` ... `59`            |
 * | `ss`    | Second, leading zero           | `01` ... `59`           |
 * | `Z`     | UTC Timezone Offset            | `Z or +HH:mm or -HH:mm` |
 *
 * **Important**: See the [Month Names and Day of the Week Names](#month-names-and-day-of-the-week-names)
 * section below on how to use different names for the month and day.
 *
 * ### Display Format
 *
 * The `displayFormat` input property specifies how a datetime's value should be
 * printed, as formatted text, within the `ion-datetime` component.
 *
 * In the following example, the display in the `<ion-datetime>` will use the
 * month's short name, the numerical day with a leading zero, a comma and the
 * four-digit year. In addition to the date, it will display the time with the hours
 * in the 24-hour format and the minutes. Any character can be used as a separator.
 * An example display using this format is: `Jun 17, 2005 11:06`.
 *
 * ```html
 * <ion-item>
 *   <ion-label>Date</ion-label>
 *   <ion-datetime displayFormat="MMM DD, YYYY HH:mm" [(ngModel)]="myDate"></ion-datetime>
 * </ion-item>
 * ```
 *
 * ### Picker Format
 *
 * The `pickerFormat` input property determines which columns should be shown in the
 * interface, the order of the columns, and which format to use within each column.
 * If the `pickerFormat` input is not provided then it will default to the `displayFormat`.
 *
 * In the following example, the display in the `<ion-datetime>` will use the
 * `MM/YYYY` format, such as `06/2020`. However, the picker interface
 * will display two columns with the month's long name, and the four-digit year.
 *
 * ```html
 * <ion-item>
 *   <ion-label>Date</ion-label>
 *   <ion-datetime displayFormat="MM/YYYY" pickerFormat="MMMM YYYY" [(ngModel)]="myDate"></ion-datetime>
 * </ion-item>
 * ```
 *
 * ### Datetime Data
 *
 * Historically, handling datetime values within JavaScript, or even within HTML
 * inputs, has always been a challenge. Specifically, JavaScript's `Date` object is
 * notoriously difficult to correctly parse apart datetime strings or to format
 * datetime values. Even worse is how different browsers and JavaScript versions
 * parse various datetime strings differently, especially per locale.
 *
 * But no worries, all is not lost! Ionic's datetime input has been designed so
 * developers can avoid the common pitfalls, allowing developers to easily format
 * datetime values within the input, and give the user a simple datetime picker for a
 * great user experience.
 *
 * ##### ISO 8601 Datetime Format: YYYY-MM-DDTHH:mmZ
 *
 * Ionic uses the [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime)
 * for its value. The value is simply a string, rather than using JavaScript's `Date`
 * object. Additionally, when using the ISO datetime format, it makes it easier
 * to serialize and pass within JSON objects, and sending databases a standardized
 * format which it can be easily parsed if need be.
 *
 * An ISO format can be used as a simple year, or just the hour and minute, or get more
 * detailed down to the millisecond and timezone. Any of the ISO formats below can be used,
 * and after a user selects a new value, Ionic will continue to use the same ISO format
 * which datetime value was originally given as.
 *
 * | Description          | Format                 | Datetime Value Example       |
 * |----------------------|------------------------|------------------------------|
 * | Year                 | YYYY                   | 1994                         |
 * | Year and Month       | YYYY-MM                | 1994-12                      |
 * | Complete Date        | YYYY-MM-DD             | 1994-12-15                   |
 * | Date and Time        | YYYY-MM-DDTHH:mm       | 1994-12-15T13:47             |
 * | UTC Timezone         | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789Z     |
 * | Timezone Offset      | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789+5:00 |
 * | Hour and Minute      | HH:mm                  | 13:47                        |
 * | Hour, Minute, Second | HH:mm:ss               | 13:47:20                     |
 *
 * Note that the year is always four-digits, milliseconds (if it's added) is always
 * three-digits, and all others are always two-digits. So the number representing
 * January always has a leading zero, such as `01`. Additionally, the hour is always
 * in the 24-hour format, so `00` is `12am` on a 12-hour clock, `13` means `1pm`,
 * and `23` means `11pm`.
 *
 * It's also important to note that neither the `displayFormat` or `pickerFormat` can
 * set the datetime value's output, which is the value that is set by the component's
 * `ngModel`. The format's are merely for displaying the value as text and the picker's
 * interface, but the datetime's value is always persisted as a valid ISO 8601 datetime
 * string.
 *
 *
 * ## Min and Max Datetimes
 *
 * Dates are infinite in either direction, so for a user's selection there should be at
 * least some form of restricting the dates that can be selected. Be default, the maximum
 * date is to the end of the current year, and the minimum date is from the beginning
 * of the year that was 100 years ago.
 *
 * To customize the minimum and maximum datetime values, the `min` and `max` component
 * inputs can be provided which may make more sense for the app's use-case, rather
 * than the default of the last 100 years. Following the same IS0 8601 format listed
 * in the table above, each component can restrict which dates can be selected by the
 * user. Below is an example of restricting the date selection between the beginning
 * of 2016, and October 31st of 2020:
 *
 * ```html
 * <ion-item>
 *   <ion-label>Date</ion-label>
 *   <ion-datetime displayFormat="MMMM YYYY" min="2016" max="2020-10-31" [(ngModel)]="myDate">
 *   </ion-datetime>
 * </ion-item>
 * ```
 *
 *
 * ## Month Names and Day of the Week Names
 *
 * At this time, there is no one-size-fits-all standard to automatically choose the correct
 * language/spelling for a month name, or day of the week name, depending on the language
 * or locale. Good news is that there is an
 * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)
 * standard which *most* browsers have adopted. However, at this time the standard has not
 * been fully implemented by all popular browsers so Ionic is unavailable to take advantage
 * of it *yet*. Additionally, Angular also provides an internationalization service, but it
 * is still under heavy development so Ionic does not depend on it at this time.
 *
 * All things considered, the by far easiest solution is to just provide an array of names
 * if the app needs to use names other than the default English version of month and day
 * names. The month names and day names can be either configured at the app level, or
 * individual `ion-datetime` level.
 *
 * ### App Config Level
 *
 * ```ts
 * import {ionicBootstrap} from 'ionic-angular';
 *
 * ionicBootstrap(MyApp, customProviders, {
 *   monthNames: ['janeiro', 'fevereiro', 'mar\u00e7o', ... ],
 *   monthShortNames: ['jan', 'fev', 'mar', ... ],
 *   dayNames: ['domingo', 'segunda-feira', 'ter\u00e7a-feira', ... ],
 *   dayShortNames: ['dom', 'seg', 'ter', ... ],
 * });
 * ```
 *
 * ### Component Input Level
 *
 * ```html
 * <ion-item>
 *   <ion-label>Período</ion-label>
 *   <ion-datetime displayFormat="DDDD MMM D, YYYY" [(ngModel)]="myDate"
 *     monthNames="janeiro, fevereiro, mar\u00e7o, ..."
 *     monthShortNames="jan, fev, mar, ..."
 *     dayNames="domingo, segunda-feira, ter\u00e7a-feira, ..."
 *     dayShortNames="dom, seg, ter, ..."></ion-datetime>
 * </ion-item>
 * ```
 *
 *
 * ### Advanced Datetime Validation and Manipulation
 *
 * The datetime picker provides the simplicity of selecting an exact format, and persists
 * the datetime values as a string using the standardized
 * [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime).
 * However, it's important to note that `ion-datetime` does not attempt to solve all
 * situtations when validating and manipulating datetime values. If datetime values need
 * to be parsed from a certain format, or manipulated (such as adding 5 days to a date,
 * subtracting 30 minutes, etc.), or even formatting data to a specific locale, then we highly
 * recommend using [moment.js](http://momentjs.com/) to "Parse, validate, manipulate, and
 * display dates in JavaScript". [Moment.js](http://momentjs.com/) has quickly become
 * our goto standard when dealing with datetimes within JavaScript, but Ionic does not
 * prepackage this dependency since most apps will not require it, and its locale
 * configuration should be decided by the end-developer.
 *
 *
 * @usage
 * ```html
 * <ion-item>
 *   <ion-label>Date</ion-label>
 *   <ion-datetime displayFormat="MM/DD/YYYY" [(ngModel)]="myDate">
 *   </ion-datetime>
 * </ion-item>
 * ```
 *
 *
 * @demo /docs/v2/demos/datetime/
 */
var DateTime = function () {
    function DateTime(_form, _config, _item, _nav) {
        _classCallCheck(this, DateTime);

        this._form = _form;
        this._config = _config;
        this._item = _item;
        this._nav = _nav;
        this._disabled = false;
        this._text = '';
        this._isOpen = false;
        this._value = {};
        this._locale = {};
        /**
         * @input {string} The display format of the date and time as text that shows
         * within the item. When the `pickerFormat` input is not used, then the
         * `displayFormat` is used for both display the formatted text, and determining
         * the datetime picker's columns. See the `pickerFormat` input description for
         * more info. Defaults to `MMM D, YYYY`.
         */
        this.displayFormat = 'MMM D, YYYY';
        /**
         * @input {string} The text to display on the picker's cancel button. Default: `Cancel`.
         */
        this.cancelText = 'Cancel';
        /**
         * @input {string} The text to display on the picker's "Done" button. Default: `Done`.
         */
        this.doneText = 'Done';
        /**
         * @input {any} Any additional options that the picker interface can accept.
         * See the [Picker API docs](../../picker/Picker) for the picker options.
         */
        this.pickerOptions = {};
        /**
         * @output {any} Any expression to evaluate when the datetime selection has changed.
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {any} Any expression to evaluate when the datetime selection was cancelled.
         */
        this.ionCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._form.register(this);
        if (_item) {
            this.id = 'dt-' + _item.registerInput('datetime');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-datetime', true);
        }
        if (!_nav) {
            console.error('parent <ion-nav> required for <ion-datetime>');
        }
    }

    _createClass(DateTime, [{
        key: "_click",
        value: function _click(ev) {
            if (ev.detail === 0) {
                // do not continue if the click event came from a form submit
                return;
            }
            ev.preventDefault();
            ev.stopPropagation();
            this.open();
        }
    }, {
        key: "_keyup",
        value: function _keyup() {
            if (!this._isOpen) {
                this.open();
            }
        }
        /**
         * @private
         */

    }, {
        key: "open",
        value: function open() {
            var _this = this;

            if (this._disabled) {
                return;
            }
            console.debug('datetime, open picker');
            // the user may have assigned some options specifically for the alert
            var pickerOptions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["merge"])({}, this.pickerOptions);
            var picker = __WEBPACK_IMPORTED_MODULE_3__picker_picker__["a" /* Picker */].create(pickerOptions);
            pickerOptions.buttons = [{
                text: this.cancelText,
                role: 'cancel',
                handler: function handler() {
                    _this.ionCancel.emit(null);
                }
            }, {
                text: this.doneText,
                handler: function handler(data) {
                    console.log('datetime, done', data);
                    _this.onChange(data);
                    _this.ionChange.emit(data);
                }
            }];
            this.generate(picker);
            this.validate(picker);
            picker.ionChange.subscribe(function () {
                _this.validate(picker);
            });
            this._nav.present(picker, pickerOptions);
            this._isOpen = true;
            picker.onDismiss(function () {
                _this._isOpen = false;
            });
        }
        /**
         * @private
         */

    }, {
        key: "generate",
        value: function generate(picker) {
            var _this2 = this;

            // if a picker format wasn't provided, then fallback
            // to use the display format
            var template = this.pickerFormat || this.displayFormat;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(template)) {
                // make sure we've got up to date sizing information
                this.calcMinMax();
                // does not support selecting by day name
                // automaticallly remove any day name formats
                template = template.replace('DDDD', '{~}').replace('DDD', '{~}');
                if (template.indexOf('D') === -1) {
                    // there is not a day in the template
                    // replace the day name with a numeric one if it exists
                    template = template.replace('{~}', 'D');
                }
                // make sure no day name replacer is left in the string
                template = template.replace(/{~}/g, '');
                // parse apart the given template into an array of "formats"
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["parseTemplate"])(template).forEach(function (format) {
                    // loop through each format in the template
                    // create a new picker column to build up with data
                    var key = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["convertFormatToKey"])(format);
                    var values = void 0;
                    // first see if they have exact values to use for this input
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(_this2[key + 'Values'])) {
                        // user provide exact values for this date part
                        values = convertToArrayOfNumbers(_this2[key + 'Values'], key);
                    } else {
                        // use the default date part values
                        values = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["dateValueRange"])(format, _this2._min, _this2._max);
                    }
                    var column = {
                        name: key,
                        options: values.map(function (val) {
                            return {
                                value: val,
                                text: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["renderTextFormat"])(format, val, null, _this2._locale)
                            };
                        })
                    };
                    if (column.options.length) {
                        // cool, we've loaded up the columns with options
                        // preselect the option for this column
                        var selected = column.options.find(function (opt) {
                            return opt.value === __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["getValueFromFormat"])(_this2._value, format);
                        });
                        if (selected) {
                            // set the select index for this column's options
                            column.selectedIndex = column.options.indexOf(selected);
                        }
                        // add our newly created column to the picker
                        picker.addColumn(column);
                    }
                });
                this.divyColumns(picker);
            }
        }
        /**
         * @private
         */

    }, {
        key: "validate",
        value: function validate(picker) {
            var i = void 0;
            var today = new Date();
            var columns = picker.getColumns();
            // find the columns used
            var yearCol = columns.find(function (col) {
                return col.name === 'year';
            });
            var monthCol = columns.find(function (col) {
                return col.name === 'month';
            });
            var dayCol = columns.find(function (col) {
                return col.name === 'day';
            });
            var yearOpt = void 0;
            var monthOpt = void 0;
            var dayOpt = void 0;
            // default to assuming today's year
            var selectedYear = today.getFullYear();
            if (yearCol) {
                yearOpt = yearCol.options[yearCol.selectedIndex];
                if (yearOpt) {
                    // they have a selected year value
                    selectedYear = yearOpt.value;
                }
            }
            // default to assuming this month has 31 days
            var numDaysInMonth = 31;
            var selectedMonth = void 0;
            if (monthCol) {
                monthOpt = monthCol.options[monthCol.selectedIndex];
                if (monthOpt) {
                    // they have a selected month value
                    selectedMonth = monthOpt.value;
                    // calculate how many days are in this month
                    numDaysInMonth = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["daysInMonth"])(selectedMonth, selectedYear);
                }
            }
            // create sort values for the min/max datetimes
            var minCompareVal = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["dateDataSortValue"])(this._min);
            var maxCompareVal = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["dateDataSortValue"])(this._max);
            if (monthCol) {
                // enable/disable which months are valid
                // to show within the min/max date range
                for (i = 0; i < monthCol.options.length; i++) {
                    monthOpt = monthCol.options[i];
                    // loop through each month and see if it
                    // is within the min/max date range
                    monthOpt.disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["dateSortValue"])(selectedYear, monthOpt.value, 31) < minCompareVal || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["dateSortValue"])(selectedYear, monthOpt.value, 1) > maxCompareVal;
                }
            }
            if (dayCol) {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(selectedMonth)) {
                    // enable/disable which days are valid
                    // to show within the min/max date range
                    for (i = 0; i < 31; i++) {
                        dayOpt = dayCol.options[i];
                        // loop through each day and see if it
                        // is within the min/max date range
                        var compareVal = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["dateSortValue"])(selectedYear, selectedMonth, dayOpt.value);
                        dayOpt.disabled = compareVal < minCompareVal || compareVal > maxCompareVal || numDaysInMonth <= i;
                    }
                } else {
                    // enable/disable which numbers of days to show in this month
                    for (i = 0; i < 31; i++) {
                        dayCol.options[i].disabled = numDaysInMonth <= i;
                    }
                }
            }
            picker.refresh();
        }
        /**
         * @private
         */

    }, {
        key: "divyColumns",
        value: function divyColumns(picker) {
            var pickerColumns = picker.getColumns();
            var columns = [];
            pickerColumns.forEach(function (col, i) {
                columns.push(0);
                col.options.forEach(function (opt) {
                    if (opt.text.length > columns[i]) {
                        columns[i] = opt.text.length;
                    }
                });
            });
            if (columns.length === 2) {
                var width = Math.max(columns[0], columns[1]);
                pickerColumns[0].columnWidth = pickerColumns[1].columnWidth = width * 16 + "px";
            } else if (columns.length === 3) {
                var width = Math.max(columns[0], columns[2]);
                pickerColumns[1].columnWidth = columns[1] * 16 + "px";
                pickerColumns[0].columnWidth = pickerColumns[2].columnWidth = width * 16 + "px";
            } else if (columns.length > 3) {
                columns.forEach(function (col, i) {
                    pickerColumns[i].columnWidth = col * 12 + "px";
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: "setValue",
        value: function setValue(newData) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["updateDate"])(this._value, newData);
        }
        /**
         * @private
         */

    }, {
        key: "getValue",
        value: function getValue() {
            return this._value;
        }
        /**
         * @private
         */

    }, {
        key: "checkHasValue",
        value: function checkHasValue(inputValue) {
            if (this._item) {
                this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
            }
        }
        /**
         * @private
         */

    }, {
        key: "updateText",
        value: function updateText() {
            // create the text of the formatted data
            this._text = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["renderDateTime"])(this.displayFormat, this._value, this._locale);
        }
        /**
         * @private
         */

    }, {
        key: "calcMinMax",
        value: function calcMinMax() {
            var todaysYear = new Date().getFullYear();
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isBlank"])(this.min)) {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(this.yearValues)) {
                    this.min = Math.min.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
                } else {
                    this.min = (todaysYear - 100).toString();
                }
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isBlank"])(this.max)) {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(this.yearValues)) {
                    this.max = Math.max.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
                } else {
                    this.max = todaysYear.toString();
                }
            }
            var min = this._min = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["parseDate"])(this.min);
            var max = this._max = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["parseDate"])(this.max);
            min.month = min.month || 1;
            min.day = min.day || 1;
            min.hour = min.hour || 0;
            min.minute = min.minute || 0;
            min.second = min.second || 0;
            max.month = max.month || 12;
            max.day = max.day || 31;
            max.hour = max.hour || 23;
            max.minute = max.minute || 59;
            max.second = max.second || 59;
        }
        /**
         * @input {boolean} Whether or not the datetime component is disabled. Default `false`.
         */

    }, {
        key: "writeValue",

        /**
         * @private
         */
        value: function writeValue(val) {
            console.debug('datetime, writeValue', val);
            this.setValue(val);
            this.updateText();
            this.checkHasValue(val);
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            var _this3 = this;

            // first see if locale names were provided in the inputs
            // then check to see if they're in the config
            // if neither were provided then it will use default English names
            ['monthNames', 'monthShortNames', 'dayNames', 'dayShortNames'].forEach(function (type) {
                _this3._locale[type] = convertToArrayOfStrings(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(_this3[type]) ? _this3[type] : _this3._config.get(type), type);
            });
            // update how the datetime value is displayed as formatted text
            this.updateText();
        }
        /**
         * @private
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            var _this4 = this;

            this._fn = fn;
            this.onChange = function (val) {
                console.debug('datetime, onChange', val);
                _this4.setValue(val);
                _this4.updateText();
                _this4.checkHasValue(val);
                // convert DateTimeData value to iso datetime format
                fn(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__util_datetime_util__["convertDataToISO"])(_this4._value));
                _this4.onTouched();
            };
        }
        /**
         * @private
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
        /**
         * @private
         */

    }, {
        key: "onChange",
        value: function onChange(val) {
            // onChange used when there is not an ngControl
            console.debug('datetime, onChange w/out ngControl', val);
            this.setValue(val);
            this.updateText();
            this.onTouched();
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched() {}
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-datetime-disabled', this._disabled);
        }
    }]);

    return DateTime;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], DateTime.prototype, "min", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], DateTime.prototype, "max", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], DateTime.prototype, "displayFormat", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], DateTime.prototype, "pickerFormat", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], DateTime.prototype, "cancelText", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], DateTime.prototype, "doneText", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "yearValues", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "monthValues", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "dayValues", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "hourValues", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "minuteValues", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "monthNames", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "monthShortNames", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "dayNames", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "dayShortNames", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "pickerOptions", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], DateTime.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], DateTime.prototype, "ionCancel", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], DateTime.prototype, "_click", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('keyup.space'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], DateTime.prototype, "_keyup", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], DateTime.prototype, "disabled", null);
DateTime = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-datetime',
    template: '<div class="datetime-text">{{_text}}</div>' + '<button aria-haspopup="true" ' + 'type="button" ' + '[id]="id" ' + 'category="item-cover" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
    host: {
        '[class.datetime-disabled]': '_disabled'
    },
    providers: [DATETIME_VALUE_ACCESSOR],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__util_form__["Form"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__item_item__["a" /* Item */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_8__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_nav_controller__["a" /* NavController */]) === 'function' && _f || Object])], DateTime);
/**
 * @private
 * Use to convert a string of comma separated numbers or
 * an array of numbers, and clean up any user input
 */
function convertToArrayOfNumbers(input, type) {
    var values = [];
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isString"])(input)) {
        // convert the string to an array of strings
        // auto remove any whitespace and [] characters
        input = input.replace(/\[|\]|\s/g, '').split(',');
    }
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isArray"])(input)) {
        // ensure each value is an actual number in the returned array
        input.forEach(function (num) {
            num = parseInt(num, 10);
            if (!isNaN(num)) {
                values.push(num);
            }
        });
    }
    if (!values.length) {
        console.warn("Invalid \"" + type + "Values\". Must be an array of numbers, or a comma separated string of numbers.");
    }
    return values;
}
/**
 * @private
 * Use to convert a string of comma separated strings or
 * an array of strings, and clean up any user input
 */
function convertToArrayOfStrings(input, type) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(input)) {
        var values = [];
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isString"])(input)) {
            // convert the string to an array of strings
            // auto remove any [] characters
            input = input.replace(/\[|\]/g, '').split(',');
        }
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isArray"])(input)) {
            // trim up each string value
            input.forEach(function (val) {
                val = val.trim();
                if (val) {
                    values.push(val);
                }
            });
        }
        if (!values.length) {
            console.warn("Invalid \"" + type + "Names\". Must be an array of strings, or a comma separated string.");
        }
        return values;
    }
}
var _a, _b, _c, _d, _e, _f;

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infinite_scroll__ = __webpack_require__(315);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return InfiniteScrollContent; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




/**
 * @private
 */
var InfiniteScrollContent = function () {
    function InfiniteScrollContent(inf, _config) {
        _classCallCheck(this, InfiniteScrollContent);

        this.inf = inf;
        this._config = _config;
    }
    /**
     * @private
     */

    _createClass(InfiniteScrollContent, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            if (!this.loadingSpinner) {
                this.loadingSpinner = this._config.get('infiniteLoadingSpinner', this._config.get('spinner', 'ios'));
            }
        }
    }]);

    return InfiniteScrollContent;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], InfiniteScrollContent.prototype, "loadingSpinner", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], InfiniteScrollContent.prototype, "loadingText", void 0);
InfiniteScrollContent = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-infinite-scroll-content',
    template: '<div class="infinite-loading">' + '<div class="infinite-loading-spinner" *ngIf="loadingSpinner">' + '<ion-spinner [name]="loadingSpinner"></ion-spinner>' + '</div>' + '<div class="infinite-loading-text" [innerHTML]="loadingText" *ngIf="loadingText"></div>' + '</div>',
    host: {
        '[attr.state]': 'inf.state'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__infinite_scroll__["a" /* InfiniteScroll */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__infinite_scroll__["a" /* InfiniteScroll */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _b || Object])], InfiniteScrollContent);
var _a, _b;

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__input_base__ = __webpack_require__(895);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__native_input__ = __webpack_require__(476);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__platform_platform__ = __webpack_require__(61);

/* harmony export */ __webpack_require__.d(exports, "b", function() { return TextInput; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return TextArea; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};











/**
 * @name Input
 * @description
 *
 * `ion-input` is meant for text type inputs only, such as `text`,
 * `password`, `email`, `number`, `search`, `tel`, and `url`. Ionic
 * still uses an actual `<input type="text">` HTML element within the
 * component, however, with Ionic wrapping the native HTML input
 * element it's able to better handle the user experience and
 * interactivity.
 *
 * Similarily, `<ion-textarea>` should be used in place of `<textarea>`.
 *
 * An `ion-input` is **not** used for non-text type inputs, such as a
 * `checkbox`, `radio`, `toggle`, `range`, `select`, etc.
 *
 * @property [type] - The HTML input type (text, password, email, number, search, tel, or url)
 * @property [clearInput] - A clear icon will appear in the input when there is a value. Clicking it clears the input.
 *
 * @usage
 * ```html
 * <ion-list>
 *   <ion-item>
 *     <ion-label primary>Inline Label</ion-label>
 *     <ion-input placeholder="Text Input"></ion-input>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label primary fixed>Fixed Label</ion-label>
 *     <ion-input type="tel" placeholder="Tel Input"></ion-input>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-input type="number" placeholder="Number Input with no label"></ion-input>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label primary stacked>Stacked Label</ion-label>
 *     <ion-input type="email" placeholder="Email Input"></ion-input>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label primary stacked>Stacked Label</ion-label>
 *     <ion-input type="password" placeholder="Password Input"></ion-input>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label primary floating>Floating Label</ion-label>
 *     <ion-input></ion-input>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-input placeholder="Clear Input" clearInput></ion-input>
 *   </ion-item>
 * </ion-list>
 * ```
 *
 * @demo /docs/v2/demos/input/
 */
var TextInput = function (_InputBase) {
    _inherits(TextInput, _InputBase);

    function TextInput(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
        _classCallCheck(this, TextInput);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(TextInput).call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl));
    }
    /**
     * @private
     */

    _createClass(TextInput, [{
        key: "inputBlurred",
        value: function inputBlurred(ev) {
            this.blur.emit(ev);
        }
        /**
         * @private
         */

    }, {
        key: "inputFocused",
        value: function inputFocused(ev) {
            this.focus.emit(ev);
        }
        /**
         * @private
         */

    }, {
        key: "clearTextInput",
        value: function clearTextInput() {
            console.debug('Should clear input');
            this._value = '';
            this.onChange(this._value);
            this.writeValue(this._value);
        }
    }]);

    return TextInput;
}(__WEBPACK_IMPORTED_MODULE_6__input_base__["a" /* InputBase */]);
TextInput = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-input',
    template: '<input [type]="type" [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input">' + '<input [type]="type" aria-hidden="true" next-input *ngIf="_useAssist">' + '<button clear [hidden]="!clearInput" type="button" class="text-input-clear-icon" (click)="clearTextInput()" (mousedown)="clearTextInput()"></button>' + '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
    directives: [__WEBPACK_IMPORTED_MODULE_8__native_input__["b" /* NextInput */], __WEBPACK_IMPORTED_MODULE_8__native_input__["a" /* NativeInput */], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgModel"], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(6, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__util_form__["Form"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_7__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__item_item__["a" /* Item */]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_10__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_10__platform_platform__["Platform"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_9__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__nav_nav_controller__["a" /* NavController */]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"]) === 'function' && _j || Object])], TextInput);
/**
 * @name TextArea
 * @description
 *
 * `ion-textarea` is is used for multi-line text inputs. Ionic still
 * uses an actual `<textarea>` HTML element within the component;
 * however, with Ionic wrapping the native HTML text area element, Ionic
 * is able to better handle the user experience and interactivity.
 *
 * Not that `<ion-textarea>` must load its value from the `value` or
 * `[(ngModel)]` attribute. Unlike the native `<textarea>` element,
 * `<ion-textarea>` does not support loading its value from the
 * textarea's inner content.
 *
 * When requiring only a single-line text input, we recommend using
 * `<ion-input>` instead.
 *
 * @usage
 * ```html
 *  <ion-item>
 *    <ion-label>Comments</ion-label>
 *    <ion-textarea></ion-textarea>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label stacked>Message</ion-label>
 *    <ion-textarea [(ngModel)]="msg"></ion-textarea>
 *  </ion-item>
 *
 *  <ion-item>
 *    <ion-label floating>Description</ion-label>
 *    <ion-textarea></ion-textarea>
 *  </ion-item>
 * ```
 *
 * @demo /docs/v2/demos/textarea/
 */
var TextArea = function (_InputBase2) {
    _inherits(TextArea, _InputBase2);

    function TextArea(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
        _classCallCheck(this, TextArea);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(TextArea).call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl));
    }
    /**
     * @private
     */

    _createClass(TextArea, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            _get(Object.getPrototypeOf(TextArea.prototype), "ngOnInit", this).call(this);
            if (this._item) {
                this._item.setCssClass('item-textarea', true);
            }
        }
        /**
         * @private
         */

    }, {
        key: "inputBlurred",
        value: function inputBlurred(ev) {
            this.blur.emit(ev);
        }
        /**
         * @private
         */

    }, {
        key: "inputFocused",
        value: function inputFocused(ev) {
            this.focus.emit(ev);
        }
    }]);

    return TextArea;
}(__WEBPACK_IMPORTED_MODULE_6__input_base__["a" /* InputBase */]);
TextArea = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-textarea',
    template: '<textarea [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input"></textarea>' + '<input type="text" aria-hidden="true" next-input *ngIf="_useAssist">' + '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
    directives: [__WEBPACK_IMPORTED_MODULE_8__native_input__["b" /* NextInput */], __WEBPACK_IMPORTED_MODULE_8__native_input__["a" /* NativeInput */], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgModel"], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(6, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_5__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__util_form__["Form"]) === 'function' && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_7__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__item_item__["a" /* Item */]) === 'function' && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */]) === 'function' && _o || Object, typeof (_p = typeof __WEBPACK_IMPORTED_MODULE_10__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_10__platform_platform__["Platform"]) === 'function' && _p || Object, typeof (_q = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _q || Object, typeof (_r = typeof __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */]) === 'function' && _r || Object, typeof (_s = typeof __WEBPACK_IMPORTED_MODULE_9__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__nav_nav_controller__["a" /* NavController */]) === 'function' && _s || Object, typeof (_t = typeof __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"]) === 'function' && _t || Object])], TextArea);
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NativeInput; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return NextInput; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




/**
 * @private
 */
var NativeInput = function () {
    function NativeInput(_elementRef, _renderer, config, ngControl) {
        _classCallCheck(this, NativeInput);

        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.ngControl = ngControl;
        this.focusChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.valueChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._clone = config.getBoolean('inputCloning', false);
        this._blurring = config.getBoolean('inputBlurring', false);
    }

    _createClass(NativeInput, [{
        key: "_change",
        value: function _change(ev) {
            this.valueChange.emit(ev.target.value);
        }
    }, {
        key: "_focus",
        value: function _focus() {
            var self = this;
            self.focusChange.emit(true);
            function docTouchEnd(ev) {
                var tapped = ev.target;
                if (tapped && self.element()) {
                    if (tapped.tagName !== 'INPUT' && tapped.tagName !== 'TEXTAREA' && !tapped.classList.contains('input-cover')) {
                        self.element().blur();
                    }
                }
            }
            if (self._blurring) {
                // automatically blur input if:
                // 1) this input has focus
                // 2) the newly tapped document element is not an input
                console.debug('input blurring enabled');
                document.addEventListener('touchend', docTouchEnd, true);
                self._unrefBlur = function () {
                    console.debug('input blurring disabled');
                    document.removeEventListener('touchend', docTouchEnd, true);
                };
            }
        }
    }, {
        key: "_blur",
        value: function _blur() {
            this.focusChange.emit(false);
            this.hideFocus(false);
            this._unrefBlur && this._unrefBlur();
            this._unrefBlur = null;
        }
    }, {
        key: "labelledBy",
        value: function labelledBy(val) {
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-labelledby', val);
        }
    }, {
        key: "isDisabled",
        value: function isDisabled(val) {
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'disabled', val ? '' : null);
        }
    }, {
        key: "setFocus",
        value: function setFocus() {
            // let's set focus to the element
            // but only if it does not already have focus
            if (document.activeElement !== this.element()) {
                this.element().focus();
            }
        }
    }, {
        key: "beginFocus",
        value: function beginFocus(shouldFocus, inputRelativeY) {
            if (this._relocated !== shouldFocus) {
                var focusedInputEle = this.element();
                if (shouldFocus) {
                    // we should focus into this element
                    if (this._clone) {
                        // this platform needs the input to be cloned
                        // this allows for the actual input to receive the focus from
                        // the user's touch event, but before it receives focus, it
                        // moves the actual input to a location that will not screw
                        // up the app's layout, and does not allow the native browser
                        // to attempt to scroll the input into place (messing up headers/footers)
                        // the cloned input fills the area of where native input should be
                        // while the native input fakes out the browser by relocating itself
                        // before it receives the actual focus event
                        var clonedInputEle = cloneInput(focusedInputEle, 'cloned-focus');
                        focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
                        // move the native input to a location safe to receive focus
                        // according to the browser, the native input receives focus in an
                        // area which doesn't require the browser to scroll the input into place
                        focusedInputEle.style[__WEBPACK_IMPORTED_MODULE_3__util_dom__["CSS"].transform] = "translate3d(-9999px," + inputRelativeY + "px,0)";
                        focusedInputEle.style.opacity = '0';
                    }
                    // let's now set focus to the actual native element
                    // at this point it is safe to assume the browser will not attempt
                    // to scroll the input into view itself (screwing up headers/footers)
                    this.setFocus();
                    if (this._clone) {
                        focusedInputEle.classList.add('cloned-active');
                    }
                } else {
                    // should remove the focus
                    if (this._clone) {
                        // should remove the cloned node
                        focusedInputEle.classList.remove('cloned-active');
                        focusedInputEle.style[__WEBPACK_IMPORTED_MODULE_3__util_dom__["CSS"].transform] = '';
                        focusedInputEle.style.opacity = '';
                        removeClone(focusedInputEle, 'cloned-focus');
                    }
                }
                this._relocated = shouldFocus;
            }
        }
    }, {
        key: "hideFocus",
        value: function hideFocus(shouldHideFocus) {
            var focusedInputEle = this.element();
            console.debug("native input hideFocus, shouldHideFocus: " + shouldHideFocus + ", input value: " + focusedInputEle.value);
            if (shouldHideFocus) {
                var clonedInputEle = cloneInput(focusedInputEle, 'cloned-move');
                focusedInputEle.classList.add('cloned-active');
                focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
            } else {
                focusedInputEle.classList.remove('cloned-active');
                removeClone(focusedInputEle, 'cloned-move');
            }
        }
    }, {
        key: "hasFocus",
        value: function hasFocus() {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["hasFocus"])(this.element());
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.element().value;
        }
    }, {
        key: "setCssClass",
        value: function setCssClass(cssClass, shouldAdd) {
            this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
        }
    }, {
        key: "element",
        value: function element() {
            return this._elementRef.nativeElement;
        }
    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._unrefBlur && this._unrefBlur();
        }
    }]);

    return NativeInput;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], NativeInput.prototype, "focusChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], NativeInput.prototype, "valueChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('input', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], NativeInput.prototype, "_change", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('focus'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], NativeInput.prototype, "_focus", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('blur'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], NativeInput.prototype, "_blur", null);
NativeInput = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '.text-input'
}), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"]) === 'function' && _f || Object])], NativeInput);
function cloneInput(focusedInputEle, addCssClass) {
    var clonedInputEle = focusedInputEle.cloneNode(true);
    clonedInputEle.classList.add('cloned-input');
    clonedInputEle.classList.add(addCssClass);
    clonedInputEle.setAttribute('aria-hidden', true);
    clonedInputEle.removeAttribute('aria-labelledby');
    clonedInputEle.tabIndex = -1;
    clonedInputEle.style.width = focusedInputEle.offsetWidth + 10 + 'px';
    clonedInputEle.style.height = focusedInputEle.offsetHeight + 'px';
    clonedInputEle.value = focusedInputEle.value;
    return clonedInputEle;
}
function removeClone(focusedInputEle, queryCssClass) {
    var clonedInputEle = focusedInputEle.parentElement.querySelector('.' + queryCssClass);
    if (clonedInputEle) {
        clonedInputEle.parentNode.removeChild(clonedInputEle);
    }
}
/**
 * @private
 */
var NextInput = function () {
    function NextInput() {
        _classCallCheck(this, NextInput);

        this.focused = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }

    _createClass(NextInput, [{
        key: "receivedFocus",
        value: function receivedFocus() {
            console.debug('native-input, next-input received focus');
            this.focused.emit(true);
        }
    }]);

    return NextInput;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _g || Object)], NextInput.prototype, "focused", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('focus'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], NextInput.prototype, "receivedFocus", null);
NextInput = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[next-input]'
}), __metadata('design:paramtypes', [])], NextInput);
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__item__ = __webpack_require__(60);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ItemReorder; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};


/**
 * @private
 */
var ItemReorder = function ItemReorder(item, elementRef) {
    _classCallCheck(this, ItemReorder);

    elementRef.nativeElement['$ionComponent'] = item;
};
ItemReorder = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-reorder',
    template: "<ion-icon name=\"menu\"></ion-icon>"
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return __WEBPACK_IMPORTED_MODULE_1__item__["a" /* Item */];
}))), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__item__["a" /* Item */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object])], ItemReorder);
var _a, _b;

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__list_list__ = __webpack_require__(204);

/* harmony export */ __webpack_require__.d(exports, "c", function() { return ItemSideFlags; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return ItemOptions; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return ItemSliding; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};





var SWIPE_FACTOR = 1.1;
var ELASTIC_FACTOR = 0.55;
var ItemSideFlags;
(function (ItemSideFlags) {
    ItemSideFlags[ItemSideFlags["None"] = 0] = "None";
    ItemSideFlags[ItemSideFlags["Left"] = 1] = "Left";
    ItemSideFlags[ItemSideFlags["Right"] = 2] = "Right";
    ItemSideFlags[ItemSideFlags["Both"] = 3] = "Both";
})(ItemSideFlags || (ItemSideFlags = {}));
/**
 * @name ItemOptions
 * @description
 * The option buttons for an `ion-item-sliding`. These buttons can be placed either on the left or right side.
 * You can combind the `(ionSiwpe)` event plus the `expandable` directive to create a full swipe action for the item.
 *
 * @usage
 *
 * ```html
 * <ion-item-sliding>
 *   <ion-item>
 *     Item 1
 *   </ion-item>
 *   <ion-item-options side="right" (ionSwipe)="saveItem(item)">
 *     <button expandable (click)="saveItem(item)">
 *       <ion-icon name="star"></ion-icon>
 *     </button>
 *   </ion-item-options>
 * </ion-item-sliding>
 *```
 */
var ItemOptions = function () {
    function ItemOptions(_elementRef, _renderer) {
        _classCallCheck(this, ItemOptions);

        this._elementRef = _elementRef;
        this._renderer = _renderer;
        /**
         * @output {event} Expression to evaluate when the item has been fully swiped.
         */
        this.ionSwipe = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    /**
     * @private
     */

    _createClass(ItemOptions, [{
        key: "setCssStyle",
        value: function setCssStyle(property, value) {
            this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
        }
        /**
         * @private
         */

    }, {
        key: "getSides",
        value: function getSides() {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isPresent"])(this.side) && this.side === 'left') {
                return ItemSideFlags.Left;
            } else {
                return ItemSideFlags.Right;
            }
        }
        /**
         * @private
         */

    }, {
        key: "width",
        value: function width() {
            return this._elementRef.nativeElement.offsetWidth;
        }
    }]);

    return ItemOptions;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], ItemOptions.prototype, "side", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], ItemOptions.prototype, "ionSwipe", void 0);
ItemOptions = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-item-options'
}), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _c || Object])], ItemOptions);
var SlidingState;
(function (SlidingState) {
    SlidingState[SlidingState["Disabled"] = 0] = "Disabled";
    SlidingState[SlidingState["Enabled"] = 1] = "Enabled";
    SlidingState[SlidingState["Right"] = 2] = "Right";
    SlidingState[SlidingState["Left"] = 3] = "Left";
})(SlidingState || (SlidingState = {}));
/**
 * @name ItemSliding
 * @description
 * A sliding item is a list item that can be swiped to reveal buttons. It requires
 * an [Item](../Item) component as a child and a [List](../../list/List) component as
 * a parent. All buttons to reveal can be placed in the `<ion-item-options>` element.
 *
 * @usage
 * ```html
 * <ion-list>
 *   <ion-item-sliding #item>
 *     <ion-item>
 *       Item
 *     </ion-item>
 *     <ion-item-options side="left">
 *       <button (click)="favorite(item)">Favorite</button>
 *       <button danger (click)="share(item)">Share</button>
 *     </ion-item-options>

 *     <ion-item-options side="right">
 *       <button (click)="unread(item)">Unread</button>
 *     </ion-item-options>
 *   </ion-item-sliding>
 * </ion-list>
 * ```
 *
 * ### Swipe Direction
 * By default, the buttons are revealed when the sliding item is swiped from right to left,
 * so the buttons are placed in the right side. But it's also possible to reveal them
 * in the right side (sliding from left to right) by setting the `side` attribute
 * on the `ion-item-options` element. Up to 2 `ion-item-options` can used at the same time
 * in order to reveal two different sets of buttons depending the swipping direction.
 *
 * ```html
 * <ion-item-options side="right">
 *   <button (click)="archive(item)">
 *     <ion-icon name="archive"></ion-icon>
 *     Archive
 *   </button>
 * </ion-item-options>

 * <ion-item-options side="left">
 *   <button (click)="archive(item)">
 *     <ion-icon name="archive"></ion-icon>
 *     Archive
 *   </button>
 * </ion-item-options>
 * ```
 *
 * ### Listening for events (ionDrag) and (ionSwipe)
 * It's possible to know the current relative position of the sliding item by subscribing
 * to the (ionDrag)` event.
 *
 * ```html
 * <ion-item-sliding (ionDrag)="logDrag($event)">
 *   <ion-item>Item</ion-item>
 *   <ion-item-options>
 *     <button>Favorite</button>
 *   </ion-item-options>
 * </ion-item-sliding>
 * ```
 *
 * ### Button Layout
 * If an icon is placed with text in the option button, by default it will
 * display the icon on top of the text. This can be changed to display the icon
 * to the left of the text by setting `icon-left` as an attribute on the
 * `<ion-item-options>` element.
 *
 * ```html
 * <ion-item-options icon-left>
 *    <button (click)="archive(item)">
 *      <ion-icon name="archive"></ion-icon>
 *      Archive
 *    </button>
 *  </ion-item-options>
 *
 * ```
 *
 *
 * @demo /docs/v2/demos/item-sliding/
 * @see {@link /docs/v2/components#lists List Component Docs}
 * @see {@link ../Item Item API Docs}
 * @see {@link ../../list/List List API Docs}
 */
var ItemSliding = function () {
    function ItemSliding(_list, _renderer, _elementRef) {
        _classCallCheck(this, ItemSliding);

        this._list = _list;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._openAmount = 0;
        this._startX = 0;
        this._optsWidthRightSide = 0;
        this._optsWidthLeftSide = 0;
        this._timer = null;
        this._optsDirty = true;
        this._state = SlidingState.Disabled;
        /**
        * @private
        * */
        this.slidingPercent = 0;
        /**
         * @output {event} Expression to evaluate when the sliding position changes.
         * It reports the relative position.
         *
         * ```ts
         * ondrag(percent) {
         *   if (percent > 0) {
         *     // positive
         *     console.log('right side');
         *   } else {
         *     // negative
         *     console.log('left side');
         *   }
         *   if (Math.abs(percent) > 1) {
         *     console.log('overscroll');
         *   }
         * }
         * ```
         *
         */
        this.ionDrag = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _list.enableSlidingItems(true);
        _elementRef.nativeElement.$ionComponent = this;
        _renderer.setElementClass(_elementRef.nativeElement, 'item-wrapper', true);
    }
    /**
     * @private
     */

    _createClass(ItemSliding, [{
        key: "startSliding",

        /**
         * @private
         */
        value: function startSliding(startX) {
            if (this._timer) {
                clearTimeout(this._timer);
                this._timer = null;
            }
            if (this._openAmount === 0) {
                this._optsDirty = true;
                this._setState(SlidingState.Enabled);
            }
            this._startX = startX + this._openAmount;
            this.item.setCssStyle(__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transition, 'none');
        }
        /**
         * @private
         */

    }, {
        key: "moveSliding",
        value: function moveSliding(x) {
            if (this._optsDirty) {
                this.calculateOptsWidth();
                return;
            }
            var openAmount = this._startX - x;
            switch (this._sides) {
                case ItemSideFlags.Right:
                    openAmount = Math.max(0, openAmount);
                    break;
                case ItemSideFlags.Left:
                    openAmount = Math.min(0, openAmount);
                    break;
                case ItemSideFlags.Both:
                    break;
                default:
                    return;
            }
            if (openAmount > this._optsWidthRightSide) {
                var optsWidth = this._optsWidthRightSide;
                openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
            } else if (openAmount < -this._optsWidthLeftSide) {
                var optsWidth = -this._optsWidthLeftSide;
                openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
            }
            this._setOpenAmount(openAmount, false);
            return openAmount;
        }
        /**
         * @private
         */

    }, {
        key: "endSliding",
        value: function endSliding(velocity) {
            var restingPoint = this._openAmount > 0 ? this._optsWidthRightSide : -this._optsWidthLeftSide;
            // Check if the drag didn't clear the buttons mid-point
            // and we aren't moving fast enough to swipe open
            var isCloseDirection = this._openAmount > 0 === !(velocity < 0);
            var isMovingFast = Math.abs(velocity) > 0.3;
            var isOnCloseZone = Math.abs(this._openAmount) < Math.abs(restingPoint / 2);
            if (shouldClose(isCloseDirection, isMovingFast, isOnCloseZone)) {
                restingPoint = 0;
            }
            this.fireSwipeEvent();
            this._setOpenAmount(restingPoint, true);
            return restingPoint;
        }
        /**
        * @private
        * */

    }, {
        key: "fireSwipeEvent",
        value: function fireSwipeEvent() {
            if (this.slidingPercent > SWIPE_FACTOR) {
                this._rightOptions.ionSwipe.emit(this);
            } else if (this.slidingPercent < -SWIPE_FACTOR) {
                this._leftOptions.ionSwipe.emit(this);
            }
        }
        /**
        * @private
        * */

    }, {
        key: "calculateOptsWidth",
        value: function calculateOptsWidth() {
            var _this = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["nativeRaf"])(function () {
                if (_this._optsDirty) {
                    _this._optsWidthRightSide = 0;
                    if (_this._rightOptions) {
                        _this._optsWidthRightSide = _this._rightOptions.width();
                    }
                    _this._optsWidthLeftSide = 0;
                    if (_this._leftOptions) {
                        _this._optsWidthLeftSide = _this._leftOptions.width();
                    }
                    _this._optsDirty = false;
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: "_setOpenAmount",
        value: function _setOpenAmount(openAmount, isFinal) {
            var _this2 = this;

            if (this._timer) {
                clearTimeout(this._timer);
                this._timer = null;
            }
            this._openAmount = openAmount;
            var didEnd = openAmount === 0;
            if (didEnd) {
                // TODO: refactor. there must exist a better way
                // if sliding ended, we wait 400ms until animation finishes
                this._timer = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["nativeTimeout"])(function () {
                    _this2._setState(SlidingState.Disabled);
                    _this2._timer = null;
                }, 400);
                this.slidingPercent = 0;
            } else if (openAmount > 0) {
                this._setState(SlidingState.Right);
                this.slidingPercent = openAmount / this._optsWidthRightSide;
            } else if (openAmount < 0) {
                this._setState(SlidingState.Left);
                this.slidingPercent = openAmount / this._optsWidthLeftSide;
            }
            if (!isFinal) {
                this.setClass('active-swipe-right', this.slidingPercent > SWIPE_FACTOR);
                this.setClass('active-swipe-left', this.slidingPercent < -SWIPE_FACTOR);
            } else {
                this.item.setCssStyle(__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transition, '');
            }
            this.ionDrag.emit(this.slidingPercent);
            this.item.setCssStyle(__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transform, didEnd ? '' : 'translate3d(' + -openAmount + 'px,0,0)');
        }
    }, {
        key: "_setState",
        value: function _setState(state) {
            if (state !== this._state) {
                this._state = state;
                this.setClass('active-slide', state !== SlidingState.Disabled);
                this.setClass('active-options-right', state === SlidingState.Right);
                this.setClass('active-options-left', state === SlidingState.Left);
                if (state === SlidingState.Disabled || state === SlidingState.Enabled) {
                    this.setClass('active-swipe-right', false);
                    this.setClass('active-swipe-left', false);
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "setClass",
        value: function setClass(className, add) {
            this._renderer.setElementClass(this._elementRef.nativeElement, className, add);
        }
        /**
         * @private
         */

    }, {
        key: "getOpenAmount",
        value: function getOpenAmount() {
            return this._openAmount;
        }
        /**
         * Close the sliding item. Items can also be closed from the [List](../../list/List).
         *
         * The sliding item can be closed by grabbing a reference to `ItemSliding`. In the
         * below example, the template reference variable `slidingItem` is placed on the element
         * and passed to the `share` method.
         *
         * ```html
         * <ion-list>
         *   <ion-item-sliding #slidingItem>
         *     <ion-item>
         *       Item
         *     </ion-item>
         *     <ion-item-options>
         *       <button (click)="share(slidingItem)">Share</button>
         *     </ion-item-options>
         *   </ion-item-sliding>
         * </ion-list>
         * ```
         *
         * ```ts
         * import {Component} from '@angular/core';
         * import {ItemSliding} from 'ionic-angular';
         *
         * @Component({...})
         * export class MyClass {
         *   constructor() { }
         *
         *   share(slidingItem: ItemSliding) {
         *     slidingItem.close();
         *   }
         * }
         * ```
         */

    }, {
        key: "close",
        value: function close() {
            this._setOpenAmount(0, true);
        }
    }, {
        key: "_itemOptions",
        set: function set(itemOptions) {
            var sides = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = itemOptions.toArray()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var item = _step.value;

                    var side = item.getSides();
                    if (side === ItemSideFlags.Left) {
                        this._leftOptions = item;
                    } else {
                        this._rightOptions = item;
                    }
                    sides |= item.getSides();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this._optsDirty = true;
            this._sides = sides;
        }
    }]);

    return ItemSliding;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"])(__WEBPACK_IMPORTED_MODULE_2__item__["a" /* Item */]), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__item__["a" /* Item */]) === 'function' && _d || Object)], ItemSliding.prototype, "item", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _e || Object)], ItemSliding.prototype, "ionDrag", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(ItemOptions), __metadata('design:type', typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _f || Object), __metadata('design:paramtypes', [typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _g || Object])], ItemSliding.prototype, "_itemOptions", null);
ItemSliding = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-item-sliding',
    template: '<ng-content select="ion-item,[ion-item]"></ng-content>' + '<ng-content select="ion-item-options"></ng-content>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_4__list_list__["a" /* List */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__list_list__["a" /* List */]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _k || Object])], ItemSliding);
function shouldClose(isCloseDirection, isMovingFast, isOnCloseZone) {
    // The logic required to know when the sliding item should close (openAmount=0)
    // depends on three booleans (isCloseDirection, isMovingFast, isOnCloseZone)
    // and it ended up being too complicated to be written manually without errors
    // so the truth table is attached below: (0=false, 1=true)
    // isCloseDirection | isMovingFast | isOnCloseZone || shouldClose
    //         0        |       0      |       0       ||    0
    //         0        |       0      |       1       ||    1
    //         0        |       1      |       0       ||    0
    //         0        |       1      |       1       ||    0
    //         1        |       0      |       0       ||    0
    //         1        |       0      |       1       ||    1
    //         1        |       1      |       0       ||    1
    //         1        |       1      |       1       ||    1
    // The resulting expression was generated by resolving the K-map (Karnaugh map):
    var shouldClose = !isMovingFast && isOnCloseZone || isCloseDirection && isMovingFast;
    return shouldClose;
}
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__menu_controller__ = __webpack_require__(112);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return MenuClose; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @name MenuClose
 * @description
 * The `menuClose` directive can be placed on any button to close an open menu.
 *
 * @usage
 *
 * A simple `menuClose` button can be added using the following markup:
 *
 * ```html
 * <button menuClose>Close Menu</button>
 * ```
 *
 * To close a certain menu by its id or side, give the `menuClose`
 * directive a value.
 *
 * ```html
 * <button menuClose="left">Close Left Menu</button>
 * ```
 *
 * @demo /docs/v2/demos/menu/
 * @see {@link /docs/v2/components#menus Menu Component Docs}
 * @see {@link ../../menu/Menu Menu API Docs}
 */
var MenuClose = function () {
    function MenuClose(_menu) {
        _classCallCheck(this, MenuClose);

        this._menu = _menu;
    }
    /**
    * @private
    */

    _createClass(MenuClose, [{
        key: "close",
        value: function close() {
            var menu = this._menu.get(this.menuClose);
            menu && menu.close();
        }
    }]);

    return MenuClose;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], MenuClose.prototype, "menuClose", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], MenuClose.prototype, "close", null);
MenuClose = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[menuClose]'
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */]) === 'function' && _a || Object])], MenuClose);
var _a;

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__menu_controller__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return MenuToggle; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};




/**
 * @name MenuToggle
 * @description
 * The `menuToggle` directive can be placed on any button to toggle a menu open or closed.
 * If it is added to the [NavBar](../../nav/NavBar) of a page, the button will only appear
 * when the page it's in is currently a root page. See the [Menu Navigation Bar Behavior](../Menu#navigation-bar-behavior)
 * docs for more information.
 *
 *
 * @usage
 *
 * A simple `menuToggle` button can be added using the following markup:
 *
 * ```html
 * <button menuToggle>Toggle Menu</button>
 * ```
 *
 * To toggle a specific menu by its id or side, give the `menuToggle`
 * directive a value.
 *
 * ```html
 * <button menuToggle="right">Toggle Right Menu</button>
 * ```
 *
 * If placing the `menuToggle` in a navbar or toolbar, it should be
 * placed as a child of the `<ion-navbar>` or `<ion-toolbar>`, and not in
 * the `<ion-buttons>` element:
 *
 * ```html
 * <ion-header>
 *
 *   <ion-navbar>
 *     <ion-buttons start>
 *       <button>
 *         <ion-icon name="contact"></ion-icon>
 *       </button>
 *     </ion-buttons>
 *     <button menuToggle>
 *       <ion-icon name="menu"></ion-icon>
 *     </button>
 *     <ion-title>
 *       Title
 *     </ion-title>
 *     <ion-buttons end>
 *       <button (click)="doClick()">
 *         <ion-icon name="more"></ion-icon>
 *       </button>
 *     </ion-buttons>
 *   </ion-navbar>
 *
 * </ion-header>
 * ```
 *
 * Similar to `<ion-buttons>`, the `menuToggle` can be positioned using
 * `start`, `end`, `left`, or `right`:
 *
 * ```html
 * <ion-toolbar>
 *   <button menuToggle right>
 *     <ion-icon name="menu"></ion-icon>
 *   </button>
 *   <ion-title>
 *     Title
 *   </ion-title>
 *   <ion-buttons end>
 *     <button (click)="doClick()">
 *       <ion-icon name="more"></ion-icon>
 *     </button>
 *   </ion-buttons>
 * </ion-toolbar>
 * ```
 *
 * See the [Toolbar API docs](../../toolbar/Toolbar) for more information
 * on the different positions.
 *
 * @demo /docs/v2/demos/menu/
 * @see {@link /docs/v2/components#menus Menu Component Docs}
 * @see {@link ../../menu/Menu Menu API Docs}
 */
var MenuToggle = function () {
    function MenuToggle(_menu, elementRef, _viewCtrl, _navbar) {
        _classCallCheck(this, MenuToggle);

        this._menu = _menu;
        this._viewCtrl = _viewCtrl;
        this._navbar = _navbar;
        this._inNavbar = !!_navbar;
    }
    /**
    * @private
    */

    _createClass(MenuToggle, [{
        key: "toggle",
        value: function toggle() {
            var menu = this._menu.get(this.menuToggle);
            menu && menu.toggle();
        }
        /**
        * @private
        */

    }, {
        key: "isHidden",
        get: function get() {
            if (this._inNavbar && this._viewCtrl) {
                if (this._viewCtrl.isFirst()) {
                    // this is the first view, so it should always show
                    return false;
                }
                var menu = this._menu.get(this.menuToggle);
                if (menu) {
                    // this is not the root view, so see if this menu
                    // is configured to still be enabled if it's not the root view
                    return !menu.persistent;
                }
            }
            return false;
        }
    }]);

    return MenuToggle;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], MenuToggle.prototype, "menuToggle", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], MenuToggle.prototype, "toggle", null);
MenuToggle = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[menuToggle]',
    host: {
        '[hidden]': 'isHidden',
        'menuToggle': '' // ensures the attr is there for css when using [menuToggle]
    }
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__nav_view_controller__["a" /* ViewController */]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */]) === 'function' && _d || Object])], MenuToggle);
var _a, _b, _c, _d;

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__backdrop_backdrop__ = __webpack_require__(312);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__menu_gestures__ = __webpack_require__(899);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__menu_controller__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__platform_platform__ = __webpack_require__(61);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Menu; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @name Menu
 * @description
 * The Menu component is a navigation drawer that slides in from the side of the current
 * view. By default, it slides in from the left, but the side can be overridden. The menu
 * will be displayed differently based on the mode, however the display type can be changed
 * to any of the available [menu types](#menu-types). The menu element should be a sibling
 * to the app's content element. There can be any number of menus attached to the content.
 * These can be controlled from the templates, or programmatically using the [MenuController](../MenuController).
 *
 *
 * ### Opening/Closing Menus
 *
 * There are several ways to open or close a menu. The menu can be **toggled** open or closed
 * from the template using the [MenuToggle](../MenuToggle) directive. It can also be
 * **closed** from the template using the [MenuClose](../MenuClose) directive. To display a menu
 * programmatically, inject the [MenuController](../MenuController) provider and call any of the
 * `MenuController` methods.
 *
 *
 * ### Menu Types
 *
 * The menu supports several display types: `overlay`, `reveal` and `push`. By default,
 * it will use the correct type based on the mode, but this can be changed. The default
 * type for both Material Design and Windows mode is `overlay`, and `reveal` is the default
 * type for iOS mode. The menu type can be changed in the app's [config](../../config/Config)
 * via the `menuType` property, or passed in the `type` property on the `<ion-menu>` element.
 * See [usage](#usage) below for examples of changing the menu type.
 *
 *
 * ### Navigation Bar Behavior
 *
 * If a [MenuToggle](../MenuToggle) button is added to the [NavBar](../../nav/NavBar) of
 * a page, the button will only appear when the page it's in is currently a root page. The
 * root page is the initial page loaded in the app, or a page that has been set as the root
 * using the [setRoot](../../nav/NavController/#setRoot) method on the [NavController](../../nav/NavController).
 *
 * For example, say the application has two pages, `Page1` and `Page2`, and both have a
 * `MenuToggle` button in their navigation bars. Assume the initial page loaded into the app
 * is `Page1`, making it the root page. `Page1` will display the `MenuToggle` button, but once
 * `Page2` is pushed onto the navigation stack, the `MenuToggle` will not be displayed.
 *
 *
 * ### Persistent Menus
 *
 * Persistent menus display the [MenuToggle](../MenuToggle) button in the [NavBar](../../nav/NavBar)
 * on all pages in the navigation stack. To make a menu persistent set `persistent` to `true` on the
 * `<ion-menu>` element. Note that this will only affect the `MenuToggle` button in the `NavBar` attached
 * to the `Menu` with `persistent` set to true, any other `MenuToggle` buttons will not be affected.
 *
 *
 * @usage
 *
 * To add a menu to an application, the `<ion-menu>` element should be added as a sibling to
 * the content it belongs to. A [local variable](https://angular.io/docs/ts/latest/guide/user-input.html#local-variables)
 * should be added to the content element and passed to the menu element in the `content` property.
 * This tells the menu which content it is attached to, so it knows which element to watch for
 * gestures. In the below example, `content` is using [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding)
 * because `mycontent` is a reference to the `<ion-nav>` element, and not a string.
 *
 * ```html
 * <ion-menu [content]="mycontent">
 *   <ion-content>
 *     <ion-list>
 *     ...
 *     </ion-list>
 *   </ion-content>
 * </ion-menu>
 *
 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
 * ```
 *
 * ### Menu Side
 *
 * By default, menus slide in from the left, but this can be overridden by passing `right`
 * to the `side` property:
 *
 * ```html
 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
 * ```
 *
 *
 * ### Menu Type
 *
 * The menu type can be changed by passing the value to `type` on the `<ion-menu>`:
 *
 * ```html
 * <ion-menu type="overlay" [content]="mycontent">...</ion-menu>
 * ```
 *
 * It can also be set in the app's config. The below will set the menu type to
 * `push` for all modes, and then set the type to `overlay` for the `ios` mode.
 *
 * ```ts
 * import { ionicBootstrap } from 'ionic-angular';
 *
 * ionicBootstrap(MyApp, customProviders, {
 *   menuType: 'push',
 *   platforms: {
 *     ios: {
 *       menuType: 'overlay',
 *     }
 *   }
 * });
 * ```
 *
 *
 * ### Displaying the Menu
 *
 * To toggle a menu from the template, add a button with the `menuToggle`
 * directive anywhere in the page's template:
 *
 * ```html
 * <button menuToggle>Toggle Menu</button>
 * ```
 *
 * To close a menu, add the `menuClose` button. It can be added anywhere
 * in the content, or even the menu itself. Below it is added to the menu's
 * content:
 *
 * ```html
 * <ion-menu [content]="mycontent">
 *   <ion-content>
 *     <ion-list>
 *       <button menuClose ion-item detail-none>Close Menu</button>
 *     </ion-list>
 *   </ion-content>
 * </ion-menu>
 * ```
 *
 * See the [MenuToggle](../MenuToggle) and [MenuClose](../MenuClose) docs
 * for more information on these directives.
 *
 * The menu can also be controlled from the Page by using the `MenuController`.
 * Inject the `MenuController` provider into the page and then call any of its
 * methods. In the below example, the `openMenu` method will open the menu
 * when it is called.
 *
 * ```ts
 * import { Component } from '@angular/core';
 * import { MenuController } from 'ionic-angular';
 *
 * @Component({...})
 * export class MyPage {
 *  constructor(private menu: MenuController) {}
 *
 *  openMenu() {
 *    this.menu.open();
 *  }
 * }
 * ```
 *
 * See the [MenuController](../MenuController) API docs for all of the methods
 * and usage information.
 *
 *
 * @demo /docs/v2/demos/menu/
 *
 * @see {@link /docs/v2/components#menus Menu Component Docs}
 * @see {@link ../MenuController MenuController API Docs}
 * @see {@link ../../nav/Nav Nav API Docs}
 * @see {@link ../../nav/NavController NavController API Docs}
 */
var Menu = function (_Ion) {
    _inherits(Menu, _Ion);

    function Menu(_menuCtrl, _elementRef, _config, _platform, _renderer, _keyboard, _zone) {
        _classCallCheck(this, Menu);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Menu).call(this, _elementRef));

        _this._menuCtrl = _menuCtrl;
        _this._elementRef = _elementRef;
        _this._config = _config;
        _this._platform = _platform;
        _this._renderer = _renderer;
        _this._keyboard = _keyboard;
        _this._zone = _zone;
        _this._preventTime = 0;
        _this._isEnabled = true;
        _this._isSwipeEnabled = true;
        _this._isPers = false;
        _this._init = false;
        /**
         * @private
         */
        _this.isOpen = false;
        /**
         * @output {event} When the menu is being dragged open.
         */
        _this.ionDrag = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the menu has been opened.
         */
        _this.ionOpen = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the menu has been closed.
         */
        _this.ionClose = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        return _this;
    }
    /**
     * @input {boolean} Whether or not the menu should be enabled. Default `true`.
     */

    _createClass(Menu, [{
        key: "ngOnInit",

        /**
         * @private
         */
        value: function ngOnInit() {
            var self = this;
            self._init = true;
            var content = self.content;
            self._cntEle = content instanceof Node ? content : content && content.getNativeElement && content.getNativeElement();
            // requires content element
            if (!self._cntEle) {
                return console.error('Menu: must have a [content] element to listen for drag events on. Example:\n\n<ion-menu [content]="content"></ion-menu>\n\n<ion-nav #content></ion-nav>');
            }
            // normalize the "side"
            if (self.side !== 'left' && self.side !== 'right') {
                self.side = 'left';
            }
            self._renderer.setElementAttribute(self._elementRef.nativeElement, 'side', self.side);
            // normalize the "type"
            if (!self.type) {
                self.type = self._config.get('menuType');
            }
            self._renderer.setElementAttribute(self._elementRef.nativeElement, 'type', self.type);
            // add the gestures
            self._cntGesture = new __WEBPACK_IMPORTED_MODULE_6__menu_gestures__["a" /* MenuContentGesture */](self, self.getContentElement());
            self._menuGesture = new __WEBPACK_IMPORTED_MODULE_6__menu_gestures__["b" /* MenuTargetGesture */](self, self.getNativeElement());
            // register listeners if this menu is enabled
            // check if more than one menu is on the same side
            var hasEnabledSameSideMenu = self._menuCtrl.getMenus().some(function (m) {
                return m.side === self.side && m.enabled;
            });
            if (hasEnabledSameSideMenu) {
                // auto-disable if another menu on the same side is already enabled
                self._isEnabled = false;
            }
            self._setListeners();
            // create a reusable click handler on this instance, but don't assign yet
            self.onContentClick = function (ev) {
                if (self._isEnabled) {
                    ev.preventDefault();
                    ev.stopPropagation();
                    self.close();
                }
            };
            self._cntEle.classList.add('menu-content');
            self._cntEle.classList.add('menu-content-' + self.type);
            // register this menu with the app's menu controller
            self._menuCtrl.register(self);
        }
        /**
         * @private
         */

    }, {
        key: "bdClick",
        value: function bdClick(ev) {
            console.debug('backdrop clicked');
            ev.preventDefault();
            ev.stopPropagation();
            this._menuCtrl.close();
        }
        /**
         * @private
         */

    }, {
        key: "_setListeners",
        value: function _setListeners() {
            var self = this;
            if (self._init) {
                // only listen/unlisten if the menu has initialized
                if (self._isEnabled && self._isSwipeEnabled && !self._cntGesture.isListening) {
                    // should listen, but is not currently listening
                    console.debug('menu, gesture listen', self.side);
                    self._zone.runOutsideAngular(function () {
                        self._cntGesture.listen();
                        self._menuGesture.listen();
                    });
                } else if (self._cntGesture.isListening && (!self._isEnabled || !self._isSwipeEnabled)) {
                    // should not listen, but is currently listening
                    console.debug('menu, gesture unlisten', self.side);
                    self._cntGesture.unlisten();
                    self._menuGesture.unlisten();
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "_getType",
        value: function _getType() {
            if (!this._type) {
                this._type = __WEBPACK_IMPORTED_MODULE_7__menu_controller__["a" /* MenuController */].create(this.type, this, this._platform);
                if (this._config.get('animate') === false) {
                    this._type.ani.duration(0);
                }
            }
            return this._type;
        }
        /**
         * @private
         */

    }, {
        key: "setOpen",
        value: function setOpen(shouldOpen) {
            var _this2 = this;

            // _isPrevented is used to prevent unwanted opening/closing after swiping open/close
            // or swiping open the menu while pressing down on the MenuToggle button
            if (shouldOpen && this.isOpen || this._isPrevented()) {
                return Promise.resolve(this.isOpen);
            }
            this._before();
            return new Promise(function (resolve) {
                _this2._getType().setOpen(shouldOpen, function () {
                    _this2._after(shouldOpen);
                    resolve(_this2.isOpen);
                });
            });
        }
        /**
         * @private
         */

    }, {
        key: "swipeStart",
        value: function swipeStart() {
            // user started swiping the menu open/close
            if (this._isEnabled && this._isSwipeEnabled && !this._isPrevented()) {
                this._before();
                this._getType().setProgressStart(this.isOpen);
            }
        }
        /**
         * @private
         */

    }, {
        key: "swipeProgress",
        value: function swipeProgress(stepValue) {
            // user actively dragging the menu
            if (this._isEnabled && this._isSwipeEnabled) {
                this._prevent();
                this._getType().setProgessStep(stepValue);
                this.ionDrag.emit(stepValue);
            }
        }
        /**
         * @private
         */

    }, {
        key: "swipeEnd",
        value: function swipeEnd(shouldCompleteLeft, shouldCompleteRight, stepValue) {
            var _this3 = this;

            // user has finished dragging the menu
            if (this._isEnabled && this._isSwipeEnabled) {
                this._prevent();
                var opening = !this.isOpen;
                var shouldComplete = false;
                if (opening) {
                    shouldComplete = this.side === 'right' ? shouldCompleteLeft : shouldCompleteRight;
                } else {
                    shouldComplete = this.side === 'right' ? shouldCompleteRight : shouldCompleteLeft;
                }
                this._getType().setProgressEnd(shouldComplete, stepValue, function (isOpen) {
                    console.debug('menu, swipeEnd', _this3.side);
                    _this3._after(isOpen);
                });
            }
        }
    }, {
        key: "_before",
        value: function _before() {
            // this places the menu into the correct location before it animates in
            // this css class doesn't actually kick off any animations
            if (this._isEnabled) {
                this.getNativeElement().classList.add('show-menu');
                this.getBackdropElement().classList.add('show-backdrop');
                this._prevent();
                this._keyboard.close();
            }
        }
    }, {
        key: "_after",
        value: function _after(isOpen) {
            // keep opening/closing the menu disabled for a touch more yet
            // only add listeners/css if it's enabled and isOpen
            // and only remove listeners/css if it's not open
            // emit opened/closed events
            if (this._isEnabled && isOpen || !isOpen) {
                this._prevent();
                this.isOpen = isOpen;
                this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
                this._cntEle.removeEventListener('click', this.onContentClick);
                if (isOpen) {
                    this._cntEle.addEventListener('click', this.onContentClick);
                    this.ionOpen.emit(true);
                } else {
                    this.getNativeElement().classList.remove('show-menu');
                    this.getBackdropElement().classList.remove('show-backdrop');
                    this.ionClose.emit(true);
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "tempDisable",
        value: function tempDisable(temporarilyDisable) {
            if (temporarilyDisable) {
                this._prevEnabled = this._isEnabled;
                this._getType().setProgessStep(0);
                this.enable(false);
            } else {
                this.enable(this._prevEnabled);
                this._after(false);
            }
        }
    }, {
        key: "_prevent",
        value: function _prevent() {
            // used to prevent unwanted opening/closing after swiping open/close
            // or swiping open the menu while pressing down on the MenuToggle
            this._preventTime = Date.now() + 20;
        }
    }, {
        key: "_isPrevented",
        value: function _isPrevented() {
            return this._preventTime > Date.now();
        }
        /**
         * @private
         */

    }, {
        key: "open",
        value: function open() {
            return this.setOpen(true);
        }
        /**
         * @private
         */

    }, {
        key: "close",
        value: function close() {
            return this.setOpen(false);
        }
        /**
         * @private
         */

    }, {
        key: "toggle",
        value: function toggle() {
            return this.setOpen(!this.isOpen);
        }
        /**
         * @private
         */

    }, {
        key: "enable",
        value: function enable(shouldEnable) {
            var _this4 = this;

            this.enabled = shouldEnable;
            if (!shouldEnable && this.isOpen) {
                // close if this menu is open, and should not be enabled
                this.close();
            }
            if (shouldEnable) {
                // if this menu should be enabled
                // then find all the other menus on this same side
                // and automatically disable other same side menus
                var sameSideMenus = this._menuCtrl.getMenus().filter(function (m) {
                    return m.side === _this4.side && m !== _this4;
                }).map(function (m) {
                    return m.enabled = false;
                });
            }
            return this;
        }
        /**
         * @private
         */

    }, {
        key: "swipeEnable",
        value: function swipeEnable(shouldEnable) {
            this.swipeEnabled = shouldEnable;
            return this;
        }
        /**
         * @private
         */

    }, {
        key: "getMenuElement",
        value: function getMenuElement() {
            return this.getNativeElement();
        }
        /**
         * @private
         */

    }, {
        key: "getContentElement",
        value: function getContentElement() {
            return this._cntEle;
        }
        /**
         * @private
         */

    }, {
        key: "getBackdropElement",
        value: function getBackdropElement() {
            return this.backdrop.elementRef.nativeElement;
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._menuCtrl.unregister(this);
            this._cntGesture && this._cntGesture.destroy();
            this._menuGesture && this._menuGesture.destroy();
            this._type && this._type.destroy();
            this._resizeUnreg && this._resizeUnreg();
            this._cntEle = null;
        }
    }, {
        key: "enabled",
        get: function get() {
            return this._isEnabled;
        },
        set: function set(val) {
            this._isEnabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
            this._setListeners();
        }
        /**
         * @input {boolean} Whether or not swiping the menu should be enabled. Default `true`.
         */

    }, {
        key: "swipeEnabled",
        get: function get() {
            return this._isSwipeEnabled;
        },
        set: function set(val) {
            this._isSwipeEnabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
            this._setListeners();
        }
        /**
         * @input {string} Whether or not the menu should persist on child pages. Default `false`.
         */

    }, {
        key: "persistent",
        get: function get() {
            return this._isPers;
        },
        set: function set(val) {
            this._isPers = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
        }
    }]);

    return Menu;
}(__WEBPACK_IMPORTED_MODULE_3__ion__["a" /* Ion */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_1__backdrop_backdrop__["a" /* Backdrop */]), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__backdrop_backdrop__["a" /* Backdrop */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__backdrop_backdrop__["a" /* Backdrop */]) === 'function' && _a || Object)], Menu.prototype, "backdrop", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Menu.prototype, "content", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Menu.prototype, "id", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Menu.prototype, "side", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Menu.prototype, "type", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Menu.prototype, "enabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Menu.prototype, "swipeEnabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Menu.prototype, "persistent", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Menu.prototype, "maxEdgeStart", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], Menu.prototype, "ionDrag", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _c || Object)], Menu.prototype, "ionOpen", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _d || Object)], Menu.prototype, "ionClose", void 0);
Menu = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-menu',
    host: {
        'role': 'navigation'
    },
    template: '<ng-content></ng-content>' + '<ion-backdrop (click)="bdClick($event)" disableScroll="false"></ion-backdrop>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_7__menu_controller__["a" /* MenuController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__menu_controller__["a" /* MenuController */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_8__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__platform_platform__["Platform"]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_5__util_keyboard__["Keyboard"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__util_keyboard__["Keyboard"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _l || Object])], Menu);
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__nav_controller__ = __webpack_require__(52);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NavPop; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};


/**
 * @name NavPop
 * @description
 * Directive for declaratively pop the current page off from the navigation stack.
 *
 * @usage
 * ```html
 * <ion-content>
 *  <div block button nav-pop>go back</div>
 * </ion-content>
 * ```
 * This will go back one page in the navigation stack
 *
 * Similar to {@link /docs/v2/api/components/nav/NavPush/ `NavPush` }
 * @demo /docs/v2/demos/navigation/
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 * @see {@link ../NavPush NavPush API Docs}
 */
var NavPop = function () {
    function NavPop(_nav) {
        _classCallCheck(this, NavPop);

        this._nav = _nav;
        if (!_nav) {
            console.error('nav-pop must be within a NavController');
        }
    }
    /**
     * @private
     */

    _createClass(NavPop, [{
        key: "onClick",
        value: function onClick() {
            this._nav && this._nav.pop();
        }
    }]);

    return NavPop;
}();
NavPop = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[nav-pop]',
    host: {
        '(click)': 'onClick()',
        'role': 'link'
    }
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__nav_controller__["a" /* NavController */]) === 'function' && _a || Object])], NavPop);
var _a;

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__nav_controller__ = __webpack_require__(52);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NavPush; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};


/**
 * @name NavPush
 * @description
 * Directive for declaratively linking to a new page instead of using
 * {@link ../NavController/#push NavController.push}. Similar to ui-router's `ui-sref`.
 *
 * @usage
 * ```html
 * <button [navPush]="pushPage"></button>
 * ```
 * To specify parameters you can use array syntax or the `nav-params` property:
 * ```html
 * <button [navPush]="pushPage" [navParams]="params"></button>
 * ```
 * Where `pushPage` and `params` are specified in your component, and `pushPage`
 * contains a reference to a [@Page component](../../../config/Page/):
 *
 * ```ts
 * import {LoginPage} from 'login';
 * @Component({
 *   template: `<button [navPush]="pushPage" [navParams]="params"></button>`
 * })
 * class MyPage {
 *   constructor(){
 *     this.pushPage = LoginPage;
 *     this.params = { id: 42 };
 *   }
 * }
 * ```
 *
 * ### Alternate syntax
 * You can also use syntax similar to Angular2's router, passing an array to
 * NavPush:
 * ```html
 * <button [navPush]="[pushPage, params]"></button>
 * ```
 * @demo /docs/v2/demos/navigation/
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 * @see {@link ../NavPop NavPop API Docs}
 */
var NavPush = function () {
    function NavPush(_nav) {
        _classCallCheck(this, NavPush);

        this._nav = _nav;
        if (!_nav) {
            console.error('nav-push must be within a NavController');
        }
    }
    /**
     * @private
     */

    _createClass(NavPush, [{
        key: "onClick",
        value: function onClick() {
            var destination = void 0,
                params = void 0;
            if (this.navPush instanceof Array) {
                if (this.navPush.length > 2) {
                    throw 'Too many [navPush] arguments, expects [View, { params }]';
                }
                destination = this.navPush[0];
                params = this.navPush[1] || this.navParams;
            } else {
                destination = this.navPush;
                params = this.navParams;
            }
            this._nav && this._nav.push(destination, params);
        }
    }]);

    return NavPush;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], NavPush.prototype, "navPush", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], NavPush.prototype, "navParams", void 0);
NavPush = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[navPush]',
    host: {
        '(click)': 'onClick()',
        'role': 'link'
    }
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__nav_controller__["a" /* NavController */]) === 'function' && _a || Object])], NavPush);
var _a;

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__nav_portal__ = __webpack_require__(902);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Nav; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};








/**
 * @name Nav
 * @description
 * _For a quick walkthrough of navigation in Ionic, check out the
 * [Navigation section](../../../../components/#navigation) of the Component
 * docs._
 *
 * Nav is a basic navigation controller component.  As a subclass of NavController
 * you use it to navigate to pages in your app and manipulate the navigation stack.
 * Nav automatically animates transitions between pages for you.
 *
 * For more information on using navigation controllers like Nav or [Tab](../../Tabs/Tab/),
 * take a look at the [NavController API Docs](../NavController/).
 *
 * You must set a root page (where page is any [@Page](../../config/Page/)
 * component) to be loaded initially by any Nav you create, using
 * the 'root' property:
 *
 * @usage
 * ```ts
 * import {Component} from '@angular/core';
 * import {ionicBootstrap} from 'ionic-angular';
 * import {GettingStartedPage} from './getting-started';
 *
 * @Component({
 *   template: `<ion-nav [root]="root"></ion-nav>`
 * })
 * class MyApp {
 *   root = GettingStartedPage;
 * }
 *
 * ionicBootstrap(MyApp);
 * ```
 *
 * ### Back Navigation
 *
 * If a [page](../NavController/#creating_pages) you navigate to has a [NavBar](../NavBar/),
 * Nav will automatically add a back button to it if there is a page
 * before the one you are navigating to in the navigation stack.
 *
 * Additionally, specifying the `swipeBackEnabled` property will allow you to
 * swipe to go back:
 * ```html
 * <ion-nav swipeBackEnabled="false" [root]="rootPage"></ion-nav>
 * ```
 *
 * Here is a diagram of how Nav animates smoothly between pages:
 *
 * <div class="highlight less-margin">
 *   <pre>
 *                           +-------+
 *                           |  App  |
 *                           +---+---+
 *                           &lt;ion-app&gt;
 *                               |
 *                  +------------+-------------+
 *                  |   Ionic Nav Controller   |
 *                  +------------+-------------+
 *                           &lt;ion-nav&gt;
 *                               |
 *                               |
 *             Page 3  +--------------------+                     LoginPage
 *           Page 2  +--------------------+ |
 *         Page 1  +--------------------+ | |              +--------------------+
 *                 | | Header           |&lt;-----------------|       Login        |
 *                 +--------------------+ | |              +--------------------+
 *                 | | |                | | |              | Username:          |
 *                 | | |                | | |              | Password:          |
 *                 | | |  Page 3 is     | | |              |                    |
 *                 | | |  only content  | | |              |                    |
 *                 | | |                |&lt;-----------------|                    |
 *                 | | |                | | |              |                    |
 *                 | | |                | | |              |                    |
 *                 | +------------------|-+ |              |                    |
 *                 | | Footer           |-|-+              |                    |
 *                 | +------------------|-+                |                    |
 *                 +--------------------+                  +--------------------+
 *
 *           +--------------------+    +--------------------+    +--------------------+
 *           | Header             |    | Content            |    | Content            |
 *           +--------------------+    |                    |    |                    |
 *           | Content            |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    |                    |    |                    |
 *           |                    |    +--------------------+    |                    |
 *           |                    |    | Footer             |    |                    |
 *           +--------------------+    +--------------------+    +--------------------+
 *
 *   </pre>
 * </div>
 *
 * @demo /docs/v2/demos/navigation/
 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
 */
var Nav = function (_NavController) {
    _inherits(Nav, _NavController);

    function Nav(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler) {
        _classCallCheck(this, Nav);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Nav).call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler));

        _this._hasInit = false;
        if (viewCtrl) {
            // an ion-nav can also act as an ion-page within a parent ion-nav
            // this would happen when an ion-nav nests a child ion-nav.
            viewCtrl.setContent(_this);
            viewCtrl.setContentRef(elementRef);
        }
        if (parent) {
            // this Nav has a parent Nav
            parent.registerChildNav(_this);
        } else if (app) {
            // this is the root navcontroller for the entire app
            _this._app.setRootNav(_this);
        }
        return _this;
    }
    /**
     * @private
     */

    _createClass(Nav, [{
        key: "ngAfterViewInit",

        /**
         * @private
         */
        value: function ngAfterViewInit() {
            this._hasInit = true;
            if (this._root) {
                if (typeof this._root !== 'function') {
                    throw 'The [root] property in <ion-nav> must be given a reference to a component class from within the constructor.';
                }
                this.push(this._root);
            }
        }
        /**
         * @input {Page} The Page component to load as the root page within this nav.
         */

    }, {
        key: "_vp",
        set: function set(val) {
            this.setViewport(val);
        }
    }, {
        key: "root",
        get: function get() {
            return this._root;
        },
        set: function set(page) {
            this._root = page;
            if (this._hasInit) {
                this.setRoot(page);
            }
        }
        /**
         * @input {boolean} Whether it's possible to swipe-to-go-back on this nav controller or not.
         */

    }, {
        key: "swipeBackEnabled",
        get: function get() {
            return this._sbEnabled;
        },
        set: function set(val) {
            this._sbEnabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(val);
        }
    }, {
        key: "_np",
        get: function get() {
            return null;
        },
        set: function set(val) {
            this.setPortal(val.first);
        }
    }]);

    return Nav;
}(__WEBPACK_IMPORTED_MODULE_5__nav_controller__["a" /* NavController */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('viewport', { read: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _a || Object), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _b || Object])], Nav.prototype, "_vp", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Nav.prototype, "root", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Nav.prototype, "swipeBackEnabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChildren"])(__WEBPACK_IMPORTED_MODULE_6__nav_portal__["a" /* NavPortal */]), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _c || Object)], Nav.prototype, "_np", null);
Nav = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-nav',
    template: '<div #viewport nav-viewport></div><div class="nav-decor"></div><div nav-portal></div>',
    directives: [__WEBPACK_IMPORTED_MODULE_6__nav_portal__["a" /* NavPortal */]],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__view_controller__["a" /* ViewController */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__nav_controller__["a" /* NavController */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_3__util_keyboard__["Keyboard"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__util_keyboard__["Keyboard"]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"]) === 'function' && _m || Object])], Nav);
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_key__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_ui_event_manager__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Picker; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











/**
 * @name Picker
 * @description
 *
 */
var Picker = function (_ViewController) {
    _inherits(Picker, _ViewController);

    function Picker() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, Picker);

        opts.columns = opts.columns || [];
        opts.buttons = opts.buttons || [];
        opts.enableBackdropDismiss = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Picker).call(this, PickerDisplayCmp, opts));

        _this.isOverlay = true;
        _this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        // by default, pickers should not fire lifecycle events of other views
        // for example, when an picker enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        _this.fireOtherLifecycles = false;
        _this.usePortal = true;
        return _this;
    }
    /**
    * @private
    */

    _createClass(Picker, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = direction === 'back' ? 'pickerLeave' : 'pickerEnter';
            return this._nav && this._nav.config.get(key);
        }
        /**
         * @param {any} button Picker toolbar button
         */

    }, {
        key: "addButton",
        value: function addButton(button) {
            this.data.buttons.push(button);
        }
        /**
         * @param {any} button Picker toolbar button
         */

    }, {
        key: "addColumn",
        value: function addColumn(column) {
            this.data.columns.push(column);
        }
    }, {
        key: "getColumns",
        value: function getColumns() {
            return this.data.columns;
        }
    }, {
        key: "refresh",
        value: function refresh() {
            this.instance.refresh && this.instance.refresh();
        }
        /**
         * @param {string} cssClass CSS class name to add to the picker's outer wrapper.
         */

    }, {
        key: "setCssClass",
        value: function setCssClass(cssClass) {
            this.data.cssClass = cssClass;
        }
    }], [{
        key: "create",
        value: function create() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            return new Picker(opts);
        }
    }]);

    return Picker;
}(__WEBPACK_IMPORTED_MODULE_10__nav_view_controller__["a" /* ViewController */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Picker.prototype, "ionChange", void 0);
/**
 * @private
 */
var PickerColumnCmp = function () {
    function PickerColumnCmp(config, elementRef, _sanitizer) {
        _classCallCheck(this, PickerColumnCmp);

        this.elementRef = elementRef;
        this._sanitizer = _sanitizer;
        this.y = 0;
        this.pos = [];
        this.startY = null;
        this.receivingEvents = false;
        this.events = new __WEBPACK_IMPORTED_MODULE_9__util_ui_event_manager__["a" /* UIEventManager */]();
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.rotateFactor = config.getNumber('pickerRotateFactor', 0);
    }

    _createClass(PickerColumnCmp, [{
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            var _this2 = this;

            // get the scrollable element within the column
            var colEle = this.colEle.nativeElement;
            this.colHeight = colEle.clientHeight;
            // get the height of one option
            this.optHeight = colEle.firstElementChild ? colEle.firstElementChild.clientHeight : 0;
            // set the scroll position for the selected option
            this.setSelected(this.col.selectedIndex, 0);
            // Listening for pointer events
            this.events.pointerEventsRef(this.elementRef, function (ev) {
                return _this2.pointerStart(ev);
            }, function (ev) {
                return _this2.pointerMove(ev);
            }, function (ev) {
                return _this2.pointerEnd(ev);
            });
        }
    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this.events.unlistenAll();
        }
    }, {
        key: "pointerStart",
        value: function pointerStart(ev) {
            console.debug('picker, pointerStart', ev.type, this.startY);
            // cancel any previous raf's that haven't fired yet
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["cancelRaf"])(this.rafId);
            // remember where the pointer started from`
            this.startY = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["pointerCoord"])(ev).y;
            // reset everything
            this.receivingEvents = true;
            this.velocity = 0;
            this.pos.length = 0;
            this.pos.push(this.startY, Date.now());
            var minY = this.col.options.length - 1;
            var maxY = 0;
            for (var i = 0; i < this.col.options.length; i++) {
                if (!this.col.options[i].disabled) {
                    minY = Math.min(minY, i);
                    maxY = Math.max(maxY, i);
                }
            }
            this.minY = minY * this.optHeight * -1;
            this.maxY = maxY * this.optHeight * -1;
            return true;
        }
    }, {
        key: "pointerMove",
        value: function pointerMove(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            if (this.startY === null) {
                return;
            }
            var currentY = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["pointerCoord"])(ev).y;
            this.pos.push(currentY, Date.now());
            // update the scroll position relative to pointer start position
            var y = this.y + (currentY - this.startY);
            if (y > this.minY) {
                // scrolling up higher than scroll area
                y = Math.pow(y, 0.8);
                this.bounceFrom = y;
            } else if (y < this.maxY) {
                // scrolling down below scroll area
                y += Math.pow(this.maxY - y, 0.9);
                this.bounceFrom = y;
            } else {
                this.bounceFrom = 0;
            }
            this.update(y, 0, false, false);
        }
    }, {
        key: "pointerEnd",
        value: function pointerEnd(ev) {
            if (!this.receivingEvents) {
                return;
            }
            this.receivingEvents = false;
            this.velocity = 0;
            if (this.bounceFrom > 0) {
                // bounce back up
                this.update(this.minY, 100, true, true);
            } else if (this.bounceFrom < 0) {
                // bounce back down
                this.update(this.maxY, 100, true, true);
            } else if (this.startY !== null) {
                var endY = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["pointerCoord"])(ev).y;
                console.debug('picker, pointerEnd', ev.type, endY);
                this.pos.push(endY, Date.now());
                var endPos = this.pos.length - 1;
                var startPos = endPos;
                var timeRange = Date.now() - 100;
                // move pointer to position measured 100ms ago
                for (var i = endPos; i > 0 && this.pos[i] > timeRange; i -= 2) {
                    startPos = i;
                }
                if (startPos !== endPos) {
                    // compute relative movement between these two points
                    var timeOffset = this.pos[endPos] - this.pos[startPos];
                    var movedTop = this.pos[startPos - 1] - this.pos[endPos - 1];
                    // based on XXms compute the movement to apply for each render step
                    this.velocity = movedTop / timeOffset * FRAME_MS;
                }
                if (Math.abs(endY - this.startY) > 3) {
                    ev.preventDefault();
                    ev.stopPropagation();
                    var y = this.y + (endY - this.startY);
                    this.update(y, 0, true, true);
                }
            }
            this.startY = null;
            this.decelerate();
        }
    }, {
        key: "decelerate",
        value: function decelerate() {
            var y = 0;
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["cancelRaf"])(this.rafId);
            if (isNaN(this.y) || !this.optHeight) {
                // fallback in case numbers get outta wack
                this.update(y, 0, true, true);
            } else if (Math.abs(this.velocity) > 0) {
                // still decelerating
                this.velocity *= DECELERATION_FRICTION;
                // do not let it go slower than a velocity of 1
                this.velocity = this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1);
                y = Math.round(this.y - this.velocity);
                if (y > this.minY) {
                    // whoops, it's trying to scroll up farther than the options we have!
                    y = this.minY;
                    this.velocity = 0;
                } else if (y < this.maxY) {
                    // gahh, it's trying to scroll down farther than we can!
                    y = this.maxY;
                    this.velocity = 0;
                }
                console.log("decelerate y: " + y + ", velocity: " + this.velocity + ", optHeight: " + this.optHeight);
                var notLockedIn = y % this.optHeight !== 0 || Math.abs(this.velocity) > 1;
                this.update(y, 0, true, !notLockedIn);
                if (notLockedIn) {
                    // isn't locked in yet, keep decelerating until it is
                    this.rafId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["raf"])(this.decelerate.bind(this));
                }
            } else if (this.y % this.optHeight !== 0) {
                // needs to still get locked into a position so options line up
                var currentPos = Math.abs(this.y % this.optHeight);
                // create a velocity in the direction it needs to scroll
                this.velocity = currentPos > this.optHeight / 2 ? 1 : -1;
                this.decelerate();
            }
        }
    }, {
        key: "optClick",
        value: function optClick(ev, index) {
            if (!this.velocity) {
                ev.preventDefault();
                ev.stopPropagation();
                this.setSelected(index, 150);
            }
        }
    }, {
        key: "setSelected",
        value: function setSelected(selectedIndex, duration) {
            // if there is a selected index, then figure out it's y position
            // if there isn't a selected index, then just use the top y position
            var y = selectedIndex > -1 ? selectedIndex * this.optHeight * -1 : 0;
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["cancelRaf"])(this.rafId);
            this.velocity = 0;
            // so what y position we're at
            this.update(y, duration, true, true);
        }
    }, {
        key: "update",
        value: function update(y, duration, saveY, emitChange) {
            // ensure we've got a good round number :)
            y = Math.round(y);
            this.col.selectedIndex = Math.max(Math.abs(Math.round(y / this.optHeight)), 0);
            for (var i = 0; i < this.col.options.length; i++) {
                var opt = this.col.options[i];
                var optTop = i * this.optHeight;
                var optOffset = optTop + y;
                var rotateX = optOffset * this.rotateFactor;
                var translateX = 0;
                var translateY = 0;
                var translateZ = 0;
                if (this.rotateFactor !== 0) {
                    translateX = 0;
                    translateZ = 90;
                    if (rotateX > 90 || rotateX < -90) {
                        translateX = -9999;
                        rotateX = 0;
                    }
                } else {
                    translateY = optOffset;
                }
                opt._trans = this._sanitizer.bypassSecurityTrustStyle("rotateX(" + rotateX + "deg) translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)");
                opt._dur = duration > 0 ? duration + 'ms' : '';
            }
            if (saveY) {
                this.y = y;
            }
            if (emitChange) {
                if (this.lastIndex === undefined) {
                    // have not set a last index yet
                    this.lastIndex = this.col.selectedIndex;
                } else if (this.lastIndex !== this.col.selectedIndex) {
                    // new selected index has changed from the last index
                    // update the lastIndex and emit that it has changed
                    this.lastIndex = this.col.selectedIndex;
                    this.ionChange.emit(this.col.options[this.col.selectedIndex]);
                }
            }
        }
    }, {
        key: "refresh",
        value: function refresh() {
            var min = this.col.options.length - 1;
            var max = 0;
            for (var i = 0; i < this.col.options.length; i++) {
                if (!this.col.options[i].disabled) {
                    min = Math.min(min, i);
                    max = Math.max(max, i);
                }
            }
            var selectedIndex = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["clamp"])(min, this.col.selectedIndex, max);
            if (selectedIndex !== this.col.selectedIndex) {
                var y = selectedIndex * this.optHeight * -1;
                this.update(y, 150, true, true);
            }
        }
    }]);

    return PickerColumnCmp;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('colEle'), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object)], PickerColumnCmp.prototype, "colEle", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], PickerColumnCmp.prototype, "col", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _c || Object)], PickerColumnCmp.prototype, "ionChange", void 0);
PickerColumnCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: '.picker-col',
    template: '<div *ngIf="col.prefix" class="picker-prefix" [style.width]="col.prefixWidth">{{col.prefix}}</div>' + '<div class="picker-opts" #colEle [style.width]="col.optionsWidth">' + '<button *ngFor="let o of col.options; let i=index" [style.transform]="o._trans" [style.transitionDuration]="o._dur" [class.picker-opt-selected]="col.selectedIndex === i" [class.picker-opt-disabled]="o.disabled" (click)="optClick($event, i)" type="button" category="picker-opt">' + '{{o.text}}' + '</button>' + '</div>' + '<div *ngIf="col.suffix" class="picker-suffix" [style.width]="col.suffixWidth">{{col.suffix}}</div>',
    host: {
        '[style.min-width]': 'col.columnWidth',
        '[class.picker-opts-left]': 'col.align=="left"',
        '[class.picker-opts-right]': 'col.align=="right"'
    }
}), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__config_config__["Config"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["DomSanitizationService"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["DomSanitizationService"]) === 'function' && _f || Object])], PickerColumnCmp);
/**
 * @private
 */
var PickerDisplayCmp = function () {
    function PickerDisplayCmp(_viewCtrl, _elementRef, _config, params, renderer) {
        _classCallCheck(this, PickerDisplayCmp);

        this._viewCtrl = _viewCtrl;
        this._elementRef = _elementRef;
        this._config = _config;
        this.d = params.data;
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(function (cssClass) {
                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = ++pickerIds;
        this.lastClick = 0;
    }

    _createClass(PickerDisplayCmp, [{
        key: "ionViewLoaded",
        value: function ionViewLoaded() {
            // normalize the data
            var data = this.d;
            data.buttons = data.buttons.map(function (button) {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isString"])(button)) {
                    return { text: button };
                }
                if (button.role) {
                    button.cssRole = "picker-toolbar-" + button.role;
                }
                return button;
            });
            // clean up dat data
            data.columns = data.columns.map(function (column) {
                if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(column.columnWidth)) {
                    column.columnWidth = 100 / data.columns.length + '%';
                }
                if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(column.options)) {
                    column.options = [];
                }
                column.options = column.options.map(function (inputOpt) {
                    var opt = {
                        text: '',
                        value: '',
                        disabled: inputOpt.disabled
                    };
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(inputOpt)) {
                        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isString"])(inputOpt) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isNumber"])(inputOpt)) {
                            opt.text = inputOpt.toString();
                            opt.value = inputOpt;
                        } else {
                            opt.text = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(inputOpt.text) ? inputOpt.text : inputOpt.value;
                            opt.value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(inputOpt.value) ? inputOpt.value : inputOpt.text;
                        }
                    }
                    return opt;
                });
                return column;
            });
        }
    }, {
        key: "refresh",
        value: function refresh() {
            this._cols.forEach(function (column) {
                column.refresh();
            });
        }
    }, {
        key: "_colChange",
        value: function _colChange(selectedOption) {
            // one of the columns has changed its selected index
            var picker = this._viewCtrl;
            picker.ionChange.emit(this.getSelected());
        }
    }, {
        key: "_keyUp",
        value: function _keyUp(ev) {
            if (this.enabled && this._viewCtrl.isLast()) {
                if (ev.keyCode === __WEBPACK_IMPORTED_MODULE_6__util_key__["a" /* Key */].ENTER) {
                    if (this.lastClick + 1000 < Date.now()) {
                        // do not fire this click if there recently was already a click
                        // this can happen when the button has focus and used the enter
                        // key to click the button. However, both the click handler and
                        // this keyup event will fire, so only allow one of them to go.
                        console.debug('picker, enter button');
                        var button = this.d.buttons[this.d.buttons.length - 1];
                        this.btnClick(button);
                    }
                } else if (ev.keyCode === __WEBPACK_IMPORTED_MODULE_6__util_key__["a" /* Key */].ESCAPE) {
                    console.debug('picker, escape button');
                    this.bdClick();
                }
            }
        }
    }, {
        key: "ionViewDidEnter",
        value: function ionViewDidEnter() {
            var activeElement = document.activeElement;
            if (activeElement) {
                activeElement.blur();
            }
            var focusableEle = this._elementRef.nativeElement.querySelector('button');
            if (focusableEle) {
                focusableEle.focus();
            }
            this.enabled = true;
        }
    }, {
        key: "btnClick",
        value: function btnClick(button, dismissDelay) {
            var _this3 = this;

            if (!this.enabled) {
                return;
            }
            // keep the time of the most recent button click
            this.lastClick = Date.now();
            var shouldDismiss = true;
            if (button.handler) {
                // a handler has been provided, execute it
                // pass the handler the values from the inputs
                if (button.handler(this.getSelected()) === false) {
                    // if the return value of the handler is false then do not dismiss
                    shouldDismiss = false;
                }
            }
            if (shouldDismiss) {
                setTimeout(function () {
                    _this3.dismiss(button.role);
                }, dismissDelay || this._config.get('pageTransitionDelay'));
            }
        }
    }, {
        key: "bdClick",
        value: function bdClick() {
            if (this.enabled && this.d.enableBackdropDismiss) {
                this.dismiss('backdrop');
            }
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(this.getSelected(), role);
        }
    }, {
        key: "getSelected",
        value: function getSelected() {
            var selected = {};
            this.d.columns.forEach(function (col, index) {
                var selectedColumn = col.options[col.selectedIndex];
                selected[col.name] = {
                    text: selectedColumn ? selectedColumn.text : null,
                    value: selectedColumn ? selectedColumn.value : null,
                    columnIndex: index
                };
            });
            return selected;
        }
    }]);

    return PickerDisplayCmp;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChildren"])(PickerColumnCmp), __metadata('design:type', typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _g || Object)], PickerDisplayCmp.prototype, "_cols", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], PickerDisplayCmp.prototype, "_keyUp", null);
PickerDisplayCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-picker-cmp',
    template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="picker-wrapper">' + '<div class="picker-toolbar">' + '<div *ngFor="let b of d.buttons" class="picker-toolbar-button" [ngClass]="b.cssRole">' + '<button (click)="btnClick(b)" [ngClass]="b.cssClass" class="picker-button" clear>' + '{{b.text}}' + '</button>' + '</div>' + '</div>' + '<div class="picker-columns">' + '<div class="picker-above-highlight"></div>' + '<div *ngFor="let c of d.columns" [col]="c" class="picker-col" (ionChange)="_colChange($event)"></div>' + '<div class="picker-below-highlight"></div>' + '</div>' + '</div>',
    host: {
        'role': 'dialog'
    },
    directives: [PickerColumnCmp],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_10__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_10__nav_view_controller__["a" /* ViewController */]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_5__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__config_config__["Config"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */]) === 'function' && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _m || Object])], PickerDisplayCmp);
/**
 * Animations for pickers
 */

var PickerSlideIn = function (_Transition) {
    _inherits(PickerSlideIn, _Transition);

    function PickerSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, PickerSlideIn);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(PickerSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.picker-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.26);
        wrapper.fromTo('translateY', '100%', '0%');
        _this4.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
        return _this4;
    }

    return PickerSlideIn;
}(__WEBPACK_IMPORTED_MODULE_8__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_8__transitions_transition__["Transition"].register('picker-slide-in', PickerSlideIn);

var PickerSlideOut = function (_Transition2) {
    _inherits(PickerSlideOut, _Transition2);

    function PickerSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, PickerSlideOut);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(PickerSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.picker-wrapper'));
        backdrop.fromTo('opacity', 0.26, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        _this5.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
        return _this5;
    }

    return PickerSlideOut;
}(__WEBPACK_IMPORTED_MODULE_8__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_8__transitions_transition__["Transition"].register('picker-slide-out', PickerSlideOut);
var pickerIds = -1;
var DECELERATION_FRICTION = 0.97;
var FRAME_MS = 1000 / 60;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__radio_group__ = __webpack_require__(318);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return RadioButton; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};





/**
 * @description
 * A radio button is a button that can be either checked or unchecked. A user can tap
 * the button to check or uncheck it. It can also be checked from the template using
 * the `checked` property.
 *
 * Use an element with a `radio-group` attribute to group a set of radio buttons. When
 * radio buttons are inside a [radio group](../RadioGroup), exactly one radio button
 * in the group can be checked at any time. If a radio button is not placed in a group,
 * they will all have the ability to be checked at the same time.
 *
 * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html) for
 * more information on forms and input.
 *
 * @usage
 * ```html
 * <ion-list radio-group [(ngModel)]="relationship">
 *   <ion-item>
 *     <ion-label>Friends</ion-label>
 *     <ion-radio value="friends" checked></ion-radio>
 *   </ion-item>
 *   <ion-item>
 *     <ion-label>Family</ion-label>
 *     <ion-radio value="family"></ion-radio>
 *   </ion-item>
 *   <ion-item>
 *     <ion-label>Enemies</ion-label>
 *     <ion-radio value="enemies" [disabled]="isDisabled"></ion-radio>
 *   </ion-item>
 * </ion-list>
 * ```
 * @demo /docs/v2/demos/radio/
 * @see {@link /docs/v2/components#radio Radio Component Docs}
 * @see {@link ../RadioGroup RadioGroup API Docs}
 */
var RadioButton = function () {
    function RadioButton(_form, _item, _group) {
        _classCallCheck(this, RadioButton);

        this._form = _form;
        this._item = _item;
        this._group = _group;
        this._checked = false;
        this._disabled = false;
        this._value = null;
        /**
         * @output {any} expression to be evaluated when selected
         */
        this.ionSelect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _form.register(this);
        if (_group) {
            // register with the radiogroup
            this.id = 'rb-' + _group.add(this);
        }
        if (_item) {
            // register the input inside of the item
            // reset to the item's id instead of the radiogroup id
            this.id = 'rb-' + _item.registerInput('radio');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-radio', true);
        }
    }
    /**
     * @input {any} The value of the radio button. Defaults to the generated id.
     */

    _createClass(RadioButton, [{
        key: "_click",

        /**
         * @private
         */
        value: function _click(ev) {
            console.debug('radio, select', this.id);
            ev.preventDefault();
            ev.stopPropagation();
            this.checked = true;
            this.ionSelect.emit(this.value);
        }
        /**
         * @private
         */

    }, {
        key: "ngOnInit",
        value: function ngOnInit() {
            if (this._group && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(this._group.value)) {
                this.checked = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isCheckedProperty"])(this._group.value, this.value);
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
            this._group && this._group.remove(this);
        }
    }, {
        key: "value",
        get: function get() {
            // if the value is not defined then use it's unique id
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isBlank"])(this._value) ? this.id : this._value;
        },
        set: function set(val) {
            this._value = val;
        }
        /**
         * @input {boolean} Whether the radio button should be checked or not. Default false.
         */

    }, {
        key: "checked",
        get: function get() {
            return this._checked;
        },
        set: function set(isChecked) {
            this._checked = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(isChecked);
            if (this._item) {
                this._item.setCssClass('item-radio-checked', this._checked);
            }
        }
        /**
         * @input {boolean} Whether the radio button should be disabled or not. Default false.
         */

    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-radio-disabled', this._disabled);
        }
    }]);

    return RadioButton;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], RadioButton.prototype, "ionSelect", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], RadioButton.prototype, "value", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], RadioButton.prototype, "checked", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], RadioButton.prototype, "disabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], RadioButton.prototype, "_click", null);
RadioButton = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-radio',
    template: '<div class="radio-icon" [class.radio-checked]="_checked">' + '<div class="radio-inner"></div>' + '</div>' + '<button role="radio" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
    host: {
        '[class.radio-disabled]': '_disabled'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__util_form__["Form"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__item_item__["a" /* Item */]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__radio_group__["a" /* RadioGroup */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__radio_group__["a" /* RadioGroup */]) === 'function' && _d || Object])], RadioButton);
var _a, _b, _c, _d;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_debouncer__ = __webpack_require__(504);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_ui_event_manager__ = __webpack_require__(152);
/* unused harmony export RANGE_VALUE_ACCESSOR */
/* harmony export */ __webpack_require__.d(exports, "c", function() { return RangeKnob; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return Range; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};








var RANGE_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Provider"](__WEBPACK_IMPORTED_MODULE_1__angular_common__["NG_VALUE_ACCESSOR"], { useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return Range;
    }), multi: true });
/**
 * @private
 */
var RangeKnob = function () {
    function RangeKnob(range) {
        _classCallCheck(this, RangeKnob);

        this.range = range;
    }

    _createClass(RangeKnob, [{
        key: "position",
        value: function position() {
            this._x = this._ratio * 100 + "%";
        }
    }, {
        key: "ngOnInit",
        value: function ngOnInit() {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(this.range.value)) {
                // we already have a value
                if (this.range.dualKnobs) {
                    // we have a value and there are two knobs
                    if (this.upper) {
                        // this is the upper knob
                        this.value = this.range.value.upper;
                    } else {
                        // this is the lower knob
                        this.value = this.range.value.lower;
                    }
                } else {
                    // we have a value and there is only one knob
                    this.value = this.range.value;
                }
            } else {
                // we do not have a value so set defaults
                this.ratio = this.range.dualKnobs && this.upper ? 1 : 0;
            }
            this.position();
        }
    }, {
        key: "ratio",
        get: function get() {
            return this._ratio;
        },
        set: function set(ratio) {
            this._ratio = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["clamp"])(0, ratio, 1);
            this._val = this.range.ratioToValue(this._ratio);
            if (this.range.snaps) {
                this._ratio = this.range.valueToRatio(this._val);
            }
        }
    }, {
        key: "value",
        get: function get() {
            return this._val;
        },
        set: function set(val) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isString"])(val)) {
                val = Math.round(val);
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isNumber"])(val) && !isNaN(val)) {
                this._ratio = this.range.valueToRatio(val);
                this._val = this.range.ratioToValue(this._ratio);
            }
        }
    }]);

    return RangeKnob;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], RangeKnob.prototype, "upper", void 0);
RangeKnob = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: '.range-knob-handle',
    template: '<div class="range-pin" *ngIf="range.pin">{{_val}}</div>' + '<div class="range-knob"></div>',
    host: {
        '[class.range-knob-pressed]': 'pressed',
        '[class.range-knob-min]': '_val===range.min',
        '[class.range-knob-max]': '_val===range.max',
        '[style.left]': '_x',
        '[style.top]': '_y',
        '[style.transform]': '_trns',
        '[attr.aria-valuenow]': '_val',
        '[attr.aria-valuemin]': 'range.min',
        '[attr.aria-valuemax]': 'range.max',
        'role': 'slider',
        'tabindex': '0'
    },
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return Range;
}))), __metadata('design:paramtypes', [Range])], RangeKnob);
/**
 * @name Range
 * @description
 * The Range slider lets users select from a range of values by moving
 * the slider knob. It can accept dual knobs, but by default one knob
 * controls the value of the range.
 *
 * ### Range Labels
 * Labels can be placed on either side of the range by adding the
 * `range-left` or `range-right` property to the element. The element
 * doesn't have to be an `ion-label`, it can be added to any element
 * to place it to the left or right of the range. See [usage](#usage)
 * below for examples.
 *
 *
 * ### Minimum and Maximum Values
 * Minimum and maximum values can be passed to the range through the `min`
 * and `max` properties, respectively. By default, the range sets the `min`
 * to `0` and the `max` to `100`.
 *
 *
 * ### Steps and Snaps
 * The `step` property specifies the value granularity of the range's value.
 * It can be useful to set the `step` when the value isn't in increments of `1`.
 * Setting the `step` property will show tick marks on the range for each step.
 * The `snaps` property can be set to automatically move the knob to the nearest
 * tick mark based on the step property value.
 *
 *
 * ### Dual Knobs
 * Setting the `dualKnobs` property to `true` on the range component will
 * enable two knobs on the range. If the range has two knobs, the value will
 * be an object containing two properties: `lower` and `upper`.
 *
 *
 * @usage
 * ```html
 * <ion-list>
 *   <ion-item>
 *     <ion-range [(ngModel)]="singleValue" danger pin="true"></ion-range>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-range min="-200" max="200" [(ngModel)]="saturation" secondary>
 *       <ion-label range-left>-200</ion-label>
 *       <ion-label range-right>200</ion-label>
 *     </ion-range>
 *   </ion-item>
 *
 *  <ion-item>
 *    <ion-range min="20" max="80" step="2" [(ngModel)]="brightness">
 *      <ion-icon small range-left name="sunny"></ion-icon>
 *      <ion-icon range-right name="sunny"></ion-icon>
 *    </ion-range>
 *  </ion-item>
 *
 *   <ion-item>
 *     <ion-label>step=100, snaps, {{singleValue4}}</ion-label>
 *     <ion-range min="1000" max="2000" step="100" snaps="true" secondary [(ngModel)]="singleValue4"></ion-range>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>dual, step=3, snaps, {{dualValue2 | json}}</ion-label>
 *     <ion-range dualKnobs="true" [(ngModel)]="dualValue2" min="21" max="72" step="3" snaps="true"></ion-range>
 *   </ion-item>
 * </ion-list>
 * ```
 *
 *
 * @demo /docs/v2/demos/range/
 */
var Range = function () {
    function Range(_form, _item, _renderer) {
        _classCallCheck(this, Range);

        this._form = _form;
        this._item = _item;
        this._renderer = _renderer;
        this._dual = false;
        this._disabled = false;
        this._start = null;
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._snaps = false;
        this._debouncer = new __WEBPACK_IMPORTED_MODULE_4__util_debouncer__["a" /* Debouncer */](0);
        this._events = new __WEBPACK_IMPORTED_MODULE_7__util_ui_event_manager__["a" /* UIEventManager */]();
        /**
         * @output {Range} Expression to evaluate when the range value changes.
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _form.register(this);
        if (_item) {
            this.id = 'rng-' + _item.registerInput('range');
            this._labelId = 'lbl-' + _item.id;
            _item.setCssClass('item-range', true);
        }
    }
    /**
     * @input {number} Minimum integer value of the range. Defaults to `0`.
     */

    _createClass(Range, [{
        key: "ngAfterViewInit",

        /**
         * @private
         */
        value: function ngAfterViewInit() {
            var barL = '';
            var barR = '';
            var firstRatio = this._knobs.first.ratio;
            if (this._dual) {
                var lastRatio = this._knobs.last.ratio;
                barL = Math.min(firstRatio, lastRatio) * 100 + "%";
                barR = 100 - Math.max(firstRatio, lastRatio) * 100 + "%";
            } else {
                barR = 100 - firstRatio * 100 + "%";
            }
            this._renderer.setElementStyle(this._bar.nativeElement, 'left', barL);
            this._renderer.setElementStyle(this._bar.nativeElement, 'right', barR);
            // add touchstart/mousedown listeners
            this._events.pointerEventsRef(this._slider, this.pointerDown.bind(this), this.pointerMove.bind(this), this.pointerUp.bind(this));
            this.createTicks();
        }
        /**
         * @private
         */

    }, {
        key: "pointerDown",
        value: function pointerDown(ev) {
            // TODO: we could stop listening for events instead of checking this._disabled.
            // since there are a lot of events involved, this solution is
            // enough for the moment
            if (this._disabled) {
                return false;
            }
            console.debug("range, " + ev.type);
            // prevent default so scrolling does not happen
            ev.preventDefault();
            ev.stopPropagation();
            // get the start coordinates
            this._start = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["pointerCoord"])(ev);
            // get the full dimensions of the slider element
            var rect = this._rect = this._slider.nativeElement.getBoundingClientRect();
            // figure out the offset
            // the start of the pointer could actually
            // have been left or right of the slider bar
            if (this._start.x < rect.left) {
                rect.xOffset = this._start.x - rect.left;
            } else if (this._start.x > rect.right) {
                rect.xOffset = this._start.x - rect.right;
            } else {
                rect.xOffset = 0;
            }
            // figure out which knob we're interacting with
            this.setActiveKnob(this._start, rect);
            // update the ratio for the active knob
            this.updateKnob(this._start, rect);
            // update the active knob's position
            this._active.position();
            this._pressed = this._active.pressed = true;
            return true;
        }
        /**
         * @private
         */

    }, {
        key: "pointerMove",
        value: function pointerMove(ev) {
            console.debug("range, " + ev.type);
            // prevent default so scrolling does not happen
            ev.preventDefault();
            ev.stopPropagation();
            if (this._start !== null && this._active !== null) {
                // only use pointer move if it's a valid pointer
                // and we already have start coordinates
                // update the ratio for the active knob
                this.updateKnob(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["pointerCoord"])(ev), this._rect);
                // update the active knob's position
                this._active.position();
                this._pressed = this._active.pressed = true;
            }
        }
        /**
         * @private
         */

    }, {
        key: "pointerUp",
        value: function pointerUp(ev) {
            console.debug("range, " + ev.type);
            // prevent default so scrolling does not happen
            ev.preventDefault();
            ev.stopPropagation();
            // update the ratio for the active knob
            this.updateKnob(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["pointerCoord"])(ev), this._rect);
            // update the active knob's position
            this._active.position();
            // clear the start coordinates and active knob
            this._start = this._active = null;
            this._pressed = this._knobs.first.pressed = this._knobs.last.pressed = false;
        }
        /**
         * @private
         */

    }, {
        key: "setActiveKnob",
        value: function setActiveKnob(current, rect) {
            // figure out which knob is the closest one to the pointer
            var ratio = (current.x - rect.left) / rect.width;
            if (this._dual && Math.abs(ratio - this._knobs.first.ratio) > Math.abs(ratio - this._knobs.last.ratio)) {
                this._active = this._knobs.last;
            } else {
                this._active = this._knobs.first;
            }
        }
        /**
         * @private
         */

    }, {
        key: "updateKnob",
        value: function updateKnob(current, rect) {
            var _this = this;

            // figure out where the pointer is currently at
            // update the knob being interacted with
            if (this._active) {
                var oldVal = this._active.value;
                this._active.ratio = (current.x - rect.left) / rect.width;
                var newVal = this._active.value;
                if (oldVal !== newVal) {
                    // value has been updated
                    if (this._dual) {
                        this.value = {
                            lower: Math.min(this._knobs.first.value, this._knobs.last.value),
                            upper: Math.max(this._knobs.first.value, this._knobs.last.value)
                        };
                    } else {
                        this.value = newVal;
                    }
                    this._debouncer.debounce(function () {
                        _this.onChange(_this.value);
                        _this.ionChange.emit(_this);
                    });
                }
                this.updateBar();
            }
        }
        /**
         * @private
         */

    }, {
        key: "updateBar",
        value: function updateBar() {
            var firstRatio = this._knobs.first.ratio;
            if (this._dual) {
                var lastRatio = this._knobs.last.ratio;
                this._barL = Math.min(firstRatio, lastRatio) * 100 + "%";
                this._barR = 100 - Math.max(firstRatio, lastRatio) * 100 + "%";
            } else {
                this._barL = '';
                this._barR = 100 - firstRatio * 100 + "%";
            }
            this.updateTicks();
        }
        /**
         * @private
         */

    }, {
        key: "createTicks",
        value: function createTicks() {
            var _this2 = this;

            if (this._snaps) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_dom__["raf"])(function () {
                    // TODO: Fix to not use RAF
                    _this2._ticks = [];
                    for (var value = _this2._min; value <= _this2._max; value += _this2._step) {
                        var ratio = _this2.valueToRatio(value);
                        _this2._ticks.push({
                            ratio: ratio,
                            left: ratio * 100 + "%"
                        });
                    }
                    _this2.updateTicks();
                });
            }
        }
        /**
         * @private
         */

    }, {
        key: "updateTicks",
        value: function updateTicks() {
            var _this3 = this;

            if (this._snaps) {
                (function () {
                    var ratio = _this3.ratio;
                    if (_this3._dual) {
                        (function () {
                            var upperRatio = _this3.ratioUpper;
                            _this3._ticks.forEach(function (t) {
                                t.active = t.ratio >= ratio && t.ratio <= upperRatio;
                            });
                        })();
                    } else {
                        _this3._ticks.forEach(function (t) {
                            t.active = t.ratio <= ratio;
                        });
                    }
                })();
            }
        }
        /**
         * @private
         */

    }, {
        key: "ratioToValue",
        value: function ratioToValue(ratio) {
            ratio = Math.round((this._max - this._min) * ratio + this._min);
            return Math.round(ratio / this._step) * this._step;
        }
        /**
         * @private
         */

    }, {
        key: "valueToRatio",
        value: function valueToRatio(value) {
            value = Math.round(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["clamp"])(this._min, value, this._max) / this._step) * this._step;
            return (value - this._min) / (this._max - this._min);
        }
        /**
         * @private
         */

    }, {
        key: "writeValue",
        value: function writeValue(val) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(val)) {
                var knobs = this._knobs;
                this.value = val;
                if (this._knobs) {
                    if (this._dual) {
                        knobs.first.value = val.lower;
                        knobs.last.value = val.upper;
                        knobs.last.position();
                    } else {
                        knobs.first.value = val;
                    }
                    knobs.first.position();
                    this.updateBar();
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            var _this4 = this;

            this._fn = fn;
            this.onChange = function (val) {
                fn(val);
                _this4.onTouched();
            };
        }
        /**
         * @private
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
        /**
         * @input {boolean} Whether or not the range is disabled. Defaults to `false`.
         */

    }, {
        key: "onChange",

        /**
         * @private
         */
        value: function onChange(val) {
            // used when this input does not have an ngModel or ngControl
            this.onTouched();
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched() {}
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
            this._events.unlistenAll();
        }
    }, {
        key: "min",
        get: function get() {
            return this._min;
        },
        set: function set(val) {
            val = Math.round(val);
            if (!isNaN(val)) {
                this._min = val;
            }
        }
        /**
         * @input {number} Maximum integer value of the range. Defaults to `100`.
         */

    }, {
        key: "max",
        get: function get() {
            return this._max;
        },
        set: function set(val) {
            val = Math.round(val);
            if (!isNaN(val)) {
                this._max = val;
            }
        }
        /**
         * @input {number} Specifies the value granularity. Defaults to `1`.
         */

    }, {
        key: "step",
        get: function get() {
            return this._step;
        },
        set: function set(val) {
            val = Math.round(val);
            if (!isNaN(val) && val > 0) {
                this._step = val;
            }
        }
        /**
         * @input {number} If true, the knob snaps to tick marks evenly spaced based on the step property value. Defaults to `false`.
         */

    }, {
        key: "snaps",
        get: function get() {
            return this._snaps;
        },
        set: function set(val) {
            this._snaps = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
        }
        /**
         * @input {number} If true, a pin with integer value is shown when the knob is pressed. Defaults to `false`.
         */

    }, {
        key: "pin",
        get: function get() {
            return this._pin;
        },
        set: function set(val) {
            this._pin = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
        }
        /**
         * @input {number} If true, a pin with integer value is shown when the knob is pressed. Defaults to `false`.
         */

    }, {
        key: "debounce",
        get: function get() {
            return this._debouncer.wait;
        },
        set: function set(val) {
            this._debouncer.wait = val;
        }
        /**
         * @input {boolean} Show two knobs. Defaults to `false`.
         */

    }, {
        key: "dualKnobs",
        get: function get() {
            return this._dual;
        },
        set: function set(val) {
            this._dual = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-range-disabled', this._disabled);
        }
        /**
         * Returns the ratio of the knob's is current location, which is a number between `0` and `1`.
         * If two knobs are used, this property represents the lower value.
         */

    }, {
        key: "ratio",
        get: function get() {
            if (this._dual) {
                return Math.min(this._knobs.first.ratio, this._knobs.last.ratio);
            }
            return this._knobs.first.ratio;
        }
        /**
         * Returns the ratio of the upper value's is current location, which is a number between `0` and `1`.
         * If there is only one knob, then this will return `null`.
         */

    }, {
        key: "ratioUpper",
        get: function get() {
            if (this._dual) {
                return Math.max(this._knobs.first.ratio, this._knobs.last.ratio);
            }
            return null;
        }
    }]);

    return Range;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('bar'), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object)], Range.prototype, "_bar", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('slider'), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b || Object)], Range.prototype, "_slider", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChildren"])(RangeKnob), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _c || Object)], Range.prototype, "_knobs", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Range.prototype, "min", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Range.prototype, "max", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Range.prototype, "step", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Range.prototype, "snaps", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Range.prototype, "pin", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Range.prototype, "debounce", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Range.prototype, "dualKnobs", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _d || Object)], Range.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Range.prototype, "disabled", null);
Range = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-range',
    template: '<ng-content select="[range-left]"></ng-content>' + '<div class="range-slider" #slider>' + '<div class="range-tick" *ngFor="let t of _ticks" [style.left]="t.left" [class.range-tick-active]="t.active"></div>' + '<div class="range-bar"></div>' + '<div class="range-bar range-bar-active" [style.left]="_barL" [style.right]="_barR" #bar></div>' + '<div class="range-knob-handle"></div>' + '<div class="range-knob-handle" [upper]="true" *ngIf="_dual"></div>' + '</div>' + '<ng-content select="[range-right]"></ng-content>',
    host: {
        '[class.range-disabled]': '_disabled',
        '[class.range-pressed]': '_pressed',
        '[class.range-has-pin]': '_pin'
    },
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgFor"], RangeKnob],
    providers: [RANGE_VALUE_ACCESSOR],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__util_form__["Form"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_6__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__item_item__["a" /* Item */]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _g || Object])], Range);
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__refresher__ = __webpack_require__(319);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return RefresherContent; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




/**
 * @private
 */
var RefresherContent = function () {
    function RefresherContent(r, _config) {
        _classCallCheck(this, RefresherContent);

        this.r = r;
        this._config = _config;
    }
    /**
     * @private
     */

    _createClass(RefresherContent, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            if (!this.pullingIcon) {
                this.pullingIcon = this._config.get('ionPullIcon', 'arrow-down');
            }
            if (!this.refreshingSpinner) {
                this.refreshingSpinner = this._config.get('ionRefreshingSpinner', this._config.get('spinner', 'ios'));
            }
        }
    }]);

    return RefresherContent;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], RefresherContent.prototype, "pullingIcon", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], RefresherContent.prototype, "pullingText", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], RefresherContent.prototype, "refreshingSpinner", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], RefresherContent.prototype, "refreshingText", void 0);
RefresherContent = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-refresher-content',
    template: '<div class="refresher-pulling">' + '<div class="refresher-pulling-icon" *ngIf="pullingIcon">' + '<ion-icon [name]="pullingIcon"></ion-icon>' + '</div>' + '<div class="refresher-pulling-text" [innerHTML]="pullingText" *ngIf="pullingText"></div>' + '</div>' + '<div class="refresher-refreshing">' + '<div class="refresher-refreshing-icon">' + '<ion-spinner [name]="refreshingSpinner"></ion-spinner>' + '</div>' + '<div class="refresher-refreshing-text" [innerHTML]="refreshingText" *ngIf="refreshingText"></div>' + '</div>',
    host: {
        '[attr.state]': 'r.state'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__refresher__["a" /* Refresher */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__refresher__["a" /* Refresher */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _b || Object])], RefresherContent);
var _a, _b;

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ion__ = __webpack_require__(59);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Scroll; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @name Scroll
 * @description
 * Scroll is a non-flexboxed scroll area that can scroll horizontally or vertically. `ion-Scroll` Can be used in places where you may not need a full page scroller, but a highly customized one, such as image scubber or comment scroller.
 * @usage
 * ```html
 * <ion-scroll scrollX="true">
 * </ion-scroll>
 *
 * <ion-scroll scrollY="true">
 * </ion-scroll>
 *
 * <ion-scroll scrollX="true" scrollY="true">
 * </ion-scroll>
 * ```
 *@property {boolean} [scrollX] - whether to enable scrolling along the X axis
 *@property {boolean} [scrollY] - whether to enable scrolling along the Y axis
 *@property {boolean} [zoom] - whether to enable zooming
 *@property {number} [maxZoom] - set the max zoom amount for ion-scroll
 * @demo /docs/v2/demos/scroll/
 */
var Scroll = function (_Ion) {
    _inherits(Scroll, _Ion);

    function Scroll(elementRef) {
        _classCallCheck(this, Scroll);

        /**
         * @private
         */

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Scroll).call(this, elementRef));

        _this.maxScale = 3;
        /**
         * @private
         */
        _this.zoomDuration = 250;
        return _this;
    }
    /**
     * @private
     */

    _createClass(Scroll, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            this.scrollElement = this.getNativeElement().children[0];
        }
        /**
         * @private
         * Add a scroll event handler to the scroll element if it exists.
         * @param {Function} handler  The scroll handler to add to the scroll element.
         * @returns {?Function} a function to remove the specified handler, otherwise
         * undefined if the scroll element doesn't exist.
         */

    }, {
        key: "addScrollEventListener",
        value: function addScrollEventListener(handler) {
            var _this2 = this;

            if (!this.scrollElement) {
                return;
            }
            this.scrollElement.addEventListener('scroll', handler);
            return function () {
                _this2.scrollElement.removeEventListener('scroll', handler);
            };
        }
    }]);

    return Scroll;
}(__WEBPACK_IMPORTED_MODULE_1__ion__["a" /* Ion */]);
Scroll = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-scroll',
    inputs: ['scrollX', 'scrollY', 'zoom', 'maxZoom'],
    host: {
        '[class.scroll-x]': 'scrollX',
        '[class.scroll-y]': 'scrollY'
    },
    template: '<scroll-content>' + '<div class="scroll-zoom-wrapper">' + '<ng-content></ng-content>' + '</div>' + '</scroll-content>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object])], Scroll);
var _a;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_debouncer__ = __webpack_require__(504);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Searchbar; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};





/**
 * @name Searchbar
 * @module ionic
 * @description
 * Manages the display of a Searchbar which can be used to search or filter items.
 *
 * @usage
 * ```html
 * <ion-searchbar
 *   [(ngModel)]="myInput"
 *   [showCancelButton]="shouldShowCancel"
 *   (ionInput)="onInput($event)"
 *   (ionCancel)="onCancel($event)">
 * </ion-searchbar>
 * ```
 *
 * @demo /docs/v2/demos/searchbar/
 * @see {@link /docs/v2/components#searchbar Searchbar Component Docs}
 */
var Searchbar = function () {
    function Searchbar(_elementRef, _config, ngControl) {
        _classCallCheck(this, Searchbar);

        this._elementRef = _elementRef;
        this._config = _config;
        this._value = '';
        this._shouldBlur = true;
        this._isActive = false;
        this._debouncer = new __WEBPACK_IMPORTED_MODULE_4__util_debouncer__["a" /* Debouncer */](250);
        /**
         * @input {string} Set the the cancel button text. Default: `"Cancel"`.
         */
        this.cancelButtonText = 'Cancel';
        /**
         * @input {boolean} Whether to show the cancel button or not. Default: `"false"`.
         */
        this.showCancelButton = false;
        /**
         * @input {string} Set the input's placeholder. Default `"Search"`.
         */
        this.placeholder = 'Search';
        /**
         * @input {string} Set the type of the input. Values: `"text"`, `"password"`, `"email"`, `"number"`, `"search"`, `"tel"`, `"url"`. Default `"search"`.
         */
        this.type = 'search';
        /**
         * @output {event} When the Searchbar input has changed including cleared.
         */
        this.ionInput = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the Searchbar input has blurred.
         */
        this.ionBlur = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the Searchbar input has focused.
         */
        this.ionFocus = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the cancel button is clicked.
         */
        this.ionCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {event} When the clear input button is clicked.
         */
        this.ionClear = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @private
         */
        this.onChange = function (_) {};
        /**
         * @private
         */
        this.onTouched = function () {};
        // If the user passed a ngControl we need to set the valueAccessor
        if (ngControl) {
            ngControl.valueAccessor = this;
        }
    }
    /**
     * @input {number} How long, in milliseconds, to wait to trigger the `input` event after each keystroke. Default `250`.
     */

    _createClass(Searchbar, [{
        key: "ngOnInit",

        /**
         * @private
         * On Initialization check for attributes
         */
        value: function ngOnInit() {
            var showCancelButton = this.showCancelButton;
            if (typeof showCancelButton === 'string') {
                this.showCancelButton = showCancelButton === '' || showCancelButton === 'true';
            }
        }
        /**
         * @private
         * After View Initialization position the elements
         */

    }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            this.positionElements();
        }
        /**
         * @private
         * Positions the input search icon, placeholder, and the cancel button
         * based on the input value and if it is focused. (ios only)
         */

    }, {
        key: "positionElements",
        value: function positionElements() {
            if (this._config.get('mode') !== 'ios') return;
            // Position the input placeholder & search icon
            if (this._searchbarInput && this._searchbarIcon) {
                this.positionInputPlaceholder(this._searchbarInput.nativeElement, this._searchbarIcon.nativeElement);
            }
            // Position the cancel button
            if (this._cancelButton && this._cancelButton.nativeElement) {
                this.positionCancelButton(this._cancelButton.nativeElement);
            }
        }
        /**
         * @private
         * Calculates the amount of padding/margin left for the elements
         * in order to center them based on the placeholder width
         */

    }, {
        key: "positionInputPlaceholder",
        value: function positionInputPlaceholder(inputEle, iconEle) {
            if (this.shouldAlignLeft()) {
                inputEle.removeAttribute('style');
                iconEle.removeAttribute('style');
            } else {
                // Create a dummy span to get the placeholder width
                var tempSpan = document.createElement('span');
                tempSpan.innerHTML = this.placeholder;
                document.body.appendChild(tempSpan);
                // Get the width of the span then remove it
                var textWidth = tempSpan.offsetWidth;
                tempSpan.remove();
                // Set the input padding left
                var inputLeft = 'calc(50% - ' + textWidth / 2 + 'px)';
                inputEle.style.paddingLeft = inputLeft;
                // Set the icon margin left
                var iconLeft = 'calc(50% - ' + (textWidth / 2 + 30) + 'px)';
                iconEle.style.marginLeft = iconLeft;
            }
        }
        /**
         * @private
         * Show the iOS Cancel button on focus, hide it offscreen otherwise
         */

    }, {
        key: "positionCancelButton",
        value: function positionCancelButton(cancelButtonEle) {
            if (cancelButtonEle.offsetWidth > 0) {
                if (this._sbHasFocus) {
                    cancelButtonEle.style.marginRight = '0';
                } else {
                    cancelButtonEle.style.marginRight = -cancelButtonEle.offsetWidth + 'px';
                }
            }
        }
        /**
         * @private
         * Align the input placeholder left on focus or if a value exists
         */

    }, {
        key: "shouldAlignLeft",
        value: function shouldAlignLeft() {
            return this._value && this._value.toString().trim() !== '' || this._sbHasFocus === true;
        }
        /**
         * @private
         * Update the Searchbar input value when the input changes
         */

    }, {
        key: "inputChanged",
        value: function inputChanged(ev) {
            var _this = this;

            var value = ev.target.value;
            this._debouncer.debounce(function () {
                _this._value = value;
                _this.onChange(_this._value);
                _this.ionInput.emit(ev);
            });
        }
        /**
         * @private
         * Sets the Searchbar to focused and active on input focus.
         */

    }, {
        key: "inputFocused",
        value: function inputFocused(ev) {
            this.ionFocus.emit(ev);
            this._sbHasFocus = true;
            this._isActive = true;
            this.positionElements();
        }
        /**
         * @private
         * Sets the Searchbar to not focused and checks if it should align left
         * based on whether there is a value in the searchbar or not.
         */

    }, {
        key: "inputBlurred",
        value: function inputBlurred(ev) {
            // _shouldBlur determines if it should blur
            // if we are clearing the input we still want to stay focused in the input
            if (this._shouldBlur === false) {
                this._searchbarInput.nativeElement.focus();
                this._shouldBlur = true;
                return;
            }
            this.ionBlur.emit(ev);
            this._sbHasFocus = false;
            this.positionElements();
        }
        /**
         * @private
         * Clears the input field and triggers the control change.
         */

    }, {
        key: "clearInput",
        value: function clearInput(ev) {
            this.ionClear.emit(ev);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isPresent"])(this._value) && this._value !== '') {
                this._value = '';
                this.onChange(this._value);
                this.ionInput.emit(ev);
            }
            this._shouldBlur = false;
        }
        /**
         * @private
         * Clears the input field and tells the input to blur since
         * the clearInput function doesn't want the input to blur
         * then calls the custom cancel function if the user passed one in.
         */

    }, {
        key: "cancelSearchbar",
        value: function cancelSearchbar(ev) {
            this.ionCancel.emit(ev);
            this.clearInput(ev);
            this._shouldBlur = true;
            this._isActive = false;
        }
        /**
         * @private
         * Write a new value to the element.
         */

    }, {
        key: "writeValue",
        value: function writeValue(val) {
            this._value = val;
            this.positionElements();
        }
        /**
         * @private
         * Set the function to be called when the control receives a change event.
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            this.onChange = fn;
        }
        /**
         * @private
         * Set the function to be called when the control receives a touch event.
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
    }, {
        key: "debounce",
        get: function get() {
            return this._debouncer.wait;
        },
        set: function set(val) {
            this._debouncer.wait = val;
        }
        /**
         * @private
         */

    }, {
        key: "searchbarInput",
        set: function set(searchbarInput) {
            this._searchbarInput = searchbarInput;
            var inputEle = searchbarInput.nativeElement;
            // By defalt set autocomplete="off" unless specified by the input
            var autoComplete = this.autocomplete === '' || this.autocomplete === 'on' ? 'on' : this._config.get('autocomplete', 'off');
            inputEle.setAttribute('autocomplete', autoComplete);
            // by default set autocorrect="off" unless specified by the input
            var autoCorrect = this.autocorrect === '' || this.autocorrect === 'on' ? 'on' : this._config.get('autocorrect', 'off');
            inputEle.setAttribute('autocorrect', autoCorrect);
            // by default set spellcheck="false" unless specified by the input
            var spellCheck = this.spellcheck === '' || this.spellcheck === 'true' || this.spellcheck === true ? true : this._config.getBoolean('spellcheck', false);
            inputEle.setAttribute('spellcheck', spellCheck);
            // by default set type="search" unless specified by the input
            inputEle.setAttribute('type', this.type);
        }
        /**
         * @input {string} Set the input value.
         */

    }, {
        key: "value",
        get: function get() {
            return this._value;
        },
        set: function set(val) {
            this._value = val;
        }
    }]);

    return Searchbar;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Searchbar.prototype, "cancelButtonText", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Searchbar.prototype, "showCancelButton", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Searchbar.prototype, "debounce", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Searchbar.prototype, "placeholder", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Searchbar.prototype, "autocomplete", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Searchbar.prototype, "autocorrect", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Searchbar.prototype, "spellcheck", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Searchbar.prototype, "type", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Searchbar.prototype, "ionInput", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], Searchbar.prototype, "ionBlur", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _c || Object)], Searchbar.prototype, "ionFocus", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _d || Object)], Searchbar.prototype, "ionCancel", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _e || Object)], Searchbar.prototype, "ionClear", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostBinding"])('class.searchbar-has-focus'), __metadata('design:type', Boolean)], Searchbar.prototype, "_sbHasFocus", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('searchbarInput'), __metadata('design:type', typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _f || Object), __metadata('design:paramtypes', [typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _g || Object])], Searchbar.prototype, "searchbarInput", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('searchbarIcon'), __metadata('design:type', typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _h || Object)], Searchbar.prototype, "_searchbarIcon", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('cancelButton', { read: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] }), __metadata('design:type', typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _j || Object)], Searchbar.prototype, "_cancelButton", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Searchbar.prototype, "value", null);
Searchbar = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-searchbar',
    host: {
        '[class.searchbar-has-value]': '_value',
        '[class.searchbar-active]': '_isActive',
        '[class.searchbar-show-cancel]': 'showCancelButton',
        '[class.searchbar-left-aligned]': 'shouldAlignLeft()'
    },
    template: '<div class="searchbar-input-container">' + '<button (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" clear dark class="searchbar-md-cancel">' + '<ion-icon name="arrow-back"></ion-icon>' + '</button>' + '<div #searchbarIcon class="searchbar-search-icon"></div>' + '<input #searchbarInput [(ngModel)]="_value" [attr.placeholder]="placeholder" (input)="inputChanged($event)" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" class="searchbar-input">' + '<button clear class="searchbar-clear-icon" (click)="clearInput($event)" (mousedown)="clearInput($event)"></button>' + '</div>' + '<button #cancelButton [tabindex]="_isActive ? 1 : -1" clear (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" class="searchbar-ios-cancel">{{cancelButtonText}}</button>',
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgModel"]]
}), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"]) === 'function' && _m || Object])], Searchbar);
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "b", function() { return SegmentButton; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return Segment; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};



/**
 * @name SegmentButton
 * @description
 * The child buttons of the `ion-segment` component. Each `ion-segment-button` must have a value.
 * @usage
 * ```html
 * <ion-segment [(ngModel)]="relationship" primary>
 *   <ion-segment-button value="friends" (ionSelect)="selectedFriends()">
 *     Friends
 *   </ion-segment-button>
 *   <ion-segment-button value="enemies" (ionSelect)="selectedEnemies()">
 *     Enemies
 *   </ion-segment-button>
 * </ion-segment>
 *```
 *
 * Or with `FormBuilder`
 *
 *```html
 * <form [ngFormModel]="myForm">
 *   <ion-segment ngControl="mapStyle" danger>
 *     <ion-segment-button value="standard">
 *       Standard
 *     </ion-segment-button>
 *     <ion-segment-button value="hybrid">
 *       Hybrid
 *     </ion-segment-button>
 *     <ion-segment-button value="sat">
 *       Satellite
 *     </ion-segment-button>
 *   </ion-segment>
 * </form>
 * ```
 *
 *
 * @demo /docs/v2/demos/segment/
 * @see {@link /docs/v2/components#segment Segment Component Docs}
 * @see {@link /docs/v2/api/components/segment/Segment/ Segment API Docs}
 */
var SegmentButton = function () {
    function SegmentButton(_renderer, _elementRef) {
        _classCallCheck(this, SegmentButton);

        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._disabled = false;
        /**
         * @output {SegmentButton} expression to evaluate when a segment button has been clicked
         */
        this.ionSelect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    /**
     * @private
     */

    _createClass(SegmentButton, [{
        key: "setCssClass",

        /**
         * @private
         */
        value: function setCssClass(cssClass, shouldAdd) {
            this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
        }
        /**
         * @private
         * On click of a SegmentButton
         */

    }, {
        key: "onClick",
        value: function onClick() {
            console.debug('SegmentButton, select', this.value);
            this.ionSelect.emit(this);
        }
        /**
         * @private
         */

    }, {
        key: "ngOnInit",
        value: function ngOnInit() {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(this.value)) {
                console.warn('<ion-segment-button> requires a "value" attribute');
            }
        }
        /**
         * @private
         */

    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
            this.setCssClass('segment-button-disabled', this._disabled);
        }
    }, {
        key: "isActive",
        set: function set(isActive) {
            this._renderer.setElementClass(this._elementRef.nativeElement, 'segment-activated', isActive);
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-pressed', isActive);
        }
    }]);

    return SegmentButton;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], SegmentButton.prototype, "value", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], SegmentButton.prototype, "ionSelect", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], SegmentButton.prototype, "disabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], SegmentButton.prototype, "onClick", null);
SegmentButton = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-segment-button',
    template: '<ng-content></ng-content>' + '<ion-button-effect></ion-button-effect>',
    host: {
        'tappable': '',
        'class': 'segment-button',
        'role': 'button'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object])], SegmentButton);
/**
 * @name Segment
 * @description
 * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
 * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
 * You could use Angular 2's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular 2 Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/common/FormBuilder-class.html)
 *
 *
 * @usage
 * ```html
 * <ion-segment [(ngModel)]="relationship" (ionChange)="onSegmentChanged($event)" danger>
 *   <ion-segment-button value="friends">
 *     Friends
 *   </ion-segment-button>
 *   <ion-segment-button value="enemies">
 *     Enemies
 *   </ion-segment-button>
 * </ion-segment>
 *```
 *
 * Or with `FormBuilder`
 *
 *```html
 * <form [ngFormModel]="myForm">
 *   <ion-segment ngControl="mapStyle" danger>
 *     <ion-segment-button value="standard">
 *       Standard
 *     </ion-segment-button>
 *     <ion-segment-button value="hybrid">
 *       Hybrid
 *     </ion-segment-button>
 *     <ion-segment-button value="sat">
 *       Satellite
 *     </ion-segment-button>
 *   </ion-segment>
 * </form>
 * ```
 *
 *
 * @demo /docs/v2/demos/segment/
 * @see {@link /docs/v2/components#segment Segment Component Docs}
 * @see [Angular 2 Forms](http://learnangular2.com/forms/)
 */
var Segment = function () {
    function Segment(ngControl) {
        _classCallCheck(this, Segment);

        this._disabled = false;
        /**
         * @output {Any}  expression to evaluate when a segment button has been changed
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @private
         */
        this.onChange = function (_) {};
        /**
         * @private
         */
        this.onTouched = function (_) {};
        if (ngControl) {
            ngControl.valueAccessor = this;
        }
    }
    /**
     * @private
     */

    _createClass(Segment, [{
        key: "writeValue",

        /**
         * @private
         * Write a new value to the element.
         */
        value: function writeValue(value) {
            this.value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(value) ? value : '';
            if (this._buttons) {
                var buttons = this._buttons.toArray();
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = buttons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var button = _step.value;

                        button.isActive = button.value === this.value;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            var _this = this;

            var buttons = this._buttons.toArray();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = buttons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var button = _step2.value;

                    button.ionSelect.subscribe(function (selectedButton) {
                        _this.writeValue(selectedButton.value);
                        _this.onChange(selectedButton.value);
                        _this.ionChange.emit(selectedButton);
                    });
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isPresent"])(this.value)) {
                        button.isActive = button.value === this.value;
                    }
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(this._disabled)) {
                        button.setCssClass('segment-button-disabled', this._disabled);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
        /**
         * @private
         * Set the function to be called when the control receives a change event.
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            this.onChange = fn;
        }
        /**
         * @private
         * Set the function to be called when the control receives a touch event.
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_util__["isTrueProperty"])(val);
            if (this._buttons) {
                var buttons = this._buttons.toArray();
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = buttons[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var button = _step3.value;

                        button.setCssClass('segment-button-disabled', this._disabled);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }
        }
    }]);

    return Segment;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _d || Object)], Segment.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(SegmentButton), __metadata('design:type', typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _e || Object)], Segment.prototype, "_buttons", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Segment.prototype, "disabled", null);
Segment = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-segment'
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgControl"]) === 'function' && _f || Object])], Segment);
var _a, _b, _c, _d, _e, _f;

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__action_sheet_action_sheet__ = __webpack_require__(469);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__alert_alert__ = __webpack_require__(470);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__option_option__ = __webpack_require__(317);
/* unused harmony export SELECT_VALUE_ACCESSOR */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return Select; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};









var SELECT_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Provider"](__WEBPACK_IMPORTED_MODULE_1__angular_common__["NG_VALUE_ACCESSOR"], { useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return Select;
    }), multi: true });
/**
 * @name Select
 * @description
 * The `ion-select` component is similar to an HTML `<select>` element, however,
 * Ionic's select component makes it easier for users to sort through and select
 * the preferred option or options. When users tap the select component, a
 * dialog will appear with all of the options in a large, easy to select list
 * for users.
 *
 * The select component takes child `ion-option` components. If `ion-option` is not
 * given a `value` attribute then it will use its text as the value.
 *
 * ### Interfaces
 *
 * By default, the `ion-select` uses the {@link ../../alert/Alert Alert API} to
 * open up the overlay of options in an alert. The interface can be changed to use the
 * {@link ../../action-sheet/ActionSheet ActionSheet API} by passing `action-sheet` to
 * the `interface` property. Read the other sections for the limitations of the
 * action sheet interface.
 *
 * ### Single Value: Radio Buttons
 *
 * The standard `ion-select` component allows the user to select only one
 * option. When selecting only one option the alert interface presents users with
 * a radio button styled list of options. The action sheet interface can only be
 * used with a single value select. If the number of options exceed 6, it will
 * use the `alert` interface even if `action-sheet` is passed. The `ion-select`
 * component's value receives the value of the selected option's value.
 *
 * ```html
 * <ion-item>
 *   <ion-label>Gender</ion-label>
 *   <ion-select [(ngModel)]="gender">
 *     <ion-option value="f" checked="true">Female</ion-option>
 *     <ion-option value="m">Male</ion-option>
 *   </ion-select>
 * </ion-item>
 * ```
 *
 * ### Multiple Value: Checkboxes
 *
 * By adding the `multiple="true"` attribute to `ion-select`, users are able
 * to select multiple options. When multiple options can be selected, the alert
 * overlay presents users with a checkbox styled list of options. The
 * `ion-select multiple="true"` component's value receives an array of all the
 * selected option values. In the example below, because each option is not given
 * a `value`, then it'll use its text as the value instead.
 *
 * Note: the action sheet interface will not work with a multi-value select.
 *
 * ```html
 * <ion-item>
 *   <ion-label>Toppings</ion-label>
 *   <ion-select [(ngModel)]="toppings" multiple="true">
 *     <ion-option>Bacon</ion-option>
 *     <ion-option>Black Olives</ion-option>
 *     <ion-option>Extra Cheese</ion-option>
 *     <ion-option>Mushrooms</ion-option>
 *     <ion-option>Pepperoni</ion-option>
 *     <ion-option>Sausage</ion-option>
 *   </ion-select>
 * </ion-item>
 * ```
 *
 * ### Select Buttons
 * By default, the two buttons read `Cancel` and `OK`. Each button's text
 * can be customized using the `cancelText` and `okText` attributes:
 *
 * ```html
 * <ion-select okText="Okay" cancelText="Dismiss">
 *   ...
 * </ion-select>
 * ```
 *
 * The action sheet interface does not have an `OK` button, clicking
 * on any of the options will automatically close the overlay and select
 * that value.
 *
 * ### Alert Options
 *
 * Since `ion-select` is a wrapper to `Alert`, by default, it can be
 * passed options in the `alertOptions` property. This can be used to
 * pass a custom alert title, subtitle or message. See the {@link ../../alert/Alert Alert API docs}
 * for more properties.
 *
 * ```html
 * <ion-select [alertOptions]="alertOptions">
 *   ...
 * </ion-select>
 * ```
 *
 * ```ts
 * this.alertOptions = {
 *   title: 'Pizza Toppings',
 *   subTitle: 'Select your toppings'
 * };
 * ```
 *
 * @demo /docs/v2/demos/select/
 */
var Select = function () {
    function Select(_form, _elementRef, _renderer, _item, _nav) {
        _classCallCheck(this, Select);

        this._form = _form;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._item = _item;
        this._nav = _nav;
        this._disabled = false;
        this._multi = false;
        this._values = [];
        this._texts = [];
        this._text = '';
        this._isOpen = false;
        /**
         * @input {string} The text to display on the cancel button. Default: `Cancel`.
         */
        this.cancelText = 'Cancel';
        /**
         * @input {string} The text to display on the ok button. Default: `OK`.
         */
        this.okText = 'OK';
        /**
         * @input {any} Any addition options that the alert interface can take.
         * See the [Alert API docs](../../alert/Alert) for the create options.
         */
        this.alertOptions = {};
        /**
         * @private
         */
        this.checked = false;
        /**
         * @input {string} The interface the select should use: `action-sheet` or `alert`. Default: `alert`.
         */
        this.interface = '';
        /**
         * @output {any} Any expression you want to evaluate when the selection has changed.
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {any} Any expression you want to evaluate when the selection was cancelled.
         */
        this.ionCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._form.register(this);
        if (_item) {
            this.id = 'sel-' + _item.registerInput('select');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-select', true);
        }
        if (!_nav) {
            console.error('parent <ion-nav> required for <ion-select>');
        }
    }

    _createClass(Select, [{
        key: "_click",
        value: function _click(ev) {
            if (ev.detail === 0) {
                // do not continue if the click event came from a form submit
                return;
            }
            ev.preventDefault();
            ev.stopPropagation();
            this._open();
        }
    }, {
        key: "_keyup",
        value: function _keyup() {
            if (!this._isOpen) {
                this._open();
            }
        }
    }, {
        key: "_open",
        value: function _open() {
            var _this = this;

            if (this._disabled) {
                return;
            }
            console.debug('select, open alert');
            // the user may have assigned some options specifically for the alert
            var alertOptions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["merge"])({}, this.alertOptions);
            // make sure their buttons array is removed from the options
            // and we create a new array for the alert's two buttons
            alertOptions.buttons = [{
                text: this.cancelText,
                role: 'cancel',
                handler: function handler() {
                    _this.ionCancel.emit(null);
                }
            }];
            // if the alertOptions didn't provide an title then use the label's text
            if (!alertOptions.title && this._item) {
                alertOptions.title = this._item.getLabelText();
            }
            var options = this._options.toArray();
            if (this.interface === 'action-sheet' && options.length > 6) {
                console.warn('Interface cannot be "action-sheet" with more than 6 options. Using the "alert" interface.');
                this.interface = 'alert';
            }
            if (this.interface === 'action-sheet' && this._multi) {
                console.warn('Interface cannot be "action-sheet" with a multi-value select. Using the "alert" interface.');
                this.interface = 'alert';
            }
            var overlay = void 0;
            if (this.interface === 'action-sheet') {
                alertOptions.buttons = alertOptions.buttons.concat(options.map(function (input) {
                    return {
                        role: input.checked ? 'selected' : '',
                        text: input.text,
                        handler: function handler() {
                            _this.onChange(input.value);
                            _this.ionChange.emit(input.value);
                        }
                    };
                }));
                alertOptions.cssClass = 'select-action-sheet';
                overlay = __WEBPACK_IMPORTED_MODULE_2__action_sheet_action_sheet__["a" /* ActionSheet */].create(alertOptions);
            } else {
                // default to use the alert interface
                this.interface = 'alert';
                // user cannot provide inputs from alertOptions
                // alert inputs must be created by ionic from ion-options
                alertOptions.inputs = this._options.map(function (input) {
                    return {
                        type: _this._multi ? 'checkbox' : 'radio',
                        label: input.text,
                        value: input.value,
                        checked: input.checked
                    };
                });
                // create the alert instance from our built up alertOptions
                overlay = __WEBPACK_IMPORTED_MODULE_3__alert_alert__["a" /* Alert */].create(alertOptions);
                if (this._multi) {
                    // use checkboxes
                    overlay.setCssClass('select-alert multiple-select-alert');
                } else {
                    // use radio buttons
                    overlay.setCssClass('select-alert single-select-alert');
                }
                overlay.addButton({
                    text: this.okText,
                    handler: function handler(selectedValues) {
                        _this.onChange(selectedValues);
                        _this.ionChange.emit(selectedValues);
                    }
                });
            }
            this._nav.present(overlay, alertOptions);
            this._isOpen = true;
            overlay.onDismiss(function () {
                _this._isOpen = false;
            });
        }
        /**
         * @input {boolean} Whether or not the select component can accept multiple values. Default: `false`.
         */

    }, {
        key: "_updOpts",

        /**
         * @private
         */
        value: function _updOpts() {
            var _this2 = this;

            this._texts = [];
            if (this._options) {
                this._options.forEach(function (option) {
                    // check this option if the option's value is in the values array
                    option.checked = _this2._values.some(function (selectValue) {
                        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isCheckedProperty"])(selectValue, option.value);
                    });
                    if (option.checked) {
                        _this2._texts.push(option.text);
                    }
                });
            }
            this._text = this._texts.join(', ');
        }
        /**
         * @input {boolean} Whether or not the select component is disabled. Default `false`.
         */

    }, {
        key: "writeValue",

        /**
         * @private
         */
        value: function writeValue(val) {
            console.debug('select, writeValue', val);
            this._values = Array.isArray(val) ? val : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isBlank"])(val) ? [] : [val];
            this._updOpts();
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            this._updOpts();
        }
        /**
         * @private
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            var _this3 = this;

            this._fn = fn;
            this.onChange = function (val) {
                console.debug('select, onChange', val);
                fn(val);
                _this3._values = Array.isArray(val) ? val : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isBlank"])(val) ? [] : [val];
                _this3._updOpts();
                _this3.onTouched();
            };
        }
        /**
         * @private
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
        /**
         * @private
         */

    }, {
        key: "onChange",
        value: function onChange(val) {
            // onChange used when there is not an ngControl
            console.debug('select, onChange w/out ngControl', val);
            this._values = Array.isArray(val) ? val : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isBlank"])(val) ? [] : [val];
            this._updOpts();
            this.onTouched();
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched() {}
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
        }
    }, {
        key: "multiple",
        get: function get() {
            return this._multi;
        },
        set: function set(val) {
            this._multi = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isTrueProperty"])(val);
        }
        /**
         * @private
         */

    }, {
        key: "text",
        get: function get() {
            return this._multi ? this._texts : this._texts.join();
        }
        /**
         * @private
         */

    }, {
        key: "options",
        set: function set(val) {
            this._options = val;
            if (!this._values.length) {
                // there are no values set at this point
                // so check to see who should be checked
                this._values = val.filter(function (o) {
                    return o.checked;
                }).map(function (o) {
                    return o.value;
                });
            }
            this._updOpts();
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-select-disabled', this._disabled);
        }
    }]);

    return Select;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Select.prototype, "cancelText", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Select.prototype, "okText", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Select.prototype, "placeholder", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Select.prototype, "alertOptions", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Select.prototype, "checked", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Select.prototype, "interface", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Select.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], Select.prototype, "ionCancel", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Select.prototype, "_click", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('keyup.space'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], Select.prototype, "_keyup", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Select.prototype, "multiple", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(__WEBPACK_IMPORTED_MODULE_8__option_option__["a" /* Option */]), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _c || Object), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _d || Object])], Select.prototype, "options", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Select.prototype, "disabled", null);
Select = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-select',
    template: '<div *ngIf="!_text" class="select-placeholder select-text">{{placeholder}}</div>' + '<div *ngIf="_text" class="select-text">{{_text}}</div>' + '<div class="select-icon">' + '<div class="select-icon-inner"></div>' + '</div>' + '<button aria-haspopup="true" ' + '[id]="id" ' + 'category="item-cover" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
    host: {
        '[class.select-disabled]': '_disabled'
    },
    providers: [SELECT_VALUE_ACCESSOR],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(4, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_4__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__util_form__["Form"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_6__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__item_item__["a" /* Item */]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_7__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_nav_controller__["a" /* NavController */]) === 'function' && _j || Object])], Select);
var _a, _b, _c, _d, _e, _f, _g, _h, _j;

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_platform__ = __webpack_require__(61);

/* harmony export */ __webpack_require__.d(exports, "c", function() { return DisplayWhen; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return ShowWhen; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return HideWhen; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};


/**
 * @private
 */
var DisplayWhen = function () {
    function DisplayWhen(conditions, platform, ngZone) {
        var _this = this;

        _classCallCheck(this, DisplayWhen);

        this.isMatch = false;
        this.platform = platform;
        if (!conditions) return;
        this.conditions = conditions.split(',');
        // check if its one of the matching platforms first
        // a platform does not change during the life of an app
        for (var i = 0; i < this.conditions.length; i++) {
            if (this.conditions[i] && platform.is(this.conditions[i])) {
                this.isMatch = true;
                return;
            }
        }
        if (this.orientation()) {
            // add window resize listener
            platform.onResize(function () {
                ngZone.run(function () {
                    _this.orientation();
                });
            });
            return;
        }
    }

    _createClass(DisplayWhen, [{
        key: "orientation",
        value: function orientation() {
            for (var i = 0; i < this.conditions.length; i++) {
                if (this.conditions[i] === 'portrait') {
                    this.isMatch = this.platform.isPortrait();
                    return true;
                }
                if (this.conditions[i] === 'landscape') {
                    this.isMatch = this.platform.isLandscape();
                    return true;
                }
            }
        }
    }]);

    return DisplayWhen;
}();
/**
 *
 * @name ShowWhen
 * @description
 * The `showWhen` attribute takes a string that represents a platform or screen orientation.
 * The element the attribute is added to will only be shown when that platform or screen orientation is active.
 *
 * Complements the [hideWhen attribute](../HideWhen). If the `showWhen` attribute is used on an
 * element that also has the `hideWhen` attribute, the element will not show if `hideWhen` evaluates
 * to `true` or `showWhen` evaluates to `false`. If the `hidden` attribute is also added, the element
 * will not show if `hidden` evaluates to `true`.
 *
 * View the [Platform API docs](../../../platform/Platform) for more information on the different
 * platforms you can use.
 *
 * @usage
 * ```html
 * <div showWhen="android">
 *  I am visible on Android!
 * </div>
 *
 * <div showWhen="ios">
 *  I am visible on iOS!
 * </div>
 *
 * <div showWhen="android,ios">
 *  I am visible on Android and iOS!
 * </div>
 *
 * <div showWhen="portrait">
 *  I am visible on Portrait!
 * </div>
 *
 * <div showWhen="landscape">
 *  I am visible on Landscape!
 * </div>
 * ```
 * @demo /docs/v2/demos/show-when/
 * @see {@link ../HideWhen HideWhen API Docs}
 * @see {@link ../../../platform/Platform Platform API Docs}
 */
var ShowWhen = function (_DisplayWhen) {
    _inherits(ShowWhen, _DisplayWhen);

    function ShowWhen(showWhen, platform, ngZone) {
        _classCallCheck(this, ShowWhen);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ShowWhen).call(this, showWhen, platform, ngZone));
    }

    return ShowWhen;
}(DisplayWhen);
ShowWhen = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[showWhen]',
    host: {
        '[class.hidden-show-when]': '!isMatch'
    }
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('showWhen')), __metadata('design:paramtypes', [String, typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__platform_platform__["Platform"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _b || Object])], ShowWhen);
/**
 * @name HideWhen
 * @description
 * The `hideWhen` attribute takes a string that represents a plaform or screen orientation.
 * The element the attribute is added to will only be hidden when that platform or screen orientation is active.
 *
 * Complements the [showWhen attribute](../ShowWhen). If the `hideWhen` attribute is used on an
 * element that also has the `showWhen` attribute, the element will not show if `hideWhen` evaluates
 * to `true` or `showWhen` evaluates to `false`. If the `hidden` attribute is also added, the element
 * will not show if `hidden` evaluates to `true`.
 *
 * View the [Platform API docs](../../../platform/Platform) for more information on the different
 * platforms you can use.
 *
 * @usage
 * ```html
 * <div hideWhen="android">
 *  I am hidden on Android!
 * </div>
 *
 * <div hideWhen="ios">
 *  I am hidden on iOS!
 * </div>
 *
 * <div hideWhen="android,ios">
 *  I am hidden on Android and iOS!
 * </div>
 *
 * <div hideWhen="portrait">
 *  I am hidden on Portrait!
 * </div>
 *
 * <div hideWhen="landscape">
 *  I am hidden on Landscape!
 * </div>
 * ```
 *
 * @demo /docs/v2/demos/hide-when/
 * @see {@link ../ShowWhen ShowWhen API Docs}
 * @see {@link ../../../platform/Platform Platform API Docs}
*/
var HideWhen = function (_DisplayWhen2) {
    _inherits(HideWhen, _DisplayWhen2);

    function HideWhen(hideWhen, platform, ngZone) {
        _classCallCheck(this, HideWhen);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(HideWhen).call(this, hideWhen, platform, ngZone));
    }

    return HideWhen;
}(DisplayWhen);
HideWhen = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[hideWhen]',
    host: {
        '[class.hidden-hide-when]': 'isMatch'
    }
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"])('hideWhen')), __metadata('design:paramtypes', [String, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__platform_platform__["Platform"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _d || Object])], HideWhen);
var _a, _b, _c, _d;

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gestures_gesture__ = __webpack_require__(322);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__swiper_widget__ = __webpack_require__(906);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__swiper_widget___default = __WEBPACK_IMPORTED_MODULE_7__swiper_widget__ && __WEBPACK_IMPORTED_MODULE_7__swiper_widget__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_7__swiper_widget__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_7__swiper_widget__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_7__swiper_widget___default, 'a', __WEBPACK_IMPORTED_MODULE_7__swiper_widget___default);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Slides; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return Slide; });
/* harmony export */ __webpack_require__.d(exports, "c", function() { return SlideLazy; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};








/**
 * @name Slides
 * @description
 * The Slides component is a multi-section container. Each section can be swiped
 * or dragged between. It contains any number of [Slide](../Slide) components.
 *
 *
 * ### Creating
 * You should use a template to create slides and listen to slide events. The template
 * should contain the slide container, an `<ion-slides>` element, and any number of
 * [Slide](../Slide) components, written as `<ion-slide>`. Any configuration of the
 * slides should be passed in the `options` property of the `<ion-slides>` element.
 * You can listen to events such as the slide changing by placing the event on the
 * `<ion-slides>` element. See [Usage](#usage) below for more information on
 * creating slides.
 *
 *
 * ### Configuring
 * There are several configuration options that can be passed to Slides. These should
 * be passed in the `options` property of the `<ion-slides>` element upon creation.
 * You can allow the slides to loop around from the last to the first, set autoplay
 * on the slides so it will automatically switch between them, and more.
 *
 * Properties to pass in options:
 *
 * | Property              | Type      | Default        | Description                                                                                |
 * |-----------------------|-----------|----------------|--------------------------------------------------------------------------------------------|
 * | autoplay              | `number`  | -              | Delay between transitions (in ms). If this parameter is not passed, autoplay is disabled.  |
 * | direction             | `string`  | 'horizontal'   | Swipe direction: 'horizontal' or 'vertical'.                                               |
 * | initialSlide          | `number`  | 0              | Index number of initial slide                                                              |
 * | loop                  | `boolean` | false          | Whether to continuously loop from the last slide to the first slide.                       |
 * | pager                 | `boolean` | false          | Show the pagination bullets.                                                               |
 * | speed                 | `number`  | 300            | Duration of transition between slides (in ms).                                             |
 *
 * See [Usage](#usage) below for more information on configuring slides.
 *
 *
 * ### Navigating
 * After creating and configuring the slides, you can navigate between them
 * by swiping or calling methods on the `Slides` instance. You can call `slideTo()` to
 * navigate to a specific slide, or `slideNext()` to change to the slide that follows
 * the active slide. All of the [methods](#instance-members) provided by the `Slides`
 * instance are listed below. See [Usage](#usage) below for more information on
 * navigating between slides.
 *
 *
 * ### Limitations
 * The Slides component wraps the [Swiper](http://www.idangero.us/swiper/) component
 * built by iDangero.us. This means that all of the Swiper API isn't exposed on the
 * Slides component. See the [`getSlider()`](#getSlider) method for information on
 * getting the `Swiper` instance and using its methods directly.
 *
 *
 * @usage
 *
 * You can add slides to a `@Component` using the following template:
 *
 * ```html
 * <ion-slides>
 *   <ion-slide>
 *     <h1>Slide 1</h1>
 *   </ion-slide>
 *   <ion-slide>
 *     <h1>Slide 2</h1>
 *   </ion-slide>
 *   <ion-slide>
 *     <h1>Slide 3</h1>
 *   </ion-slide>
 * </ion-slides>
 * ```
 *
 * To add [options](#configuring), we will define them in `mySlideOptions` in our class `MyPage`:
 *
 * ```ts
 * import {Component} from '@angular/core';
 * import {Slides} from 'ionic-angular';
 *
 * @Component({
 *   templateUrl: 'my-page.html'
 * })
 * class MyPage {
 *   mySlideOptions = {
 *     initialSlide: 1,
 *     loop: true
 *   };
 * }
 * ```
 *
 * This is setting the second slide as the initial slide on load, since
 * the `initialSlide` begins at `0`. We are also setting `loop` to true which
 * allows us to swipe from the last slide to the first continuously. Then,
 * we will pass `mySlideOptions` in the `options` property of the `<ion-slides>`
 * element. We are using [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding)
 * on `options` because `mySlideOptions` is an expression:
 *
 * ```html
 * <ion-slides [options]="mySlideOptions">
 * ```
 *
 * To grab a reference to the Slides, we will add a [local template variable](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#local-vars)
 * to `<ion-slides>` called `mySlider`:
 *
 * ```html
 * <ion-slides #mySlider [options]="mySlideOptions">
 * ```
 *
 * Next, we can use `ViewChild` to assign the Slides instance to `slider`:
 *
 * ```ts
 * import {ViewChild} from '@angular/core';
 *
 * class MyPage {
 *   @ViewChild('mySlider') slider: Slides;
 *
 *   ...
 * }
 * ```
 *
 * Now we can call any of the `Slider` [methods]((#instance-members)),
 * for example we can use the Slider's `slideTo()` method in order to
 * navigate to a specific slide on a button click. Below we call the
 * `goToSlide()` method and it navigates to the 3rd slide:
 *
 * ```ts
 * class MyPage {
 *   ...
 *
 *   goToSlide() {
 *     this.slider.slideTo(2, 500);
 *   }
 * }
 * ```
 *
 * We can also add events to listen to on the `<ion-slides>` element.
 * Let's add the `ionDidChange` event and call a method when the slide changes:
 *
 * ```html
 * <ion-slides #mySlider (ionDidChange)="onSlideChanged()" [options]="mySlideOptions">
 * ```
 *
 * In our class, we add the `onSlideChanged()` method which gets the active
 * index and prints it:
 *
 * ```ts
 * class MyPage {
 *   ...
 *
 *   onSlideChanged() {
 *     let currentIndex = this.slider.getActiveIndex();
 *     console.log("Current index is", currentIndex);
 *   }
 * }
 * ```
 *
 * For all of the methods you can call on the `Slider` instance, see the
 * [Instance Members](#instance-members).
 *
 * @demo /docs/v2/demos/slides/
 * @see {@link /docs/v2/components#slides Slides Component Docs}
 *
 * Swiper.js:
 * The most modern mobile touch slider and framework with hardware accelerated transitions
 *
 * http://www.idangero.us/swiper/
 *
 * Copyright 2015, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 */
var Slides = function (_Ion) {
    _inherits(Slides, _Ion);

    function Slides(elementRef, renderer) {
        _classCallCheck(this, Slides);

        /**
         * @output {any} Expression to evaluate when a slide change starts.
         */

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Slides).call(this, elementRef));

        _this.ionWillChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {any} Expression to evaluate when a slide change ends.
         */
        _this.ionDidChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * @output {any} Expression to evaluate when a slide moves.
         */
        _this.ionDrag = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.rapidUpdate = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["debounce"])(function () {
            _this.update();
        }, 10);
        _this.id = ++slidesId;
        _this.slideId = 'slides-' + _this.id;
        renderer.setElementClass(elementRef.nativeElement, _this.slideId, true);
        return _this;
    }
    /**
     * @private
     */

    _createClass(Slides, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            var _this2 = this;

            if (!this.options) {
                this.options = {};
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(this.pager)) {
                // beta.5 2016-04-18 deprecated warning
                // Pager should be passed as an option
                console.warn('The "pager" attribute has been deprecated. Please pass it in options.');
                // Remove this with the deprecation warning
                this.showPager = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(this.pager);
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(this.zoom)) {
                // beta.5 2016-04-18 deprecated warning
                // Zoom should be passed as an option
                console.warn('The "zoom" attribute has been deprecated. Please pass it in options.');
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(this.options.pager)) {
                this.showPager = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isTrueProperty"])(this.options.pager);
            }
            var paginationId = '.' + this.slideId + ' .swiper-pagination';
            var options = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["defaults"])({
                pagination: paginationId
            }, this.options);
            options.onTap = function (swiper, e) {
                _this2.onTap(swiper, e);
                return _this2.options.onTap && _this2.options.onTap(swiper, e);
            };
            options.onClick = function (swiper, e) {
                _this2.onClick(swiper, e);
                return _this2.options.onClick && _this2.options.onClick(swiper, e);
            };
            options.onDoubleTap = function (swiper, e) {
                _this2.onDoubleTap(swiper, e);
                return _this2.options.onDoubleTap && _this2.options.onDoubleTap(swiper, e);
            };
            options.onTransitionStart = function (swiper, e) {
                _this2.onTransitionStart(swiper, e);
                return _this2.options.onTransitionStart && _this2.options.onTransitionStart(swiper, e);
            };
            options.onTransitionEnd = function (swiper, e) {
                _this2.onTransitionEnd(swiper, e);
                return _this2.options.onTransitionEnd && _this2.options.onTransitionEnd(swiper, e);
            };
            options.onSlideChangeStart = function (swiper) {
                _this2.ionWillChange.emit(swiper);
                return _this2.options.onSlideChangeStart && _this2.options.onSlideChangeStart(swiper);
            };
            options.onSlideChangeEnd = function (swiper) {
                _this2.ionDidChange.emit(swiper);
                return _this2.options.onSlideChangeEnd && _this2.options.onSlideChangeEnd(swiper);
            };
            options.onLazyImageLoad = function (swiper, slide, img) {
                return _this2.options.onLazyImageLoad && _this2.options.onLazyImageLoad(swiper, slide, img);
            };
            options.onLazyImageReady = function (swiper, slide, img) {
                return _this2.options.onLazyImageReady && _this2.options.onLazyImageReady(swiper, slide, img);
            };
            options.onSliderMove = function (swiper, e) {
                _this2.ionDrag.emit(swiper);
                return _this2.options.onSliderMove && _this2.options.onSliderMove(swiper, e);
            };
            setTimeout(function () {
                var swiper = new __WEBPACK_IMPORTED_MODULE_7__swiper_widget__["Swiper"](_this2.getNativeElement().children[0], options);
                _this2.slider = swiper;
            });
            /*
            * TODO: Finish this
            if (isTrueProperty(this.zoom)) {
              this.enableZoom = true;
              setTimeout(() => {
                this.initZoom();
              })
            }
            */
        }
        /**
         * @private
         */

    }, {
        key: "onTap",
        value: function onTap(swiper, e) {}
        /**
         * @private
         */

    }, {
        key: "onClick",
        value: function onClick(swiper, e) {}
        /**
         * @private
         */

    }, {
        key: "onDoubleTap",
        value: function onDoubleTap(swiper, e) {
            this.toggleZoom(swiper, e);
        }
        /**
         * @private
         */

    }, {
        key: "onLazyImageLoad",
        value: function onLazyImageLoad(swiper, slide, img) {}
        /**
         * @private
         */

    }, {
        key: "onLazyImageReady",
        value: function onLazyImageReady(swiper, slide, img) {}
        /*
        nextButton(swiper: any, e: any) {
        }
        prevButton() {
        }
        indexButton() {
        }
        */
        /**
         * @private
         */

    }, {
        key: "initZoom",
        value: function initZoom() {
            var _this3 = this;

            this.zoomDuration = this.zoomDuration || 230;
            this.maxScale = this.zoomMax || 3;
            this.zoomElement = this.getNativeElement().children[0].children[0];
            this.zoomElement && this.zoomElement.classList.add('ion-scroll-zoom');
            this.zoomGesture = new __WEBPACK_IMPORTED_MODULE_2__gestures_gesture__["Gesture"](this.zoomElement);
            this.zoomGesture.listen();
            this.scale = 1;
            this.zoomLastPosX = 0;
            this.zoomLastPosY = 0;
            var lastScale = void 0,
                startX = void 0,
                startY = void 0,
                posX = 0,
                posY = 0,
                zoomRect = void 0;
            this.viewportWidth = this.getNativeElement().offsetWidth;
            this.viewportHeight = this.getNativeElement().offsetHeight;
            this.zoomElement.addEventListener('touchstart', function (e) {
                _this3.onTouchStart(e);
            });
            this.zoomElement.addEventListener('touchmove', function (e) {
                _this3.onTouchMove(e);
            });
            this.zoomElement.addEventListener('touchend', function (e) {
                _this3.onTouchEnd(e);
            });
            this.zoomGesture.on('pinchstart', function (e) {
                lastScale = _this3.scale;
                console.debug('Last scale', e.scale);
            });
            this.zoomGesture.on('pinch', function (e) {
                _this3.scale = Math.max(1, Math.min(lastScale * e.scale, 10));
                console.debug('Scaling', _this3.scale);
                _this3.zoomElement.style[__WEBPACK_IMPORTED_MODULE_3__util_dom__["CSS"].transform] = 'scale(' + _this3.scale + ')';
                zoomRect = _this3.zoomElement.getBoundingClientRect();
            });
            this.zoomGesture.on('pinchend', function () {
                // last_scale = Math.max(1, Math.min(last_scale * e.scale, 10));
                if (_this3.scale > _this3.maxScale) {
                    var za = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](_this3.zoomElement).duration(_this3.zoomDuration).easing('linear').from('scale', _this3.scale).to('scale', _this3.maxScale);
                    za.play();
                    _this3.scale = _this3.maxScale;
                }
            });
        }
        /**
         * @private
         */

    }, {
        key: "resetZoom",
        value: function resetZoom() {
            if (this.zoomElement) {
                this.zoomElement.parentElement.style[__WEBPACK_IMPORTED_MODULE_3__util_dom__["CSS"].transform] = '';
                this.zoomElement.style[__WEBPACK_IMPORTED_MODULE_3__util_dom__["CSS"].transform] = 'scale(1)';
            }
            this.scale = 1;
            this.zoomLastPosX = 0;
            this.zoomLastPosY = 0;
        }
        /**
         * @private
         */

    }, {
        key: "toggleZoom",
        value: function toggleZoom(swiper, e) {
            console.debug('Try toggle zoom');
            if (!this.enableZoom) {
                return;
            }
            console.debug('Toggling zoom', e);
            /*
            let x = e.pointers[0].clientX;
            let y = e.pointers[0].clientY;
                 let mx = this.viewportWidth / 2;
            let my = this.viewportHeight / 2;
                 let tx, ty;
                 if (x > mx) {
              // Greater than half
              tx = -x;
            } else {
              // Less than or equal to half
              tx = (this.viewportWidth - x);
            }
            if (y > my) {
              ty = -y;
            } else {
              ty = y-my;
            }
                 console.debug(y);
            */
            var zi = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
            var zw = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
            var za = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"]();
            za.add(zi);
            if (this.scale > 1) {
                // zoom out
                // zw.fromTo('translateX', posX + 'px', '0px');
                // zw.fromTo('translateY', posY + 'px', '0px');
                zi.from('scale', this.scale);
                zi.to('scale', 1);
                za.play();
                // posX = 0;
                // posY = 0;
                this.scale = 1;
            } else {
                // zoom in
                // zw.fromTo('translateX', posX + 'px', tx + 'px');
                // zw.fromTo('translateY', posY + 'px', ty + 'px');
                zi.from('scale', this.scale);
                zi.to('scale', this.maxScale);
                za.play();
                // posX = tx;
                // posY = ty;
                this.scale = this.maxScale;
            }
        }
        /**
         * @private
         */

    }, {
        key: "onTransitionStart",
        value: function onTransitionStart(swiper, e) {}
        /**
         * @private
         */

    }, {
        key: "onTransitionEnd",
        value: function onTransitionEnd(swiper, e) {}
        /**
         * @private
         */

    }, {
        key: "onTouchStart",
        value: function onTouchStart(e) {
            console.debug('Touch start', e);
            // TODO: Support mice as well
            var target = __WEBPACK_IMPORTED_MODULE_5__util__["d" /* dom */].closest(e.target, '.slide').children[0].children[0];
            this.touch = {
                x: null,
                y: null,
                startX: e.touches[0].clientX,
                startY: e.touches[0].clientY,
                deltaX: 0,
                deltaY: 0,
                lastX: 0,
                lastY: 0,
                target: target.parentElement,
                zoomable: target,
                zoomableWidth: target.offsetWidth,
                zoomableHeight: target.offsetHeight
            };
            console.debug('Target', this.touch.target);
            // TODO: android prevent default
        }
        /**
         * @private
         */

    }, {
        key: "onTouchMove",
        value: function onTouchMove(e) {
            this.touch.deltaX = e.touches[0].clientX - this.touch.startX;
            this.touch.deltaY = e.touches[0].clientY - this.touch.startY;
            // TODO: Make sure we need to transform (image is bigger than viewport)
            var zoomableScaledWidth = this.touch.zoomableWidth * this.scale;
            var zoomableScaledHeight = this.touch.zoomableHeight * this.scale;
            var x1 = Math.min(this.viewportWidth / 2 - zoomableScaledWidth / 2, 0);
            var x2 = -x1;
            var y1 = Math.min(this.viewportHeight / 2 - zoomableScaledHeight / 2, 0);
            var y2 = -y1;
            console.debug('BOUNDS', x1, x2, y1, y2);
            if (this.scale <= 1) {
                return;
            }
            console.debug('PAN', e);
            // move image
            this.touch.x = this.touch.deltaX + this.touch.lastX;
            this.touch.y = this.touch.deltaY + this.touch.lastY;
            if (this.touch.x < x1) {
                console.debug('OUT ON LEFT');
            }
            if (this.touch.x > x2) {
                console.debug('OUT ON RIGHT');
            }
            if (this.touch.x > this.viewportWidth) {} else if (-this.touch.x > this.viewportWidth) {} else {
                console.debug('TRANSFORM', this.touch.x, this.touch.y, this.touch.target);
                // this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
                this.touch.target.style[__WEBPACK_IMPORTED_MODULE_3__util_dom__["CSS"].transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }
        /**
         * @private
         */

    }, {
        key: "onTouchEnd",
        value: function onTouchEnd(e) {
            console.debug('PANEND', e);
            if (this.scale > 1) {
                if (Math.abs(this.touch.x) > this.viewportWidth) {
                    // TODO what is posX?
                    var posX = posX > 0 ? this.viewportWidth - 1 : -(this.viewportWidth - 1);
                    console.debug('Setting on posx', this.touch.x);
                }
                /*
                if (posY > this.viewportHeight/2) {
                  let z = new Animation(this.zoomElement.parentElement);
                  z.fromTo('translateY', posY + 'px', Math.min(this.viewportHeight/2 + 30, posY));
                  z.play();
                } else {
                  let z = new Animation(this.zoomElement.parentElement);
                  z.fromTo('translateY', posY + 'px', Math.max(this.viewportHeight/2 - 30, posY));
                  z.play();
                }
                */
                this.touch.lastX = this.touch.x;
                this.touch.lastY = this.touch.y;
            }
        }
        /**
         * @private
         * Update the underlying slider implementation. Call this if you've added or removed
         * child slides.
         */

    }, {
        key: "update",
        value: function update() {
            var _this4 = this;

            setTimeout(function () {
                _this4.slider.update();
                // Don't allow pager to show with > 10 slides
                if (_this4.length() > 10) {
                    _this4.showPager = false;
                }
            });
        }
        /**
         * Transition to the specified slide.
         *
         * @param {number} index  The index number of the slide.
         * @param {number} speed  Transition duration (in ms). Optional.
         * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
         */

    }, {
        key: "slideTo",
        value: function slideTo(index, speed, runCallbacks) {
            this.slider.slideTo(index, speed, runCallbacks);
        }
        /**
         * Transition to the next slide.
         *
         * @param {number} speed  Transition duration (in ms). Optional.
         * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
         */

    }, {
        key: "slideNext",
        value: function slideNext(speed, runCallbacks) {
            this.slider.slideNext(runCallbacks, speed);
        }
        /**
         * Transition to the previous slide.
         *
         * @param {number} speed  Transition duration (in ms). Optional.
         * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
         */

    }, {
        key: "slidePrev",
        value: function slidePrev(speed, runCallbacks) {
            this.slider.slidePrev(runCallbacks, speed);
        }
        /**
         * Get the index of the active slide.
         *
         * @returns {number} The index number of the current slide.
         */

    }, {
        key: "getActiveIndex",
        value: function getActiveIndex() {
            return this.slider.activeIndex;
        }
        /**
         * Get the index of the previous slide.
         *
         * @returns {number} The index number of the previous slide.
         */

    }, {
        key: "getPreviousIndex",
        value: function getPreviousIndex() {
            return this.slider.previousIndex;
        }
        /**
         * Get the total number of slides.
         *
         * @returns {number} The total number of slides.
         */

    }, {
        key: "length",
        value: function length() {
            return this.slider.slides.length;
        }
        /**
         * Get whether or not the current slide is the last slide.
         *
         * @returns {boolean} If the slide is the last slide or not.
         */

    }, {
        key: "isEnd",
        value: function isEnd() {
            return this.slider.isEnd;
        }
        /**
         * Get whether or not the current slide is the first slide.
         *
         * @returns {boolean} If the slide is the first slide or not.
         */

    }, {
        key: "isBeginning",
        value: function isBeginning() {
            return this.slider.isBeginning;
        }
        /**
         * Get the `Swiper` instance.
         *
         * The Slides component wraps the `Swiper` component built by iDangero.us. See the
         * [Swiper API Docs](http://idangero.us/swiper/api/) for information on using
         * the `Swiper` instance directly.
         *
         * @returns {Swiper}
         */

    }, {
        key: "getSlider",
        value: function getSlider() {
            return this.slider;
        }
    }]);

    return Slides;
}(__WEBPACK_IMPORTED_MODULE_6__ion__["a" /* Ion */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Slides.prototype, "options", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Slides.prototype, "pager", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Slides.prototype, "zoom", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Slides.prototype, "zoomDuration", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Slides.prototype, "zoomMax", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Slides.prototype, "ionWillChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], Slides.prototype, "ionDidChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _c || Object)], Slides.prototype, "ionDrag", void 0);
Slides = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-slides',
    template: '<div class="swiper-container">' + '<div class="swiper-wrapper">' + '<ng-content></ng-content>' + '</div>' + '<div [class.hide]="!showPager" class="swiper-pagination"></div>' + '</div>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _e || Object])], Slides);
/**
 * @name Slide
 * @description
 * The Slide component is a child component of [Slides](../Slides). The template
 * should be written as `ion-slide`. Any slide content should be written
 * in this component and it should be used in conjunction with [Slides](../Slides).
 *
 * See the [Slides API Docs](../Slides) for more usage information.
 *
 * @demo /docs/v2/demos/slides/
 * @see {@link /docs/v2/api/components/slides/Slides/ Slides API Docs}
 */
var Slide = function () {
    function Slide(elementRef, slides) {
        _classCallCheck(this, Slide);

        this.slides = slides;
        this.ele = elementRef.nativeElement;
        this.ele.classList.add('swiper-slide');
        slides.rapidUpdate();
    }

    _createClass(Slide, [{
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this.slides.rapidUpdate();
        }
    }]);

    return Slide;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], Slide.prototype, "zoom", void 0);
Slide = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-slide',
    template: '<div class="slide-zoom"><ng-content></ng-content></div>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"])()), __metadata('design:paramtypes', [typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _f || Object, Slides])], Slide);
/**
 * @private
 */
var SlideLazy = function SlideLazy() {
    _classCallCheck(this, SlideLazy);
};
SlideLazy = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'slide-lazy',
    host: {
        'class': 'swiper-lazy'
    }
}), __metadata('design:paramtypes', [])], SlideLazy);
var slidesId = -1;
var _a, _b, _c, _d, _e, _f;

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Spinner; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



/**
 * @name Spinner
 * @description
 * The `ion-spinner` component provides a variety of animated SVG spinners.
 * Spinners enables you to give users feedback that the app is actively
 * processing/thinking/waiting/chillin’ out, or whatever you’d like it to indicate.
 * By default, the `ion-refresher` feature uses this spinner component while it's
 * the refresher is in the `refreshing` state.
 *
 * Ionic offers a handful of spinners out of the box, and by default, it will use
 * the appropriate spinner for the platform on which it’s running.
 *
 * <table class="table spinner-table">
 *  <tr>
 *    <th>
 *      <code>ios</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="ios"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>ios-small</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="ios-small"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>bubbles</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="bubbles"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>circles</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="circles"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>crescent</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="crescent"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>dots</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="dots"></ion-spinner>
 *    </td>
 *  </tr>
 * </table>
 *
 * @usage
 * The following code would use the default spinner for the platform it's
 * running from. If it's neither iOS or Android, it'll default to use `ios`.
 *
 * ```html
 * <ion-spinner></ion-spinner>
 * ```
 *
 * By setting the `name` property, you can specify which predefined spinner to
 * use, no matter what the platform is.
 *
 * ```html
 * <ion-spinner name="bubbles"></ion-spinner>
 * ```
 *
 * ## Styling SVG with CSS
 * One cool thing about SVG is its ability to be styled with CSS! One thing to note
 * is that some of the CSS properties on an SVG element have different names. For
 * example, SVG uses the term `stroke` instead of `border`, and `fill` instead
 * of `background-color`.
 *
 * ```css
 * ion-spinner svg {
 *   width: 28px;
 *   height: 28px;
 *   stroke: #444;
 *   fill: #222;
 * }
 * ```
 */
var Spinner = function () {
    function Spinner(_config) {
        _classCallCheck(this, Spinner);

        this._config = _config;
        this._dur = null;
        /**
         * @input {string} If the animation is paused or not. Defaults to `false`.
         */
        this.paused = false;
    }
    /**
     * @input {string} SVG spinner name.
     */

    _createClass(Spinner, [{
        key: "ngOnInit",

        /**
         * @private
         */
        value: function ngOnInit() {
            this._init = true;
            this.load();
        }
        /**
         * @private
         */

    }, {
        key: "load",
        value: function load() {
            if (this._init) {
                this._l = [];
                this._c = [];
                var name = this._name || this._config.get('spinner', 'ios');
                var spinner = SPINNERS[name];
                if (spinner) {
                    this._applied = 'spinner-' + name;
                    if (spinner.lines) {
                        for (var i = 0, l = spinner.lines; i < l; i++) {
                            this._l.push(this._loadEle(spinner, i, l));
                        }
                    } else if (spinner.circles) {
                        for (var i = 0, l = spinner.circles; i < l; i++) {
                            this._c.push(this._loadEle(spinner, i, l));
                        }
                    }
                }
            }
        }
    }, {
        key: "_loadEle",
        value: function _loadEle(spinner, index, total) {
            var duration = this._dur || spinner.dur;
            var data = spinner.fn(duration, index, total);
            data.style.animationDuration = duration + 'ms';
            return data;
        }
    }, {
        key: "name",
        get: function get() {
            return this._name;
        },
        set: function set(val) {
            this._name = val;
            this.load();
        }
        /**
         * @input {string} How long it takes it to do one loop.
         */

    }, {
        key: "duration",
        get: function get() {
            return this._dur;
        },
        set: function set(val) {
            this._dur = val;
            this.load();
        }
    }]);

    return Spinner;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], Spinner.prototype, "name", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], Spinner.prototype, "duration", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Spinner.prototype, "paused", void 0);
Spinner = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-spinner',
    template: '<svg viewBox="0 0 64 64" *ngFor="let i of _c" [ngStyle]="i.style">' + '<circle [attr.r]="i.r" transform="translate(32,32)"></circle>' + '</svg>' + '<svg viewBox="0 0 64 64" *ngFor="let i of _l" [ngStyle]="i.style">' + '<line [attr.y1]="i.y1" [attr.y2]="i.y2" transform="translate(32,32)"></line>' + '</svg>',
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgStyle"], __WEBPACK_IMPORTED_MODULE_1__angular_common__["NgFor"]],
    host: {
        '[class]': '_applied',
        '[class.spinner-paused]': 'paused'
    },
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _a || Object])], Spinner);
var SPINNERS = {
    ios: {
        dur: 1000,
        lines: 12,
        fn: function fn(dur, index, total) {
            return {
                y1: 17,
                y2: 29,
                style: {
                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    'ios-small': {
        dur: 1000,
        lines: 12,
        fn: function fn(dur, index, total) {
            return {
                y1: 12,
                y2: 20,
                style: {
                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    bubbles: {
        dur: 1000,
        circles: 9,
        fn: function fn(dur, index, total) {
            return {
                r: 5,
                style: {
                    top: 9 * Math.sin(2 * Math.PI * index / total),
                    left: 9 * Math.cos(2 * Math.PI * index / total),
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    circles: {
        dur: 1000,
        circles: 8,
        fn: function fn(dur, index, total) {
            return {
                r: 5,
                style: {
                    top: 9 * Math.sin(2 * Math.PI * index / total),
                    left: 9 * Math.cos(2 * Math.PI * index / total),
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    crescent: {
        dur: 750,
        circles: 1,
        fn: function fn(dur) {
            return {
                r: 26,
                style: {}
            };
        }
    },
    dots: {
        dur: 750,
        circles: 3,
        fn: function fn(dur, index, total) {
            return {
                r: 6,
                style: {
                    left: 9 - 9 * index,
                    animationDelay: -(110 * index) + 'ms'
                }
            };
        }
    }
};
var _a;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Activator; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}


var Activator = function () {
    function Activator(app, config) {
        _classCallCheck(this, Activator);

        this.app = app;
        this._queue = [];
        this._active = [];
        this._css = config.get('activatedClass') || 'activated';
    }

    _createClass(Activator, [{
        key: 'downAction',
        value: function downAction(ev, activatableEle, startCoord) {
            // the user just pressed down
            var self = this;
            if (self.disableActivated(ev)) {
                return;
            }
            // queue to have this element activated
            self._queue.push(activatableEle);
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["rafFrames"])(2, function () {
                var activatableEle = void 0;
                for (var i = 0; i < self._queue.length; i++) {
                    activatableEle = self._queue[i];
                    if (activatableEle && activatableEle.parentNode) {
                        self._active.push(activatableEle);
                        activatableEle.classList.add(self._css);
                    }
                }
                self._queue = [];
            });
        }
    }, {
        key: 'upAction',
        value: function upAction(ev, activatableEle, startCoord) {
            var _this = this;

            // the user was pressing down, then just let up
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["rafFrames"])(CLEAR_STATE_DEFERS, function () {
                _this.clearState();
            });
        }
    }, {
        key: 'clearState',
        value: function clearState() {
            var _this2 = this;

            // all states should return to normal
            if (!this.app.isEnabled()) {
                // the app is actively disabled, so don't bother deactivating anything.
                // this makes it easier on the GPU so it doesn't have to redraw any
                // buttons during a transition. This will retry in XX milliseconds.
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeTimeout"])(function () {
                    _this2.clearState();
                }, 600);
            } else {
                // not actively transitioning, good to deactivate any elements
                this.deactivate();
            }
        }
    }, {
        key: 'deactivate',
        value: function deactivate() {
            // remove the active class from all active elements
            var self = this;
            self._queue = [];
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["rafFrames"])(2, function () {
                for (var i = 0; i < self._active.length; i++) {
                    self._active[i].classList.remove(self._css);
                }
                self._active = [];
            });
        }
    }, {
        key: 'disableActivated',
        value: function disableActivated(ev) {
            if (ev.defaultPrevented) return true;
            var targetEle = ev.target;
            for (var x = 0; x < 4; x++) {
                if (!targetEle) break;
                if (targetEle.hasAttribute('disable-activated')) return true;
                targetEle = targetEle.parentElement;
            }
            return false;
        }
    }]);

    return Activator;
}();
var CLEAR_STATE_DEFERS = 5;

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__activator__ = __webpack_require__(496);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ripple__ = __webpack_require__(909);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return TapClick; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return isActivatable; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






/**
 * @private
 */
var TapClick = function () {
    function TapClick(config, app, zone) {
        _classCallCheck(this, TapClick);

        this.app = app;
        this.lastTouch = 0;
        this.disableClick = 0;
        this.lastActivated = 0;
        var self = this;
        if (config.get('activator') === 'ripple') {
            self.activator = new __WEBPACK_IMPORTED_MODULE_5__ripple__["a" /* RippleActivator */](app, config);
        } else if (config.get('activator') === 'highlight') {
            self.activator = new __WEBPACK_IMPORTED_MODULE_1__activator__["a" /* Activator */](app, config);
        }
        self.usePolyfill = config.get('tapPolyfill') === true;
        zone.runOutsideAngular(function () {
            addListener('click', self.click.bind(self), true);
            addListener('touchstart', self.touchStart.bind(self));
            addListener('touchend', self.touchEnd.bind(self));
            addListener('touchcancel', self.pointerCancel.bind(self));
            addListener('mousedown', self.mouseDown.bind(self), true);
            addListener('mouseup', self.mouseUp.bind(self), true);
        });
        self.pointerMove = function (ev) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["hasPointerMoved"])(POINTER_MOVE_UNTIL_CANCEL, self.startCoord, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["pointerCoord"])(ev))) {
                self.pointerCancel(ev);
            }
        };
    }

    _createClass(TapClick, [{
        key: "touchStart",
        value: function touchStart(ev) {
            this.lastTouch = Date.now();
            this.pointerStart(ev);
        }
    }, {
        key: "touchEnd",
        value: function touchEnd(ev) {
            this.lastTouch = Date.now();
            if (this.usePolyfill && this.startCoord && this.app.isEnabled()) {
                // only dispatch mouse click events from a touchend event
                // when tapPolyfill config is true, and the startCoordand endCoord
                // are not too far off from each other
                var endCoord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["pointerCoord"])(ev);
                if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["hasPointerMoved"])(POINTER_TOLERANCE, this.startCoord, endCoord)) {
                    // prevent native mouse click events for XX amount of time
                    this.disableClick = this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT;
                    if (this.app.isScrolling()) {
                        // do not fire off a click event while the app was scrolling
                        console.debug('click from touch prevented by scrolling ' + Date.now());
                    } else {
                        // dispatch a mouse click event
                        console.debug('create click from touch ' + Date.now());
                        var clickEvent = document.createEvent('MouseEvents');
                        clickEvent.initMouseEvent('click', true, true, window, 1, 0, 0, endCoord.x, endCoord.y, false, false, false, false, 0, null);
                        clickEvent.isIonicTap = true;
                        ev.target.dispatchEvent(clickEvent);
                    }
                }
            }
            this.pointerEnd(ev);
        }
    }, {
        key: "mouseDown",
        value: function mouseDown(ev) {
            if (this.isDisabledNativeClick()) {
                console.debug('mouseDown prevent ' + ev.target.tagName + ' ' + Date.now());
                // does not prevent default on purpose
                // so native blur events from inputs can happen
                ev.stopPropagation();
            } else if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
                this.pointerStart(ev);
            }
        }
    }, {
        key: "mouseUp",
        value: function mouseUp(ev) {
            if (this.isDisabledNativeClick()) {
                console.debug('mouseUp prevent ' + ev.target.tagName + ' ' + Date.now());
                ev.preventDefault();
                ev.stopPropagation();
            }
            if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
                this.pointerEnd(ev);
            }
        }
    }, {
        key: "pointerStart",
        value: function pointerStart(ev) {
            var activatableEle = getActivatableTarget(ev.target);
            if (activatableEle) {
                this.startCoord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["pointerCoord"])(ev);
                var now = Date.now();
                if (this.lastActivated + 150 < now) {
                    this.activator && this.activator.downAction(ev, activatableEle, this.startCoord);
                    this.lastActivated = now;
                }
                this.moveListeners(true);
            } else {
                this.startCoord = null;
            }
        }
    }, {
        key: "pointerEnd",
        value: function pointerEnd(ev) {
            if (this.startCoord && this.activator) {
                var activatableEle = getActivatableTarget(ev.target);
                if (activatableEle) {
                    this.activator.upAction(ev, activatableEle, this.startCoord);
                }
            }
            this.moveListeners(false);
        }
    }, {
        key: "pointerCancel",
        value: function pointerCancel(ev) {
            console.debug('pointerCancel from ' + ev.type + ' ' + Date.now());
            this.activator && this.activator.clearState();
            this.moveListeners(false);
        }
    }, {
        key: "moveListeners",
        value: function moveListeners(shouldAdd) {
            removeListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
            if (shouldAdd) {
                addListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
            }
        }
    }, {
        key: "click",
        value: function click(ev) {
            var preventReason = null;
            if (!this.app.isEnabled()) {
                preventReason = 'appDisabled';
            } else if (!ev.isIonicTap && this.isDisabledNativeClick()) {
                preventReason = 'nativeClick';
            }
            if (preventReason !== null) {
                console.debug('click prevent ' + preventReason + ' ' + Date.now());
                ev.preventDefault();
                ev.stopPropagation();
            }
        }
    }, {
        key: "isDisabledNativeClick",
        value: function isDisabledNativeClick() {
            return this.disableClick > Date.now();
        }
    }]);

    return TapClick;
}();
TapClick = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__app_app__["a" /* App */]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _c || Object])], TapClick);
function getActivatableTarget(ele) {
    var targetEle = ele;
    for (var x = 0; x < 4; x++) {
        if (!targetEle) break;
        if (isActivatable(targetEle)) return targetEle;
        targetEle = targetEle.parentElement;
    }
    return null;
}
/**
 * @private
 */
var isActivatable = function isActivatable(ele) {
    if (ACTIVATABLE_ELEMENTS.test(ele.tagName)) {
        return true;
    }
    var attributes = ele.attributes;
    for (var i = 0, l = attributes.length; i < l; i++) {
        if (ACTIVATABLE_ATTRIBUTES.test(attributes[i].name)) {
            return true;
        }
    }
    return false;
};
function addListener(type, listener, useCapture) {
    document.addEventListener(type, listener, useCapture);
}
function removeListener(type, listener) {
    document.removeEventListener(type, listener);
}
var ACTIVATABLE_ELEMENTS = /^(A|BUTTON)$/;
var ACTIVATABLE_ATTRIBUTES = /tappable|button/i;
var POINTER_TOLERANCE = 4;
var POINTER_MOVE_UNTIL_CANCEL = 10;
var DISABLE_NATIVE_CLICK_AMOUNT = 2500;
var _a, _b, _c;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_form__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_ui_event_manager__ = __webpack_require__(152);
/* unused harmony export TOGGLE_VALUE_ACCESSOR */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return Toggle; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};







var TOGGLE_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Provider"](__WEBPACK_IMPORTED_MODULE_1__angular_common__["NG_VALUE_ACCESSOR"], { useExisting: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
        return Toggle;
    }), multi: true });
/**
 * @name Toggle
 * @description
 * A toggle technically is the same thing as an HTML checkbox input,
 * except it looks different and is easier to use on a touch device.
 * Toggles can also have colors assigned to them, by adding any color
 * attribute.
 *
 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
 * for more info on forms and inputs.
 * @property {boolean} [checked] - whether the toggle it toggled or not
 * @property {boolean} [disabled] - whether the toggle is disabled or not
 *
 * @usage
 * ```html
 *
 *  <ion-list>
 *
 *    <ion-item>
 *      <ion-label>Pepperoni</ion-label>
 *      <ion-toggle [(ngModel)]="pepperoni"></ion-toggle>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Sausage</ion-label>
 *      <ion-toggle [(ngModel)]="sausage" disabled="true"></ion-toggle>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Mushrooms</ion-label>
 *      <ion-toggle [(ngModel)]="mushrooms"></ion-toggle>
 *    </ion-item>
 *
 *  </ion-list>
 * ```
 *
 * @demo /docs/v2/demos/toggle/
 * @see {@link /docs/v2/components#toggle Toggle Component Docs}
 */
var Toggle = function () {
    function Toggle(_form, _elementRef, _renderer, _item) {
        _classCallCheck(this, Toggle);

        this._form = _form;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._item = _item;
        this._checked = false;
        this._disabled = false;
        this._activated = false;
        this._msPrv = 0;
        this._events = new __WEBPACK_IMPORTED_MODULE_6__util_ui_event_manager__["a" /* UIEventManager */]();
        /**
         * @output {Toggle} expression to evaluate when the toggle value changes
         */
        this.ionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._form.register(this);
        if (_item) {
            this.id = 'tgl-' + _item.registerInput('toggle');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-toggle', true);
        }
    }

    _createClass(Toggle, [{
        key: "pointerDown",
        value: function pointerDown(ev) {
            this._startX = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["pointerCoord"])(ev).x;
            this._activated = true;
            return true;
        }
    }, {
        key: "pointerMove",
        value: function pointerMove(ev) {
            if (this._startX) {
                var currentX = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["pointerCoord"])(ev).x;
                console.debug('toggle, pointerMove', ev.type, currentX);
                if (this._checked) {
                    if (currentX + 15 < this._startX) {
                        this.onChange(false);
                        this._startX = currentX;
                        this._activated = true;
                    }
                } else if (currentX - 15 > this._startX) {
                    this.onChange(true);
                    this._startX = currentX;
                    this._activated = currentX < this._startX + 5;
                }
            }
        }
    }, {
        key: "pointerUp",
        value: function pointerUp(ev) {
            if (this._startX) {
                var endX = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dom__["pointerCoord"])(ev).x;
                if (this.checked) {
                    if (this._startX + 4 > endX) {
                        this.onChange(false);
                    }
                } else if (this._startX - 4 < endX) {
                    this.onChange(true);
                }
                this._activated = false;
                this._startX = null;
            }
        }
    }, {
        key: "_setChecked",
        value: function _setChecked(isChecked) {
            if (isChecked !== this._checked) {
                this._checked = isChecked;
                if (this._init) {
                    this.ionChange.emit(this);
                }
                this._item && this._item.setCssClass('item-toggle-checked', isChecked);
            }
        }
        /**
         * @private
         */

    }, {
        key: "writeValue",
        value: function writeValue(val) {
            this._setChecked(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isTrueProperty"])(val));
        }
        /**
         * @private
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            var _this = this;

            this._fn = fn;
            this.onChange = function (isChecked) {
                console.debug('toggle, onChange', isChecked);
                fn(isChecked);
                _this._setChecked(isChecked);
                _this.onTouched();
            };
        }
        /**
         * @private
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
    }, {
        key: "onChange",

        /**
         * @private
         */
        value: function onChange(isChecked) {
            // used when this input does not have an ngModel or ngControl
            console.debug('toggle, onChange (no ngModel)', isChecked);
            this._setChecked(isChecked);
            this.onTouched();
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched() {}
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            var _this2 = this;

            this._init = true;
            this._events.pointerEventsRef(this._elementRef, function (ev) {
                return _this2.pointerDown(ev);
            }, function (ev) {
                return _this2.pointerMove(ev);
            }, function (ev) {
                return _this2.pointerUp(ev);
            });
        }
        /**
         * @private
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
            this._events.unlistenAll();
        }
    }, {
        key: "checked",
        get: function get() {
            return this._checked;
        },
        set: function set(val) {
            this._setChecked(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isTrueProperty"])(val));
            this.onChange(this._checked);
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-toggle-disabled', this._disabled);
        }
    }]);

    return Toggle;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _a || Object)], Toggle.prototype, "ionChange", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Toggle.prototype, "checked", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Boolean)], Toggle.prototype, "disabled", null);
Toggle = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-toggle',
    template: '<div class="toggle-icon" [class.toggle-checked]="_checked" [class.toggle-activated]="_activated">' + '<div class="toggle-inner"></div>' + '</div>' + '<button role="checkbox" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
    host: {
        '[class.toggle-disabled]': '_disabled'
    },
    providers: [TOGGLE_VALUE_ACCESSOR],
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__util_form__["Form"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__util_form__["Form"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_4__item_item__["a" /* Item */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__item_item__["a" /* Item */]) === 'function' && _e || Object])], Toggle);
var _a, _b, _c, _d, _e;

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);

/* harmony export */ __webpack_require__.d(exports, "b", function() { return VirtualHeader; });
/* harmony export */ __webpack_require__.d(exports, "c", function() { return VirtualFooter; });
/* harmony export */ __webpack_require__.d(exports, "a", function() { return VirtualItem; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

/**
 * @private
 */
var VirtualHeader = function VirtualHeader(templateRef) {
    _classCallCheck(this, VirtualHeader);

    this.templateRef = templateRef;
};
VirtualHeader = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({ selector: '[virtualHeader]' }), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"]) === 'function' && _a || Object])], VirtualHeader);
/**
 * @private
 */
var VirtualFooter = function VirtualFooter(templateRef) {
    _classCallCheck(this, VirtualFooter);

    this.templateRef = templateRef;
};
VirtualFooter = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({ selector: '[virtualFooter]' }), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"]) === 'function' && _b || Object])], VirtualFooter);
/**
 * @private
 */
var VirtualItem = function VirtualItem(templateRef, viewContainer) {
    _classCallCheck(this, VirtualItem);

    this.templateRef = templateRef;
    this.viewContainer = viewContainer;
};
VirtualItem = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({ selector: '[virtualItem]' }), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _d || Object])], VirtualItem);
var _a, _b, _c, _d;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__virtual_util__ = __webpack_require__(913);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__img_img__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__platform_platform__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__virtual_item__ = __webpack_require__(499);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return VirtualScroll; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};










/**
 * @name VirtualScroll
 * @description
 * Virtual Scroll displays a virtual, "infinite" list. An array of records
 * is passed to the virtual scroll containing the data to create templates
 * for. The template created for each record, referred to as a cell, can
 * consist of items, headers, and footers.
 *
 * For performance reasons, not every record in the list is rendered at once;
 * instead a small subset of records (enough to fill the viewport) are rendered
 * and reused as the user scrolls.
 *
 * ### The Basics
 *
 * The array of records should be passed to the `virtualScroll` property.
 * The data given to the `virtualScroll` property must be an array. An item
 * template with the `*virtualItem` property is required in the `virtualScroll`.
 * The `virtualScroll` and `*virtualItem` properties can be added to any element.
 *
 * ```html
 * <ion-list [virtualScroll]="items">
 *
 *   <ion-item *virtualItem="let item">
 *     {% raw %}{{ item }}{% endraw %}
 *   </ion-item>
 *
 * </ion-list>
 * ```
 *
 *
 * ### Section Headers and Footers
 *
 * Section headers and footers are optional. They can be dynamically created
 * from developer-defined functions. For example, a large list of contacts
 * usually has a divider for each letter in the alphabet. Developers provide
 * their own custom function to be called on each record. The logic in the
 * custom function should determine whether to create the section template
 * and what data to provide to the template. The custom function should
 * return `null` if a template shouldn't be created.
 *
 * ```html
 * <ion-list [virtualScroll]="items" [headerFn]="myHeaderFn">
 *
 *   <ion-item-divider *virtualHeader="let header">
 *     Header: {% raw %}{{ header }}{% endraw %}
 *   </ion-item-divider>
 *
 *   <ion-item *virtualItem="let item">
 *     Item: {% raw %}{{ item }}{% endraw %}
 *   </ion-item>
 *
 * </ion-list>
 * ```
 *
 * Below is an example of a custom function called on every record. It
 * gets passed the individual record, the record's index number,
 * and the entire array of records. In this example, after every 20
 * records a header will be inserted. So between the 19th and 20th records,
 * between the 39th and 40th, and so on, a `<ion-item-divider>` will
 * be created and the template's data will come from the function's
 * returned data.
 *
 * ```ts
 * myHeaderFn(record, recordIndex, records) {
 *   if (recordIndex % 20 === 0) {
 *     return 'Header ' + recordIndex;
 *   }
 *   return null;
 * }
 * ```
 *
 *
 * ### Approximate Widths and Heights
 *
 * The approximate width and height of each template is used to help
 * determine how many cells should be created, and to help calculate
 * the height of the scrollable area. Note that the actual rendered size
 * of each cell comes from the app's CSS, whereas this approximation
 * is only used to help calculate initial dimensions.
 *
 * It's also important to know that Ionic's default item sizes have
 * slightly different heights between platforms, which is perfectly fine.
 * An exact pixel-perfect size is not necessary, but a good estimation
 * is important. Basically if each item is roughly 500px tall, rather than
 * the default of 40px tall, it's extremely important to know for virtual
 * scroll to calculate a good height.
 *
 *
 * ### Images Within Virtual Scroll
 *
 * Ionic provides `<ion-img>` to manage HTTP requests and image rendering.
 * Additionally, it includes a customizable placeholder element which shows
 * before the image has finished loading. While scrolling through items
 * quickly, `<ion-img>` knows not to make any image requests, and only loads
 * the images that are viewable after scrolling. It's also important for app
 * developers to ensure image sizes are locked in, and after images have fully
 * loaded they do not change size and affect any other element sizes.
 *
 * We recommend using our `<ion-img>` element over the native `<img>` element
 * because when an `<img>` element is added to the DOM, it immediately
 * makes a HTTP request for the image file. HTTP requests, image
 * decoding, and image rendering can cause issues while scrolling. For virtual
 * scrolling, the natural effects of the `<img>` are not desirable features.
 *
 * ```html
 * <ion-list [virtualScroll]="items">
 *
 *   <ion-item *virtualItem="let item">
 *     <ion-avatar item-left>
 *       <ion-img [src]="item.avatarUrl"></ion-img>
 *     </ion-avatar>
 *    {% raw %} {{ item.firstName }} {{ item.lastName }}{% endraw %}
 *   </ion-item>
 *
 * </ion-list>
 * ```
 *
 *
 * ### Performance Tips
 *
 * - Use `<ion-img>` rather than `<img>` so images are lazy loaded
 *   while scrolling.
 * - Image sizes should be locked in, meaning the size of any element
 *   should not change after the image has loaded.
 * - Provide an approximate width and height so the virtual scroll can
 *   best calculate the cell height.
 * - Changing the dataset requires the entire virtual scroll to be
 *   reset, which is an expensive operation and should be avoided
 *   if possible.
 * - Do not perform any DOM manipulation within section header and
 *   footer functions. These functions are called for every record in the
 *   dataset, so please make sure they're performant.
 *
 */
var VirtualScroll = function () {
    function VirtualScroll(_iterableDiffers, _elementRef, _renderer, _zone, _cd, _content, _platform, _ctrl, config) {
        _classCallCheck(this, VirtualScroll);

        this._iterableDiffers = _iterableDiffers;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._zone = _zone;
        this._cd = _cd;
        this._content = _content;
        this._platform = _platform;
        this._ctrl = _ctrl;
        this._records = [];
        this._cells = [];
        this._nodes = [];
        this._vHeight = 0;
        this._lastCheck = 0;
        this._data = {
            scrollTop: 0
        };
        this._queue = null;
        /**
         * @input {number} The buffer ratio is used to decide how many cells
         * should get created when initially rendered. The number is a
         * multiplier against the viewable area's height. For example, if it
         * takes `20` cells to fill up the height of the viewable area, then
         * with a buffer ratio of `2` it will create `40` cells that are
         * available for reuse while scrolling. For better performance, it's
         * better to have more cells than what are required to fill the
         * viewable area. Default is `2`.
         */
        this.bufferRatio = 2;
        /**
         * @input {string} The approximate width of each item template's cell.
         * This dimension is used to help determine how many cells should
         * be created when initialized, and to help calculate the height of
         * the scrollable area. This value can use either `px` or `%` units.
         * Note that the actual rendered size of each cell comes from the
         * app's CSS, whereas this approximation is used to help calculate
         * initial dimensions. Default is `100%`.
         */
        this.approxItemWidth = '100%';
        /**
         * @input {string} The approximate height of each item template's cell.
         * This dimension is used to help determine how many cells should
         * be created when initialized, and to help calculate the height of
         * the scrollable area. This height value can only use `px` units.
         * Note that the actual rendered size of each cell comes from the
         * app's CSS, whereas this approximation is used to help calculate
         * initial dimensions. Default is `40px`.
         */
        this.approxItemHeight = '40px';
        /**
         * @input {string} The approximate width of each header template's cell.
         * This dimension is used to help determine how many cells should
         * be created when initialized, and to help calculate the height of
         * the scrollable area. This value can use either `px` or `%` units.
         * Note that the actual rendered size of each cell comes from the
         * app's CSS, whereas this approximation is used to help calculate
         * initial dimensions. Default is `100%`.
         */
        this.approxHeaderWidth = '100%';
        /**
         * @input {string} The approximate height of each header template's cell.
         * This dimension is used to help determine how many cells should
         * be created when initialized, and to help calculate the height of
         * the scrollable area. This height value can only use `px` units.
         * Note that the actual rendered size of each cell comes from the
         * app's CSS, whereas this approximation is used to help calculate
         * initial dimensions. Default is `40px`.
         */
        this.approxHeaderHeight = '40px';
        /**
         * @input {string} The approximate width of each footer template's cell.
         * This dimension is used to help determine how many cells should
         * be created when initialized, and to help calculate the height of
         * the scrollable area. This value can use either `px` or `%` units.
         * Note that the actual rendered size of each cell comes from the
         * app's CSS, whereas this approximation is used to help calculate
         * initial dimensions. Default is `100%`.
         */
        this.approxFooterWidth = '100%';
        /**
         * @input {string} The approximate height of each footer template's cell.
         * This dimension is used to help determine how many cells should
         * be created when initialized, and to help calculate the height of
         * the scrollable area. This height value can only use `px` units.
         * Note that the actual rendered size of each cell comes from the
         * app's CSS, whereas this approximation is used to help calculate
         * initial dimensions. Default is `40px`.
         */
        this.approxFooterHeight = '40px';
        this._eventAssist = config.getBoolean('virtualScrollEventAssist');
    }
    /**
     * @input {array} The data that builds the templates within the virtual scroll.
     * This is the same data that you'd pass to `ngFor`. It's important to note
     * that when this data has changed, then the entire virtual scroll is reset,
     * which is an expensive operation and should be avoided if possible.
     */

    _createClass(VirtualScroll, [{
        key: "ngDoCheck",

        /**
         * @private
         */
        value: function ngDoCheck() {
            if (this._init) {
                this.update(true);
            }
        }
        /**
         * @private
         */

    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            var _this = this;

            if (!this._init) {
                if (!this._itmTmp) {
                    throw 'virtualItem required within virtualScroll';
                }
                this._init = true;
                this.update(true);
                this._platform.onResize(function () {
                    console.debug('VirtualScroll, onResize');
                    _this.update(false);
                });
            }
        }
        /**
         * @private
         * DOM READ THEN DOM WRITE
         */

    }, {
        key: "update",
        value: function update(checkChanges) {
            var self = this;
            if (!self._records || !self._records.length) return;
            if (checkChanges) {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(self._differ)) {
                    var changes = self._differ.diff(self._records);
                    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(changes)) return;
                }
            }
            console.debug('VirtualScroll, update, records:', self._records.length);
            // reset everything
            self._cells.length = 0;
            self._nodes.length = 0;
            self._itmTmp.viewContainer.clear();
            self._elementRef.nativeElement.parentElement.scrollTop = 0;
            var attempts = 0;
            function readDimensions(done /* cuz promises add unnecessary overhead here */) {
                if (self._data.valid) {
                    // good to go, we already have good dimension data
                    done();
                } else {
                    // ******** DOM READ ****************
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["a" /* calcDimensions */])(self._data, self._elementRef.nativeElement.parentElement, self.approxItemWidth, self.approxItemHeight, self.approxHeaderWidth, self.approxHeaderHeight, self.approxFooterWidth, self.approxFooterHeight, self.bufferRatio);
                    if (self._data.valid) {
                        // sweet, we got some good dimension data!
                        done();
                    } else if (attempts < 30) {
                        // oh no! the DOM doesn't have good data yet!
                        // let's try again in XXms, and give up eventually if we never get data
                        attempts++;
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["nativeRaf"])(function () {
                            readDimensions(done);
                        });
                    }
                }
            }
            // ******** DOM READ ****************
            readDimensions(function () {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["b" /* processRecords */])(self._data.renderHeight, self._records, self._cells, self._hdrFn, self._ftrFn, self._data);
                // ******** DOM WRITE ****************
                self.renderVirtual();
                // list for scroll events
                self.addScrollListener();
            });
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "renderVirtual",
        value: function renderVirtual() {
            // initialize nodes with the correct cell data
            this._data.topCell = 0;
            this._data.bottomCell = this._cells.length - 1;
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["c" /* populateNodeData */])(0, this._data.bottomCell, this._data.viewWidth, true, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, true);
            // ******** DOM WRITE ****************
            this._cd.detectChanges();
            // wait a frame before trying to read and calculate the dimensions
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["nativeRaf"])(this.postRenderVirtual.bind(this));
        }
        /**
         * @private
         * DOM READ THEN DOM WRITE
         */

    }, {
        key: "postRenderVirtual",
        value: function postRenderVirtual() {
            // ******** DOM READ THEN DOM WRITE ****************
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["d" /* initReadNodes */])(this._nodes, this._cells, this._data);
            // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
            // ******** DOM WRITE ****************
            this._renderer.setElementClass(this._elementRef.nativeElement, 'virtual-scroll', true);
            // ******** DOM WRITE ****************
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["e" /* writeToNodes */])(this._nodes, this._cells, this._records.length);
            // ******** DOM WRITE ****************
            this.setVirtualHeight(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["f" /* estimateHeight */])(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
        }
        /**
         * @private
         */

    }, {
        key: "scrollUpdate",
        value: function scrollUpdate() {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["clearNativeTimeout"])(this._tmId);
            this._tmId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["nativeTimeout"])(this.onScrollEnd.bind(this), SCROLL_END_TIMEOUT_MS);
            var data = this._data;
            if (this._queue === QUEUE_CHANGE_DETECTION) {
                // ******** DOM WRITE ****************
                this._cd.detectChanges();
                // ******** DOM WRITE ****************
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["e" /* writeToNodes */])(this._nodes, this._cells, this._records.length);
                // ******** DOM WRITE ****************
                this.setVirtualHeight(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["f" /* estimateHeight */])(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
                this._queue = null;
            } else {
                data.scrollDiff = data.scrollTop - this._lastCheck;
                if (Math.abs(data.scrollDiff) > SCROLL_DIFFERENCE_MINIMUM) {
                    // don't bother updating if the scrollTop hasn't changed much
                    this._lastCheck = data.scrollTop;
                    if (data.scrollDiff > 0) {
                        // load data we may not have processed yet
                        var stopAtHeight = data.scrollTop + data.renderHeight;
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["b" /* processRecords */])(stopAtHeight, this._records, this._cells, this._hdrFn, this._ftrFn, data);
                    }
                    // ******** DOM READ ****************
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["g" /* updateDimensions */])(this._nodes, this._cells, data, false);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["h" /* adjustRendered */])(this._cells, data);
                    var madeChanges = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["c" /* populateNodeData */])(data.topCell, data.bottomCell, data.viewWidth, data.scrollDiff > 0, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, false);
                    if (madeChanges) {
                        // do not update images while scrolling
                        this._imgs.forEach(function (img) {
                            img.enable(false);
                        });
                        // queue making updates in the next frame
                        this._queue = QUEUE_CHANGE_DETECTION;
                    } else {
                        this._queue = null;
                    }
                }
            }
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "onScrollEnd",
        value: function onScrollEnd() {
            // scrolling is done, allow images to be updated now
            this._imgs.forEach(function (img) {
                img.enable(true);
            });
            // ******** DOM READ ****************
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["g" /* updateDimensions */])(this._nodes, this._cells, this._data, false);
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["h" /* adjustRendered */])(this._cells, this._data);
            // ******** DOM WRITE ****************
            this._cd.detectChanges();
            // ******** DOM WRITE ****************
            this.setVirtualHeight(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__virtual_util__["f" /* estimateHeight */])(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.05));
        }
        /**
         * @private
         * DOM WRITE
         */

    }, {
        key: "setVirtualHeight",
        value: function setVirtualHeight(newVirtualHeight) {
            if (newVirtualHeight !== this._vHeight) {
                // ******** DOM WRITE ****************
                this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', newVirtualHeight > 0 ? newVirtualHeight + 'px' : '');
                this._vHeight = newVirtualHeight;
                console.debug('VirtualScroll, height', newVirtualHeight);
            }
        }
        /**
         * @private
         * NO DOM
         */

    }, {
        key: "addScrollListener",
        value: function addScrollListener() {
            var self = this;
            if (!self._unreg) {
                self._zone.runOutsideAngular(function () {
                    function onScroll() {
                        // ******** DOM READ ****************
                        self._data.scrollTop = self._content.getScrollTop();
                        // ******** DOM READ THEN DOM WRITE ****************
                        self.scrollUpdate();
                    }
                    if (self._eventAssist) {
                        // use JS scrolling for iOS UIWebView
                        // goal is to completely remove this when iOS
                        // fully supports scroll events
                        // listen to JS scroll events
                        self._unreg = self._content.jsScroll(onScroll);
                    } else {
                        // listen to native scroll events
                        self._unreg = self._content.addScrollListener(onScroll);
                    }
                });
            }
        }
        /**
         * @private
         * NO DOM
         */

    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._unreg && this._unreg();
            this._unreg = null;
        }
    }, {
        key: "virtualScroll",
        set: function set(val) {
            this._records = val;
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isBlank"])(this._differ) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isPresent"])(val)) {
                this._differ = this._iterableDiffers.find(val).create(this._cd, this._trackBy);
            }
        }
        /**
         * @input {function} Section headers and the data used within its given
         * template can be dynamically created by passing a function to `headerFn`.
         * For example, a large list of contacts usually has dividers between each
         * letter in the alphabet. App's can provide their own custom `headerFn`
         * which is called with each record within the dataset. The logic within
         * the header function can decide if the header template should be used,
         * and what data to give to the header template. The function must return
         * `null` if a header cell shouldn't be created.
         */

    }, {
        key: "headerFn",
        set: function set(val) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isFunction"])(val)) {
                this._hdrFn = val.bind(this._ctrl && this._ctrl.instance || this);
            }
        }
        /**
         * @input {function} Section footers and the data used within its given
         * template can be dynamically created by passing a function to `footerFn`.
         * The logic within the footer function can decide if the footer template
         * should be used, and what data to give to the footer template. The function
         * must return `null` if a footer cell shouldn't be created.
         */

    }, {
        key: "footerFn",
        set: function set(val) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__util_util__["isFunction"])(val)) {
                this._ftrFn = val.bind(this._ctrl && this._ctrl.instance || this);
            }
        }
        /**
         * @input {function} Same as `ngForTrackBy` which can be used on `ngFor`.
         */

    }, {
        key: "virtualTrackBy",
        set: function set(val) {
            this._trackBy = val;
        }
    }]);

    return VirtualScroll;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"])(__WEBPACK_IMPORTED_MODULE_9__virtual_item__["a" /* VirtualItem */]), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_9__virtual_item__["a" /* VirtualItem */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__virtual_item__["a" /* VirtualItem */]) === 'function' && _a || Object)], VirtualScroll.prototype, "_itmTmp", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"])(__WEBPACK_IMPORTED_MODULE_9__virtual_item__["b" /* VirtualHeader */]), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_9__virtual_item__["b" /* VirtualHeader */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__virtual_item__["b" /* VirtualHeader */]) === 'function' && _b || Object)], VirtualScroll.prototype, "_hdrTmp", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"])(__WEBPACK_IMPORTED_MODULE_9__virtual_item__["c" /* VirtualFooter */]), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_9__virtual_item__["c" /* VirtualFooter */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__virtual_item__["c" /* VirtualFooter */]) === 'function' && _c || Object)], VirtualScroll.prototype, "_ftrTmp", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(__WEBPACK_IMPORTED_MODULE_5__img_img__["a" /* Img */]), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"]) === 'function' && _d || Object)], VirtualScroll.prototype, "_imgs", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], VirtualScroll.prototype, "virtualScroll", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Number)], VirtualScroll.prototype, "bufferRatio", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], VirtualScroll.prototype, "approxItemWidth", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], VirtualScroll.prototype, "approxItemHeight", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], VirtualScroll.prototype, "approxHeaderWidth", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], VirtualScroll.prototype, "approxHeaderHeight", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], VirtualScroll.prototype, "approxFooterWidth", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], VirtualScroll.prototype, "approxFooterHeight", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], VirtualScroll.prototype, "headerFn", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], VirtualScroll.prototype, "footerFn", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["TrackByFn"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["TrackByFn"]) === 'function' && _e || Object), __metadata('design:paramtypes', [typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["TrackByFn"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["TrackByFn"]) === 'function' && _f || Object])], VirtualScroll.prototype, "virtualTrackBy", null);
VirtualScroll = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[virtualScroll]'
}), __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["IterableDiffers"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["IterableDiffers"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"]) === 'function' && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__content_content__["a" /* Content */]) === 'function' && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_7__platform_platform__["Platform"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__platform_platform__["Platform"]) === 'function' && _o || Object, typeof (_p = typeof __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]) === 'function' && _p || Object, typeof (_q = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _q || Object])], VirtualScroll);
var SCROLL_END_TIMEOUT_MS = 140;
var SCROLL_DIFFERENCE_MINIMUM = 20;
var QUEUE_CHANGE_DETECTION = 0;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_menu_menu__ = __webpack_require__(481);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_menu_menu_toggle__ = __webpack_require__(480);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_menu_menu_close__ = __webpack_require__(479);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_backdrop_backdrop__ = __webpack_require__(312);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_badge_badge__ = __webpack_require__(471);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_button_button__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_img_img__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_scroll_scroll__ = __webpack_require__(489);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_infinite_scroll_infinite_scroll__ = __webpack_require__(315);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_infinite_scroll_infinite_scroll_content__ = __webpack_require__(474);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__components_refresher_refresher__ = __webpack_require__(319);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_refresher_refresher_content__ = __webpack_require__(488);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_slides_slides__ = __webpack_require__(494);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_tabs_tabs__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_tabs_tab__ = __webpack_require__(320);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__components_list_list__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__components_item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__components_item_item_sliding__ = __webpack_require__(478);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__components_virtual_scroll_virtual_scroll__ = __webpack_require__(500);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__components_virtual_scroll_virtual_item__ = __webpack_require__(499);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__components_toolbar_toolbar__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__components_toolbar_toolbar_item__ = __webpack_require__(911);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__components_toolbar_toolbar_title__ = __webpack_require__(912);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__components_icon_icon__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__components_spinner_spinner__ = __webpack_require__(495);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__components_checkbox_checkbox__ = __webpack_require__(472);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__components_select_select__ = __webpack_require__(492);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__components_option_option__ = __webpack_require__(317);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__components_datetime_datetime__ = __webpack_require__(473);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__components_toggle_toggle__ = __webpack_require__(498);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__components_input_input__ = __webpack_require__(475);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__components_label_label__ = __webpack_require__(316);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__components_segment_segment__ = __webpack_require__(491);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__components_radio_radio_button__ = __webpack_require__(486);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__components_radio_radio_group__ = __webpack_require__(318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__components_range_range__ = __webpack_require__(487);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__components_searchbar_searchbar__ = __webpack_require__(490);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__components_nav_nav__ = __webpack_require__(484);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__components_nav_nav_pop__ = __webpack_require__(482);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__components_nav_nav_push__ = __webpack_require__(483);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__components_nav_nav_router__ = __webpack_require__(903);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__components_navbar_navbar__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__components_show_hide_when_show_hide_when__ = __webpack_require__(493);

/* harmony export */ __webpack_require__.d(exports, "IONIC_DIRECTIVES", function() { return IONIC_DIRECTIVES; });












































/**
 * @private
 * @name IONIC_DIRECTIVES
 * @description
 * The core Ionic directives as well as Angular's `CORE_DIRECTIVES` and `FORM_DIRECTIVES` are
 * available automatically when you bootstrap your app with the `ionicBootstrap`. This means
 * if you are using custom components you do not need to import `IONIC_DIRECTIVES` as they
 * are part of the app's default directives.
 *
 *
 * #### Angular
 * - CORE_DIRECTIVES
 * - FORM_DIRECTIVES
 *
 * #### Ionic
 * - Menu
 * - MenuToggle
 * - MenuClose
 * - Badge
 * - Button
 * - Content
 * - Scroll
 * - InfiniteScroll
 * - InfiniteScrollContent
 * - Refresher
 * - RefresherContent
 * - Img
 * - List
 * - ListHeader
 * - Item
 * - ItemContent
 * - ItemSliding
 * - VirtualScroll
 * - VirtualItem
 * - VirtualHeader
 * - VirtualFooter
 * - Slides
 * - Slide
 * - SlideLazy
 * - Tabs
 * - Tab
 * - Header
 * - Footer
 * - Toolbar
 * - ToolbarTitle
 * - ToolbarItem
 * - Icon
 * - Spinner
 * - Searchbar
 * - Segment
 * - SegmentButton
 * - Checkbox
 * - RadioGroup
 * - RadioButton
 * - Select
 * - Option
 * - DateTime
 * - Toggle
 * - TextArea
 * - TextInput
 * - Label
 * - Nav
 * - NavbarTemplate
 * - Navbar
 * - NavPush
 * - NavPop
 * - NavRouter
 * - IdRef
 * - ShowWhen
 * - HideWhen
 */
var IONIC_DIRECTIVES = [
// Angular
__WEBPACK_IMPORTED_MODULE_0__angular_common__["CORE_DIRECTIVES"], __WEBPACK_IMPORTED_MODULE_0__angular_common__["FORM_DIRECTIVES"],
// Content
__WEBPACK_IMPORTED_MODULE_1__components_menu_menu__["a" /* Menu */], __WEBPACK_IMPORTED_MODULE_2__components_menu_menu_toggle__["a" /* MenuToggle */], __WEBPACK_IMPORTED_MODULE_3__components_menu_menu_close__["a" /* MenuClose */], __WEBPACK_IMPORTED_MODULE_4__components_backdrop_backdrop__["a" /* Backdrop */], __WEBPACK_IMPORTED_MODULE_5__components_badge_badge__["a" /* Badge */], __WEBPACK_IMPORTED_MODULE_6__components_button_button__["a" /* Button */], __WEBPACK_IMPORTED_MODULE_7__components_content_content__["a" /* Content */], __WEBPACK_IMPORTED_MODULE_9__components_scroll_scroll__["a" /* Scroll */], __WEBPACK_IMPORTED_MODULE_10__components_infinite_scroll_infinite_scroll__["a" /* InfiniteScroll */], __WEBPACK_IMPORTED_MODULE_11__components_infinite_scroll_infinite_scroll_content__["a" /* InfiniteScrollContent */], __WEBPACK_IMPORTED_MODULE_12__components_refresher_refresher__["a" /* Refresher */], __WEBPACK_IMPORTED_MODULE_13__components_refresher_refresher_content__["a" /* RefresherContent */], __WEBPACK_IMPORTED_MODULE_8__components_img_img__["a" /* Img */],
// Lists
__WEBPACK_IMPORTED_MODULE_17__components_list_list__["a" /* List */], __WEBPACK_IMPORTED_MODULE_17__components_list_list__["b" /* ListHeader */], __WEBPACK_IMPORTED_MODULE_18__components_item_item__["a" /* Item */], __WEBPACK_IMPORTED_MODULE_18__components_item_item__["b" /* ItemContent */], __WEBPACK_IMPORTED_MODULE_19__components_item_item_sliding__["a" /* ItemSliding */], __WEBPACK_IMPORTED_MODULE_19__components_item_item_sliding__["b" /* ItemOptions */], __WEBPACK_IMPORTED_MODULE_20__components_virtual_scroll_virtual_scroll__["a" /* VirtualScroll */], __WEBPACK_IMPORTED_MODULE_21__components_virtual_scroll_virtual_item__["a" /* VirtualItem */], __WEBPACK_IMPORTED_MODULE_21__components_virtual_scroll_virtual_item__["b" /* VirtualHeader */], __WEBPACK_IMPORTED_MODULE_21__components_virtual_scroll_virtual_item__["c" /* VirtualFooter */],
// Slides
__WEBPACK_IMPORTED_MODULE_14__components_slides_slides__["a" /* Slides */], __WEBPACK_IMPORTED_MODULE_14__components_slides_slides__["b" /* Slide */], __WEBPACK_IMPORTED_MODULE_14__components_slides_slides__["c" /* SlideLazy */],
// Tabs
__WEBPACK_IMPORTED_MODULE_15__components_tabs_tabs__["a" /* Tabs */], __WEBPACK_IMPORTED_MODULE_16__components_tabs_tab__["a" /* Tab */],
// Toolbar
__WEBPACK_IMPORTED_MODULE_22__components_toolbar_toolbar__["c" /* Header */], __WEBPACK_IMPORTED_MODULE_22__components_toolbar_toolbar__["d" /* Footer */], __WEBPACK_IMPORTED_MODULE_22__components_toolbar_toolbar__["b" /* Toolbar */], __WEBPACK_IMPORTED_MODULE_24__components_toolbar_toolbar_title__["a" /* ToolbarTitle */], __WEBPACK_IMPORTED_MODULE_23__components_toolbar_toolbar_item__["a" /* ToolbarItem */],
// Media
__WEBPACK_IMPORTED_MODULE_25__components_icon_icon__["a" /* Icon */], __WEBPACK_IMPORTED_MODULE_26__components_spinner_spinner__["a" /* Spinner */],
// Forms
__WEBPACK_IMPORTED_MODULE_38__components_searchbar_searchbar__["a" /* Searchbar */], __WEBPACK_IMPORTED_MODULE_34__components_segment_segment__["a" /* Segment */], __WEBPACK_IMPORTED_MODULE_34__components_segment_segment__["b" /* SegmentButton */], __WEBPACK_IMPORTED_MODULE_27__components_checkbox_checkbox__["a" /* Checkbox */], __WEBPACK_IMPORTED_MODULE_36__components_radio_radio_group__["a" /* RadioGroup */], __WEBPACK_IMPORTED_MODULE_35__components_radio_radio_button__["a" /* RadioButton */], __WEBPACK_IMPORTED_MODULE_37__components_range_range__["a" /* Range */], __WEBPACK_IMPORTED_MODULE_28__components_select_select__["a" /* Select */], __WEBPACK_IMPORTED_MODULE_29__components_option_option__["a" /* Option */], __WEBPACK_IMPORTED_MODULE_30__components_datetime_datetime__["a" /* DateTime */], __WEBPACK_IMPORTED_MODULE_31__components_toggle_toggle__["a" /* Toggle */], __WEBPACK_IMPORTED_MODULE_32__components_input_input__["a" /* TextArea */], __WEBPACK_IMPORTED_MODULE_32__components_input_input__["b" /* TextInput */], __WEBPACK_IMPORTED_MODULE_33__components_label_label__["a" /* Label */],
// Nav
__WEBPACK_IMPORTED_MODULE_39__components_nav_nav__["a" /* Nav */], __WEBPACK_IMPORTED_MODULE_43__components_navbar_navbar__["b" /* NavbarTemplate */], __WEBPACK_IMPORTED_MODULE_43__components_navbar_navbar__["a" /* Navbar */], __WEBPACK_IMPORTED_MODULE_41__components_nav_nav_push__["a" /* NavPush */], __WEBPACK_IMPORTED_MODULE_40__components_nav_nav_pop__["a" /* NavPop */], __WEBPACK_IMPORTED_MODULE_42__components_nav_nav_router__["a" /* NavRouter */], __WEBPACK_IMPORTED_MODULE_44__components_show_hide_when_show_hide_when__["a" /* ShowWhen */], __WEBPACK_IMPORTED_MODULE_44__components_show_hide_when_show_hide_when__["b" /* HideWhen */]];

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__drag_gesture__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(207);

/* harmony export */ __webpack_require__.d(exports, "SlideGesture", function() { return SlideGesture; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var SlideGesture = function (_DragGesture) {
    _inherits(SlideGesture, _DragGesture);

    function SlideGesture(element) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, SlideGesture);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideGesture).call(this, element, opts));

        _this.slide = null;
        _this.element = element;
        return _this;
    }
    /*
     * Get the min and max for the slide. pageX/pageY.
     * Only called on dragstart.
     */

    _createClass(SlideGesture, [{
        key: 'getSlideBoundaries',
        value: function getSlideBoundaries(slide, ev) {
            return {
                min: 0,
                max: this.element.offsetWidth
            };
        }
        /*
         * Get the element's pos when the drag starts.
         * For example, an open side menu starts at 100% and a closed
         * sidemenu starts at 0%.
         */

    }, {
        key: 'getElementStartPos',
        value: function getElementStartPos(slide, ev) {
            return 0;
        }
    }, {
        key: 'canStart',
        value: function canStart(ev) {
            return true;
        }
    }, {
        key: 'onDragStart',
        value: function onDragStart(ev) {
            if (!this.canStart(ev)) {
                return false;
            }
            this.slide = {};
            this.onSlideBeforeStart(this.slide, ev);

            var _getSlideBoundaries = this.getSlideBoundaries(this.slide, ev);

            var min = _getSlideBoundaries.min;
            var max = _getSlideBoundaries.max;

            this.slide.min = min;
            this.slide.max = max;
            this.slide.elementStartPos = this.getElementStartPos(this.slide, ev);
            this.slide.pointerStartPos = ev.center[this.direction];
            this.slide.started = true;
            this.onSlideStart(this.slide, ev);
            return true;
        }
    }, {
        key: 'onDrag',
        value: function onDrag(ev) {
            if (!this.slide || !this.slide.started) {
                return false;
            }
            this.slide.pos = ev.center[this.direction];
            this.slide.distance = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["c" /* clamp */])(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
            this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
            this.onSlide(this.slide, ev);
            return true;
        }
    }, {
        key: 'onDragEnd',
        value: function onDragEnd(ev) {
            if (!this.slide || !this.slide.started) return;
            this.onSlideEnd(this.slide, ev);
            this.slide = null;
        }
    }, {
        key: 'onSlideBeforeStart',
        value: function onSlideBeforeStart(slide, ev) {}
    }, {
        key: 'onSlideStart',
        value: function onSlideStart(slide, ev) {}
    }, {
        key: 'onSlide',
        value: function onSlide(slide, ev) {}
    }, {
        key: 'onSlideEnd',
        value: function onSlideEnd(slide, ev) {}
    }]);

    return SlideGesture;
}(__WEBPACK_IMPORTED_MODULE_0__drag_gesture__["DragGesture"]);

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(6);
/* harmony export */ exports["renderDateTime"] = renderDateTime;/* harmony export */ exports["renderTextFormat"] = renderTextFormat;/* harmony export */ exports["dateValueRange"] = dateValueRange;/* harmony export */ exports["dateSortValue"] = dateSortValue;/* harmony export */ exports["dateDataSortValue"] = dateDataSortValue;/* harmony export */ exports["daysInMonth"] = daysInMonth;/* harmony export */ exports["isLeapYear"] = isLeapYear;/* harmony export */ exports["parseDate"] = parseDate;/* harmony export */ exports["updateDate"] = updateDate;/* harmony export */ exports["parseTemplate"] = parseTemplate;/* harmony export */ exports["getValueFromFormat"] = getValueFromFormat;/* harmony export */ exports["convertFormatToKey"] = convertFormatToKey;/* harmony export */ exports["convertDataToISO"] = convertDataToISO;
function renderDateTime(template, value, locale) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isBlank"])(value)) {
        return '';
    }
    var tokens = [];
    var hasText = false;
    FORMAT_KEYS.forEach(function (format, index) {
        if (template.indexOf(format.f) > -1) {
            var token = '{' + index + '}';
            var text = renderTextFormat(format.f, value[format.k], value, locale);
            if (!hasText && text && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(value[format.k])) {
                hasText = true;
            }
            tokens.push(token, text);
            template = template.replace(format.f, token);
        }
    });
    if (!hasText) {
        return '';
    }
    for (var i = 0; i < tokens.length; i += 2) {
        template = template.replace(tokens[i], tokens[i + 1]);
    }
    return template;
}
function renderTextFormat(format, value, date, locale) {
    if (format === FORMAT_DDDD || format === FORMAT_DDD) {
        try {
            value = new Date(date.year, date.month - 1, date.day).getDay();
            if (format === FORMAT_DDDD) {
                return (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(locale.dayNames) ? locale.dayNames : DAY_NAMES)[value];
            }
            return (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(locale.dayShortNames) ? locale.dayShortNames : DAY_SHORT_NAMES)[value];
        } catch (e) {}
        return '';
    }
    if (format === FORMAT_A) {
        return date ? date.hour < 12 ? 'AM' : 'PM' : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(value) ? value.toUpperCase() : '';
    }
    if (format === FORMAT_a) {
        return date ? date.hour < 12 ? 'am' : 'pm' : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(value) ? value : '';
    }
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isBlank"])(value)) {
        return '';
    }
    if (format === FORMAT_YY || format === FORMAT_MM || format === FORMAT_DD || format === FORMAT_HH || format === FORMAT_mm) {
        return twoDigit(value);
    }
    if (format === FORMAT_YYYY) {
        return fourDigit(value);
    }
    if (format === FORMAT_MMMM) {
        return (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(locale.monthNames) ? locale.monthNames : MONTH_NAMES)[value - 1];
    }
    if (format === FORMAT_MMM) {
        return (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(locale.monthShortNames) ? locale.monthShortNames : MONTH_SHORT_NAMES)[value - 1];
    }
    if (format === FORMAT_hh || format === FORMAT_h) {
        if (value === 0) {
            return '12';
        }
        if (value > 12) {
            value -= 12;
        }
        if (format === FORMAT_hh && value < 10) {
            return '0' + value;
        }
    }
    return value.toString();
}
function dateValueRange(format, min, max) {
    var opts = [];
    var i = void 0;
    if (format === FORMAT_YYYY || format === FORMAT_YY) {
        // year
        i = max.year;
        while (i >= min.year) {
            opts.push(i--);
        }
    } else if (format === FORMAT_MMMM || format === FORMAT_MMM || format === FORMAT_MM || format === FORMAT_M || format === FORMAT_hh || format === FORMAT_h) {
        // month or 12-hour
        for (i = 1; i < 13; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_DDDD || format === FORMAT_DDD || format === FORMAT_DD || format === FORMAT_D) {
        // day
        for (i = 1; i < 32; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_HH || format === FORMAT_H) {
        // 24-hour
        for (i = 0; i < 24; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_mm || format === FORMAT_m) {
        // minutes
        for (i = 0; i < 60; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_A || format === FORMAT_a) {
        // AM/PM
        opts.push('am', 'pm');
    }
    return opts;
}
function dateSortValue(year, month, day) {
    return parseInt('1' + fourDigit(year) + twoDigit(month) + twoDigit(day), 10);
}
function dateDataSortValue(data) {
    if (data) {
        return dateSortValue(data.year, data.month, data.day);
    }
    return -1;
}
function daysInMonth(month, year) {
    return month === 4 || month === 6 || month === 9 || month === 11 ? 30 : month === 2 ? isLeapYear(year) ? 29 : 28 : 31;
}
function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
var ISO_8601_REGEXP = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
var TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
function parseDate(val) {
    // manually parse IS0 cuz Date.parse cannot be trusted
    // ISO 8601 format: 1994-12-15T13:47:20Z
    var parse = void 0;
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(val) && val !== '') {
        // try parsing for just time first, HH:MM
        parse = TIME_REGEXP.exec(val);
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(parse)) {
            // adjust the array so it fits nicely with the datetime parse
            parse.unshift(undefined, undefined);
            parse[2] = parse[3] = undefined;
        } else {
            // try parsing for full ISO datetime
            parse = ISO_8601_REGEXP.exec(val);
        }
    }
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isBlank"])(parse)) {
        // wasn't able to parse the ISO datetime
        return null;
    }
    // ensure all the parse values exist with at least 0
    for (var i = 1; i < 8; i++) {
        parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : null;
    }
    var tzOffset = 0;
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(parse[9]) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(parse[10])) {
        // hours
        tzOffset = parseInt(parse[10], 10) * 60;
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(parse[11])) {
            // minutes
            tzOffset += parseInt(parse[11], 10);
        }
        if (parse[9] === '-') {
            // + or -
            tzOffset *= -1;
        }
    }
    return {
        year: parse[1],
        month: parse[2],
        day: parse[3],
        hour: parse[4],
        minute: parse[5],
        second: parse[6],
        millisecond: parse[7],
        tzOffset: tzOffset
    };
}
function updateDate(existingData, newData) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(newData) && newData !== '') {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isString"])(newData)) {
            // new date is a string, and hopefully in the ISO format
            // convert it to our DateTimeData if a valid ISO
            newData = parseDate(newData);
            if (newData) {
                // successfully parsed the ISO string to our DateTimeData
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["assign"])(existingData, newData);
                return;
            }
        } else if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(newData.year) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(newData.hour)) {
            // newData is from of a datetime picker's selected values
            // update the existing DateTimeData data with the new values
            // do some magic for 12-hour values
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(newData.ampm) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(newData.hour)) {
                if (newData.ampm.value === 'pm') {
                    newData.hour.value = newData.hour.value === 12 ? 12 : newData.hour.value + 12;
                } else {
                    newData.hour.value = newData.hour.value === 12 ? 0 : newData.hour.value;
                }
            }
            // merge new values from the picker's selection
            // to the existing DateTimeData values
            for (var k in newData) {
                existingData[k] = newData[k].value;
            }
            return;
        }
        // eww, invalid data
        console.warn('Error parsing date: "' + newData + '". Please provide a valid ISO 8601 datetime format: https://www.w3.org/TR/NOTE-datetime');
    } else {
        // blank data, clear everything out
        for (var k in existingData) {
            delete existingData[k];
        }
    }
}
function parseTemplate(template) {
    var formats = [];
    template = template.replace(/[^\w\s]/gi, ' ');
    FORMAT_KEYS.forEach(function (format) {
        if (format.f.length > 1 && template.indexOf(format.f) > -1 && template.indexOf(format.f + format.f.charAt(0)) < 0) {
            template = template.replace(format.f, ' ' + format.f + ' ');
        }
    });
    var words = template.split(' ').filter(function (w) {
        return w.length > 0;
    });
    words.forEach(function (word, i) {
        FORMAT_KEYS.forEach(function (format) {
            if (word === format.f) {
                if (word === FORMAT_A || word === FORMAT_a) {
                    // this format is an am/pm format, so it's an "a" or "A"
                    if (formats.indexOf(FORMAT_h) < 0 && formats.indexOf(FORMAT_hh) < 0 || words[i - 1] !== FORMAT_m && words[i - 1] !== FORMAT_mm) {
                        // template does not already have a 12-hour format
                        // or this am/pm format doesn't have a minute format immediately before it
                        // so do not treat this word "a" or "A" as an am/pm format
                        return;
                    }
                }
                formats.push(word);
            }
        });
    });
    return formats;
}
function getValueFromFormat(date, format) {
    if (format === FORMAT_A || format === FORMAT_a) {
        return date.hour < 12 ? 'am' : 'pm';
    }
    if (format === FORMAT_hh || format === FORMAT_h) {
        return date.hour > 12 ? date.hour - 12 : date.hour;
    }
    return date[convertFormatToKey(format)];
}
function convertFormatToKey(format) {
    for (var k in FORMAT_KEYS) {
        if (FORMAT_KEYS[k].f === format) {
            return FORMAT_KEYS[k].k;
        }
    }
    return null;
}
function convertDataToISO(data) {
    // https://www.w3.org/TR/NOTE-datetime
    var rtn = '';
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data)) {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.year)) {
            // YYYY
            rtn = fourDigit(data.year);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.month)) {
                // YYYY-MM
                rtn += '-' + twoDigit(data.month);
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.day)) {
                    // YYYY-MM-DD
                    rtn += '-' + twoDigit(data.day);
                    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.hour)) {
                        // YYYY-MM-DDTHH:mm:SS
                        rtn += 'T' + twoDigit(data.hour) + ':' + twoDigit(data.minute) + ':' + twoDigit(data.second);
                        if (data.millisecond > 0) {
                            // YYYY-MM-DDTHH:mm:SS.SSS
                            rtn += '.' + threeDigit(data.millisecond);
                        }
                        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isBlank"])(data.tzOffset) || data.tzOffset === 0) {
                            // YYYY-MM-DDTHH:mm:SSZ
                            rtn += 'Z';
                        } else {
                            // YYYY-MM-DDTHH:mm:SS+/-HH:mm
                            rtn += (data.tzOffset > 0 ? '+' : '-') + twoDigit(Math.floor(data.tzOffset / 60)) + ':' + twoDigit(data.tzOffset % 60);
                        }
                    }
                }
            }
        } else if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.hour)) {
            // HH:mm
            rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.second)) {
                // HH:mm:SS
                rtn += ':' + twoDigit(data.second);
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(data.millisecond)) {
                    // HH:mm:SS.SSS
                    rtn += '.' + threeDigit(data.millisecond);
                }
            }
        }
    }
    return rtn;
}
function twoDigit(val) {
    return ('0' + (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(val) ? val : '0')).slice(-2);
}
function threeDigit(val) {
    return ('00' + (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(val) ? val : '0')).slice(-3);
}
function fourDigit(val) {
    return ('000' + (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["isPresent"])(val) ? val : '0')).slice(-4);
}
var FORMAT_YYYY = 'YYYY';
var FORMAT_YY = 'YY';
var FORMAT_MMMM = 'MMMM';
var FORMAT_MMM = 'MMM';
var FORMAT_MM = 'MM';
var FORMAT_M = 'M';
var FORMAT_DDDD = 'DDDD';
var FORMAT_DDD = 'DDD';
var FORMAT_DD = 'DD';
var FORMAT_D = 'D';
var FORMAT_HH = 'HH';
var FORMAT_H = 'H';
var FORMAT_hh = 'hh';
var FORMAT_h = 'h';
var FORMAT_mm = 'mm';
var FORMAT_m = 'm';
var FORMAT_A = 'A';
var FORMAT_a = 'a';
var FORMAT_KEYS = [{ f: FORMAT_YYYY, k: 'year' }, { f: FORMAT_MMMM, k: 'month' }, { f: FORMAT_DDDD, k: 'day' }, { f: FORMAT_MMM, k: 'month' }, { f: FORMAT_DDD, k: 'day' }, { f: FORMAT_YY, k: 'year' }, { f: FORMAT_MM, k: 'month' }, { f: FORMAT_DD, k: 'day' }, { f: FORMAT_HH, k: 'hour' }, { f: FORMAT_hh, k: 'hour' }, { f: FORMAT_mm, k: 'minute' }, { f: FORMAT_M, k: 'month' }, { f: FORMAT_D, k: 'day' }, { f: FORMAT_H, k: 'hour' }, { f: FORMAT_h, k: 'hour' }, { f: FORMAT_m, k: 'minute' }, { f: FORMAT_A, k: 'ampm' }, { f: FORMAT_a, k: 'ampm' }];
var FORMAT_REGEX = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|DD?D?D?|ddd?d?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|.)/g;
var DAY_NAMES = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var DAY_SHORT_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var MONTH_SHORT_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Debouncer; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Debouncer = function () {
    function Debouncer(wait) {
        _classCallCheck(this, Debouncer);

        this.wait = wait;
        this.timer = null;
    }

    _createClass(Debouncer, [{
        key: "debounce",
        value: function debounce(callback) {
            this.callback = callback;
            this.schedule();
        }
    }, {
        key: "schedule",
        value: function schedule() {
            if (this.timer) {
                clearTimeout(this.timer);
                this.timer = null;
            }
            if (this.wait <= 0) {
                this.callback();
            } else {
                this.timer = setTimeout(this.callback, this.wait);
            }
        }
    }]);

    return Debouncer;
}();

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "Events", function() { return Events; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * @name Events
 * @description
 * Events is a publish-subscribe style event system for sending and responding to application-level
 * events across your app.
 *
 * @usage
 * ```ts
 * import {Events} from 'ionic-angular';
 *
 * constructor(public events: Events) {}
 *
 * // first page (publish an event when a user is created)
 * function createUser(user) {
 *   console.log('User created!')
 *   events.publish('user:created', user);
 * }
 *
 * // second page (listen for the user created event)
 * events.subscribe('user:created', (userEventData) => {
 *   // userEventData is an array of parameters, so grab our first and only arg
 *   console.log('Welcome', userEventData[0]);
 * });
 *
 * ```
 * @demo /docs/v2/demos/events/
 */
var Events = function () {
    function Events() {
        _classCallCheck(this, Events);

        this._channels = [];
    }
    /**
     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
     *
     * @param {string} topic the topic to subscribe to
     * @param {function} handler the event handler
     */

    _createClass(Events, [{
        key: "subscribe",
        value: function subscribe(topic) {
            var _this = this;

            if (!this._channels[topic]) {
                this._channels[topic] = [];
            }

            for (var _len = arguments.length, handlers = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                handlers[_key - 1] = arguments[_key];
            }

            handlers.forEach(function (handler) {
                _this._channels[topic].push(handler);
            });
        }
        /**
         * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
         *
         * @param {string} topic the topic to unsubscribe from
         * @param {function} handler the event handler
         *
         * @return true if a handler was removed
         */

    }, {
        key: "unsubscribe",
        value: function unsubscribe(topic, handler) {
            var t = this._channels[topic];
            if (!t) {
                // Wasn't found, wasn't removed
                return false;
            }
            if (!handler) {
                // Remove all handlers for this topic
                delete this._channels[topic];
                return true;
            }
            // We need to find and remove a specific handler
            var i = t.indexOf(handler);
            if (i < 0) {
                // Wasn't found, wasn't removed
                return false;
            }
            t.splice(i, 1);
            // If the channel is empty now, remove it from the channel map
            if (!t.length) {
                delete this._channels[topic];
            }
            return true;
        }
        /**
         * Publish an event to the given topic.
         *
         * @param {string} topic the topic to publish to
         * @param {any} eventData the data to send as the event
         */

    }, {
        key: "publish",
        value: function publish(topic) {
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
            }

            var t = this._channels[topic];
            if (!t) {
                return null;
            }
            var responses = [];
            t.forEach(function (handler) {
                responses.push(handler(args));
            });
            return responses;
        }
    }]);

    return Events;
}();

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ScrollView; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}


var ScrollView = function () {
    function ScrollView(ele) {
        _classCallCheck(this, ScrollView);

        this._js = false;
        this._top = 0;
        this._el = ele;
    }

    _createClass(ScrollView, [{
        key: 'getTop',
        value: function getTop() {
            if (this._js) {
                return this._top;
            }
            return this._top = this._el.scrollTop;
        }
    }, {
        key: 'setTop',
        value: function setTop(top) {
            this._top = top;
            if (this._js) {
                this._el.style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transform] = 'translate3d(0px,' + top * -1 + 'px,0px)';
            } else {
                this._el.scrollTop = top;
            }
        }
    }, {
        key: 'scrollTo',
        value: function scrollTo(x, y, duration) {
            // scroll animation loop w/ easing
            // credit https://gist.github.com/dezinezync/5487119
            var self = this;
            if (!self._el) {
                // invalid element
                return Promise.resolve();
            }
            x = x || 0;
            y = y || 0;
            var fromY = self._el.scrollTop;
            var fromX = self._el.scrollLeft;
            var xDistance = Math.abs(x - fromX);
            var yDistance = Math.abs(y - fromY);
            var maxAttempts = duration / 16 + 100;
            return new Promise(function (resolve) {
                var startTime = void 0;
                var attempts = 0;
                // scroll loop
                function step() {
                    attempts++;
                    if (!self._el || !self.isPlaying || attempts > maxAttempts) {
                        self.isPlaying = false;
                        resolve();
                        return;
                    }
                    var time = Math.min(1, (Date.now() - startTime) / duration);
                    // where .5 would be 50% of time on a linear scale easedT gives a
                    // fraction based on the easing method
                    var easedT = --time * time * time + 1;
                    if (fromY !== y) {
                        self.setTop(easedT * (y - fromY) + fromY);
                    }
                    if (fromX !== x) {
                        self._el.scrollLeft = Math.floor(easedT * (x - fromX) + fromX);
                    }
                    if (easedT < 1) {
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeRaf"])(step);
                    } else {
                        // done
                        resolve();
                    }
                }
                // start scroll loop
                self.isPlaying = true;
                // chill out for a frame first
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeRaf"])(function () {
                    startTime = Date.now();
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeRaf"])(step);
                });
            });
        }
    }, {
        key: 'scrollToTop',
        value: function scrollToTop(duration) {
            return this.scrollTo(0, 0, duration);
        }
    }, {
        key: 'scrollToBottom',
        value: function scrollToBottom(duration) {
            var y = 0;
            if (this._el) {
                y = this._el.scrollHeight - this._el.clientHeight;
            }
            return this.scrollTo(0, y, duration);
        }
    }, {
        key: 'stop',
        value: function stop() {
            this.isPlaying = false;
        }
        /**
         * @private
         * JS Scrolling has been provided only as a temporary solution
         * until iOS apps can take advantage of scroll events at all times.
         * The goal is to eventually remove JS scrolling entirely. This
         * method may be removed in the future.
         */

    }, {
        key: 'jsScroll',
        value: function jsScroll(onScrollCallback) {
            var _this = this;

            this._js = true;
            this._cb = onScrollCallback;
            this._pos = [];
            if (this._el) {
                this._el.addEventListener('touchstart', this._start.bind(this));
                this._el.addEventListener('touchmove', this._move.bind(this));
                this._el.addEventListener('touchend', this._end.bind(this));
                this._el.parentElement.classList.add('js-scroll');
            }
            return function () {
                if (_this._el) {
                    _this._el.removeEventListener('touchstart', _this._start.bind(_this));
                    _this._el.removeEventListener('touchmove', _this._move.bind(_this));
                    _this._el.removeEventListener('touchend', _this._end.bind(_this));
                    _this._el.parentElement.classList.remove('js-scroll');
                }
            };
        }
        /**
         * @private
         * Used for JS scrolling. May be removed in the future.
         */

    }, {
        key: '_start',
        value: function _start(ev) {
            this._velocity = 0;
            this._pos.length = 0;
            this._max = null;
            this._pos.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["pointerCoord"])(ev).y, Date.now());
        }
        /**
         * @private
         * Used for JS scrolling. May be removed in the future.
         */

    }, {
        key: '_move',
        value: function _move(ev) {
            if (this._pos.length) {
                var y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["pointerCoord"])(ev).y;
                // ******** DOM READ ****************
                this._setMax();
                this._top -= y - this._pos[this._pos.length - 2];
                this._top = Math.min(Math.max(this._top, 0), this._max);
                this._pos.push(y, Date.now());
                // ******** DOM READ THEN DOM WRITE ****************
                this._cb(this._top);
                // ******** DOM WRITE ****************
                this.setTop(this._top);
            }
        }
        /**
         * @private
         * Used for JS scrolling. May be removed in the future.
         */

    }, {
        key: '_setMax',
        value: function _setMax() {
            if (!this._max) {
                // ******** DOM READ ****************
                this._max = this._el.offsetHeight - this._el.parentElement.offsetHeight + this._el.parentElement.offsetTop;
            }
        }
        /**
         * @private
         * Used for JS scrolling. May be removed in the future.
         */

    }, {
        key: '_end',
        value: function _end(ev) {
            // figure out what the scroll position was about 100ms ago
            var positions = this._pos;
            this._velocity = 0;
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["cancelRaf"])(this._rafId);
            if (!positions.length) return;
            var y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["pointerCoord"])(ev).y;
            positions.push(y, Date.now());
            var endPos = positions.length - 1;
            var startPos = endPos;
            var timeRange = Date.now() - 100;
            // move pointer to position measured 100ms ago
            for (var i = endPos; i > 0 && positions[i] > timeRange; i -= 2) {
                startPos = i;
            }
            if (startPos !== endPos) {
                // compute relative movement between these two points
                var timeOffset = positions[endPos] - positions[startPos];
                var movedTop = positions[startPos - 1] - positions[endPos - 1];
                // based on XXms compute the movement to apply for each render step
                this._velocity = movedTop / timeOffset * FRAME_MS;
                // verify that we have enough velocity to start deceleration
                if (Math.abs(this._velocity) > MIN_VELOCITY_START_DECELERATION) {
                    // ******** DOM READ ****************
                    this._setMax();
                    this._rafId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeRaf"])(this._decelerate.bind(this));
                }
            }
            positions.length = 0;
        }
        /**
         * @private
         * Used for JS scrolling. May be removed in the future.
         */

    }, {
        key: '_decelerate',
        value: function _decelerate() {
            var self = this;
            if (self._velocity) {
                self._velocity *= DECELERATION_FRICTION;
                // update top with updated velocity
                // clamp top within scroll limits
                self._top = Math.min(Math.max(self._top + self._velocity, 0), self._max);
                // ******** DOM READ THEN DOM WRITE ****************
                self._cb(self._top);
                // ******** DOM WRITE ****************
                self.setTop(self._top);
                if (self._top > 0 && self._top < self._max && Math.abs(self._velocity) > MIN_VELOCITY_CONTINUE_DECELERATION) {
                    self._rafId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_dom__["nativeRaf"])(self._decelerate.bind(self));
                }
            }
        }
        /**
         * @private
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this._velocity = 0;
            this.stop();
            this._el = null;
        }
    }]);

    return ScrollView;
}();
var MAX_VELOCITY = 150;
var MIN_VELOCITY_START_DECELERATION = 4;
var MIN_VELOCITY_CONTINUE_DECELERATION = 0.12;
var DECELERATION_FRICTION = 0.97;
var FRAME_MS = 1000 / 60;

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gesture_1 = __webpack_require__(508);
var util_1 = __webpack_require__(209);
/**
 * @private
 */
var DragGesture = function (_super) {
    __extends(DragGesture, _super);
    function DragGesture(element, opts) {
        if (opts === void 0) {
            opts = {};
        }
        util_1.defaults(opts, {});
        _super.call(this, element, opts);
    }
    DragGesture.prototype.listen = function () {
        var _this = this;
        _super.prototype.listen.call(this);
        this.on('panstart', function (ev) {
            if (_this.onDragStart(ev) !== false) {
                _this.dragging = true;
            }
        });
        this.on('panmove', function (ev) {
            if (!_this.dragging) return;
            if (_this.onDrag(ev) === false) {
                _this.dragging = false;
            }
        });
        this.on('panend', function (ev) {
            if (!_this.dragging) return;
            _this.onDragEnd(ev);
            _this.dragging = false;
        });
    };
    DragGesture.prototype.onDrag = function (ev) {
        return true;
    };
    DragGesture.prototype.onDragStart = function (ev) {
        return true;
    };
    DragGesture.prototype.onDragEnd = function (ev) {};
    return DragGesture;
}(gesture_1.Gesture);
exports.DragGesture = DragGesture;

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var util_1 = __webpack_require__(209);
var hammer_1 = __webpack_require__(926);
/**
 * @private
 * A gesture recognizer class.
 *
 * TODO(mlynch): Re-enable the DOM event simulation that was causing issues (or verify hammer does this already, it might);
 */
var Gesture = function () {
    function Gesture(element, opts) {
        if (opts === void 0) {
            opts = {};
        }
        this._callbacks = {};
        this.isListening = false;
        util_1.defaults(opts, {
            domEvents: true
        });
        this.element = element;
        // Map 'x' or 'y' string to hammerjs opts
        this.direction = opts.direction || 'x';
        opts.direction = this.direction === 'x' ? hammer_1.DIRECTION_HORIZONTAL : hammer_1.DIRECTION_VERTICAL;
        this._options = opts;
    }
    Gesture.prototype.options = function (opts) {
        util_1.assign(this._options, opts);
    };
    Gesture.prototype.on = function (type, cb) {
        if (type === 'pinch' || type === 'rotate') {
            this._hammer.get('pinch').set({ enable: true });
        }
        this._hammer.on(type, cb);
        (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
    };
    Gesture.prototype.off = function (type, cb) {
        this._hammer.off(type, this._callbacks[type] ? cb : null);
    };
    Gesture.prototype.listen = function () {
        if (!this.isListening) {
            this._hammer = hammer_1.Hammer(this.element, this._options);
        }
        this.isListening = true;
    };
    Gesture.prototype.unlisten = function () {
        var eventType;
        var i;
        if (this._hammer && this.isListening) {
            for (eventType in this._callbacks) {
                for (i = 0; i < this._callbacks[eventType].length; i++) {
                    this._hammer.off(eventType, this._callbacks[eventType]);
                }
            }
            this._hammer.destroy();
        }
        this._callbacks = {};
        this._hammer = null;
        this.isListening = false;
    };
    Gesture.prototype.destroy = function () {
        this.unlisten();
        this.element = this._options = null;
    };
    return Gesture;
}();
exports.Gesture = Gesture;

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var slide_gesture_1 = __webpack_require__(927);
var util_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(17);
var SlideEdgeGesture = function (_super) {
    __extends(SlideEdgeGesture, _super);
    function SlideEdgeGesture(element, opts) {
        if (opts === void 0) {
            opts = {};
        }
        util_1.defaults(opts, {
            edge: 'left',
            maxEdgeStart: 50
        });
        _super.call(this, element, opts);
        // Can check corners through use of eg 'left top'
        this.edges = opts.edge.split(' ');
        this.maxEdgeStart = opts.maxEdgeStart;
    }
    SlideEdgeGesture.prototype.canStart = function (ev) {
        var _this = this;
        this._d = this.getContainerDimensions();
        return this.edges.every(function (edge) {
            return _this._checkEdge(edge, ev.center);
        });
    };
    SlideEdgeGesture.prototype.getContainerDimensions = function () {
        return {
            left: 0,
            top: 0,
            width: dom_1.windowDimensions().width,
            height: dom_1.windowDimensions().height
        };
    };
    SlideEdgeGesture.prototype._checkEdge = function (edge, pos) {
        switch (edge) {
            case 'left':
                return pos.x <= this._d.left + this.maxEdgeStart;
            case 'right':
                return pos.x >= this._d.width - this.maxEdgeStart;
            case 'top':
                return pos.y <= this._d.top + this.maxEdgeStart;
            case 'bottom':
                return pos.y >= this._d.height - this.maxEdgeStart;
        }
    };
    return SlideEdgeGesture;
}(slide_gesture_1.SlideGesture);
exports.SlideEdgeGesture = SlideEdgeGesture;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var dom_1 = __webpack_require__(17);
var CSS_CLICK_BLOCK = 'click-block-active';
var DEFAULT_EXPIRE = 330;
var cbEle;
var fallbackTimerId;
var isShowing = false;
/**
 * @private
 */
var ClickBlock = function () {
    function ClickBlock() {
        this._enabled = false;
    }
    ClickBlock.prototype.enable = function () {
        cbEle = document.createElement('click-block');
        document.body.appendChild(cbEle);
        cbEle.addEventListener('touchmove', function (ev) {
            ev.preventDefault();
            ev.stopPropagation();
        });
        this._enabled = true;
    };
    ClickBlock.prototype.show = function (shouldShow, expire) {
        if (this._enabled) {
            if (shouldShow) {
                show(expire);
            } else {
                hide();
            }
        }
    };
    return ClickBlock;
}();
exports.ClickBlock = ClickBlock;
function show(expire) {
    clearTimeout(fallbackTimerId);
    fallbackTimerId = dom_1.nativeTimeout(hide, expire || DEFAULT_EXPIRE);
    if (!isShowing) {
        cbEle.classList.add(CSS_CLICK_BLOCK);
        isShowing = true;
    }
}
function hide() {
    clearTimeout(fallbackTimerId);
    if (isShowing) {
        cbEle.classList.remove(CSS_CLICK_BLOCK);
        isShowing = false;
    }
}

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var util_1 = __webpack_require__(7);
function renderDateTime(template, value, locale) {
    if (util_1.isBlank(value)) {
        return '';
    }
    var tokens = [];
    var hasText = false;
    FORMAT_KEYS.forEach(function (format, index) {
        if (template.indexOf(format.f) > -1) {
            var token = '{' + index + '}';
            var text = renderTextFormat(format.f, value[format.k], value, locale);
            if (!hasText && text && util_1.isPresent(value[format.k])) {
                hasText = true;
            }
            tokens.push(token, text);
            template = template.replace(format.f, token);
        }
    });
    if (!hasText) {
        return '';
    }
    for (var i = 0; i < tokens.length; i += 2) {
        template = template.replace(tokens[i], tokens[i + 1]);
    }
    return template;
}
exports.renderDateTime = renderDateTime;
function renderTextFormat(format, value, date, locale) {
    if (format === FORMAT_DDDD || format === FORMAT_DDD) {
        try {
            value = new Date(date.year, date.month - 1, date.day).getDay();
            if (format === FORMAT_DDDD) {
                return (util_1.isPresent(locale.dayNames) ? locale.dayNames : DAY_NAMES)[value];
            }
            return (util_1.isPresent(locale.dayShortNames) ? locale.dayShortNames : DAY_SHORT_NAMES)[value];
        } catch (e) {}
        return '';
    }
    if (format === FORMAT_A) {
        return date ? date.hour < 12 ? 'AM' : 'PM' : util_1.isPresent(value) ? value.toUpperCase() : '';
    }
    if (format === FORMAT_a) {
        return date ? date.hour < 12 ? 'am' : 'pm' : util_1.isPresent(value) ? value : '';
    }
    if (util_1.isBlank(value)) {
        return '';
    }
    if (format === FORMAT_YY || format === FORMAT_MM || format === FORMAT_DD || format === FORMAT_HH || format === FORMAT_mm) {
        return twoDigit(value);
    }
    if (format === FORMAT_YYYY) {
        return fourDigit(value);
    }
    if (format === FORMAT_MMMM) {
        return (util_1.isPresent(locale.monthNames) ? locale.monthNames : MONTH_NAMES)[value - 1];
    }
    if (format === FORMAT_MMM) {
        return (util_1.isPresent(locale.monthShortNames) ? locale.monthShortNames : MONTH_SHORT_NAMES)[value - 1];
    }
    if (format === FORMAT_hh || format === FORMAT_h) {
        if (value === 0) {
            return '12';
        }
        if (value > 12) {
            value -= 12;
        }
        if (format === FORMAT_hh && value < 10) {
            return '0' + value;
        }
    }
    return value.toString();
}
exports.renderTextFormat = renderTextFormat;
function dateValueRange(format, min, max) {
    var opts = [];
    var i;
    if (format === FORMAT_YYYY || format === FORMAT_YY) {
        // year
        i = max.year;
        while (i >= min.year) {
            opts.push(i--);
        }
    } else if (format === FORMAT_MMMM || format === FORMAT_MMM || format === FORMAT_MM || format === FORMAT_M || format === FORMAT_hh || format === FORMAT_h) {
        // month or 12-hour
        for (i = 1; i < 13; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_DDDD || format === FORMAT_DDD || format === FORMAT_DD || format === FORMAT_D) {
        // day
        for (i = 1; i < 32; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_HH || format === FORMAT_H) {
        // 24-hour
        for (i = 0; i < 24; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_mm || format === FORMAT_m) {
        // minutes
        for (i = 0; i < 60; i++) {
            opts.push(i);
        }
    } else if (format === FORMAT_A || format === FORMAT_a) {
        // AM/PM
        opts.push('am', 'pm');
    }
    return opts;
}
exports.dateValueRange = dateValueRange;
function dateSortValue(year, month, day) {
    return parseInt("1" + fourDigit(year) + twoDigit(month) + twoDigit(day), 10);
}
exports.dateSortValue = dateSortValue;
function dateDataSortValue(data) {
    if (data) {
        return dateSortValue(data.year, data.month, data.day);
    }
    return -1;
}
exports.dateDataSortValue = dateDataSortValue;
function daysInMonth(month, year) {
    return month === 4 || month === 6 || month === 9 || month === 11 ? 30 : month === 2 ? isLeapYear(year) ? 29 : 28 : 31;
}
exports.daysInMonth = daysInMonth;
function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
exports.isLeapYear = isLeapYear;
var ISO_8601_REGEXP = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
var TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
function parseDate(val) {
    // manually parse IS0 cuz Date.parse cannot be trusted
    // ISO 8601 format: 1994-12-15T13:47:20Z
    var parse;
    if (util_1.isPresent(val) && val !== '') {
        // try parsing for just time first, HH:MM
        parse = TIME_REGEXP.exec(val);
        if (util_1.isPresent(parse)) {
            // adjust the array so it fits nicely with the datetime parse
            parse.unshift(undefined, undefined);
            parse[2] = parse[3] = undefined;
        } else {
            // try parsing for full ISO datetime
            parse = ISO_8601_REGEXP.exec(val);
        }
    }
    if (util_1.isBlank(parse)) {
        // wasn't able to parse the ISO datetime
        return null;
    }
    // ensure all the parse values exist with at least 0
    for (var i = 1; i < 8; i++) {
        parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : null;
    }
    var tzOffset = 0;
    if (util_1.isPresent(parse[9]) && util_1.isPresent(parse[10])) {
        // hours
        tzOffset = parseInt(parse[10], 10) * 60;
        if (util_1.isPresent(parse[11])) {
            // minutes
            tzOffset += parseInt(parse[11], 10);
        }
        if (parse[9] === '-') {
            // + or -
            tzOffset *= -1;
        }
    }
    return {
        year: parse[1],
        month: parse[2],
        day: parse[3],
        hour: parse[4],
        minute: parse[5],
        second: parse[6],
        millisecond: parse[7],
        tzOffset: tzOffset
    };
}
exports.parseDate = parseDate;
function updateDate(existingData, newData) {
    if (util_1.isPresent(newData) && newData !== '') {
        if (util_1.isString(newData)) {
            // new date is a string, and hopefully in the ISO format
            // convert it to our DateTimeData if a valid ISO
            newData = parseDate(newData);
            if (newData) {
                // successfully parsed the ISO string to our DateTimeData
                util_1.assign(existingData, newData);
                return;
            }
        } else if (util_1.isPresent(newData.year) || util_1.isPresent(newData.hour)) {
            // newData is from of a datetime picker's selected values
            // update the existing DateTimeData data with the new values
            // do some magic for 12-hour values
            if (util_1.isPresent(newData.ampm) && util_1.isPresent(newData.hour)) {
                if (newData.ampm.value === 'pm') {
                    newData.hour.value = newData.hour.value === 12 ? 12 : newData.hour.value + 12;
                } else {
                    newData.hour.value = newData.hour.value === 12 ? 0 : newData.hour.value;
                }
            }
            // merge new values from the picker's selection
            // to the existing DateTimeData values
            for (var k in newData) {
                existingData[k] = newData[k].value;
            }
            return;
        }
        // eww, invalid data
        console.warn("Error parsing date: \"" + newData + "\". Please provide a valid ISO 8601 datetime format: https://www.w3.org/TR/NOTE-datetime");
    } else {
        // blank data, clear everything out
        for (var k in existingData) {
            delete existingData[k];
        }
    }
}
exports.updateDate = updateDate;
function parseTemplate(template) {
    var formats = [];
    template = template.replace(/[^\w\s]/gi, ' ');
    FORMAT_KEYS.forEach(function (format) {
        if (format.f.length > 1 && template.indexOf(format.f) > -1 && template.indexOf(format.f + format.f.charAt(0)) < 0) {
            template = template.replace(format.f, ' ' + format.f + ' ');
        }
    });
    var words = template.split(' ').filter(function (w) {
        return w.length > 0;
    });
    words.forEach(function (word, i) {
        FORMAT_KEYS.forEach(function (format) {
            if (word === format.f) {
                if (word === FORMAT_A || word === FORMAT_a) {
                    // this format is an am/pm format, so it's an "a" or "A"
                    if (formats.indexOf(FORMAT_h) < 0 && formats.indexOf(FORMAT_hh) < 0 || words[i - 1] !== FORMAT_m && words[i - 1] !== FORMAT_mm) {
                        // template does not already have a 12-hour format
                        // or this am/pm format doesn't have a minute format immediately before it
                        // so do not treat this word "a" or "A" as an am/pm format
                        return;
                    }
                }
                formats.push(word);
            }
        });
    });
    return formats;
}
exports.parseTemplate = parseTemplate;
function getValueFromFormat(date, format) {
    if (format === FORMAT_A || format === FORMAT_a) {
        return date.hour < 12 ? 'am' : 'pm';
    }
    if (format === FORMAT_hh || format === FORMAT_h) {
        return date.hour > 12 ? date.hour - 12 : date.hour;
    }
    return date[convertFormatToKey(format)];
}
exports.getValueFromFormat = getValueFromFormat;
function convertFormatToKey(format) {
    for (var k in FORMAT_KEYS) {
        if (FORMAT_KEYS[k].f === format) {
            return FORMAT_KEYS[k].k;
        }
    }
    return null;
}
exports.convertFormatToKey = convertFormatToKey;
function convertDataToISO(data) {
    // https://www.w3.org/TR/NOTE-datetime
    var rtn = '';
    if (util_1.isPresent(data)) {
        if (util_1.isPresent(data.year)) {
            // YYYY
            rtn = fourDigit(data.year);
            if (util_1.isPresent(data.month)) {
                // YYYY-MM
                rtn += '-' + twoDigit(data.month);
                if (util_1.isPresent(data.day)) {
                    // YYYY-MM-DD
                    rtn += '-' + twoDigit(data.day);
                    if (util_1.isPresent(data.hour)) {
                        // YYYY-MM-DDTHH:mm:SS
                        rtn += "T" + twoDigit(data.hour) + ":" + twoDigit(data.minute) + ":" + twoDigit(data.second);
                        if (data.millisecond > 0) {
                            // YYYY-MM-DDTHH:mm:SS.SSS
                            rtn += '.' + threeDigit(data.millisecond);
                        }
                        if (util_1.isBlank(data.tzOffset) || data.tzOffset === 0) {
                            // YYYY-MM-DDTHH:mm:SSZ
                            rtn += 'Z';
                        } else {
                            // YYYY-MM-DDTHH:mm:SS+/-HH:mm
                            rtn += (data.tzOffset > 0 ? '+' : '-') + twoDigit(Math.floor(data.tzOffset / 60)) + ':' + twoDigit(data.tzOffset % 60);
                        }
                    }
                }
            }
        } else if (util_1.isPresent(data.hour)) {
            // HH:mm
            rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
            if (util_1.isPresent(data.second)) {
                // HH:mm:SS
                rtn += ':' + twoDigit(data.second);
                if (util_1.isPresent(data.millisecond)) {
                    // HH:mm:SS.SSS
                    rtn += '.' + threeDigit(data.millisecond);
                }
            }
        }
    }
    return rtn;
}
exports.convertDataToISO = convertDataToISO;
function twoDigit(val) {
    return ('0' + (util_1.isPresent(val) ? val : '0')).slice(-2);
}
function threeDigit(val) {
    return ('00' + (util_1.isPresent(val) ? val : '0')).slice(-3);
}
function fourDigit(val) {
    return ('000' + (util_1.isPresent(val) ? val : '0')).slice(-4);
}
var FORMAT_YYYY = 'YYYY';
var FORMAT_YY = 'YY';
var FORMAT_MMMM = 'MMMM';
var FORMAT_MMM = 'MMM';
var FORMAT_MM = 'MM';
var FORMAT_M = 'M';
var FORMAT_DDDD = 'DDDD';
var FORMAT_DDD = 'DDD';
var FORMAT_DD = 'DD';
var FORMAT_D = 'D';
var FORMAT_HH = 'HH';
var FORMAT_H = 'H';
var FORMAT_hh = 'hh';
var FORMAT_h = 'h';
var FORMAT_mm = 'mm';
var FORMAT_m = 'm';
var FORMAT_A = 'A';
var FORMAT_a = 'a';
var FORMAT_KEYS = [{ f: FORMAT_YYYY, k: 'year' }, { f: FORMAT_MMMM, k: 'month' }, { f: FORMAT_DDDD, k: 'day' }, { f: FORMAT_MMM, k: 'month' }, { f: FORMAT_DDD, k: 'day' }, { f: FORMAT_YY, k: 'year' }, { f: FORMAT_MM, k: 'month' }, { f: FORMAT_DD, k: 'day' }, { f: FORMAT_HH, k: 'hour' }, { f: FORMAT_hh, k: 'hour' }, { f: FORMAT_mm, k: 'minute' }, { f: FORMAT_M, k: 'month' }, { f: FORMAT_D, k: 'day' }, { f: FORMAT_H, k: 'hour' }, { f: FORMAT_h, k: 'hour' }, { f: FORMAT_m, k: 'minute' }, { f: FORMAT_A, k: 'ampm' }, { f: FORMAT_a, k: 'ampm' }];
var FORMAT_REGEX = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|DD?D?D?|ddd?d?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|.)/g;
var DAY_NAMES = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var DAY_SHORT_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var MONTH_SHORT_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

/***/ },
/* 512 */
/***/ function(module, exports) {

"use strict";
"use strict";

var Debouncer = function () {
    function Debouncer(wait) {
        this.wait = wait;
        this.timer = null;
    }
    Debouncer.prototype.debounce = function (callback) {
        this.callback = callback;
        this.schedule();
    };
    Debouncer.prototype.schedule = function () {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        if (this.wait <= 0) {
            this.callback();
        } else {
            this.timer = setTimeout(this.callback, this.wait);
        }
    };
    return Debouncer;
}();
exports.Debouncer = Debouncer;

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var dom_1 = __webpack_require__(17);
var ScrollView = function () {
    function ScrollView(ele) {
        this._js = false;
        this._top = 0;
        this._el = ele;
    }
    ScrollView.prototype.getTop = function () {
        if (this._js) {
            return this._top;
        }
        return this._top = this._el.scrollTop;
    };
    ScrollView.prototype.setTop = function (top) {
        this._top = top;
        if (this._js) {
            this._el.style[dom_1.CSS.transform] = "translate3d(0px," + top * -1 + "px,0px)";
        } else {
            this._el.scrollTop = top;
        }
    };
    ScrollView.prototype.scrollTo = function (x, y, duration) {
        // scroll animation loop w/ easing
        // credit https://gist.github.com/dezinezync/5487119
        var self = this;
        if (!self._el) {
            // invalid element
            return Promise.resolve();
        }
        x = x || 0;
        y = y || 0;
        var fromY = self._el.scrollTop;
        var fromX = self._el.scrollLeft;
        var xDistance = Math.abs(x - fromX);
        var yDistance = Math.abs(y - fromY);
        var maxAttempts = duration / 16 + 100;
        return new Promise(function (resolve) {
            var startTime;
            var attempts = 0;
            // scroll loop
            function step() {
                attempts++;
                if (!self._el || !self.isPlaying || attempts > maxAttempts) {
                    self.isPlaying = false;
                    resolve();
                    return;
                }
                var time = Math.min(1, (Date.now() - startTime) / duration);
                // where .5 would be 50% of time on a linear scale easedT gives a
                // fraction based on the easing method
                var easedT = --time * time * time + 1;
                if (fromY !== y) {
                    self.setTop(easedT * (y - fromY) + fromY);
                }
                if (fromX !== x) {
                    self._el.scrollLeft = Math.floor(easedT * (x - fromX) + fromX);
                }
                if (easedT < 1) {
                    dom_1.nativeRaf(step);
                } else {
                    // done
                    resolve();
                }
            }
            // start scroll loop
            self.isPlaying = true;
            // chill out for a frame first
            dom_1.nativeRaf(function () {
                startTime = Date.now();
                dom_1.nativeRaf(step);
            });
        });
    };
    ScrollView.prototype.scrollToTop = function (duration) {
        return this.scrollTo(0, 0, duration);
    };
    ScrollView.prototype.scrollToBottom = function (duration) {
        var y = 0;
        if (this._el) {
            y = this._el.scrollHeight - this._el.clientHeight;
        }
        return this.scrollTo(0, y, duration);
    };
    ScrollView.prototype.stop = function () {
        this.isPlaying = false;
    };
    /**
     * @private
     * JS Scrolling has been provided only as a temporary solution
     * until iOS apps can take advantage of scroll events at all times.
     * The goal is to eventually remove JS scrolling entirely. This
     * method may be removed in the future.
     */
    ScrollView.prototype.jsScroll = function (onScrollCallback) {
        var _this = this;
        this._js = true;
        this._cb = onScrollCallback;
        this._pos = [];
        if (this._el) {
            this._el.addEventListener('touchstart', this._start.bind(this));
            this._el.addEventListener('touchmove', this._move.bind(this));
            this._el.addEventListener('touchend', this._end.bind(this));
            this._el.parentElement.classList.add('js-scroll');
        }
        return function () {
            if (_this._el) {
                _this._el.removeEventListener('touchstart', _this._start.bind(_this));
                _this._el.removeEventListener('touchmove', _this._move.bind(_this));
                _this._el.removeEventListener('touchend', _this._end.bind(_this));
                _this._el.parentElement.classList.remove('js-scroll');
            }
        };
    };
    /**
     * @private
     * Used for JS scrolling. May be removed in the future.
     */
    ScrollView.prototype._start = function (ev) {
        this._velocity = 0;
        this._pos.length = 0;
        this._max = null;
        this._pos.push(dom_1.pointerCoord(ev).y, Date.now());
    };
    /**
     * @private
     * Used for JS scrolling. May be removed in the future.
     */
    ScrollView.prototype._move = function (ev) {
        if (this._pos.length) {
            var y = dom_1.pointerCoord(ev).y;
            // ******** DOM READ ****************
            this._setMax();
            this._top -= y - this._pos[this._pos.length - 2];
            this._top = Math.min(Math.max(this._top, 0), this._max);
            this._pos.push(y, Date.now());
            // ******** DOM READ THEN DOM WRITE ****************
            this._cb(this._top);
            // ******** DOM WRITE ****************
            this.setTop(this._top);
        }
    };
    /**
     * @private
     * Used for JS scrolling. May be removed in the future.
     */
    ScrollView.prototype._setMax = function () {
        if (!this._max) {
            // ******** DOM READ ****************
            this._max = this._el.offsetHeight - this._el.parentElement.offsetHeight + this._el.parentElement.offsetTop;
        }
    };
    /**
     * @private
     * Used for JS scrolling. May be removed in the future.
     */
    ScrollView.prototype._end = function (ev) {
        // figure out what the scroll position was about 100ms ago
        var positions = this._pos;
        this._velocity = 0;
        dom_1.cancelRaf(this._rafId);
        if (!positions.length) return;
        var y = dom_1.pointerCoord(ev).y;
        positions.push(y, Date.now());
        var endPos = positions.length - 1;
        var startPos = endPos;
        var timeRange = Date.now() - 100;
        // move pointer to position measured 100ms ago
        for (var i = endPos; i > 0 && positions[i] > timeRange; i -= 2) {
            startPos = i;
        }
        if (startPos !== endPos) {
            // compute relative movement between these two points
            var timeOffset = positions[endPos] - positions[startPos];
            var movedTop = positions[startPos - 1] - positions[endPos - 1];
            // based on XXms compute the movement to apply for each render step
            this._velocity = movedTop / timeOffset * FRAME_MS;
            // verify that we have enough velocity to start deceleration
            if (Math.abs(this._velocity) > MIN_VELOCITY_START_DECELERATION) {
                // ******** DOM READ ****************
                this._setMax();
                this._rafId = dom_1.nativeRaf(this._decelerate.bind(this));
            }
        }
        positions.length = 0;
    };
    /**
     * @private
     * Used for JS scrolling. May be removed in the future.
     */
    ScrollView.prototype._decelerate = function () {
        var self = this;
        if (self._velocity) {
            self._velocity *= DECELERATION_FRICTION;
            // update top with updated velocity
            // clamp top within scroll limits
            self._top = Math.min(Math.max(self._top + self._velocity, 0), self._max);
            // ******** DOM READ THEN DOM WRITE ****************
            self._cb(self._top);
            // ******** DOM WRITE ****************
            self.setTop(self._top);
            if (self._top > 0 && self._top < self._max && Math.abs(self._velocity) > MIN_VELOCITY_CONTINUE_DECELERATION) {
                self._rafId = dom_1.nativeRaf(self._decelerate.bind(self));
            }
        }
    };
    /**
     * @private
     */
    ScrollView.prototype.destroy = function () {
        this._velocity = 0;
        this.stop();
        this._el = null;
    };
    return ScrollView;
}();
exports.ScrollView = ScrollView;
var MAX_VELOCITY = 150;
var MIN_VELOCITY_START_DECELERATION = 4;
var MIN_VELOCITY_CONTINUE_DECELERATION = 0.12;
var DECELERATION_FRICTION = 0.97;
var FRAME_MS = 1000 / 60;

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name 3DTouch
 * @description
 * @usage
 * Please do refer to the original plugin's repo for detailed usage. The usage example here might not be sufficient.
 * ```
 * import {ThreeDeeTouch, ThreeDeeTouchQuickAction, ThreeDeeTouchForceTouch} from 'ionic-native';
 *
 * ...
 *
 * ThreeDeeTouch.isAvailable().then(isAvailable => console.log("3D Touch available? " + isAvailable)):
 *
 * ThreeDeeTouch.watchForceTouches()
 *   .subscribe(
 *     (data: ThreeDeeTouchForceTouch) => {
 *       console.log("Force touch %" + data.force);
 *       console.log("Force touch timestamp: " + data.timestamp);
 *       console.log("Force touch x: " + data.x);
 *       console.log("Force touch y: " + data.y);
 *     }
 *   );
 *
 *
 * let actions: Array<ThreeDeeTouchQuickAction> = [
 *   {
 *     type: 'checkin',
 *     title: 'Check in',
 *     subtitle: 'Quickly check in',
 *     iconType: 'Compose'
 *   },
 *   {
 *     type: 'share',
 *     title: 'Share',
 *     subtitle: 'Share like you care',
 *     iconType: 'Share'
 *   },
 *   {
 *     type: 'search',
 *     title: 'Search',
 *     iconType: 'Search'
 *   },
 *   {
 *     title: 'Show favorites',
 *     iconTemplate: 'HeartTemplate'
 *   }
 * ];
 * ThreeDeeTouch.configureQuickActions(actions);
 * ```
 */
var ThreeDeeTouch = function () {
    function ThreeDeeTouch() {}
    /**
     * You need an iPhone 6S or some future tech to use the features of this plugin, so you can check at runtime if the user's device is supported.
     * @returns {Promise<boolean>} returns a promise that resolves with a boolean that indicates whether the plugin is available or not
     */
    ThreeDeeTouch.isAvailable = function () {
        return;
    };
    /**
     * You can get a notification when the user force touches the webview. The plugin defines a Force Touch when at least 75% of the maximum force is applied to the screen. Your app will receive the x and y coordinates, so you have to figure out which UI element was touched.
     * @returns {Observable<ThreeDeeTouchForceTouch>} Returns an observable that sends a `ThreeDeeTouchForceTouch` object
     */
    ThreeDeeTouch.watchForceTouches = function () {
        return;
    };
    ThreeDeeTouch.configureQuickActions = function (quickActions) {};
    /**
     * When a home icon is pressed, your app launches and this JS callback is invoked.
     * @returns {Observable<any>} returns an observable that notifies you when he user presses on the home screen icon
     */
    ThreeDeeTouch.onHomeIconPressed = function () {
        return;
    };
    /**
     * UIWebView and WKWebView (the webviews powering Cordova apps) don't allow the fancy new link preview feature of iOS9.
     */
    ThreeDeeTouch.enableLinkPreview = function () {};
    /**
     * Disabled the link preview feature, if enabled.
     */
    ThreeDeeTouch.disableLinkPreview = function () {};
    __decorate([plugin_1.Cordova()], ThreeDeeTouch, "isAvailable", null);
    __decorate([plugin_1.Cordova({
        observable: true
    })], ThreeDeeTouch, "watchForceTouches", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], ThreeDeeTouch, "configureQuickActions", null);
    __decorate([plugin_1.Cordova({
        observable: true
    })], ThreeDeeTouch, "onHomeIconPressed", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], ThreeDeeTouch, "enableLinkPreview", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], ThreeDeeTouch, "disableLinkPreview", null);
    ThreeDeeTouch = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-3dtouch',
        pluginRef: 'ThreeDeeTouch',
        repo: 'https://github.com/EddyVerbruggen/cordova-plugin-3dtouch',
        platforms: ['iOS']
    })], ThreeDeeTouch);
    return ThreeDeeTouch;
}();
exports.ThreeDeeTouch = ThreeDeeTouch;
//# sourceMappingURL=3dtouch.js.map

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name BackgroundGeolocation
 * @description
 * This plugin provides foreground and background geolocation with battery-saving "circular region monitoring" and "stop detection". For
 * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation
 *
 * @usage
 *
 * ```ts
 * import {BackgroundGeolocation} from 'ionic-native';
 *
 *
 *
 * // When device is ready :
 * platform.ready().then(() => {
 *
 *     // BackgroundGeolocation is highly configurable. See platform specific configuration options
 *     let config = {
 *             desiredAccuracy: 10,
 *             stationaryRadius: 20,
 *             distanceFilter: 30,
 *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.
 *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates
 *     };
 *
 *     BackgroundGeolocation.configure(config)
 *        .then((location) => {
 *             console.log('[js] BackgroundGeolocation callback:  ' + location.latitude + ',' + location.longitude);
 *
 *             // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,
 *             // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.
 *             // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.
 *             BackgroundGeolocation.finish(); // FOR IOS ONLY
 *         })
 *        .catch((error) => {
 *             console.log('BackgroundGeolocation error');
 *         });
 *
 *     // Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.
 *     BackgroundGeolocation.start();
 * }
 *
 * // If you wish to turn OFF background-tracking, call the #stop method.
 * BackgroundGeolocation.stop();
 *
 * ```
 */
var BackgroundGeolocation = function () {
    function BackgroundGeolocation() {}
    /**
     * Configure the plugin.
     * Success callback will be called with one argument - Location object, which tries to mimic w3c Coordinates interface.
     * See http://dev.w3.org/geo/api/spec-source.html#coordinates_interface
     * Callback to be executed every time a geolocation is recorded in the background.
     *
     * Fail callback to be executed every time a geolocation error occurs.
     *
     * Options a json object of type Config
     */
    BackgroundGeolocation.configure = function (options) {
        return;
    };
    /**
     * Turn ON the background-geolocation system.
     * The user will be tracked whenever they suspend the app.
     */
    BackgroundGeolocation.start = function () {
        return;
    };
    /**
     * Turn OFF background-tracking
     */
    BackgroundGeolocation.stop = function () {
        return;
    };
    /**
     * Inform the native plugin that you're finished, the background-task may be completed
     * NOTE: IOS, WP only
     */
    BackgroundGeolocation.finish = function () {};
    /**
     * Force the plugin to enter "moving" or "stationary" state
     * NOTE: IOS, WP only
     */
    BackgroundGeolocation.changePace = function (isMoving) {};
    /**
     * Setup configuration
     */
    BackgroundGeolocation.setConfig = function (options) {
        return;
    };
    /**
     * Returns current stationaryLocation if available. null if not
     * NOTE: IOS, WP only
     */
    BackgroundGeolocation.getStationaryLocation = function () {
        return;
    };
    /**
     * Add a stationary-region listener. Whenever the devices enters "stationary-mode",
     * your #success callback will be executed with #location param containing #radius of region
     * NOTE: IOS, WP only
     */
    BackgroundGeolocation.onStationary = function () {
        return;
    };
    /**
     * Check if location is enabled on the device
     * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).
     * NOTE: ANDROID only
     */
    BackgroundGeolocation.isLocationEnabled = function () {
        return;
    };
    /**
     * Display device location settings
     */
    BackgroundGeolocation.showLocationSettings = function () {};
    /**
     * Method can be used to detect user changes in location services settings.
     * If user enable or disable location services then success callback will be executed.
     * In case or error (SettingNotFoundException) fail callback will be executed.
     * NOTE: ANDROID only
     */
    BackgroundGeolocation.watchLocationMode = function () {
        return;
    };
    /**
     * Stop watching for location mode changes.
     * NOTE: ANDROID only
     */
    BackgroundGeolocation.stopWatchingLocationMode = function () {};
    /**
     * Method will return all stored locations.
     * Locations are stored when:
     *  - config.stopOnTerminate is false and main activity was killed
     *    by the system
     *  or
     *  - option.debug is true
     * NOTE: ANDROID only
     */
    BackgroundGeolocation.getLocations = function () {
        return;
    };
    /**
     * Delete stored location by given locationId.
     * NOTE: ANDROID only
     */
    BackgroundGeolocation.deleteLocation = function (locationId) {
        return;
    };
    /**
     * Delete all stored locations.
     * NOTE: ANDROID only
     */
    BackgroundGeolocation.deleteAllLocations = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], BackgroundGeolocation, "configure", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "start", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "stop", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "finish", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "changePace", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], BackgroundGeolocation, "setConfig", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "getStationaryLocation", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "onStationary", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "isLocationEnabled", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "showLocationSettings", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "watchLocationMode", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "stopWatchingLocationMode", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "getLocations", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "deleteLocation", null);
    __decorate([plugin_1.Cordova()], BackgroundGeolocation, "deleteAllLocations", null);
    BackgroundGeolocation = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-mauron85-background-geolocation',
        pluginRef: 'plugins.backgroundGeoLocation',
        repo: 'https://github.com/mauron85/cordova-plugin-background-geolocation',
        platforms: ['iOS', 'Android', 'Windows Phone 8']
    })], BackgroundGeolocation);
    return BackgroundGeolocation;
}();
exports.BackgroundGeolocation = BackgroundGeolocation;
//# sourceMappingURL=background-geolocation.js.map

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Battery Status
 * @description
 * Requires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the [BatteryStatus plugin docs](https://github.com/apache/cordova-plugin-battery-status).
 *
 * @usage
 * ```js
 * import {BatteryStatus} from 'ionic-native';
 *
 *
 *
 * // watch change in battery status
 * let subscription = BatteryStatus.onChange().subscribe(
 *  status => {
 *    console.log(status.level, status.isPlugged);
 *  }
 * );
 *
 * // stop watch
 * subscription.unsubscribe();
 *
 * ```
 */
var BatteryStatus = function () {
    function BatteryStatus() {}
    /**
     * Watch the change in battery level
     * @returns {Observable} Returns an observable that pushes a status object
     */
    BatteryStatus.onChange = function () {
        return;
    };
    /**
     * Watch when the battery level goes low
     * @returns {Observable<StatusObject>} Returns an observable that pushes a status object
     */
    BatteryStatus.onLow = function () {
        return;
    };
    /**
     * Watch when the battery level goes to critial
     * @returns {Observable<StatusObject>} Returns an observable that pushes a status object
     */
    BatteryStatus.onCritical = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'batterystatus'
    })], BatteryStatus, "onChange", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'batterylow'
    })], BatteryStatus, "onLow", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'batterycritical'
    })], BatteryStatus, "onCritical", null);
    BatteryStatus = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-battery-status',
        repo: 'https://github.com/apache/cordova-plugin-battery-status',
        platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser']
    })], BatteryStatus);
    return BatteryStatus;
}();
exports.BatteryStatus = BatteryStatus;
//# sourceMappingURL=batterystatus.js.map

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Calendar
 * @description
 * This plugin allows you to add events to the Calendar of the mobile device.
 *
 * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).
 *
 * @usage
 *
 */
var Calendar = function () {
    function Calendar() {}
    /**
     * This function checks if we have permission to read/write from/to the calendar.
     * The promise will resolve with `true` when:
     * - You're running on iOS, or
     * - You're targetting API level lower than 23, or
     * - You're using Android < 6, or
     * - You've already granted permission
     *
     * If this returns false, you should call `requestReadWritePermissions` function
     * @returns {Promise<boolean>}
     */
    Calendar.hasReadWritePermission = function () {
        return;
    };
    /**
     * Check if we have read permission
     * @returns {Promise<boolean>}
     */
    Calendar.hasReadPermission = function () {
        return;
    };
    /**
     * Check if we have write permission
     * @returns {Promise<boolean>}
     */
    Calendar.hasWritePermission = function () {
        return;
    };
    /**
     * Request write permission
     * @returns {Promise<any>}
     */
    Calendar.requestWritePermission = function () {
        return;
    };
    /**
     * Request read permission
     * @returns {Promise<any>}
     */
    Calendar.requestReadPermission = function () {
        return;
    };
    /**
     * Requests read/write permissions
     * @returns {Promise<any>}
     */
    Calendar.requestReadWritePermission = function () {
        return;
    };
    /**
     * Create a calendar. (iOS only)
     *
     * @usage
     * ```
     * import {Calendar} from 'ionic-native';
     *
     *
     *
     * Calendar.createCalendar('MyCalendar').then(
     *   (msg) => { console.log(msg); },
     *   (err) => { console.log(err); }
     * );
     * ```
     *
     * @param {string | Object} nameOrOptions  either a string name or a options object.
     * options:
     *   calendarName: string  the name of the calendar
     *   calendarColor: string  the hex color of the calendar
     * @return Returns a Promise
     */
    Calendar.createCalendar = function (nameOrOptions) {
        return;
    };
    /**
     * Delete a calendar. (iOS only)
     *
     * @usage
     * ```
     * Calendar.deleteCalendar('MyCalendar').then(
     *   (msg) => { console.log(msg); },
     *   (err) => { console.log(err); }
     * );
     * ```
     *
     * @param {string} name  Name of the calendar to delete.
     * @return Returns a Promise
     */
    Calendar.deleteCalendar = function (name) {
        return;
    };
    /**
     * Returns the default calendar options.
     *
     * @return Returns an object with the default calendar options:
     *   firstReminderMinutes: 60,
     *   secondReminderMinutes: null,
     *   recurrence: null, // options are: 'daily', 'weekly', 'monthly', 'yearly'
     *   recurrenceInterval: 1, // only used when recurrence is set
     *   recurrenceEndDate: null,
     *   calendarName: null,
     *   calendarId: null,
     *   url: null
     */
    Calendar.getCalendarOptions = function () {
        return {
            firstReminderMinutes: 60,
            secondReminderMinutes: null,
            recurrence: null,
            recurrenceInterval: 1,
            recurrenceEndDate: null,
            calendarName: null,
            calendarId: null,
            url: null
        };
    };
    /**
     * Silently create an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @return Returns a Promise
     */
    Calendar.createEvent = function (title, location, notes, startDate, endDate) {
        return;
    };
    /**
     * Silently create an event with additional options.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @return Returns a Promise
     */
    Calendar.createEventWithOptions = function (title, location, notes, startDate, endDate, options) {
        return;
    };
    /**
     * Interactively create an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @return Returns a Promise
     */
    Calendar.createEventInteractively = function (title, location, notes, startDate, endDate) {
        return;
    };
    /**
     * Interactively create an event with additional options.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @return Returns a Promise
     */
    Calendar.createEventInteractivelyWithOptions = function (title, location, notes, startDate, endDate, options) {
        return;
    };
    // deprecated
    // @Cordova()
    // static createEventInNamedCalendar(
    //   title?: string,
    //   location?: string,
    //   notes?: string,
    //   startDate?: Date,
    //   endDate?: Date,
    //   calendarName?: string
    // ) {}
    /**
     * Find an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @return Returns a Promise
     */
    Calendar.findEvent = function (title, location, notes, startDate, endDate) {
        return;
    };
    /**
     * Find an event with additional options.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @return Returns a Promise that resolves with the event, or rejects with an error.
     */
    Calendar.findEventWithOptions = function (title, location, notes, startDate, endDate, options) {
        return;
    };
    /**
     * Find a list of events within the specified date range. (Android only)
     *
     * @param {Date} [startDate]  The start date
     * @param {Date} [endDate]  The end date
     * @return Returns a Promise that resolves with the list of events, or rejects with an error.
     */
    Calendar.listEventsInRange = function (startDate, endDate) {
        return;
    };
    /**
     * Get a list of all calendars.
     * @return A Promise that resolves with the list of calendars, or rejects with an error.
     */
    Calendar.listCalendars = function () {
        return;
    };
    /**
     * Get a list of all future events in the specified calendar. (iOS only)
     * @return Returns a Promise that resolves with the list of events, or rejects with an error.
     */
    Calendar.findAllEventsInNamedCalendar = function (calendarName) {
        return;
    };
    /**
     * Modify an event. (iOS only)
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {string} [newTitle]  The new event title
     * @param {string} [newLocation]  The new event location
     * @param {string} [newNotes]  The new event notes
     * @param {Date} [newStartDate]  The new event start date
     * @param {Date} [newEndDate]  The new event end date
     * @return Returns a Promise
     */
    Calendar.modifyEvent = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate) {
        return;
    };
    /**
     * Modify an event with additional options. (iOS only)
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {string} [newTitle]  The new event title
     * @param {string} [newLocation]  The new event location
     * @param {string} [newNotes]  The new event notes
     * @param {Date} [newStartDate]  The new event start date
     * @param {Date} [newEndDate]  The new event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @return Returns a Promise
     */
    Calendar.modifyEventWithOptions = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, options) {
        return;
    };
    /**
     * Delete an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @return Returns a Promise
     */
    Calendar.deleteEvent = function (title, location, notes, startDate, endDate) {
        return;
    };
    /**
     * Delete an event from the specified Calendar. (iOS only)
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {string} calendarName
     * @return Returns a Promise
     */
    Calendar.deleteEventFromNamedCalendar = function (title, location, notes, startDate, endDate, calendarName) {
        return;
    };
    /**
     * Open the calendar at the specified date.
     * @return {Date} date
     */
    Calendar.openCalendar = function (date) {
        return;
    };
    __decorate([plugin_1.Cordova()], Calendar, "hasReadWritePermission", null);
    __decorate([plugin_1.Cordova()], Calendar, "hasReadPermission", null);
    __decorate([plugin_1.Cordova()], Calendar, "hasWritePermission", null);
    __decorate([plugin_1.Cordova()], Calendar, "requestWritePermission", null);
    __decorate([plugin_1.Cordova()], Calendar, "requestReadPermission", null);
    __decorate([plugin_1.Cordova()], Calendar, "requestReadWritePermission", null);
    __decorate([plugin_1.Cordova()], Calendar, "createCalendar", null);
    __decorate([plugin_1.Cordova()], Calendar, "deleteCalendar", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], Calendar, "getCalendarOptions", null);
    __decorate([plugin_1.Cordova()], Calendar, "createEvent", null);
    __decorate([plugin_1.Cordova()], Calendar, "createEventWithOptions", null);
    __decorate([plugin_1.Cordova()], Calendar, "createEventInteractively", null);
    __decorate([plugin_1.Cordova()], Calendar, "createEventInteractivelyWithOptions", null);
    __decorate([plugin_1.Cordova()], Calendar, "findEvent", null);
    __decorate([plugin_1.Cordova()], Calendar, "findEventWithOptions", null);
    __decorate([plugin_1.Cordova()], Calendar, "listEventsInRange", null);
    __decorate([plugin_1.Cordova()], Calendar, "listCalendars", null);
    __decorate([plugin_1.Cordova()], Calendar, "findAllEventsInNamedCalendar", null);
    __decorate([plugin_1.Cordova()], Calendar, "modifyEvent", null);
    __decorate([plugin_1.Cordova()], Calendar, "modifyEventWithOptions", null);
    __decorate([plugin_1.Cordova()], Calendar, "deleteEvent", null);
    __decorate([plugin_1.Cordova()], Calendar, "deleteEventFromNamedCalendar", null);
    __decorate([plugin_1.Cordova()], Calendar, "openCalendar", null);
    Calendar = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-calendar',
        pluginRef: 'plugins.calendar',
        repo: 'https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin',
        platforms: ['Android', 'iOS']
    })], Calendar);
    return Calendar;
}();
exports.Calendar = Calendar;
//# sourceMappingURL=calendar.js.map

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Camera
 * @description
 * Take a photo or capture video.
 *
 * Requires {@link module:driftyco/ionic-native} and the Cordova plugin: `cordova-plugin-camera`. For more info, please see the [Cordova Camera Plugin Docs](https://github.com/apache/cordova-plugin-camera).
 *
 * @usage
 * ```js
 * import {Camera} from 'ionic-native';
 *
 * Camera.getPicture(options).then((imageData) => {
 *  // imageData is either a base64 encoded string or a file URI
 *  // If it's base64:
 *  let base64Image = "data:image/jpeg;base64," + imageData;
 * }, (err) => {
 * });
 * ```
 */
var Camera = function () {
    function Camera() {}
    /**
     * Take a picture or video, or load one from the library.
     * @param {CameraOptions} options
     * @return Returns a Promise that resolves with Base64 encoding of the image data, or the image file URI, depending on cameraOptions, otherwise rejects with an error.
     */
    Camera.getPicture = function (options) {
        return;
    };
    /**
     * Remove intermediate image files that are kept in temporary storage after calling camera.getPicture.
     * Applies only when the value of Camera.sourceType equals Camera.PictureSourceType.CAMERA and the Camera.destinationType equals Camera.DestinationType.FILE_URI.
     * @return Returns a Promise
     */
    Camera.cleanup = function () {};
    ;
    /**
     * @enum {number}
     */
    Camera.DestinationType = {
        /** Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible */
        DATA_URL: 0,
        /** Return file uri (content://media/external/images/media/2 for Android) */
        FILE_URI: 1,
        /** Return native uri (eg. asset-library://... for iOS) */
        NATIVE_URI: 2
    };
    /**
     * @enum {number}
     */
    Camera.EncodingType = {
        /** Return JPEG encoded image */
        JPEG: 0,
        /** Return PNG encoded image */
        PNG: 1
    };
    /**
     * @enum {number}
     */
    Camera.MediaType = {
        /** Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType */
        PICTURE: 0,
        /** Allow selection of video only, ONLY RETURNS URL */
        VIDEO: 1,
        /** Allow selection from all media types */
        ALLMEDIA: 2
    };
    /**
     * @enum {number}
     */
    Camera.PictureSourceType = {
        /** Choose image from picture library (same as SAVEDPHOTOALBUM for Android) */
        PHOTOLIBRARY: 0,
        /** Take picture from camera */
        CAMERA: 1,
        /** Choose image from picture library (same as PHOTOLIBRARY for Android) */
        SAVEDPHOTOALBUM: 2
    };
    /**
     * Matches iOS UIPopoverArrowDirection constants to specify arrow location on popover.
     * @enum {number}
     */
    Camera.PopoverArrowDirection = {
        ARROW_UP: 1,
        ARROW_DOWN: 2,
        ARROW_LEFT: 4,
        ARROW_RIGHT: 8,
        ARROW_ANY: 15
    };
    /**
     * @enum {number}
     */
    Camera.Direction = {
        /** Use the back-facing camera */
        BACK: 0,
        /** Use the front-facing camera */
        FRONT: 1
    };
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], Camera, "getPicture", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS']
    })], Camera, "cleanup", null);
    Camera = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-camera',
        pluginRef: 'navigator.camera',
        repo: 'https://github.com/apache/cordova-plugin-camera',
        platforms: ['Android', 'BlackBerry', 'Browser', 'Firefox', 'FireOS', 'iOS', 'Windows', 'Windows Phone 8', 'Ubuntu']
    })], Camera);
    return Camera;
}();
exports.Camera = Camera;
//# sourceMappingURL=camera.js.map

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name CardIO
 * @description
 * @usage
 * ```
 * import {CardIO} from 'ionic-native';
 *
 * ...
 *
 * CardIO.canScan()
 *   .then(
 *     (res: boolean) => {
 *       if(res){
 *         let options = {
 *           requireExpiry: true,
 *           requireCCV: false,
 *           requirePostalCode: false
 *         };
 *         CardIO.scan(options);
 *       }
 *     }
 *   );
 * ```
 */
var CardIO = function () {
    function CardIO() {}
    /**
     * Check whether card scanning is currently available. (May vary by
     * device, OS version, network connectivity, etc.)
     *
     */
    CardIO.canScan = function () {
        return;
    };
    /**
     * Scan a credit card with card.io.
     * @param options
     */
    CardIO.scan = function (options) {
        return;
    };
    /**
     * Retrieve the version of the card.io library. Useful when contacting support.
     */
    CardIO.version = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], CardIO, "canScan", null);
    __decorate([plugin_1.Cordova()], CardIO, "scan", null);
    __decorate([plugin_1.Cordova()], CardIO, "version", null);
    CardIO = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/card-io/card.io-Cordova-Plugin',
        pluginRef: 'CardIO',
        repo: 'https://github.com/card-io/card.io-Cordova-Plugin',
        platforms: ['iOS', 'Android']
    })], CardIO);
    return CardIO;
}();
exports.CardIO = CardIO;
//# sourceMappingURL=card-io.js.map

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var Contact = function () {
    function Contact() {
        this._objectInstance = navigator.contacts.create();
    }
    Object.defineProperty(Contact.prototype, "id", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "displayName", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "nickname", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "phoneNumbers", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "emails", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "addresses", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "ims", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "organizations", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "birthday", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "note", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "photos", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "categories", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Contact.prototype, "urls", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Contact.prototype.clone = function () {
        var newContact = new Contact();
        for (var prop in this) {
            if (prop === 'id') return;
            newContact[prop] = this[prop];
        }
        return newContact;
    };
    Contact.prototype.remove = function () {
        return;
    };
    Contact.prototype.save = function () {
        return;
    };
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "id", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "displayName", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "nickname", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "phoneNumbers", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "emails", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "addresses", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "ims", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "organizations", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "birthday", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "note", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "photos", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "categories", null);
    __decorate([plugin_1.InstanceProperty], Contact.prototype, "urls", null);
    __decorate([plugin_1.CordovaInstance()], Contact.prototype, "remove", null);
    __decorate([plugin_1.CordovaInstance()], Contact.prototype, "save", null);
    return Contact;
}();
exports.Contact = Contact;
var ContactName = function () {
    function ContactName(formatted, familyName, givenName, middleName, honorificPrefix, honorificSuffix) {
        this._objectInstance = new window.ContactName(formatted, familyName, givenName, middleName, honorificPrefix, honorificSuffix);
    }
    Object.defineProperty(ContactName.prototype, "formatted", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactName.prototype, "familyName", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactName.prototype, "givenName", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactName.prototype, "middleName", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactName.prototype, "honorificPrefix", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactName.prototype, "honorificSuffix", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.InstanceProperty], ContactName.prototype, "formatted", null);
    __decorate([plugin_1.InstanceProperty], ContactName.prototype, "familyName", null);
    __decorate([plugin_1.InstanceProperty], ContactName.prototype, "givenName", null);
    __decorate([plugin_1.InstanceProperty], ContactName.prototype, "middleName", null);
    __decorate([plugin_1.InstanceProperty], ContactName.prototype, "honorificPrefix", null);
    __decorate([plugin_1.InstanceProperty], ContactName.prototype, "honorificSuffix", null);
    return ContactName;
}();
exports.ContactName = ContactName;
var ContactField = function () {
    function ContactField(type, value, pref) {
        this._objectInstance = new window.ContactField(type, value, pref);
    }
    Object.defineProperty(ContactField.prototype, "type", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactField.prototype, "value", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactField.prototype, "pref", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.InstanceProperty], ContactField.prototype, "type", null);
    __decorate([plugin_1.InstanceProperty], ContactField.prototype, "value", null);
    __decorate([plugin_1.InstanceProperty], ContactField.prototype, "pref", null);
    return ContactField;
}();
exports.ContactField = ContactField;
var ContactAddress = function () {
    function ContactAddress(pref, type, formatted, streetAddress, locality, region, postalCode, country) {
        this._objectInstance = new window.ContactAddress(pref, type, formatted, streetAddress, locality, region, postalCode, country);
    }
    Object.defineProperty(ContactAddress.prototype, "pref", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "type", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "formatted", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "streetAddress", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "locality", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "region", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "postalCode", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactAddress.prototype, "country", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "pref", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "type", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "formatted", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "streetAddress", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "locality", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "region", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "postalCode", null);
    __decorate([plugin_1.InstanceProperty], ContactAddress.prototype, "country", null);
    return ContactAddress;
}();
exports.ContactAddress = ContactAddress;
var ContactOrganization = function () {
    function ContactOrganization() {
        this._objectInstance = new window.ContactOrganization();
    }
    Object.defineProperty(ContactOrganization.prototype, "pref", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactOrganization.prototype, "type", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactOrganization.prototype, "name", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactOrganization.prototype, "department", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactOrganization.prototype, "title", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.InstanceProperty], ContactOrganization.prototype, "pref", null);
    __decorate([plugin_1.InstanceProperty], ContactOrganization.prototype, "type", null);
    __decorate([plugin_1.InstanceProperty], ContactOrganization.prototype, "name", null);
    __decorate([plugin_1.InstanceProperty], ContactOrganization.prototype, "department", null);
    __decorate([plugin_1.InstanceProperty], ContactOrganization.prototype, "title", null);
    return ContactOrganization;
}();
exports.ContactOrganization = ContactOrganization;
var ContactFindOptions = function () {
    function ContactFindOptions() {
        this._objectInstance = new window.ContactFindOptions();
    }
    Object.defineProperty(ContactFindOptions.prototype, "filter", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactFindOptions.prototype, "multiple", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactFindOptions.prototype, "desiredFields", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactFindOptions.prototype, "hasPhoneNumber", {
        get: function get() {
            return;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.InstanceProperty], ContactFindOptions.prototype, "filter", null);
    __decorate([plugin_1.InstanceProperty], ContactFindOptions.prototype, "multiple", null);
    __decorate([plugin_1.InstanceProperty], ContactFindOptions.prototype, "desiredFields", null);
    __decorate([plugin_1.InstanceProperty], ContactFindOptions.prototype, "hasPhoneNumber", null);
    return ContactFindOptions;
}();
exports.ContactFindOptions = ContactFindOptions;
/**
 * @name Contacts
 * @description
 * Access and manage Contacts on the device.
 *
 * @usage
 *
 * ```js
 * import {Contact} from 'ionic-native';
 *
 *
 *
 * let contact = new Contact();
 * contact.displayName = "Mr. Ionitron";
 * contact.save().then(
 *   () => console.log("Contact saved!", contact),
 *   (error: any) => console.error("Error saving contact.", error)
 * );
 * ```
 *
 *
 */
var Contacts = function () {
    function Contacts() {}
    Contacts.create = function () {
        return new Contact();
    };
    /**
     * Search for contacts in the Contacts list.
     *
     * Example: Contacts.find(['*'], { filter: 'Max' }) // will search for a displayName of 'Max'
     *
     * @param fields {string[]}  Contact fields to be used as a search qualifier.
     *  A zero-length contactFields parameter is invalid and results in ContactError.INVALID_ARGUMENT_ERROR.
     *  A contactFields value of "*" searches all contact fields.
     *
     * @param options {Object} the options to query with:
     *   filter: The search string used to find navigator.contacts. (string) (Default: "")
     *   multiple: Determines if the find operation returns multiple navigator.contacts. (Boolean) (Default: false)
     *   desiredFields: Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. (DOMString[]) [Optional]
     *   hasPhoneNumber(Android only): Filters the search to only return contacts with a phone number informed. (Boolean) (Default: false)
     *
     * @return Returns a Promise that resolves with the search results (an array of Contact objects)
     */
    Contacts.find = function (fields, options) {
        return;
    };
    /**
     * Select a single Contact.
     * @return Returns a Promise that resolves with the selected Contact
     */
    Contacts.pickContact = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 2
    })], Contacts, "find", null);
    __decorate([plugin_1.Cordova()], Contacts, "pickContact", null);
    Contacts = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-contacts',
        pluginRef: 'navigator.contacts',
        repo: 'https://github.com/apache/cordova-plugin-contacts'
    })], Contacts);
    return Contacts;
}();
exports.Contacts = Contacts;
//# sourceMappingURL=contacts.js.map

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Date Picker
 * @description
 * The DatePicker plugin allows the user to fetch date or time using native dialogs.
 *
 * Platforms supported: iOS, Android, Windows
 *
 * Requires Cordova plugin: `cordova-plugin-datepicker`. For more info, please see the [DatePicker plugin docs](https://github.com/VitaliiBlagodir/cordova-plugin-datepicker).
 *
 * @usage
 * ```js
 * import {DatePicker} from 'ionic-native';
 *
 *
 *
 * DatePicker.show({
 *   date: new Date(),
 *   mode: 'date'
 * }).then(
 *   date => console.log("Got date: ", date),
 *   err => console.log("Error occurred while getting date:", err)
 * );
 * ```
 *
 */
var DatePicker = function () {
    function DatePicker() {}
    /**
     * Shows the date and/or time picker dialog(s)
     * @param options
     * @returns {Promise<Date>} Returns a promise that resolves with the picked date and/or time, or rejects with an error.
     */
    DatePicker.show = function (options) {
        return;
    };
    __decorate([plugin_1.Cordova()], DatePicker, "show", null);
    DatePicker = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-datepicker',
        pluginRef: 'datePicker',
        repo: 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'
    })], DatePicker);
    return DatePicker;
}();
exports.DatePicker = DatePicker;
//# sourceMappingURL=datepicker.js.map

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Device
 * @description
 * Access information about the underlying device and platform.
 *
 * @usage
 * ```js
 * import {Device} from 'ionic-native';
 *
 *
 *
 * console.log('Device UUID is: ' + Device.device.uuid);
 * ```
 */
var Device = function () {
    function Device() {}
    Object.defineProperty(Device, "device", {
        /**
         * Returns the whole device object.
         *
         * @returns {Object} The device object.
         */
        get: function get() {
            return window.device;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.CordovaProperty], Device, "device", null);
    Device = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-device',
        pluginRef: 'device',
        repo: 'https://github.com/apache/cordova-plugin-device'
    })], Device);
    return Device;
}();
exports.Device = Device;
//# sourceMappingURL=device.js.map

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Device Motion
 * @description
 * Requires Cordova plugin: `cordova-plugin-device-motion`. For more info, please see the [Device Motion docs](https://github.com/apache/cordova-plugin-device-motion).
 *
 * @usage
 * ```ts
 * import {DeviceMotion} from 'ionic-native';
 *
 *
 *
 * // Get the device current acceleration
 * DeviceMotion.getCurrentAcceleration().then(
 *   acceleration => console.log(acceleration),
 *   error => console.log(error)
 * );
 *
 * // Watch device acceleration
 * var subscription = DeviceMotion.watchAcceleration().subscribe(acceleration => {
 *   console.log(acceleration);
 * });
 *
 * // Stop watch
 * subscription.unsubscribe();
 *
 * ```
 */
var DeviceMotion = function () {
    function DeviceMotion() {}
    /**
     * Get the current acceleration along the x, y, and z axes.
     *
     * @returns {Promise<any>} Returns object with x, y, z, and timestamp properties
     */
    DeviceMotion.getCurrentAcceleration = function () {
        return;
    };
    /**
     * Watch the device acceleration. Clear the watch by unsubscribing from the observable.
     *
     * ```ts
     * // Watch device acceleration
     * var subscription = DeviceMotion.watchPosition().subscribe(acceleration => {
     *   console.log(acceleration);
     * });
     *
     * // Stop watch
     * subscription.unsubscribe();
     * ```
     * @param options
     * @returns {Observable<AccelerationData>}
     */
    DeviceMotion.watchAcceleration = function (options) {
        return;
    };
    __decorate([plugin_1.Cordova()], DeviceMotion, "getCurrentAcceleration", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse',
        observable: true,
        clearFunction: 'clearWatch'
    })], DeviceMotion, "watchAcceleration", null);
    DeviceMotion = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-device-motion',
        pluginRef: 'navigator.accelerometer',
        repo: 'https://github.com/apache/cordova-plugin-device-motion'
    })], DeviceMotion);
    return DeviceMotion;
}();
exports.DeviceMotion = DeviceMotion;
//# sourceMappingURL=devicemotion.js.map

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Device Orientation
 * @description
 * Requires Cordova plugin: `cordova-plugin-device-orientation`. For more info, please see the [Device Orientation docs](https://github.com/apache/cordova-plugin-device-orientation).
 *
 * @usage
 * ```ts
 * import {DeviceOrientation} from 'ionic-native';
 *
 *
 *
 * // Get the device current compass heading
 * DeviceOrientation.getCurrentHeading().then(
 *   data => console.log(data),
 *   error => console.log(error)
 * );
 *
 * // Watch the device compass heading change
 * var subscription = DeviceOrientation.watchHeading().subscribe(
 *   data => console.log(data)
 * );
 *
 * // Stop watching heading change
 * subscription.unsubscribe();
 * ```
 */
var DeviceOrientation = function () {
    function DeviceOrientation() {}
    /**
     * Get the current compass heading.
     * @returns {Promise<CompassHeading>}
     */
    DeviceOrientation.getCurrentHeading = function () {
        return;
    };
    /**
     * Get the device current heading at a regular interval
     *
     * Stop the watch by unsubscribing from the observable
     * @param options
     * @returns {Observable<CompassHeading>}
     */
    DeviceOrientation.watchHeading = function (options) {
        return;
    };
    __decorate([plugin_1.Cordova()], DeviceOrientation, "getCurrentHeading", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse',
        observable: true,
        clearFunction: 'clearWatch'
    })], DeviceOrientation, "watchHeading", null);
    DeviceOrientation = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-device-orientation',
        pluginRef: 'navigator.compass',
        repo: 'https://github.com/apache/cordova-plugin-device-orientation'
    })], DeviceOrientation);
    return DeviceOrientation;
}();
exports.DeviceOrientation = DeviceOrientation;
//# sourceMappingURL=deviceorientation.js.map

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var Observable_1 = __webpack_require__(39);
var plugin_2 = __webpack_require__(2);
/**
 * @private
 * You can listen to these events where appropriate
 */
exports.GoogleMapsEvent = {
    MAP_CLICK: 'click',
    MAP_LONG_CLICK: 'long_click',
    MY_LOCATION_CHANGE: 'my_location_change',
    MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',
    INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',
    INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',
    CAMERA_CHANGE: 'camera_change',
    CAMERA_IDLE: 'camera_idle',
    MAP_READY: 'map_ready',
    MAP_LOADED: 'map_loaded',
    MAP_WILL_MOVE: 'will_move',
    MAP_CLOSE: 'map_close',
    MARKER_CLICK: 'click',
    OVERLAY_CLICK: 'overlay_click',
    INFO_CLICK: 'info_click',
    MARKER_DRAG: 'drag',
    MARKER_DRAG_START: 'drag_start',
    MARKER_DRAG_END: 'drag_end'
};
/**
 * @private
 */
exports.GoogleMapsAnimation = {
    BOUNCE: 'BOUNCE',
    DROP: 'DROP'
};
/**
 * @name Google Maps
 * @description This plugin uses the native Google Maps SDK
 * @usage
 * ```
 * import {GoogleMap, GoogleMapsEvent} from 'ionic-native';
 *
 * ...
 *
 * // somewhere in your component
 * let map = new GoogleMap('elementID');
 *
 * map.on(GoogleMapsEvent.MAP_READY).subscribe(() => console.log("Map is ready!"));
 * ```
 */
var GoogleMap = function () {
    function GoogleMap(elementId, options) {
        this._objectInstance = plugin.google.maps.Map.getMap(document.getElementById(elementId), options);
    }
    /**
     * Checks if a map object has been created.
     * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the plugin is available.
     */
    GoogleMap.isAvailable = function () {
        return;
    };
    GoogleMap.prototype.on = function (event) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var cb = function cb(data) {
                return observer.next(data);
            };
            _this._objectInstance.on(event, cb);
            return function () {
                return _this._objectInstance.off(event);
            };
        });
    };
    GoogleMap.prototype.one = function (event) {
        var _this = this;
        return new Promise(function (resolve) {
            return _this._objectInstance.one(event, resolve);
        });
    };
    GoogleMap.prototype.setDebuggable = function (isDebuggable) {};
    GoogleMap.prototype.setClickable = function (isClickable) {};
    /**
     * Get the position of the camera
     */
    GoogleMap.prototype.getCameraPosition = function () {
        return;
    };
    /**
     * Get the location of the user
     */
    GoogleMap.prototype.getMyLocation = function () {
        return;
    };
    /**
     * Get the visible region
     */
    GoogleMap.prototype.getVisibleRegion = function () {
        return;
    };
    GoogleMap.prototype.showDialog = function () {};
    GoogleMap.prototype.closeDialog = function () {};
    GoogleMap.prototype.getLicenseInfo = function () {
        return;
    };
    GoogleMap.prototype.setCenter = function (latLng) {};
    GoogleMap.prototype.setZoom = function (zoomLevel) {};
    GoogleMap.prototype.setMapTypeId = function (typeId) {};
    GoogleMap.prototype.setTilt = function (tiltLevel) {};
    GoogleMap.prototype.animateCamera = function (animateCameraOptions) {};
    GoogleMap.prototype.moveCamera = function (cameraPosition) {};
    GoogleMap.prototype.setMyLocationEnabled = function (enabled) {};
    GoogleMap.prototype.setIndoorEnabled = function (enabled) {};
    GoogleMap.prototype.setTrafficEnabled = function (enabled) {};
    GoogleMap.prototype.setCompassEnabled = function (enabled) {};
    GoogleMap.prototype.setAllGesturesEnabled = function (enabled) {};
    GoogleMap.prototype.addMarker = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addMarker(options, function (marker) {
                if (marker) resolve(new GoogleMapsMarker(marker));else reject();
            });
        });
    };
    GoogleMap.prototype.addCircle = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addCircle(options, function (circle) {
                if (circle) resolve(new GoogleMapsCircle(circle));else reject();
            });
        });
    };
    GoogleMap.prototype.addPolygon = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addPolygon(options, function (polygon) {
                if (polygon) resolve(new GoogleMapsPolygon(polygon));else reject();
            });
        });
    };
    GoogleMap.prototype.addPolyline = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addPolyline(options, function (polyline) {
                if (polyline) resolve(new GoogleMapsPolyline(polyline));else reject();
            });
        });
    };
    GoogleMap.prototype.addTileOverlay = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addTileOverlay(options, function (tileOverlay) {
                if (tileOverlay) resolve(new GoogleMapsTileOverlay(tileOverlay));else reject();
            });
        });
    };
    GoogleMap.prototype.addGroundOverlay = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addTileOverlay(options, function (groundOverlay) {
                if (groundOverlay) resolve(new GoogleMapsGroundOverlay(groundOverlay));else reject();
            });
        });
    };
    GoogleMap.prototype.addKmlOverlay = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addTileOverlay(options, function (kmlOverlay) {
                if (kmlOverlay) resolve(new GoogleMapsKmlOverlay(kmlOverlay));else reject();
            });
        });
    };
    GoogleMap.prototype.setDiv = function (domNode) {};
    GoogleMap.prototype.setVisible = function (visible) {};
    GoogleMap.prototype.setOptions = function (options) {};
    GoogleMap.prototype.setBackgroundColor = function (backgroundColor) {};
    GoogleMap.prototype.setPadding = function (top, right, bottom, left) {};
    GoogleMap.prototype.clear = function () {};
    GoogleMap.prototype.refreshLayout = function () {};
    GoogleMap.prototype.fromLatLngToPoint = function (latLng, point) {
        return;
    };
    GoogleMap.prototype.fromPointToLatLng = function (point, latLng) {
        return;
    };
    GoogleMap.prototype.toDataURL = function () {
        return;
    };
    GoogleMap.prototype.remove = function () {};
    GoogleMap.prototype.panBy = function () {};
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setDebuggable", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setClickable", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "getCameraPosition", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "getMyLocation", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "getVisibleRegion", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "showDialog", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "closeDialog", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "getLicenseInfo", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setCenter", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setZoom", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setMapTypeId", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setTilt", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "animateCamera", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "moveCamera", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setMyLocationEnabled", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setIndoorEnabled", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setTrafficEnabled", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setCompassEnabled", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setAllGesturesEnabled", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setDiv", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setOptions", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setBackgroundColor", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "setPadding", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "clear", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "refreshLayout", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "fromLatLngToPoint", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "fromPointToLatLng", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMap.prototype, "toDataURL", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "remove", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMap.prototype, "panBy", null);
    __decorate([plugin_1.Cordova()], GoogleMap, "isAvailable", null);
    GoogleMap = __decorate([plugin_1.Plugin({
        pluginRef: 'plugin.google.maps.Map',
        plugin: 'cordova-plugin-googlemaps',
        repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps'
    })], GoogleMap);
    return GoogleMap;
}();
exports.GoogleMap = GoogleMap;
/**
 * @private
 */
var GoogleMapsMarker = function () {
    function GoogleMapsMarker(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsMarker.prototype.addEventListener = function (event) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var cb = function cb(data) {
                observer.next(data);
            };
            _this._objectInstance.addEventListener(event, cb);
            return function () {
                return _this._objectInstance.removeEventListener(event, cb);
            };
        });
    };
    GoogleMapsMarker.prototype.isVisible = function () {
        return;
    };
    GoogleMapsMarker.prototype.setVisible = function (visible) {};
    GoogleMapsMarker.prototype.getHashCode = function () {
        return;
    };
    GoogleMapsMarker.prototype.remove = function () {};
    GoogleMapsMarker.prototype.setOpacity = function (alpha) {};
    GoogleMapsMarker.prototype.getOpacity = function () {
        return;
    };
    GoogleMapsMarker.prototype.setZIndex = function () {};
    GoogleMapsMarker.prototype.setIconAnchor = function (x, y) {};
    GoogleMapsMarker.prototype.setInfoWindowAnchor = function (x, y) {};
    GoogleMapsMarker.prototype.setDraggable = function (draggable) {};
    GoogleMapsMarker.prototype.isDraggable = function () {
        return;
    };
    GoogleMapsMarker.prototype.setFlat = function (flat) {
        return;
    };
    GoogleMapsMarker.prototype.setIcon = function (icon) {};
    GoogleMapsMarker.prototype.setTitle = function (title) {};
    GoogleMapsMarker.prototype.getTitle = function () {
        return;
    };
    GoogleMapsMarker.prototype.setSnippet = function (snippet) {};
    GoogleMapsMarker.prototype.getSnippet = function () {
        return;
    };
    GoogleMapsMarker.prototype.setRotation = function (rotation) {};
    GoogleMapsMarker.prototype.getRotation = function () {
        return;
    };
    GoogleMapsMarker.prototype.showInfoWindow = function () {
        return;
    };
    GoogleMapsMarker.prototype.hideInfoWindow = function () {
        return;
    };
    GoogleMapsMarker.prototype.setPosition = function (latLng) {};
    GoogleMapsMarker.prototype.getPosition = function () {
        return;
    };
    GoogleMapsMarker.prototype.getMap = function () {
        return;
    };
    GoogleMapsMarker.prototype.setAnimation = function (animation) {};
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "isVisible", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMapsMarker.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "getHashCode", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "remove", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setOpacity", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "getOpacity", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setZIndex", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setIconAnchor", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setInfoWindowAnchor", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setDraggable", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "isDraggable", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setFlat", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setIcon", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setTitle", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "getTitle", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setSnippet", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "getSnippet", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setRotation", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "getRotation", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "showInfoWindow", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "hideInfoWindow", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setPosition", null);
    __decorate([plugin_2.CordovaInstance()], GoogleMapsMarker.prototype, "getPosition", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "getMap", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsMarker.prototype, "setAnimation", null);
    return GoogleMapsMarker;
}();
exports.GoogleMapsMarker = GoogleMapsMarker;
/**
 * @private
 */
var GoogleMapsCircle = function () {
    function GoogleMapsCircle(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsCircle.prototype.addEventListener = function (event) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var cb = function cb(data) {
                return observer.next(data);
            };
            _this._objectInstance.addEventListener(event, cb);
            return function () {
                return _this._objectInstance.removeEventListener(event, cb);
            };
        });
    };
    GoogleMapsCircle.prototype.getCenter = function () {
        return;
    };
    GoogleMapsCircle.prototype.getRadius = function () {
        return;
    };
    GoogleMapsCircle.prototype.getStrokeColor = function () {
        return;
    };
    GoogleMapsCircle.prototype.getVisible = function () {
        return;
    };
    GoogleMapsCircle.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsCircle.prototype.remove = function () {};
    GoogleMapsCircle.prototype.setCenter = function (latLng) {};
    GoogleMapsCircle.prototype.setFillColor = function (fillColor) {};
    GoogleMapsCircle.prototype.setStrokeColor = function (strokeColor) {};
    GoogleMapsCircle.prototype.setStrokeWidth = function (strokeWidth) {};
    GoogleMapsCircle.prototype.setVisible = function (visible) {};
    GoogleMapsCircle.prototype.setZIndex = function (zIndex) {};
    GoogleMapsCircle.prototype.setRadius = function (radius) {};
    GoogleMapsCircle.prototype.getMap = function () {
        return;
    };
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "getCenter", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "getRadius", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "getStrokeColor", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "getVisible", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "getZIndex", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "remove", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setCenter", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setFillColor", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setStrokeColor", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setStrokeWidth", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setZIndex", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "setRadius", null);
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsCircle.prototype, "getMap", null);
    return GoogleMapsCircle;
}();
exports.GoogleMapsCircle = GoogleMapsCircle;
/**
 * @private
 */
var GoogleMapsPolyline = function () {
    function GoogleMapsPolyline(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsPolyline.prototype.addEventListener = function (event) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var cb = function cb(data) {
                return observer.next(data);
            };
            _this._objectInstance.addEventListener(event, cb);
            return function () {
                return _this._objectInstance.removeEventListener(event, cb);
            };
        });
    };
    GoogleMapsPolyline.prototype.getPoints = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getCOlor = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getWidth = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getGeodesic = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsPolyline.prototype.remove = function () {};
    GoogleMapsPolyline.prototype.setPoints = function (points) {};
    GoogleMapsPolyline.prototype.setColor = function (color) {};
    GoogleMapsPolyline.prototype.setWidth = function (width) {};
    GoogleMapsPolyline.prototype.setVisible = function (visible) {};
    GoogleMapsPolyline.prototype.setZIndex = function (zIndex) {};
    GoogleMapsPolyline.prototype.setGeoDesic = function (geoDesic) {};
    GoogleMapsPolyline.prototype.getMap = function () {
        return;
    };
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "getPoints", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "getCOlor", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "getWidth", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "getGeodesic", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "getZIndex", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "remove", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "setPoints", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "setColor", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "setWidth", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "setZIndex", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "setGeoDesic", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolyline.prototype, "getMap", null);
    return GoogleMapsPolyline;
}();
exports.GoogleMapsPolyline = GoogleMapsPolyline;
/**
 * @private
 */
var GoogleMapsPolygon = function () {
    function GoogleMapsPolygon(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsPolygon.prototype.addEventListener = function (event) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var cb = function cb(data) {
                return observer.next(data);
            };
            _this._objectInstance.addEventListener(event, cb);
            return function () {
                return _this._objectInstance.removeEventListener(event, cb);
            };
        });
    };
    GoogleMapsPolygon.prototype.getPoints = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getStrokeColor = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getFillColor = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getStrokeWidth = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getGeodesic = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getVisible = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsPolygon.prototype.remove = function () {};
    GoogleMapsPolygon.prototype.setPoints = function (points) {};
    GoogleMapsPolygon.prototype.setStrokeColor = function (strokeColor) {};
    GoogleMapsPolygon.prototype.setFillColor = function (fillColor) {};
    GoogleMapsPolygon.prototype.setStrokeWidth = function (strokeWidth) {};
    GoogleMapsPolygon.prototype.setVisible = function (visible) {};
    GoogleMapsPolygon.prototype.setZIndex = function (zIndex) {};
    GoogleMapsPolygon.prototype.setGeodesic = function (geodesic) {};
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getPoints", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getStrokeColor", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getFillColor", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getStrokeWidth", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getGeodesic", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "getZIndex", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "remove", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setPoints", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setStrokeColor", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setFillColor", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setStrokeWidth", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setZIndex", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsPolygon.prototype, "setGeodesic", null);
    return GoogleMapsPolygon;
}();
exports.GoogleMapsPolygon = GoogleMapsPolygon;
/**
 * @private
 */
var GoogleMapsTileOverlay = function () {
    function GoogleMapsTileOverlay(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsTileOverlay.prototype.getVisible = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setVisible = function (visible) {};
    GoogleMapsTileOverlay.prototype.getFadeIn = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setFadeIn = function (fadeIn) {};
    GoogleMapsTileOverlay.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setZIndex = function (zIndex) {};
    GoogleMapsTileOverlay.prototype.getOpacity = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setOpacity = function (opacity) {};
    GoogleMapsTileOverlay.prototype.clearTileCache = function () {};
    GoogleMapsTileOverlay.prototype.remove = function () {};
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "getVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "getFadeIn", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "setFadeIn", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "getZIndex", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "setZIndex", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "getOpacity", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "setOpacity", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "clearTileCache", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsTileOverlay.prototype, "remove", null);
    return GoogleMapsTileOverlay;
}();
exports.GoogleMapsTileOverlay = GoogleMapsTileOverlay;
/**
 * @private
 */
var GoogleMapsGroundOverlay = function () {
    function GoogleMapsGroundOverlay(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsGroundOverlay.prototype.setBearing = function (bearing) {};
    GoogleMapsGroundOverlay.prototype.getBearing = function () {
        return;
    };
    GoogleMapsGroundOverlay.prototype.setOpacity = function (opacity) {};
    GoogleMapsGroundOverlay.prototype.getOpacity = function () {
        return;
    };
    GoogleMapsGroundOverlay.prototype.setVisible = function (visible) {};
    GoogleMapsGroundOverlay.prototype.getVisible = function () {
        return;
    };
    GoogleMapsGroundOverlay.prototype.setImage = function (image) {};
    ;
    GoogleMapsGroundOverlay.prototype.remove = function () {};
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "setBearing", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "getBearing", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "setOpacity", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "getOpacity", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "setVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "getVisible", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "setImage", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsGroundOverlay.prototype, "remove", null);
    return GoogleMapsGroundOverlay;
}();
exports.GoogleMapsGroundOverlay = GoogleMapsGroundOverlay;
/**
 * @private
 */
var GoogleMapsKmlOverlay = function () {
    function GoogleMapsKmlOverlay(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsKmlOverlay.prototype.remove = function () {};
    GoogleMapsKmlOverlay.prototype.getOverlays = function () {
        return;
    };
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsKmlOverlay.prototype, "remove", null);
    __decorate([plugin_2.CordovaInstance({ sync: true })], GoogleMapsKmlOverlay.prototype, "getOverlays", null);
    return GoogleMapsKmlOverlay;
}();
exports.GoogleMapsKmlOverlay = GoogleMapsKmlOverlay;
/**
 * @private
 */
var GoogleMapsLatLng = function () {
    function GoogleMapsLatLng(lat, lng) {
        this.lat = lat;
        this.lng = lng;
        this._objectInstance = new plugin.google.maps.LatLng(lat, lng);
    }
    GoogleMapsLatLng.prototype.equals = function (other) {
        return this.lat === other.lat && this.lng === other.lng;
    };
    GoogleMapsLatLng.prototype.toString = function () {
        return;
    };
    GoogleMapsLatLng.prototype.toUrlValue = function (precision) {
        precision = precision || 6;
        return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);
    };
    __decorate([plugin_2.CordovaInstance({
        sync: true
    })], GoogleMapsLatLng.prototype, "toString", null);
    return GoogleMapsLatLng;
}();
exports.GoogleMapsLatLng = GoogleMapsLatLng;
//# sourceMappingURL=googlemaps.js.map

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Httpd
 * @description
 * Embedded httpd for Cordova apps. Light weight HTTP server.
 * @usage
 */
var Httpd = function () {
    function Httpd() {}
    /**
     * Starts a web server.
     * @returns {Observable<string>} Returns an Observable. Subscribe to receive the URL for your web server (if succeeded). Unsubscribe to stop the server.
     * @param options {HttpdOptions}
     */
    Httpd.startServer = function (options) {
        return;
    };
    /**
     * Gets the URL of the running server
     * @returns {Promise<string>} Returns a promise that resolves with the URL of the web server.
     */
    Httpd.getUrl = function () {
        return;
    };
    /**
     * Get the local path of the running webserver
     * @returns {Promise<string>} Returns a promise that resolves with the local path of the web server.
     */
    Httpd.getLocalPath = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'stopServer'
    })], Httpd, "startServer", null);
    __decorate([plugin_1.Cordova()], Httpd, "getUrl", null);
    __decorate([plugin_1.Cordova()], Httpd, "getLocalPath", null);
    Httpd = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/floatinghotpot/cordova-httpd.git',
        pluginRef: 'cordova.plugins.CorHttpd',
        repo: 'https://github.com/floatinghotpot/cordova-httpd',
        platforms: ['iOS', 'Android']
    })], Httpd);
    return Httpd;
}();
exports.Httpd = Httpd;
//# sourceMappingURL=httpd.js.map

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Image Picker
 * @description
 * Cordova Plugin For Multiple Image Selection
 *
 * Requires Cordova plugin: `cordova-plugin-image-picker`.
 * For more info, please see the https://github.com/wymsee/cordova-imagePicker
 *
 * @usage
 * ```js
 * import {ImagePicker} from 'ionic-native';
 *
 *
 *
 * ImagePicker.getPictures(options).then((results) => {
 *   for (var i = 0; i < results.length; i++) {
 *       console.log('Image URI: ' + results[i]);
 *   }
 * }, (err) => {
 * });
 * ```
 */
var ImagePicker = function () {
    function ImagePicker() {}
    /**
     * Pick pictures from the library.
     * @param {ImagePickerOptions} options
     * @return Returns a Promise that resolves the image file URI
     * otherwise rejects with an error.
     */
    ImagePicker.getPictures = function (options) {
        return;
    };
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], ImagePicker, "getPictures", null);
    ImagePicker = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-image-picker',
        pluginRef: 'window.imagePicker',
        repo: 'https://github.com/wymsee/cordova-imagePicker'
    })], ImagePicker);
    return ImagePicker;
}();
exports.ImagePicker = ImagePicker;
//# sourceMappingURL=imagepicker.js.map

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var InAppBrowser = function () {
    function InAppBrowser() {}
    /**
     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.
     * @param  url     The URL to load.
     * @param  target  The target in which to load the URL, an optional parameter that defaults to _self.
     * @param  options Options for the InAppBrowser. Optional, defaulting to: location=yes.
     *                 The options string must not contain any blank space, and each feature's
     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.
     */
    InAppBrowser.open = function (url, target, options) {
        return;
    };
    __decorate([plugin_1.Cordova({
        sync: true
    })], InAppBrowser, "open", null);
    InAppBrowser = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-inappbrowser',
        pluginRef: 'cordova.InAppBrowser'
    })], InAppBrowser);
    return InAppBrowser;
}();
exports.InAppBrowser = InAppBrowser;
//# sourceMappingURL=inappbrowser.js.map

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Launch Navigator
 * @description
 * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).
 *
 * @usage
 * ```js
 * import {LaunchNavigator} from 'ionic-native';
 *
 *
 *
 * LaunchNavigator.navigate("Toronto, ON", "London, ON")
 *   .then(
 *     success => console.log("Launched navigator"),
 *     error => console.log("Error launching navigator", error)
 *   );
 * ```
 */
var LaunchNavigator = function () {
    function LaunchNavigator() {}
    /**
     * Launches navigator app
     * @param destination Location name or coordinates
     * @param start Location name or coordinates
     * @param options
     * @returns {Promise<any>}
     */
    LaunchNavigator.navigate = function (destination, start, options) {
        if (start === void 0) {
            start = null;
        }
        return;
    };
    __decorate([plugin_1.Cordova({
        successIndex: 2,
        errorIndex: 3
    })], LaunchNavigator, "navigate", null);
    LaunchNavigator = __decorate([plugin_1.Plugin({
        plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',
        pluginRef: 'launchnavigator',
        repo: 'https://github.com/dpa99c/phonegap-launch-navigator.git'
    })], LaunchNavigator);
    return LaunchNavigator;
}();
exports.LaunchNavigator = LaunchNavigator;
//# sourceMappingURL=launchnavigator.js.map

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Local Notifications
 * @description
 * This plugin allows you to display local notifications on the device
 *
 * @usage
 * ```ts
 * import {LocalNotifications} from 'ionic-native';
 *
 *
 *
 * // Schedule a single notification
 * LocalNotifications.schedule({
 *   id: 1,
 *   text: "Single Notification",
 *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf'
 *   data: { secret: key }
 * });
 *
 *
 * // Schedule multiple notifications
 * LocalNotifications.schedule([{
 *    id: 1,
 *    text: "Multi Notification 1",
 *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',
 *    data: { secret:key }
 *   },{
 *    id: 2,
 *    title: "Local Notification Example",
 *    text: "Multi Notification 2",
 *    icon: "http://example.com/icon.png"
 * }]);
 *
 *
 * // Schedule delayed notification
 * LocalNotifications.schedule({
 *    text: "Delayed Notification",
 *    at: new Date(new Date().getTime() + 3600),
 *    led: "FF0000",
 *    sound: null
 * });
 * ```
 *
 */
var LocalNotifications = function () {
    function LocalNotifications() {}
    /**
     * Schedules a single or multiple notifications
     * @param options
     */
    LocalNotifications.schedule = function (options) {};
    /**
     * Updates a previously scheduled notification. Must include the id in the options parameter.
     * @param options
     */
    LocalNotifications.update = function (options) {};
    /**
     * Clears single or multiple notifications
     * @param notificationId A single notification id, or an array of notification ids.
     */
    LocalNotifications.clear = function (notificationId) {
        return;
    };
    /**
     * Clears all notifications
     */
    LocalNotifications.clearAll = function () {
        return;
    };
    /**
     * Cancels single or multiple notifications
     * @param notificationId A single notification id, or an array of notification ids.
     */
    LocalNotifications.cancel = function (notificationId) {
        return;
    };
    /**
     * Cancels all notifications
     */
    LocalNotifications.cancelAll = function () {
        return;
    };
    /**
     * Checks presence of a notification
     * @param notificationId
     */
    LocalNotifications.isPresent = function (notificationId) {
        return;
    };
    /**
     * Checks is a notification is scheduled
     * @param notificationId
     */
    LocalNotifications.isScheduled = function (notificationId) {
        return;
    };
    /**
     * Checks if a notification is triggered
     * @param notificationId
     */
    LocalNotifications.isTriggered = function (notificationId) {
        return;
    };
    /**
     * Get all the notification ids
     */
    LocalNotifications.getAllIds = function () {
        return;
    };
    /**
     * Get the ids of triggered notifications
     */
    LocalNotifications.getTriggeredIds = function () {
        return;
    };
    /**
     * Get the ids of scheduled notifications
     */
    LocalNotifications.getScheduledIds = function () {
        return;
    };
    /**
     * Get a notification object
     * @param notificationId The id of the notification to get
     */
    LocalNotifications.get = function (notificationId) {
        return;
    };
    /**
     * Get a scheduled notification object
     * @param notificationId The id of the notification to get
     */
    LocalNotifications.getScheduled = function (notificationId) {
        return;
    };
    /**
     * Get a triggered notification object
     * @param notificationId The id of the notification to get
     */
    LocalNotifications.getTriggered = function (notificationId) {
        return;
    };
    /**
     * Get all notification objects
     */
    LocalNotifications.getAll = function () {
        return;
    };
    /**
     * Get all scheduled notification objects
     */
    LocalNotifications.getAllScheduled = function () {
        return;
    };
    /**
     * Get all triggered notification objects
     */
    LocalNotifications.getAllTriggered = function () {
        return;
    };
    /**
     * Sets a callback for a specific event
     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
     * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
     */
    LocalNotifications.on = function (eventName, callback) {};
    __decorate([plugin_1.Cordova({
        sync: true
    })], LocalNotifications, "schedule", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], LocalNotifications, "update", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "clear", null);
    __decorate([plugin_1.Cordova({
        successIndex: 0,
        errorIndex: 2
    })], LocalNotifications, "clearAll", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "cancel", null);
    __decorate([plugin_1.Cordova({
        successIndex: 0,
        errorIndex: 2
    })], LocalNotifications, "cancelAll", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "isPresent", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "isScheduled", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "isTriggered", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getAllIds", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getTriggeredIds", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getScheduledIds", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "get", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getScheduled", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getTriggered", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getAll", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getAllScheduled", null);
    __decorate([plugin_1.Cordova()], LocalNotifications, "getAllTriggered", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], LocalNotifications, "on", null);
    LocalNotifications = __decorate([plugin_1.Plugin({
        plugin: 'de.appplant.cordova.plugin.local-notification',
        pluginRef: 'cordova.plugins.notification.local',
        repo: 'https://github.com/katzer/cordova-plugin-local-notifications'
    })], LocalNotifications);
    return LocalNotifications;
}();
exports.LocalNotifications = LocalNotifications;
//# sourceMappingURL=localnotifications.js.map

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var Observable_1 = __webpack_require__(39);
/**
 * @name MediaPlugin
 * @description
 * @usage
 * ```ts
 * import {MediaPlugin} from 'ionic-native';
 *
 *
 *
 * // Create a MediaPlugin instance.  Expects path to file or url as argument
 * var file = new MediaPlugin("path/to/file.mp3");
 *
 * // Catch the Success & Error Output
 * // Platform Quirks
 * // iOS calls success on completion of playback only
 * // Android calls success on completion of playback AND on release()
 * file.init.then(() => {
 *   console.log("Playback Finished");
 * }, (err) => {
 *   console.log("somthing went wrong! error code: "+err.code+" message: "+err.message);
 * });
 *
 * // play the file
 * file.play();
 *
 * // pause the file
 * file.pause();
 *
 * // get current playback position
 * file.getCurrentPosition().then((position) => {
 *   console.log(position);
 * });
 *
 * // get file duration
 * file.getDuration().then((duration) => {
 *   console.log(position);
 * });
 *
 * // skip to 10 seconds (expects int value in ms)
 * file.seekTo(10000);
 *
 * // stop playing the file
 * file.stop();
 *
 * // release the native audio resource
 * // Platform Quirks:
 * // iOS simply create a new instance and the old one will be overwritten
 * // Android you must call release() to destroy instances of media when you are done
 * file.release();
 *
 * // Recording to a file
 * var newFile = new MediaPlugin("path/to/file.mp3");
 * newFile.startRecord();
 *
 * newFile.stopRecord();
 *
 *
 *
 * ```
 */
var MediaPlugin = function () {
    // Methods
    /**
     * Open a media file
     * @param src {string} A URI containing the audio content.
     */
    function MediaPlugin(src) {
        var res, rej, next;
        this.init = new Promise(function (resolve, reject) {
            res = resolve;rej = reject;
        });
        this.status = new Observable_1.Observable(function (observer) {
            next = function next(data) {
                return observer.next(data);
            };
        });
        this._objectInstance = new Media(src, res, rej, next);
    }
    /**
     * Returns the current amplitude of the current recording.
     */
    MediaPlugin.prototype.getCurrentAmplitude = function () {
        return;
    };
    /**
     * Returns the current position within an audio file. Also updates the Media object's position parameter.
     */
    MediaPlugin.prototype.getCurrentPosition = function () {
        return;
    };
    /**
     * Returns the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.
     */
    MediaPlugin.prototype.getDuration = function () {
        return;
    };
    /**
     * Starts or resumes playing an audio file.
     */
    MediaPlugin.prototype.play = function (iosOptions) {};
    /**
     * Pauses playing an audio file.
     */
    MediaPlugin.prototype.pause = function () {};
    /**
     * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.
     */
    MediaPlugin.prototype.release = function () {};
    /**
     * Sets the current position within an audio file.
     * @param milliseconds
     */
    MediaPlugin.prototype.seekTo = function (milliseconds) {};
    /**
     * Set the volume for an audio file.
     * @param volume The volume to set for playback. The value must be within the range of 0.0 to 1.0.
     */
    MediaPlugin.prototype.setVolume = function (volume) {};
    /**
     * Starts recording an audio file.
     */
    MediaPlugin.prototype.startRecord = function () {};
    /**
     * Stops recording
     */
    MediaPlugin.prototype.stopRecord = function () {};
    /**
     * Stops playing an audio file.
     */
    MediaPlugin.prototype.stop = function () {};
    // Constants
    MediaPlugin.MEDIA_NONE = 0;
    MediaPlugin.MEDIA_STARTING = 1;
    MediaPlugin.MEDIA_RUNNING = 2;
    MediaPlugin.MEDIA_PAUSED = 3;
    MediaPlugin.MEDIA_STOPPED = 4;
    __decorate([plugin_1.CordovaInstance()], MediaPlugin.prototype, "getCurrentAmplitude", null);
    __decorate([plugin_1.CordovaInstance()], MediaPlugin.prototype, "getCurrentPosition", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "getDuration", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "play", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "pause", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "release", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "seekTo", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "setVolume", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "startRecord", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "stopRecord", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], MediaPlugin.prototype, "stop", null);
    MediaPlugin = __decorate([plugin_1.Plugin({
        repo: 'https://github.com/apache/cordova-plugin-media',
        plugin: 'cordova-plugin-media',
        pluginRef: 'Media'
    })], MediaPlugin);
    return MediaPlugin;
}();
exports.MediaPlugin = MediaPlugin;
var MediaError = function () {
    function MediaError() {}
    Object.defineProperty(MediaError, "MEDIA_ERR_ABORTED", {
        get: function get() {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaError, "MEDIA_ERR_NETWORK", {
        get: function get() {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaError, "MEDIA_ERR_DECODE", {
        get: function get() {
            return 3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaError, "MEDIA_ERR_NONE_SUPPORTED", {
        get: function get() {
            return 4;
        },
        enumerable: true,
        configurable: true
    });
    return MediaError;
}();
exports.MediaError = MediaError;
//# sourceMappingURL=media.js.map

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Push
 * @description
 * Register and receive push notifications.
 *
 * Requires Cordova plugin: `phonegap-plugin-push`. For more info, please see the [Push plugin docs](https://github.com/phonegap/phonegap-plugin-push).
 *
 * For TypeScript users, see the [Push plugin docs about using TypeScript for custom notifications](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md).
 *
 * @usage
 * ```js
 * import {Push} from 'ionic-native';
 *
 *
 *
 * ```
 */
var Push = function () {
    function Push() {}
    /**
     * Initialize the plugin on the native side.
     *
     * ```
     * var push = Push.init({
     *    android: {
     *        senderID: "12345679"
     *    },
     *    ios: {
     *        alert: "true",
     *        badge: true,
     *        sound: 'false'
     *    },
     *    windows: {}
     * });
     * ```
     *
     * @param {PushOptions} options  The Push [options](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#parameters).
     * @return {PushNotification}  Returns a new [PushNotification](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#pushonevent-callback) object.
     */
    Push.init = function (options) {
        return;
    };
    /**
     * Check whether the push notification permission has been granted.
     * @return {Promise} Returns a Promise that resolves with an object with one property: isEnabled, a boolean that indicates if permission has been granted.
     */
    Push.hasPermission = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        sync: true
    })], Push, "init", null);
    __decorate([plugin_1.Cordova()], Push, "hasPermission", null);
    Push = __decorate([plugin_1.Plugin({
        plugin: 'phonegap-plugin-push',
        pluginRef: 'PushNotification',
        repo: 'https://github.com/phonegap/phonegap-plugin-push'
    })], Push);
    return Push;
}();
exports.Push = Push;
//# sourceMappingURL=push.js.map

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name SafariViewController
 * @description
 * @usage
 * ```
 * import {SafariViewController} from 'ionic-native';
 *
 * ...
 *
 * SafariViewController.isAvailable()
 *   .then(
 *     (available) => {
 *       if(available){
 *
 *         SafariViewController.show({
 *           url: 'http://ionic.io',
 *           hidden: false,
 *           animated: false,
 *           transition: 'curl',
 *           enterReaderModeIfAvailable: true,
 *           tintColor: '#ff0000'
 *         })
 *         .then(
 *           (result: any) => {
 *             if(result.event === 'opened') console.log("Opened");
 *             else if(result.event === 'loaded') console.log("Loaded");
 *             else if(result.event === 'closed') console.log("Closed");
 *           },
 *           (error: any) => console.error(error)
 *         );
 *
 *       } else {
 *         // use fallback browser, example InAppBrowser
 *       }
 *     }
 *   );
 * ```
 */
var SafariViewController = function () {
    function SafariViewController() {}
    /**
     * Checks if SafariViewController is available
     */
    SafariViewController.isAvailable = function () {
        return;
    };
    /**
     * Shows Safari View Controller
     * @param options
     */
    SafariViewController.show = function (options) {};
    /**
     * Hides Safari View Controller
     */
    SafariViewController.hide = function () {};
    /**
     * Tries to connect to the  Chrome's custom tabs service. you must call this method before calling any of the other methods listed below.
     */
    SafariViewController.connectToService = function () {
        return;
    };
    /**
     * Call this method whenever there's a chance the user will open an external url.
     */
    SafariViewController.warmUp = function () {
        return;
    };
    /**
     * For even better performance optimization, call this methods if there's more than a 50% chance the user will open a certain URL.
     * @param url
     */
    SafariViewController.mayLaunchUrl = function (url) {
        return;
    };
    __decorate([plugin_1.Cordova()], SafariViewController, "isAvailable", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], SafariViewController, "show", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], SafariViewController, "hide", null);
    __decorate([plugin_1.Cordova()], SafariViewController, "connectToService", null);
    __decorate([plugin_1.Cordova()], SafariViewController, "warmUp", null);
    __decorate([plugin_1.Cordova()], SafariViewController, "mayLaunchUrl", null);
    SafariViewController = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-safariviewcontroller',
        pluginRef: 'SafariViewController',
        platforms: ['iOS'],
        repo: 'https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller'
    })], SafariViewController);
    return SafariViewController;
}();
exports.SafariViewController = SafariViewController;
//# sourceMappingURL=safari-view-controller.js.map

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name SMS
 * @description
 *
 * Requires Cordova plugin: cordova-plugin-sms. For more info, please see the [SMS plugin docs](https://github.com/cordova-sms/cordova-sms-plugin).
 *
 * @usage
 * ```ts
 * import {SMS} from 'ionic-native';
 *
 *
 *
 * // Send a text message using default options
 * SMS.send('416123456','Hello world!');
 *
 * ```
 */
var SMS = function () {
    function SMS() {}
    /**
     * Sends sms to a number
     * @param phoneNumber {string|Array<string>} Phone number
     * @param message {string} Message
     * @param options {SmsOptions} Options
     * @returns {Promise<any>} Resolves promise when the SMS has been sent
     */
    SMS.send = function (phoneNumber, message, options) {
        return;
    };
    __decorate([plugin_1.Cordova()], SMS, "send", null);
    SMS = __decorate([plugin_1.Plugin({
        plugin: 'cordova-sms-plugin',
        pluginRef: 'sms',
        repo: 'https://github.com/cordova-sms/cordova-sms-plugin',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], SMS);
    return SMS;
}();
exports.SMS = SMS;
//# sourceMappingURL=sms.js.map

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Spinner Dialog
 * @description
 * @usage
 * ```js
 * import {SpinnerDialog} from 'ionic-native';
 *
 *
 *
 * SpinnerDialog.show();
 *
 * SpinnerDialog.hide();
 * ```
 */
var SpinnerDialog = function () {
    function SpinnerDialog() {}
    /**
     * Shows the spinner dialog
     * @param title {string} Spinner title (shows on Android only)
     * @param message {string} Spinner message
     * @param cancelCallback {boolean|function} Set to false to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.
     * @param iOSOptions {object} Options for iOS only
     */
    SpinnerDialog.show = function (title, message, cancelCallback, iOSOptions) {};
    /**
     * Hides the spinner dialog if visible
     */
    SpinnerDialog.hide = function () {};
    __decorate([plugin_1.Cordova({
        sync: true
    })], SpinnerDialog, "show", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], SpinnerDialog, "hide", null);
    SpinnerDialog = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-spinner-dialog',
        pluginRef: 'window.plugins.spinnerDialog',
        repo: 'https://github.com/Paldom/SpinnerDialog',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], SpinnerDialog);
    return SpinnerDialog;
}();
exports.SpinnerDialog = SpinnerDialog;
//# sourceMappingURL=spinnerdialog.js.map

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Toast
 * @description
 * This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.
 *
 * Requires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).
 *
 * @usage
 * ```ts
 * import {Toast} from 'ionic-native';
 *
 *
 *
 * Toast.show("I'm a toast", 5000, "center").subscribe(
 *   toast => {
 *     console.log(toast);
 *   }
 * );
 * ```
 */
var Toast = function () {
    function Toast() {}
    /**
     * Show a native toast for the given duration at the specified position.
     *
     * @param {string} message  The message to display.
     * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.
     * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.show = function (message, duration, position) {
        return;
    };
    /**
     * Manually hide any currently visible toast.
     * @return {Promise} Returns a Promise that resolves on success.
     */
    Toast.hide = function () {
        return;
    };
    /**
     * Show a native toast with the given options.
     *
     * @param {Object} options  Options for showing a toast. Available options:
     *   message  The message to display.
     *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.
     *   position  Where to position the toast, either 'top', 'center', or 'bottom'.
     *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.
     *
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showWithOptions = function (options) {
        return;
    };
    /**
     * Shorthand for `show(message, 'short', 'top')`.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showShortTop = function (message) {
        return;
    };
    /**
     * Shorthand for `show(message, 'short', 'center')`.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showShortCenter = function (message) {
        return;
    };
    /**
     * Shorthand for `show(message, 'short', 'bottom')`.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showShortBottom = function (message) {
        return;
    };
    /**
     * Shorthand for `show(message, 'long', 'top')`.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showLongTop = function (message) {
        return;
    };
    /**
     * Shorthand for `show(message, 'long', 'center')`.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showLongCenter = function (message) {
        return;
    };
    /**
     * Shorthand for `show(message, 'long', 'bottom')`.
     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
     */
    Toast.showLongBottom = function (message) {
        return;
    };
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "show", null);
    __decorate([plugin_1.Cordova()], Toast, "hide", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showWithOptions", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showShortTop", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showShortCenter", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showShortBottom", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showLongTop", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showLongCenter", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'hide'
    })], Toast, "showLongBottom", null);
    Toast = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-x-toast',
        pluginRef: 'plugins.toast',
        repo: 'https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], Toast);
    return Toast;
}();
exports.Toast = Toast;
//# sourceMappingURL=toast.js.map

/***/ },
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__ = __webpack_require__(403);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view___default = __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__ && __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view___default, 'a', __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app__ = __webpack_require__(987);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element___default = __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__ && __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element___default, 'a', __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__ = __webpack_require__(310);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav___default = __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__ && __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav___default, 'a', __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils__ = __webpack_require__(267);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils___default = __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils__ && __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils___default, 'a', __WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type___default = __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__ && __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type___default, 'a', __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__ = __webpack_require__(176);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection___default = __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__ && __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection___default, 'a', __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_ionic_angular_components_nav_nav_d_ngfactory__ = __webpack_require__(986);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller___default = __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller__ && __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller___default, 'a', __WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller___default = __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller__ && __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller___default, 'a', __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app___default = __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app__ && __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app___default, 'a', __WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config___default = __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config__ && __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config___default, 'a', __WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard___default = __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard__ && __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard___default, 'a', __WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref__ = __webpack_require__(266);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref___default = __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref__ && __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref___default, 'a', __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone__ = __webpack_require__(408);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone___default = __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone__ && __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone___default, 'a', __WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver__ = __webpack_require__(401);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver___default = __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver__ && __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver___default, 'a', __WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view__ = __webpack_require__(404);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view___default = __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view__ && __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view___default, 'a', __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform___default = __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform__ && __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform___default, 'a', __WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory___default = __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory__ && __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory___default, 'a', __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory___default);
/* unused harmony export viewFactory_App0 */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return AppNgFactory; });/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};



















var styles_App = [];
var renderType_App = null;
var _View_App0 = (function (_super) {
    __extends(_View_App0, _super);
    function _View_App0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_App0, renderType_App, __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.ChangeDetectionStrategy.CheckAlways);
    }
    _View_App0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'ion-nav', null);
        this._appEl_0 = new __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__.AppElement(0, null, this, this._el_0);
        var compView_0 = __WEBPACK_IMPORTED_MODULE_7_ionic_angular_components_nav_nav_d_ngfactory__.viewFactory_Nav0(this.viewUtils, this.injector(0), this._appEl_0);
        this._Nav_0_4 = new __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__.Nav(this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_8_ionic_angular_components_nav_view_controller__.ViewController, null), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_nav_nav_controller__.NavController, null), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_10_ionic_angular_components_app_app__.App), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_11_ionic_angular_config_config__.Config), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_12_ionic_angular_util_keyboard__.Keyboard), new __WEBPACK_IMPORTED_MODULE_13__angular_core_src_linker_element_ref__.ElementRef(this._el_0), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_14__angular_core_src_zone_ng_zone__.NgZone), this.renderer, this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_15__angular_core_src_linker_component_resolver__.ComponentResolver));
        this._appEl_0.initComponent(this._Nav_0_4, [], compView_0);
        compView_0.create(this._Nav_0_4, [], null);
        this._expr_0 = __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.uninitialized;
        this.init([], [this._el_0], [], []);
        return null;
    };
    _View_App0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === __WEBPACK_IMPORTED_MODULE_3_ionic_angular_components_nav_nav__.Nav) && (0 === requestNodeIndex))) {
            return this._Nav_0_4;
        }
        return notFoundResult;
    };
    _View_App0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = this.context.rootPage;
        if (__WEBPACK_IMPORTED_MODULE_4__angular_core_src_linker_view_utils__.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._Nav_0_4.root = currVal_0;
            this._expr_0 = currVal_0;
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.cdState === __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.ChangeDetectorState.NeverChecked)) {
                this._Nav_0_4.ngAfterViewInit();
            }
        }
    };
    return _View_App0;
}(__WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__.AppView));
function viewFactory_App0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_App === null)) {
        (renderType_App = viewUtils.createRenderComponentType('/Users/joshthomas/Workspace/tree-shake-ionic2/typescript-only-es2015-jsnext-ionic/src/app/app.ts class App - inline template', 0, __WEBPACK_IMPORTED_MODULE_16__angular_core_src_metadata_view__.ViewEncapsulation.None, styles_App));
    }
    return new _View_App0(viewUtils, parentInjector, declarationEl);
}
var styles_App_Host = [];
var renderType_App_Host = null;
var _View_App_Host0 = (function (_super) {
    __extends(_View_App_Host0, _super);
    function _View_App_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_App_Host0, renderType_App_Host, __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__.ViewType.HOST, viewUtils, parentInjector, declarationEl, __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.ChangeDetectionStrategy.CheckAlways);
    }
    _View_App_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-app', rootSelector, null);
        this._appEl_0 = new __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_element__.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_App0(this.viewUtils, this.injector(0), this._appEl_0);
        this._App_0_4 = new __WEBPACK_IMPORTED_MODULE_1__app__.App(this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_17_ionic_angular_platform_platform__.Platform));
        this._appEl_0.initComponent(this._App_0_4, [], compView_0);
        compView_0.create(this._App_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_App_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === __WEBPACK_IMPORTED_MODULE_1__app__.App) && (0 === requestNodeIndex))) {
            return this._App_0_4;
        }
        return notFoundResult;
    };
    return _View_App_Host0;
}(__WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__.AppView));
function viewFactory_App_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_App_Host === null)) {
        (renderType_App_Host = viewUtils.createRenderComponentType('', 0, null, styles_App_Host));
    }
    return new _View_App_Host0(viewUtils, parentInjector, declarationEl);
}
var AppNgFactory = new __WEBPACK_IMPORTED_MODULE_18__angular_core_src_linker_component_factory__.ComponentFactory('ion-app', viewFactory_App_Host0, __WEBPACK_IMPORTED_MODULE_1__app__.App);


/***/ },
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var lang_1 = __webpack_require__(11);
var ActiveAnimationPlayersMap = function () {
    function ActiveAnimationPlayersMap() {
        this._map = new collection_1.Map();
        this._allPlayers = [];
    }
    Object.defineProperty(ActiveAnimationPlayersMap.prototype, "length", {
        get: function get() {
            return this.getAllPlayers().length;
        },
        enumerable: true,
        configurable: true
    });
    ActiveAnimationPlayersMap.prototype.find = function (element, animationName) {
        var playersByAnimation = this._map.get(element);
        if (lang_1.isPresent(playersByAnimation)) {
            return playersByAnimation[animationName];
        }
    };
    ActiveAnimationPlayersMap.prototype.findAllPlayersByElement = function (element) {
        var players = [];
        collection_1.StringMapWrapper.forEach(this._map.get(element), function (player /** TODO #9100 */) {
            return players.push(player);
        });
        return players;
    };
    ActiveAnimationPlayersMap.prototype.set = function (element, animationName, player) {
        var playersByAnimation = this._map.get(element);
        if (!lang_1.isPresent(playersByAnimation)) {
            playersByAnimation = {};
        }
        var existingEntry = playersByAnimation[animationName];
        if (lang_1.isPresent(existingEntry)) {
            this.remove(element, animationName);
        }
        playersByAnimation[animationName] = player;
        this._allPlayers.push(player);
        this._map.set(element, playersByAnimation);
    };
    ActiveAnimationPlayersMap.prototype.getAllPlayers = function () {
        return this._allPlayers;
    };
    ActiveAnimationPlayersMap.prototype.remove = function (element, animationName) {
        var playersByAnimation = this._map.get(element);
        if (lang_1.isPresent(playersByAnimation)) {
            var player = playersByAnimation[animationName];
            delete playersByAnimation[animationName];
            var index = this._allPlayers.indexOf(player);
            collection_1.ListWrapper.removeAt(this._allPlayers, index);
            if (collection_1.StringMapWrapper.isEmpty(playersByAnimation)) {
                this._map.delete(element);
            }
        }
    };
    return ActiveAnimationPlayersMap;
}();
exports.ActiveAnimationPlayersMap = ActiveAnimationPlayersMap;
//# sourceMappingURL=active_animation_players_map.js.map

/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
var math_1 = __webpack_require__(617);
var AnimationGroupPlayer = function () {
    function AnimationGroupPlayer(_players) {
        var _this = this;
        this._players = _players;
        this._subscriptions = [];
        this._finished = false;
        this.parentPlayer = null;
        var count = 0;
        var total = this._players.length;
        if (total == 0) {
            lang_1.scheduleMicroTask(function () {
                return _this._onFinish();
            });
        } else {
            this._players.forEach(function (player) {
                player.parentPlayer = _this;
                player.onDone(function () {
                    if (++count >= total) {
                        _this._onFinish();
                    }
                });
            });
        }
    }
    AnimationGroupPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            if (!lang_1.isPresent(this.parentPlayer)) {
                this.destroy();
            }
            this._subscriptions.forEach(function (subscription) {
                return subscription();
            });
            this._subscriptions = [];
        }
    };
    AnimationGroupPlayer.prototype.onDone = function (fn) {
        this._subscriptions.push(fn);
    };
    AnimationGroupPlayer.prototype.play = function () {
        this._players.forEach(function (player) {
            return player.play();
        });
    };
    AnimationGroupPlayer.prototype.pause = function () {
        this._players.forEach(function (player) {
            return player.pause();
        });
    };
    AnimationGroupPlayer.prototype.restart = function () {
        this._players.forEach(function (player) {
            return player.restart();
        });
    };
    AnimationGroupPlayer.prototype.finish = function () {
        this._onFinish();
        this._players.forEach(function (player) {
            return player.finish();
        });
    };
    AnimationGroupPlayer.prototype.destroy = function () {
        this._onFinish();
        this._players.forEach(function (player) {
            return player.destroy();
        });
    };
    AnimationGroupPlayer.prototype.reset = function () {
        this._players.forEach(function (player) {
            return player.reset();
        });
    };
    AnimationGroupPlayer.prototype.setPosition = function (p /** TODO #9100 */) {
        this._players.forEach(function (player) {
            player.setPosition(p);
        });
    };
    AnimationGroupPlayer.prototype.getPosition = function () {
        var min = 0;
        this._players.forEach(function (player) {
            var p = player.getPosition();
            min = math_1.Math.min(p, min);
        });
        return min;
    };
    return AnimationGroupPlayer;
}();
exports.AnimationGroupPlayer = AnimationGroupPlayer;
//# sourceMappingURL=animation_group_player.js.map

/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
var di_1 = __webpack_require__(258);
/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
 * using this token.
 * @experimental
 */
exports.APP_ID = new di_1.OpaqueToken('AppId');
function _appIdRandomProviderFactory() {
  return "" + _randomChar() + _randomChar() + _randomChar();
}
/**
 * Providers that will generate a random APP_ID_TOKEN.
 * @experimental
 */
exports.APP_ID_RANDOM_PROVIDER =
/*@ts2dart_const*/ /* @ts2dart_Provider */{
  provide: exports.APP_ID,
  useFactory: _appIdRandomProviderFactory,
  deps: []
};
function _randomChar() {
  return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
}
/**
 * A function that will be executed when a platform is initialized.
 * @experimental
 */
exports.PLATFORM_INITIALIZER =
/*@ts2dart_const*/new di_1.OpaqueToken('Platform Initializer');
/**
 * A function that will be executed when an application is initialized.
 * @experimental
 */
exports.APP_INITIALIZER =
/*@ts2dart_const*/new di_1.OpaqueToken('Application Initializer');
/**
 * A token which indicates the root directory of the application
 * @experimental
 */
exports.PACKAGE_ROOT_URL =
/*@ts2dart_const*/new di_1.OpaqueToken('Application Packages Root URL');
//# sourceMappingURL=application_tokens.js.map

/***/ },
/* 613 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * @stable
 */

var ChangeDetectorRef = function () {
    function ChangeDetectorRef() {}
    return ChangeDetectorRef;
}();
exports.ChangeDetectorRef = ChangeDetectorRef;
//# sourceMappingURL=change_detector_ref.js.map

/***/ },
/* 614 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * Creates a token that can be used in a DI Provider.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
 *
 * ```typescript
 * var t = new OpaqueToken("value");
 *
 * var injector = Injector.resolveAndCreate([
 *   {provide: t, useValue: "bindingValue"}
 * ]);
 *
 * expect(injector.get(t)).toEqual("bindingValue");
 * ```
 *
 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
 * caused by multiple providers using the same string as two different tokens.
 *
 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
 * error messages.
 * @ts2dart_const
 * @stable
 */

var OpaqueToken = function () {
    function OpaqueToken(_desc) {
        this._desc = _desc;
    }
    OpaqueToken.prototype.toString = function () {
        return "Token " + this._desc;
    };
    return OpaqueToken;
}();
exports.OpaqueToken = OpaqueToken;
//# sourceMappingURL=opaque_token.js.map

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var provider_1 = __webpack_require__(262);
function isProviderLiteral(obj) {
    return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && obj.provide;
}
exports.isProviderLiteral = isProviderLiteral;
function createProvider(obj) {
    return new provider_1.Provider(obj.provide, obj);
}
exports.createProvider = createProvider;
//# sourceMappingURL=provider_util.js.map

/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var injector_1 = __webpack_require__(261);
var metadata_1 = __webpack_require__(177);
var reflective_exceptions_1 = __webpack_require__(263);
var reflective_key_1 = __webpack_require__(264);
var reflective_provider_1 = __webpack_require__(398);
var __unused; // avoid unused import when Type union types are erased
// Threshold for the dynamic version
var _MAX_CONSTRUCTION_COUNTER = 10;
var UNDEFINED = new Object();
var ReflectiveProtoInjectorInlineStrategy = function () {
    function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
        this.provider0 = null;
        this.provider1 = null;
        this.provider2 = null;
        this.provider3 = null;
        this.provider4 = null;
        this.provider5 = null;
        this.provider6 = null;
        this.provider7 = null;
        this.provider8 = null;
        this.provider9 = null;
        this.keyId0 = null;
        this.keyId1 = null;
        this.keyId2 = null;
        this.keyId3 = null;
        this.keyId4 = null;
        this.keyId5 = null;
        this.keyId6 = null;
        this.keyId7 = null;
        this.keyId8 = null;
        this.keyId9 = null;
        var length = providers.length;
        if (length > 0) {
            this.provider0 = providers[0];
            this.keyId0 = providers[0].key.id;
        }
        if (length > 1) {
            this.provider1 = providers[1];
            this.keyId1 = providers[1].key.id;
        }
        if (length > 2) {
            this.provider2 = providers[2];
            this.keyId2 = providers[2].key.id;
        }
        if (length > 3) {
            this.provider3 = providers[3];
            this.keyId3 = providers[3].key.id;
        }
        if (length > 4) {
            this.provider4 = providers[4];
            this.keyId4 = providers[4].key.id;
        }
        if (length > 5) {
            this.provider5 = providers[5];
            this.keyId5 = providers[5].key.id;
        }
        if (length > 6) {
            this.provider6 = providers[6];
            this.keyId6 = providers[6].key.id;
        }
        if (length > 7) {
            this.provider7 = providers[7];
            this.keyId7 = providers[7].key.id;
        }
        if (length > 8) {
            this.provider8 = providers[8];
            this.keyId8 = providers[8].key.id;
        }
        if (length > 9) {
            this.provider9 = providers[9];
            this.keyId9 = providers[9].key.id;
        }
    }
    ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
        if (index == 0) return this.provider0;
        if (index == 1) return this.provider1;
        if (index == 2) return this.provider2;
        if (index == 3) return this.provider3;
        if (index == 4) return this.provider4;
        if (index == 5) return this.provider5;
        if (index == 6) return this.provider6;
        if (index == 7) return this.provider7;
        if (index == 8) return this.provider8;
        if (index == 9) return this.provider9;
        throw new reflective_exceptions_1.OutOfBoundsError(index);
    };
    ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
        return new ReflectiveInjectorInlineStrategy(injector, this);
    };
    return ReflectiveProtoInjectorInlineStrategy;
}();
exports.ReflectiveProtoInjectorInlineStrategy = ReflectiveProtoInjectorInlineStrategy;
var ReflectiveProtoInjectorDynamicStrategy = function () {
    function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
        this.providers = providers;
        var len = providers.length;
        this.keyIds = collection_1.ListWrapper.createFixedSize(len);
        for (var i = 0; i < len; i++) {
            this.keyIds[i] = providers[i].key.id;
        }
    }
    ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
        if (index < 0 || index >= this.providers.length) {
            throw new reflective_exceptions_1.OutOfBoundsError(index);
        }
        return this.providers[index];
    };
    ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
        return new ReflectiveInjectorDynamicStrategy(this, ei);
    };
    return ReflectiveProtoInjectorDynamicStrategy;
}();
exports.ReflectiveProtoInjectorDynamicStrategy = ReflectiveProtoInjectorDynamicStrategy;
var ReflectiveProtoInjector = function () {
    function ReflectiveProtoInjector(providers) {
        this.numberOfProviders = providers.length;
        this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
    }
    ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
        return new ReflectiveProtoInjector(providers);
    };
    ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
        return this._strategy.getProviderAtIndex(index);
    };
    return ReflectiveProtoInjector;
}();
exports.ReflectiveProtoInjector = ReflectiveProtoInjector;
var ReflectiveInjectorInlineStrategy = function () {
    function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
        this.injector = injector;
        this.protoStrategy = protoStrategy;
        this.obj0 = UNDEFINED;
        this.obj1 = UNDEFINED;
        this.obj2 = UNDEFINED;
        this.obj3 = UNDEFINED;
        this.obj4 = UNDEFINED;
        this.obj5 = UNDEFINED;
        this.obj6 = UNDEFINED;
        this.obj7 = UNDEFINED;
        this.obj8 = UNDEFINED;
        this.obj9 = UNDEFINED;
    }
    ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () {
        this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
        return this.injector._new(provider);
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
        var p = this.protoStrategy;
        var inj = this.injector;
        if (p.keyId0 === keyId) {
            if (this.obj0 === UNDEFINED) {
                this.obj0 = inj._new(p.provider0);
            }
            return this.obj0;
        }
        if (p.keyId1 === keyId) {
            if (this.obj1 === UNDEFINED) {
                this.obj1 = inj._new(p.provider1);
            }
            return this.obj1;
        }
        if (p.keyId2 === keyId) {
            if (this.obj2 === UNDEFINED) {
                this.obj2 = inj._new(p.provider2);
            }
            return this.obj2;
        }
        if (p.keyId3 === keyId) {
            if (this.obj3 === UNDEFINED) {
                this.obj3 = inj._new(p.provider3);
            }
            return this.obj3;
        }
        if (p.keyId4 === keyId) {
            if (this.obj4 === UNDEFINED) {
                this.obj4 = inj._new(p.provider4);
            }
            return this.obj4;
        }
        if (p.keyId5 === keyId) {
            if (this.obj5 === UNDEFINED) {
                this.obj5 = inj._new(p.provider5);
            }
            return this.obj5;
        }
        if (p.keyId6 === keyId) {
            if (this.obj6 === UNDEFINED) {
                this.obj6 = inj._new(p.provider6);
            }
            return this.obj6;
        }
        if (p.keyId7 === keyId) {
            if (this.obj7 === UNDEFINED) {
                this.obj7 = inj._new(p.provider7);
            }
            return this.obj7;
        }
        if (p.keyId8 === keyId) {
            if (this.obj8 === UNDEFINED) {
                this.obj8 = inj._new(p.provider8);
            }
            return this.obj8;
        }
        if (p.keyId9 === keyId) {
            if (this.obj9 === UNDEFINED) {
                this.obj9 = inj._new(p.provider9);
            }
            return this.obj9;
        }
        return UNDEFINED;
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
        if (index == 0) return this.obj0;
        if (index == 1) return this.obj1;
        if (index == 2) return this.obj2;
        if (index == 3) return this.obj3;
        if (index == 4) return this.obj4;
        if (index == 5) return this.obj5;
        if (index == 6) return this.obj6;
        if (index == 7) return this.obj7;
        if (index == 8) return this.obj8;
        if (index == 9) return this.obj9;
        throw new reflective_exceptions_1.OutOfBoundsError(index);
    };
    ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () {
        return _MAX_CONSTRUCTION_COUNTER;
    };
    return ReflectiveInjectorInlineStrategy;
}();
exports.ReflectiveInjectorInlineStrategy = ReflectiveInjectorInlineStrategy;
var ReflectiveInjectorDynamicStrategy = function () {
    function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
        this.protoStrategy = protoStrategy;
        this.injector = injector;
        this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
        collection_1.ListWrapper.fill(this.objs, UNDEFINED);
    }
    ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () {
        this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
        return this.injector._new(provider);
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
        var p = this.protoStrategy;
        for (var i = 0; i < p.keyIds.length; i++) {
            if (p.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                    this.objs[i] = this.injector._new(p.providers[i]);
                }
                return this.objs[i];
            }
        }
        return UNDEFINED;
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
        if (index < 0 || index >= this.objs.length) {
            throw new reflective_exceptions_1.OutOfBoundsError(index);
        }
        return this.objs[index];
    };
    ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () {
        return this.objs.length;
    };
    return ReflectiveInjectorDynamicStrategy;
}();
exports.ReflectiveInjectorDynamicStrategy = ReflectiveInjectorDynamicStrategy;
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * @Injectable()
 * class Engine {
 * }
 *
 * @Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 */
var ReflectiveInjector = function () {
    function ReflectiveInjector() {}
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {@link ResolvedReflectiveProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
     */
    ReflectiveInjector.resolve = function (providers) {
        return reflective_provider_1.resolveReflectiveProviders(providers);
    };
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
     */
    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
        if (parent === void 0) {
            parent = null;
        }
        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * @experimental
     */
    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
        if (parent === void 0) {
            parent = null;
        }
        return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
    };
    /**
     * @deprecated
     */
    ReflectiveInjector.fromResolvedBindings = function (providers) {
        return ReflectiveInjector.fromResolvedProviders(providers);
    };
    Object.defineProperty(ReflectiveInjector.prototype, "parent", {
        /**
         * Parent of this injector.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
         *
         * ```typescript
         * var parent = ReflectiveInjector.resolveAndCreate([]);
         * var child = parent.resolveAndCreateChild([]);
         * expect(child.parent).toBe(parent);
         * ```
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @internal
     */
    ReflectiveInjector.prototype.debugContext = function () {
        return null;
    };
    /**
     * Resolves an array of providers and creates a child injector from those providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * The passed-in providers can be an array of `Type`, {@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
     * var child = parent.resolveAndCreateChild([ChildProvider]);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     *
     * This function is slower than the corresponding `createChildFromResolved`
     * because it needs to resolve the passed-in providers first.
     * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
     */
    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) {
        return exceptions_1.unimplemented();
    };
    /**
     * Creates a child injector from previously resolved providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
     *
     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
     * var child = parent.createChildFromResolved(childProviders);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     */
    ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
        return exceptions_1.unimplemented();
    };
    /**
     * Resolves a provider and instantiates an object in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
     *
     * var car = injector.resolveAndInstantiate(Car);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
     * ```
     */
    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) {
        return exceptions_1.unimplemented();
    };
    /**
     * Instantiates an object using a resolved provider in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
     * var carProvider = ReflectiveInjector.resolve([Car])[0];
     * var car = injector.instantiateResolved(carProvider);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
     * ```
     */
    ReflectiveInjector.prototype.instantiateResolved = function (provider) {
        return exceptions_1.unimplemented();
    };
    return ReflectiveInjector;
}();
exports.ReflectiveInjector = ReflectiveInjector;
var ReflectiveInjector_ = function () {
    /**
     * Private
     */
    function ReflectiveInjector_(_proto /* ProtoInjector */, _parent, _debugContext) {
        if (_parent === void 0) {
            _parent = null;
        }
        if (_debugContext === void 0) {
            _debugContext = null;
        }
        this._debugContext = _debugContext;
        /** @internal */
        this._constructionCounter = 0;
        this._proto = _proto;
        this._parent = _parent;
        this._strategy = _proto._strategy.createInjectorStrategy(this);
    }
    /**
     * @internal
     */
    ReflectiveInjector_.prototype.debugContext = function () {
        return this._debugContext();
    };
    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) {
            notFoundValue = injector_1.THROW_IF_NOT_FOUND;
        }
        return this._getByKey(reflective_key_1.ReflectiveKey.get(token), null, null, notFoundValue);
    };
    ReflectiveInjector_.prototype.getAt = function (index) {
        return this._strategy.getObjAtIndex(index);
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
        get: function get() {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
        /**
         * @internal
         * Internal. Do not use.
         * We return `any` not to export the InjectorStrategy type.
         */
        get: function get() {
            return this._strategy;
        },
        enumerable: true,
        configurable: true
    });
    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
        var proto = new ReflectiveProtoInjector(providers);
        var inj = new ReflectiveInjector_(proto);
        inj._parent = this;
        return inj;
    };
    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
        return this._instantiateProvider(provider);
    };
    /** @internal */
    ReflectiveInjector_.prototype._new = function (provider) {
        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
            throw new reflective_exceptions_1.CyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
        if (provider.multiProvider) {
            var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
        } else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
        }
    };
    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
        var factory = ResolvedReflectiveFactory.factory;
        var deps = ResolvedReflectiveFactory.dependencies;
        var length = deps.length;
        var d0;
        var d1;
        var d2;
        var d3;
        var d4;
        var d5;
        var d6;
        var d7;
        var d8;
        var d9;
        var d10;
        var d11;
        var d12;
        var d13;
        var d14;
        var d15;
        var d16;
        var d17;
        var d18;
        var d19;
        try {
            d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
            d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
            d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
            d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
            d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
            d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
            d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
            d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
            d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
            d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
            d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
            d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
            d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
            d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
            d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
            d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
            d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
            d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
            d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
            d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
        } catch (e) {
            if (e instanceof reflective_exceptions_1.AbstractProviderError || e instanceof reflective_exceptions_1.InstantiationError) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        var obj;
        try {
            switch (length) {
                case 0:
                    obj = factory();
                    break;
                case 1:
                    obj = factory(d0);
                    break;
                case 2:
                    obj = factory(d0, d1);
                    break;
                case 3:
                    obj = factory(d0, d1, d2);
                    break;
                case 4:
                    obj = factory(d0, d1, d2, d3);
                    break;
                case 5:
                    obj = factory(d0, d1, d2, d3, d4);
                    break;
                case 6:
                    obj = factory(d0, d1, d2, d3, d4, d5);
                    break;
                case 7:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6);
                    break;
                case 8:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                    break;
                case 9:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                    break;
                case 10:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                    break;
                case 11:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                    break;
                case 12:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                    break;
                case 13:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                    break;
                case 14:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                    break;
                case 15:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                    break;
                case 16:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                    break;
                case 17:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                    break;
                case 18:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                    break;
                case 19:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                    break;
                case 20:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                    break;
                default:
                    throw new exceptions_1.BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
            }
        } catch (e) {
            throw new reflective_exceptions_1.InstantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    };
    ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
        return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : injector_1.THROW_IF_NOT_FOUND);
    };
    ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
        if (key === INJECTOR_KEY) {
            return this;
        }
        if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
            return this._getByKeySelf(key, notFoundValue);
        } else {
            return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
        }
    };
    /** @internal */
    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
        if (notFoundValue !== injector_1.THROW_IF_NOT_FOUND) {
            return notFoundValue;
        } else {
            throw new reflective_exceptions_1.NoProviderError(this, key);
        }
    };
    /** @internal */
    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
        var obj = this._strategy.getObjByKeyId(key.id);
        return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
    };
    /** @internal */
    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
        var inj;
        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
            inj = this._parent;
        } else {
            inj = this;
        }
        while (inj instanceof ReflectiveInjector_) {
            var inj_ = inj;
            var obj = inj_._strategy.getObjByKeyId(key.id);
            if (obj !== UNDEFINED) return obj;
            inj = inj_._parent;
        }
        if (inj !== null) {
            return inj.get(key.token, notFoundValue);
        } else {
            return this._throwOrNull(key, notFoundValue);
        }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
        get: function get() {
            var providers = _mapProviders(this, function (b) {
                return ' "' + b.key.displayName + '" ';
            }).join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
        },
        enumerable: true,
        configurable: true
    });
    ReflectiveInjector_.prototype.toString = function () {
        return this.displayName;
    };
    return ReflectiveInjector_;
}();
exports.ReflectiveInjector_ = ReflectiveInjector_;
var INJECTOR_KEY = reflective_key_1.ReflectiveKey.get(injector_1.Injector);
function _mapProviders(injector, fn) {
    var res = [];
    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
        res.push(fn(injector._proto.getProviderAtIndex(i)));
    }
    return res;
}
//# sourceMappingURL=reflective_injector.js.map

/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var lang_1 = __webpack_require__(11);
exports.Math = lang_1.global.Math;
exports.NaN = _typeof(exports.NaN);
//# sourceMappingURL=math.js.map

/***/ },
/* 618 */
/***/ function(module, exports) {

"use strict";
"use strict";

var PromiseCompleter = function () {
    function PromiseCompleter() {
        var _this = this;
        this.promise = new Promise(function (res, rej) {
            _this.resolve = res;
            _this.reject = rej;
        });
    }
    return PromiseCompleter;
}();
exports.PromiseCompleter = PromiseCompleter;
var PromiseWrapper = function () {
    function PromiseWrapper() {}
    PromiseWrapper.resolve = function (obj) {
        return Promise.resolve(obj);
    };
    PromiseWrapper.reject = function (obj, _) {
        return Promise.reject(obj);
    };
    // Note: We can't rename this method into `catch`, as this is not a valid
    // method name in Dart.
    PromiseWrapper.catchError = function (promise, onError) {
        return promise.catch(onError);
    };
    PromiseWrapper.all = function (promises) {
        if (promises.length == 0) return Promise.resolve([]);
        return Promise.all(promises);
    };
    PromiseWrapper.then = function (promise, success, rejection) {
        return promise.then(success, rejection);
    };
    PromiseWrapper.wrap = function (computation) {
        return new Promise(function (res, rej) {
            try {
                res(computation());
            } catch (e) {
                rej(e);
            }
        });
    };
    PromiseWrapper.scheduleMicrotask = function (computation) {
        PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) {});
    };
    PromiseWrapper.completer = function () {
        return new PromiseCompleter();
    };
    return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
//# sourceMappingURL=promise.js.map

/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var lang_1 = __webpack_require__(11);
var view_type_1 = __webpack_require__(136);
/* @ts2dart_const */
var StaticNodeDebugInfo = function () {
    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
        this.providerTokens = providerTokens;
        this.componentToken = componentToken;
        this.refTokens = refTokens;
    }
    return StaticNodeDebugInfo;
}();
exports.StaticNodeDebugInfo = StaticNodeDebugInfo;
var DebugContext = function () {
    function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
        this._view = _view;
        this._nodeIndex = _nodeIndex;
        this._tplRow = _tplRow;
        this._tplCol = _tplCol;
    }
    Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
        get: function get() {
            return lang_1.isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "context", {
        get: function get() {
            return this._view.context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "component", {
        get: function get() {
            var staticNodeInfo = this._staticNodeInfo;
            if (lang_1.isPresent(staticNodeInfo) && lang_1.isPresent(staticNodeInfo.componentToken)) {
                return this.injector.get(staticNodeInfo.componentToken);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
        get: function get() {
            var componentView = this._view;
            while (lang_1.isPresent(componentView.declarationAppElement) && componentView.type !== view_type_1.ViewType.COMPONENT) {
                componentView = componentView.declarationAppElement.parentView;
            }
            return lang_1.isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "injector", {
        get: function get() {
            return this._view.injector(this._nodeIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "renderNode", {
        get: function get() {
            if (lang_1.isPresent(this._nodeIndex) && lang_1.isPresent(this._view.allNodes)) {
                return this._view.allNodes[this._nodeIndex];
            } else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "providerTokens", {
        get: function get() {
            var staticNodeInfo = this._staticNodeInfo;
            return lang_1.isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "source", {
        get: function get() {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "references", {
        get: function get() {
            var _this = this;
            var varValues = {};
            var staticNodeInfo = this._staticNodeInfo;
            if (lang_1.isPresent(staticNodeInfo)) {
                var refs = staticNodeInfo.refTokens;
                collection_1.StringMapWrapper.forEach(refs, function (refToken /** TODO #9100 */, refName /** TODO #9100 */) {
                    var varValue;
                    if (lang_1.isBlank(refToken)) {
                        varValue = lang_1.isPresent(_this._view.allNodes) ? _this._view.allNodes[_this._nodeIndex] : null;
                    } else {
                        varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
                    }
                    varValues[refName] = varValue;
                });
            }
            return varValues;
        },
        enumerable: true,
        configurable: true
    });
    return DebugContext;
}();
exports.DebugContext = DebugContext;
//# sourceMappingURL=debug_context.js.map

/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var injector_1 = __webpack_require__(261);
var _UNDEFINED = new Object();
var ElementInjector = function (_super) {
    __extends(ElementInjector, _super);
    function ElementInjector(_view, _nodeIndex) {
        _super.call(this);
        this._view = _view;
        this._nodeIndex = _nodeIndex;
    }
    ElementInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) {
            notFoundValue = injector_1.THROW_IF_NOT_FOUND;
        }
        var result = _UNDEFINED;
        if (result === _UNDEFINED) {
            result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED);
        }
        if (result === _UNDEFINED) {
            result = this._view.parentInjector.get(token, notFoundValue);
        }
        return result;
    };
    return ElementInjector;
}(injector_1.Injector);
exports.ElementInjector = ElementInjector;
//# sourceMappingURL=element_injector.js.map

/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var async_1 = __webpack_require__(178);
var collection_1 = __webpack_require__(31);
var lang_1 = __webpack_require__(11);
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
 * ```typescript
 * @Component({...})
 * class Container {
 *   @ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 * @stable
 */
var QueryList = function () {
    function QueryList() {
        this._dirty = true;
        this._results = [];
        this._emitter = new async_1.EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
        get: function get() {
            return this._emitter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
        get: function get() {
            return this._results.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
        get: function get() {
            return collection_1.ListWrapper.first(this._results);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
        get: function get() {
            return collection_1.ListWrapper.last(this._results);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * returns a new array with the passed in function applied to each element.
     */
    QueryList.prototype.map = function (fn) {
        return this._results.map(fn);
    };
    /**
     * returns a filtered array.
     */
    QueryList.prototype.filter = function (fn) {
        return this._results.filter(fn);
    };
    /**
     * returns a reduced value.
     */
    QueryList.prototype.reduce = function (fn, init) {
        return this._results.reduce(fn, init);
    };
    /**
     * executes function for each element in a query.
     */
    QueryList.prototype.forEach = function (fn) {
        this._results.forEach(fn);
    };
    /**
     * converts QueryList into an array
     */
    QueryList.prototype.toArray = function () {
        return collection_1.ListWrapper.clone(this._results);
    };
    QueryList.prototype[lang_1.getSymbolIterator()] = function () {
        return this._results[lang_1.getSymbolIterator()]();
    };
    QueryList.prototype.toString = function () {
        return this._results.toString();
    };
    QueryList.prototype.reset = function (res) {
        this._results = collection_1.ListWrapper.flatten(res);
        this._dirty = false;
    };
    QueryList.prototype.notifyOnChanges = function () {
        this._emitter.emit(this);
    };
    /** internal */
    QueryList.prototype.setDirty = function () {
        this._dirty = true;
    };
    Object.defineProperty(QueryList.prototype, "dirty", {
        /** internal */
        get: function get() {
            return this._dirty;
        },
        enumerable: true,
        configurable: true
    });
    return QueryList;
}();
exports.QueryList = QueryList;
//# sourceMappingURL=query_list.js.map

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var collection_1 = __webpack_require__(31);
var exceptions_1 = __webpack_require__(29);
var lang_1 = __webpack_require__(11);
var profile_1 = __webpack_require__(405);
/**
 * Represents a container where one or more Views can be attached.
 *
 * The container can contain two kinds of Views. Host Views, created by instantiating a
 * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
 * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
 *
 * The location of the View Container within the containing View is specified by the Anchor
 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
 * have a single View Container.
 *
 * Root elements of Views attached to this container become siblings of the Anchor Element in
 * the Rendered View.
 *
 * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
 * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
 * @stable
 */
var ViewContainerRef = function () {
    function ViewContainerRef() {}
    Object.defineProperty(ViewContainerRef.prototype, "element", {
        /**
         * Anchor element that specifies the location of this container in the containing View.
         * <!-- TODO: rename to anchorElement -->
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "injector", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "length", {
        /**
         * Returns the number of Views currently attached to this container.
         */
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    ;
    return ViewContainerRef;
}();
exports.ViewContainerRef = ViewContainerRef;
var ViewContainerRef_ = function () {
    function ViewContainerRef_(_element) {
        this._element = _element;
        /** @internal */
        this._createComponentInContainerScope = profile_1.wtfCreateScope('ViewContainerRef#createComponent()');
        /** @internal */
        this._insertScope = profile_1.wtfCreateScope('ViewContainerRef#insert()');
        /** @internal */
        this._removeScope = profile_1.wtfCreateScope('ViewContainerRef#remove()');
        /** @internal */
        this._detachScope = profile_1.wtfCreateScope('ViewContainerRef#detach()');
    }
    ViewContainerRef_.prototype.get = function (index) {
        return this._element.nestedViews[index].ref;
    };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
        get: function get() {
            var views = this._element.nestedViews;
            return lang_1.isPresent(views) ? views.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
        get: function get() {
            return this._element.elementRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
        get: function get() {
            return this._element.injector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
        get: function get() {
            return this._element.parentInjector;
        },
        enumerable: true,
        configurable: true
    });
    // TODO(rado): profile and decide whether bounds checks should be added
    // to the methods below.
    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
        if (context === void 0) {
            context = null;
        }
        if (index === void 0) {
            index = -1;
        }
        var viewRef = templateRef.createEmbeddedView(context);
        this.insert(viewRef, index);
        return viewRef;
    };
    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
        if (index === void 0) {
            index = -1;
        }
        if (injector === void 0) {
            injector = null;
        }
        if (projectableNodes === void 0) {
            projectableNodes = null;
        }
        var s = this._createComponentInContainerScope();
        var contextInjector = lang_1.isPresent(injector) ? injector : this._element.parentInjector;
        var componentRef = componentFactory.create(contextInjector, projectableNodes);
        this.insert(componentRef.hostView, index);
        return profile_1.wtfLeave(s, componentRef);
    };
    // TODO(i): refactor insert+remove into move
    ViewContainerRef_.prototype.insert = function (viewRef, index) {
        if (index === void 0) {
            index = -1;
        }
        var s = this._insertScope();
        if (index == -1) index = this.length;
        var viewRef_ = viewRef;
        this._element.attachView(viewRef_.internalView, index);
        return profile_1.wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.indexOf = function (viewRef) {
        return collection_1.ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
    };
    // TODO(i): rename to destroy
    ViewContainerRef_.prototype.remove = function (index) {
        if (index === void 0) {
            index = -1;
        }
        var s = this._removeScope();
        if (index == -1) index = this.length - 1;
        var view = this._element.detachView(index);
        view.destroy();
        // view is intentionally not returned to the client.
        profile_1.wtfLeave(s);
    };
    // TODO(i): refactor insert+remove into move
    ViewContainerRef_.prototype.detach = function (index) {
        if (index === void 0) {
            index = -1;
        }
        var s = this._detachScope();
        if (index == -1) index = this.length - 1;
        var view = this._element.detachView(index);
        return profile_1.wtfLeave(s, view.ref);
    };
    ViewContainerRef_.prototype.clear = function () {
        for (var i = this.length - 1; i >= 0; i--) {
            this.remove(i);
        }
    };
    return ViewContainerRef_;
}();
exports.ViewContainerRef_ = ViewContainerRef_;
//# sourceMappingURL=view_container_ref.js.map

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var constants_1 = __webpack_require__(394);
var exceptions_1 = __webpack_require__(29);
/**
 * @stable
 */
var ViewRef = function () {
    function ViewRef() {}
    Object.defineProperty(ViewRef.prototype, "destroyed", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    return ViewRef;
}();
exports.ViewRef = ViewRef;
/**
 * Represents an Angular View.
 *
 * <!-- TODO: move the next two paragraphs to the dev guide -->
 * A View is a fundamental building block of the application UI. It is the smallest grouping of
 * Elements which are created and destroyed together.
 *
 * Properties of elements in a View can change, but the structure (number and order) of elements in
 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
 * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
 * <!-- /TODO -->
 *
 * ### Example
 *
 * Given this template...
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * We have two {@link TemplateRef}s:
 *
 * Outer {@link TemplateRef}:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <template ngFor let-item [ngForOf]="items"></template>
 * </ul>
 * ```
 *
 * Inner {@link TemplateRef}:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate {@link TemplateRef}s.
 *
 * The outer/inner {@link TemplateRef}s are then assembled into views like so:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <template view-container-ref></template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * @experimental
 */
var EmbeddedViewRef = function (_super) {
    __extends(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(EmbeddedViewRef.prototype, "context", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    ;
    return EmbeddedViewRef;
}(ViewRef);
exports.EmbeddedViewRef = EmbeddedViewRef;
var ViewRef_ = function () {
    function ViewRef_(_view) {
        this._view = _view;
        this._view = _view;
        this._originalMode = this._view.cdMode;
    }
    Object.defineProperty(ViewRef_.prototype, "internalView", {
        get: function get() {
            return this._view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
        get: function get() {
            return this._view.flatRootNodes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
        get: function get() {
            return this._view.context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
        get: function get() {
            return this._view.destroyed;
        },
        enumerable: true,
        configurable: true
    });
    ViewRef_.prototype.markForCheck = function () {
        this._view.markPathToRootAsCheckOnce();
    };
    ViewRef_.prototype.detach = function () {
        this._view.cdMode = constants_1.ChangeDetectionStrategy.Detached;
    };
    ViewRef_.prototype.detectChanges = function () {
        this._view.detectChanges(false);
    };
    ViewRef_.prototype.checkNoChanges = function () {
        this._view.detectChanges(true);
    };
    ViewRef_.prototype.reattach = function () {
        this._view.cdMode = this._originalMode;
        this.markForCheck();
    };
    ViewRef_.prototype.onDestroy = function (callback) {
        this._view.disposables.push(callback);
    };
    ViewRef_.prototype.destroy = function () {
        this._view.destroy();
    };
    return ViewRef_;
}();
exports.ViewRef_ = ViewRef_;
//# sourceMappingURL=view_ref.js.map

/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
var trace;
var events;
function detectWTF() {
    var wtf = lang_1.global['wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
exports.detectWTF = detectWTF;
function createScope(signature, flags) {
    if (flags === void 0) {
        flags = null;
    }
    return events.createScope(signature, flags);
}
exports.createScope = createScope;
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
exports.leave = leave;
function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
}
exports.startTimeRange = startTimeRange;
function endTimeRange(range) {
    trace.endTimeRange(range);
}
exports.endTimeRange = endTimeRange;
//# sourceMappingURL=wtf_impl.js.map

/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var lang_1 = __webpack_require__(11);
var ReflectionCapabilities = function () {
    function ReflectionCapabilities(reflect) {
        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function () {
        return true;
    };
    ReflectionCapabilities.prototype.factory = function (t) {
        switch (t.length) {
            case 0:
                return function () {
                    return new t();
                };
            case 1:
                return function (a1) {
                    return new t(a1);
                };
            case 2:
                return function (a1, a2) {
                    return new t(a1, a2);
                };
            case 3:
                return function (a1, a2, a3) {
                    return new t(a1, a2, a3);
                };
            case 4:
                return function (a1, a2, a3, a4) {
                    return new t(a1, a2, a3, a4);
                };
            case 5:
                return function (a1, a2, a3, a4, a5) {
                    return new t(a1, a2, a3, a4, a5);
                };
            case 6:
                return function (a1, a2, a3, a4, a5, a6) {
                    return new t(a1, a2, a3, a4, a5, a6);
                };
            case 7:
                return function (a1, a2, a3, a4, a5, a6, a7) {
                    return new t(a1, a2, a3, a4, a5, a6, a7);
                };
            case 8:
                return function (a1, a2, a3, a4, a5, a6, a7, a8) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8);
                };
            case 9:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
                };
            case 10:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                };
            case 11:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                };
            case 12:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                };
            case 13:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                };
            case 14:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                };
            case 15:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                };
            case 16:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                };
            case 17:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                };
            case 18:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                };
            case 19:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                };
            case 20:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
                };
        }
        ;
        throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
    };
    /** @internal */
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes /** TODO #9100 */, paramAnnotations /** TODO #9100 */) {
        var result;
        if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
        } else {
            result = new Array(paramTypes.length);
        }
        for (var i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            } else if (paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            } else {
                result[i] = [];
            }
            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    };
    ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
        // Prefer the direct API.
        if (lang_1.isPresent(typeOrFunc.parameters)) {
            return typeOrFunc.parameters;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (lang_1.isPresent(typeOrFunc.ctorParameters)) {
            var ctorParameters = typeOrFunc.ctorParameters;
            var paramTypes_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) {
                return ctorParam && ctorParam.type;
            });
            var paramAnnotations_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) {
                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });
            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
        }
        // API for metadata created by invoking the decorators.
        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
            var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
        }
        // The array has to be filled with `undefined` because holes would be skipped by `some`
        var parameters = new Array(typeOrFunc.length);
        parameters.fill(undefined);
        return parameters;
    };
    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
        // Prefer the direct API.
        if (lang_1.isPresent(typeOrFunc.annotations)) {
            var annotations = typeOrFunc.annotations;
            if (lang_1.isFunction(annotations) && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (lang_1.isPresent(typeOrFunc.decorators)) {
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
        }
        // API for metadata created by invoking the decorators.
        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
            var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
            if (lang_1.isPresent(annotations)) return annotations;
        }
        return [];
    };
    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
        // Prefer the direct API.
        if (lang_1.isPresent(typeOrFunc.propMetadata)) {
            var propMetadata = typeOrFunc.propMetadata;
            if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (lang_1.isPresent(typeOrFunc.propDecorators)) {
            var propDecorators_1 = typeOrFunc.propDecorators;
            var propMetadata_1 = {};
            Object.keys(propDecorators_1).forEach(function (prop) {
                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
        }
        // API for metadata created by invoking the decorators.
        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
            var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
            if (lang_1.isPresent(propMetadata)) return propMetadata;
        }
        return {};
    };
    // Note: JavaScript does not support to query for interfaces during runtime.
    // However, we can't throw here as the reflector will always call this method
    // when asked for a lifecycle interface as this is what we check in Dart.
    ReflectionCapabilities.prototype.interfaces = function (type) {
        return [];
    };
    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {
        if (!(type instanceof lang_1.Type)) return false;
        var proto = type.prototype;
        return !!proto[lcProperty];
    };
    ReflectionCapabilities.prototype.getter = function (name) {
        return new Function('o', 'return o.' + name + ';');
    };
    ReflectionCapabilities.prototype.setter = function (name) {
        return new Function('o', 'v', 'return o.' + name + ' = v;');
    };
    ReflectionCapabilities.prototype.method = function (name) {
        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
        return new Function('o', 'args', functionBody);
    };
    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
    ReflectionCapabilities.prototype.importUri = function (type) {
        // StaticSymbol
        if ((typeof type === "undefined" ? "undefined" : _typeof(type)) === 'object' && type['filePath']) {
            return type['filePath'];
        }
        // Runtime type
        return "./" + lang_1.stringify(type);
    };
    return ReflectionCapabilities;
}();
exports.ReflectionCapabilities = ReflectionCapabilities;
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(function (decoratorInvocation) {
        var decoratorType = decoratorInvocation.type;
        var annotationCls = decoratorType.annotationCls;
        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        var annotation = Object.create(annotationCls.prototype);
        annotationCls.apply(annotation, annotationArgs);
        return annotation;
    });
}
//# sourceMappingURL=reflection_capabilities.js.map

/***/ },
/* 626 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * Provides read-only access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */

var ReflectorReader = function () {
  function ReflectorReader() {}
  return ReflectorReader;
}();
exports.ReflectorReader = ReflectorReader;
//# sourceMappingURL=reflector_reader.js.map

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var exceptions_1 = __webpack_require__(29);
/**
 * @experimental
 */
var RenderComponentType = function () {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles) {
        this.id = id;
        this.templateUrl = templateUrl;
        this.slotCount = slotCount;
        this.encapsulation = encapsulation;
        this.styles = styles;
    }
    return RenderComponentType;
}();
exports.RenderComponentType = RenderComponentType;
var RenderDebugInfo = function () {
    function RenderDebugInfo() {}
    Object.defineProperty(RenderDebugInfo.prototype, "injector", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "component", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "references", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "context", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "source", {
        get: function get() {
            return exceptions_1.unimplemented();
        },
        enumerable: true,
        configurable: true
    });
    return RenderDebugInfo;
}();
exports.RenderDebugInfo = RenderDebugInfo;
/**
 * @experimental
 */
var Renderer = function () {
    function Renderer() {}
    return Renderer;
}();
exports.Renderer = Renderer;
/**
 * Injectable service that provides a low-level interface for modifying the UI.
 *
 * Use this service to bypass Angular's templating and make custom UI changes that can't be
 * expressed declaratively. For example if you need to set a property or an attribute whose name is
 * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
 * respectively.
 *
 * If you are implementing a custom renderer, you must implement this interface.
 *
 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
 * @experimental
 */
var RootRenderer = function () {
    function RootRenderer() {}
    return RootRenderer;
}();
exports.RootRenderer = RootRenderer;
//# sourceMappingURL=api.js.map

/***/ },
/* 628 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
 * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
 * handled.
 *
 * See DomSanitizationService for more details on security in Angular applications.
 */

(function (SecurityContext) {
  SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
  SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
  SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
  SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext[SecurityContext["URL"] = 4] = "URL";
  SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(exports.SecurityContext || (exports.SecurityContext = {}));
var SecurityContext = exports.SecurityContext;
/**
 * SanitizationService is used by the views to sanitize potentially dangerous values. This is a
 * private API, use code should only refer to DomSanitizationService.
 */
var SanitizationService = function () {
  function SanitizationService() {}
  return SanitizationService;
}();
exports.SanitizationService = SanitizationService;
//# sourceMappingURL=security.js.map

/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var lang_1 = __webpack_require__(11);
var _nextClassId = 0;
function extractAnnotation(annotation) {
    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
        // it is a decorator, extract annotation
        annotation = annotation.annotation;
    }
    return annotation;
}
function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
        throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
    }
    if (lang_1.isFunction(fnOrArray)) {
        return fnOrArray;
    } else if (fnOrArray instanceof Array) {
        var annotations = fnOrArray;
        var fn = fnOrArray[fnOrArray.length - 1];
        if (!lang_1.isFunction(fn)) {
            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
        }
        var annoLength = annotations.length - 1;
        if (annoLength != fn.length) {
            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
        }
        var paramsAnnotations = [];
        for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
            var paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var annotation = annotations[i];
            if (annotation instanceof Array) {
                for (var j = 0; j < annotation.length; j++) {
                    paramAnnotations.push(extractAnnotation(annotation[j]));
                }
            } else if (lang_1.isFunction(annotation)) {
                paramAnnotations.push(extractAnnotation(annotation));
            } else {
                paramAnnotations.push(annotation);
            }
        }
        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
        return fn;
    } else {
        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
    }
}
/**
 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
 *
 * ## Basic Example
 *
 * ```
 * var Greeter = ng.Class({
 *   constructor: function(name) {
 *     this.name = name;
 *   },
 *
 *   greet: function() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class Greeter {
 *   constructor(name) {
 *     this.name = name;
 *   }
 *
 *   greet() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * }
 * ```
 *
 * or equivalent to ES5:
 *
 * ```
 * var Greeter = function (name) {
 *   this.name = name;
 * }
 *
 * Greeter.prototype.greet = function () {
 *   alert('Hello ' + this.name + '!');
 * }
 * ```
 *
 * ### Example with parameter annotations
 *
 * ```
 * var MyService = ng.Class({
 *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
 *     ...
 *   }]
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class MyService {
 *   constructor(name: string, @Query() queryList: QueryList) {
 *     ...
 *   }
 * }
 * ```
 *
 * ### Example with inheritance
 *
 * ```
 * var Shape = ng.Class({
 *   constructor: (color) {
 *     this.color = color;
 *   }
 * });
 *
 * var Square = ng.Class({
 *   extends: Shape,
 *   constructor: function(color, size) {
 *     Shape.call(this, color);
 *     this.size = size;
 *   }
 * });
 * ```
 * @stable
 */
function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
        if (lang_1.isFunction(clsDef.extends)) {
            constructor.prototype = proto = Object.create(clsDef.extends.prototype);
        } else {
            throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
        }
    }
    for (var key in clsDef) {
        if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
        }
    }
    if (this && this.annotations instanceof Array) {
        Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    if (!constructor['name']) {
        constructor['overriddenName'] = "class" + _nextClassId++;
    }
    return constructor;
}
exports.Class = Class;
var Reflect = lang_1.global.Reflect;
// Throw statement at top-level is disallowed by closure compiler in ES6 input.
// Wrap in an IIFE as a work-around.
(function checkReflect() {
    if (!(Reflect && Reflect.getMetadata)) {
        throw 'reflect-metadata shim is required when using class decorators';
    }
})();
function makeDecorator(annotationCls /* TODO #9100 */, chainFn) {
    if (chainFn === void 0) {
        chainFn = null;
    }
    function DecoratorFactory(objOrType /** TODO #9100 */) {
        var annotationInstance = new annotationCls(objOrType);
        if (this instanceof annotationCls) {
            return annotationInstance;
        } else {
            var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
            chainAnnotation.push(annotationInstance);
            var TypeDecorator = function TypeDecorator(cls /** TODO #9100 */) {
                var annotations = Reflect.getOwnMetadata('annotations', cls);
                annotations = annotations || [];
                annotations.push(annotationInstance);
                Reflect.defineMetadata('annotations', annotations, cls);
                return cls;
            };
            TypeDecorator.annotations = chainAnnotation;
            TypeDecorator.Class = Class;
            if (chainFn) chainFn(TypeDecorator);
            return TypeDecorator;
        }
    }
    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
    DecoratorFactory.annotationCls = annotationCls;
    return DecoratorFactory;
}
exports.makeDecorator = makeDecorator;
function makeParamDecorator(annotationCls /** TODO #9100 */) {
    function ParamDecoratorFactory() {
        var args = []; /** TODO #9100 */
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var annotationInstance = Object.create(annotationCls.prototype);
        annotationCls.apply(annotationInstance, args);
        if (this instanceof annotationCls) {
            return annotationInstance;
        } else {
            ParamDecorator.annotation = annotationInstance;
            return ParamDecorator;
        }
        function ParamDecorator(cls /** TODO #9100 */, unusedKey /** TODO #9100 */, index /** TODO #9100 */) {
            var parameters = Reflect.getMetadata('parameters', cls);
            parameters = parameters || [];
            // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.
            while (parameters.length <= index) {
                parameters.push(null);
            }
            parameters[index] = parameters[index] || [];
            var annotationsForParam = parameters[index];
            annotationsForParam.push(annotationInstance);
            Reflect.defineMetadata('parameters', parameters, cls);
            return cls;
        }
    }
    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    ParamDecoratorFactory.annotationCls = annotationCls;
    return ParamDecoratorFactory;
}
exports.makeParamDecorator = makeParamDecorator;
function makePropDecorator(annotationCls /** TODO #9100 */) {
    function PropDecoratorFactory() {
        var args = []; /** TODO #9100 */
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var decoratorInstance = Object.create(annotationCls.prototype);
        annotationCls.apply(decoratorInstance, args);
        if (this instanceof annotationCls) {
            return decoratorInstance;
        } else {
            return function PropDecorator(target, name) {
                var meta = Reflect.getOwnMetadata('propMetadata', target.constructor);
                meta = meta || {};
                meta[name] = meta[name] || [];
                meta[name].unshift(decoratorInstance);
                Reflect.defineMetadata('propMetadata', meta, target.constructor);
            };
        }
    }
    PropDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    PropDecoratorFactory.annotationCls = annotationCls;
    return PropDecoratorFactory;
}
exports.makePropDecorator = makePropDecorator;
//# sourceMappingURL=decorators.js.map

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_backends_browser_jsonp__ = __webpack_require__(411);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_backends_browser_xhr__ = __webpack_require__(268);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__ = __webpack_require__(412);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__ = __webpack_require__(413);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__ = __webpack_require__(269);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_http__ = __webpack_require__(416);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_interfaces__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_enums__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_headers__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_static_request__ = __webpack_require__(417);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_static_response__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_url_search_params__ = __webpack_require__(272);

/* harmony export */ __webpack_require__.d(exports, "HTTP_PROVIDERS", function() { return HTTP_PROVIDERS; });/* harmony export */ exports["httpFactory"] = httpFactory;
/* harmony export */ __webpack_require__.d(exports, "HTTP_BINDINGS", function() { return HTTP_BINDINGS; });
/* harmony export */ __webpack_require__.d(exports, "JSONP_PROVIDERS", function() { return JSONP_PROVIDERS; });
/* harmony export */ __webpack_require__.d(exports, "JSON_BINDINGS", function() { return JSON_BINDINGS; });/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__src_backends_browser_xhr__, "a")) __webpack_require__.d(exports, "BrowserXhr", function() { return __WEBPACK_IMPORTED_MODULE_1__src_backends_browser_xhr__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__, "c")) __webpack_require__.d(exports, "JSONPConnection", function() { return __WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__, "a")) __webpack_require__.d(exports, "JSONPBackend", function() { return __WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__, "a")) __webpack_require__.d(exports, "XHRBackend", function() { return __WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__, "c")) __webpack_require__.d(exports, "XHRConnection", function() { return __WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__, "b")) __webpack_require__.d(exports, "CookieXSRFStrategy", function() { return __WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_4__src_base_request_options__, "b")) __webpack_require__.d(exports, "BaseRequestOptions", function() { return __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_4__src_base_request_options__, "a")) __webpack_require__.d(exports, "RequestOptions", function() { return __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_5__src_base_response_options__, "b")) __webpack_require__.d(exports, "BaseResponseOptions", function() { return __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_5__src_base_response_options__, "a")) __webpack_require__.d(exports, "ResponseOptions", function() { return __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_8__src_enums__, "c")) __webpack_require__.d(exports, "ReadyState", function() { return __WEBPACK_IMPORTED_MODULE_8__src_enums__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_8__src_enums__, "a")) __webpack_require__.d(exports, "ResponseType", function() { return __WEBPACK_IMPORTED_MODULE_8__src_enums__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_8__src_enums__, "b")) __webpack_require__.d(exports, "RequestMethod", function() { return __WEBPACK_IMPORTED_MODULE_8__src_enums__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_9__src_headers__, "a")) __webpack_require__.d(exports, "Headers", function() { return __WEBPACK_IMPORTED_MODULE_9__src_headers__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_6__src_http__, "b")) __webpack_require__.d(exports, "Jsonp", function() { return __WEBPACK_IMPORTED_MODULE_6__src_http__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_6__src_http__, "a")) __webpack_require__.d(exports, "Http", function() { return __WEBPACK_IMPORTED_MODULE_6__src_http__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_7__src_interfaces__, "c")) __webpack_require__.d(exports, "Connection", function() { return __WEBPACK_IMPORTED_MODULE_7__src_interfaces__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_7__src_interfaces__, "a")) __webpack_require__.d(exports, "ConnectionBackend", function() { return __WEBPACK_IMPORTED_MODULE_7__src_interfaces__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_7__src_interfaces__, "b")) __webpack_require__.d(exports, "XSRFStrategy", function() { return __WEBPACK_IMPORTED_MODULE_7__src_interfaces__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_10__src_static_request__, "a")) __webpack_require__.d(exports, "Request", function() { return __WEBPACK_IMPORTED_MODULE_10__src_static_request__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_11__src_static_response__, "a")) __webpack_require__.d(exports, "Response", function() { return __WEBPACK_IMPORTED_MODULE_11__src_static_response__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_12__src_url_search_params__, "a")) __webpack_require__.d(exports, "URLSearchParams", function() { return __WEBPACK_IMPORTED_MODULE_12__src_url_search_params__["a"]; });




















/**
 * Provides a basic set of injectables to use the {@link Http} service in any application.
 *
 * The `HTTP_PROVIDERS` should be included either in a component's injector,
 * or in the root injector when bootstrapping an application.
 *
 * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))
 *
 * ```
 * import {Component} from '@angular/core';
 * import {bootstrap} from '@angular/platform-browser/browser';
 * import {NgFor} from '@angular/common';
 * import {HTTP_PROVIDERS, Http} from '@angular/http';
 *
 * @Component({
 *   selector: 'app',
 *   providers: [HTTP_PROVIDERS],
 *   template: `
 *     <div>
 *       <h1>People</h1>
 *       <ul>
 *         <li *ngFor="let person of people">
 *           {{person.name}}
 *         </li>
 *       </ul>
 *     </div>
 *   `,
 *   directives: [NgFor]
 * })
 * export class App {
 *   people: Object[];
 *   constructor(http:Http) {
 *     http.get('people.json').subscribe(res => {
 *       this.people = res.json();
 *     });
 *   }
 *   active:boolean = false;
 *   toggleActiveState() {
 *     this.active = !this.active;
 *   }
 * }
 *
 * bootstrap(App)
 *   .catch(err => console.error(err));
 * ```
 *
 * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.
 * However, other providers required by `Http` are included,
 * which may be beneficial to override in certain cases.
 *
 * The providers included in `HTTP_PROVIDERS` include:
 *  * {@link Http}
 *  * {@link XHRBackend}
 *  * {@link XSRFStrategy} - Bound to {@link CookieXSRFStrategy} class (see below)
 *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances
 *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
 *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
 *
 * There may be cases where it makes sense to extend the base request options,
 * such as to add a search string to be appended to all URLs.
 * To accomplish this, a new provider for {@link RequestOptions} should
 * be added in the same injector as `HTTP_PROVIDERS`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))
 *
 * ```
 * import {provide} from '@angular/core';
 * import {bootstrap} from '@angular/platform-browser/browser';
 * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';
 *
 * class MyOptions extends BaseRequestOptions {
 *   search: string = 'coreTeam=true';
 * }
 *
 * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}])
 *   .catch(err => console.error(err));
 * ```
 *
 * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}
 * provider should be bound to {@link MockBackend}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))
 *
 * ```
 * import {provide} from '@angular/core';
 * import {bootstrap} from '@angular/platform-browser/browser';
 * import {HTTP_PROVIDERS, Http, Response, XHRBackend} from '@angular/http';
 * import {MockBackend} from '@angular/http/testing';
 *
 * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
 *
 * var injector = Injector.resolveAndCreate([
 *   HTTP_PROVIDERS,
 *   MockBackend,
 *   {provide: XHRBackend, useExisting: MockBackend}
 * ]);
 * var http = injector.get(Http);
 * var backend = injector.get(MockBackend);
 *
 * // Listen for any new requests
 * backend.connections.observer({
 *   next: connection => {
 *     var response = new Response({body: people});
 *     setTimeout(() => {
 *       // Send a response to the request
 *       connection.mockRespond(response);
 *     });
 *   }
 * });
 *
 * http.get('people.json').observer({
 *   next: res => {
 *     // Response came from mock backend
 *     console.log('first person', res.json()[0].name);
 *   }
 * });
 * ```
 *
 * `XSRFStrategy` allows customizing how the application protects itself against Cross Site Request
 * Forgery (XSRF) attacks. By default, Angular will look for a cookie called `'XSRF-TOKEN'`, and set
 * an HTTP request header called `'X-XSRF-TOKEN'` with the value of the cookie on each request,
 * allowing the server side to validate that the request comes from its own front end.
 *
 * Applications can override the names used by configuring a different `XSRFStrategy` instance. Most
 * commonly, applications will configure a `CookieXSRFStrategy` with different cookie or header
 * names, but if needed, they can supply a completely custom implementation.
 *
 * See the security documentation for more information.
 *
 * ### Example
 *
 * ```
 * import {provide} from '@angular/core';
 * import {bootstrap} from '@angular/platform-browser/browser';
 * import {HTTP_PROVIDERS, XSRFStrategy, CookieXSRFStrategy} from '@angular/http';
 *
 * bootstrap(
 *     App,
 *     [HTTP_PROVIDERS, {provide: XSRFStrategy,
 *         useValue: new CookieXSRFStrategy('MY-XSRF-COOKIE-NAME', 'X-MY-XSRF-HEADER-NAME')}])
 *   .catch(err => console.error(err));
 * ```
 */
var HTTP_PROVIDERS = [
// TODO(pascal): use factory type annotations once supported in DI
// issue: https://github.com/angular/angular/issues/3183
{ provide: __WEBPACK_IMPORTED_MODULE_6__src_http__["a" /* Http */], useFactory: httpFactory, deps: [__WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__["a" /* XHRBackend */], __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["a" /* RequestOptions */]] }, __WEBPACK_IMPORTED_MODULE_1__src_backends_browser_xhr__["a" /* BrowserXhr */], { provide: __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["a" /* RequestOptions */], useClass: __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["b" /* BaseRequestOptions */] }, { provide: __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__["a" /* ResponseOptions */], useClass: __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__["b" /* BaseResponseOptions */] }, __WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__["a" /* XHRBackend */], { provide: __WEBPACK_IMPORTED_MODULE_7__src_interfaces__["b" /* XSRFStrategy */], useValue: new __WEBPACK_IMPORTED_MODULE_3__src_backends_xhr_backend__["b" /* CookieXSRFStrategy */]() }];
function httpFactory(xhrBackend, requestOptions) {
  return new __WEBPACK_IMPORTED_MODULE_6__src_http__["a" /* Http */](xhrBackend, requestOptions);
}
/**
 * See {@link HTTP_PROVIDERS} instead.
 *
 * @deprecated
 */
var HTTP_BINDINGS = HTTP_PROVIDERS;
/**
 * Provides a basic set of providers to use the {@link Jsonp} service in any application.
 *
 * The `JSONP_PROVIDERS` should be included either in a component's injector,
 * or in the root injector when bootstrapping an application.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))
 *
 * ```
 * import {Component} from '@angular/core';
 * import {NgFor} from '@angular/common';
 * import {JSONP_PROVIDERS, Jsonp} from '@angular/http';
 *
 * @Component({
 *   selector: 'app',
 *   providers: [JSONP_PROVIDERS],
 *   template: `
 *     <div>
 *       <h1>People</h1>
 *       <ul>
 *         <li *ngFor="let person of people">
 *           {{person.name}}
 *         </li>
 *       </ul>
 *     </div>
 *   `,
 *   directives: [NgFor]
 * })
 * export class App {
 *   people: Array<Object>;
 *   constructor(jsonp:Jsonp) {
 *     jsonp.request('people.json').subscribe(res => {
 *       this.people = res.json();
 *     })
 *   }
 * }
 * ```
 *
 * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.
 * However, other providers required by `Jsonp` are included,
 * which may be beneficial to override in certain cases.
 *
 * The providers included in `JSONP_PROVIDERS` include:
 *  * {@link Jsonp}
 *  * {@link JSONPBackend}
 *  * `BrowserJsonp` - Private factory
 *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
 *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
 *
 * There may be cases where it makes sense to extend the base request options,
 * such as to add a search string to be appended to all URLs.
 * To accomplish this, a new provider for {@link RequestOptions} should
 * be added in the same injector as `JSONP_PROVIDERS`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))
 *
 * ```
 * import {provide} from '@angular/core';
 * import {bootstrap} from '@angular/platform-browser/browser';
 * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';
 *
 * class MyOptions extends BaseRequestOptions {
 *   search: string = 'coreTeam=true';
 * }
 *
 * bootstrap(App, [JSONP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}])
 *   .catch(err => console.error(err));
 * ```
 *
 * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}
 * provider should be bound to {@link MockBackend}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))
 *
 * ```
 * import {provide, Injector} from '@angular/core';
 * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from '@angular/http';
 * import {MockBackend} from '@angular/http/testing';
 *
 * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
 * var injector = Injector.resolveAndCreate([
 *   JSONP_PROVIDERS,
 *   MockBackend,
 *   {provide: JSONPBackend, useExisting: MockBackend}
 * ]);
 * var jsonp = injector.get(Jsonp);
 * var backend = injector.get(MockBackend);
 *
 * // Listen for any new requests
 * backend.connections.observer({
 *   next: connection => {
 *     var response = new Response({body: people});
 *     setTimeout(() => {
 *       // Send a response to the request
 *       connection.mockRespond(response);
 *     });
 *   }
 * });

 * jsonp.get('people.json').observer({
 *   next: res => {
 *     // Response came from mock backend
 *     console.log('first person', res.json()[0].name);
 *   }
 * });
 * ```
 */
var JSONP_PROVIDERS = [
// TODO(pascal): use factory type annotations once supported in DI
// issue: https://github.com/angular/angular/issues/3183
{ provide: __WEBPACK_IMPORTED_MODULE_6__src_http__["b" /* Jsonp */], useFactory: jsonpFactory, deps: [__WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__["a" /* JSONPBackend */], __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["a" /* RequestOptions */]] }, __WEBPACK_IMPORTED_MODULE_0__src_backends_browser_jsonp__["a" /* BrowserJsonp */], { provide: __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["a" /* RequestOptions */], useClass: __WEBPACK_IMPORTED_MODULE_4__src_base_request_options__["b" /* BaseRequestOptions */] }, { provide: __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__["a" /* ResponseOptions */], useClass: __WEBPACK_IMPORTED_MODULE_5__src_base_response_options__["b" /* BaseResponseOptions */] }, { provide: __WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__["a" /* JSONPBackend */], useClass: __WEBPACK_IMPORTED_MODULE_2__src_backends_jsonp_backend__["b" /* JSONPBackend_ */] }];
function jsonpFactory(jsonpBackend, requestOptions) {
  return new __WEBPACK_IMPORTED_MODULE_6__src_http__["b" /* Jsonp */](jsonpBackend, requestOptions);
}
/**
 * See {@link JSONP_PROVIDERS} instead.
 *
 * @deprecated
 */
var JSON_BINDINGS = JSONP_PROVIDERS;
//# sourceMappingURL=http.js.map

/***/ },
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */,
/* 685 */,
/* 686 */,
/* 687 */,
/* 688 */,
/* 689 */,
/* 690 */,
/* 691 */,
/* 692 */,
/* 693 */,
/* 694 */,
/* 695 */,
/* 696 */,
/* 697 */,
/* 698 */,
/* 699 */,
/* 700 */,
/* 701 */,
/* 702 */,
/* 703 */,
/* 704 */,
/* 705 */,
/* 706 */,
/* 707 */,
/* 708 */,
/* 709 */,
/* 710 */,
/* 711 */,
/* 712 */,
/* 713 */,
/* 714 */,
/* 715 */,
/* 716 */,
/* 717 */,
/* 718 */,
/* 719 */,
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */,
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */,
/* 732 */,
/* 733 */,
/* 734 */,
/* 735 */,
/* 736 */,
/* 737 */,
/* 738 */,
/* 739 */,
/* 740 */,
/* 741 */,
/* 742 */,
/* 743 */,
/* 744 */,
/* 745 */,
/* 746 */,
/* 747 */,
/* 748 */,
/* 749 */,
/* 750 */,
/* 751 */,
/* 752 */,
/* 753 */,
/* 754 */,
/* 755 */,
/* 756 */,
/* 757 */,
/* 758 */,
/* 759 */,
/* 760 */,
/* 761 */,
/* 762 */,
/* 763 */,
/* 764 */,
/* 765 */,
/* 766 */,
/* 767 */,
/* 768 */,
/* 769 */,
/* 770 */,
/* 771 */,
/* 772 */,
/* 773 */,
/* 774 */,
/* 775 */,
/* 776 */,
/* 777 */,
/* 778 */,
/* 779 */,
/* 780 */,
/* 781 */,
/* 782 */,
/* 783 */,
/* 784 */,
/* 785 */,
/* 786 */,
/* 787 */,
/* 788 */,
/* 789 */,
/* 790 */,
/* 791 */,
/* 792 */,
/* 793 */,
/* 794 */,
/* 795 */,
/* 796 */,
/* 797 */,
/* 798 */,
/* 799 */,
/* 800 */,
/* 801 */,
/* 802 */,
/* 803 */,
/* 804 */,
/* 805 */,
/* 806 */,
/* 807 */,
/* 808 */,
/* 809 */,
/* 810 */,
/* 811 */,
/* 812 */,
/* 813 */,
/* 814 */,
/* 815 */,
/* 816 */,
/* 817 */,
/* 818 */,
/* 819 */,
/* 820 */,
/* 821 */,
/* 822 */,
/* 823 */,
/* 824 */,
/* 825 */,
/* 826 */,
/* 827 */,
/* 828 */,
/* 829 */,
/* 830 */,
/* 831 */,
/* 832 */,
/* 833 */,
/* 834 */,
/* 835 */,
/* 836 */,
/* 837 */,
/* 838 */,
/* 839 */,
/* 840 */,
/* 841 */,
/* 842 */,
/* 843 */,
/* 844 */,
/* 845 */,
/* 846 */,
/* 847 */,
/* 848 */,
/* 849 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var animation_1 = __webpack_require__(147);
var transition_1 = __webpack_require__(208);
var config_1 = __webpack_require__(16);
var util_1 = __webpack_require__(7);
var key_1 = __webpack_require__(210);
var nav_params_1 = __webpack_require__(149);
var view_controller_1 = __webpack_require__(43);
/**
 * @name ActionSheet
 * @description
 * An Action Sheet is a dialog that lets the user choose from a set of
 * options. It appears on top of the app's content, and must be manually
 * dismissed by the user before they can resume interaction with the app.
 * Dangerous (destructive) options are made obvious in `ios` mode. There are easy
 * ways to cancel out of the action sheet, such as tapping the backdrop or
 * hitting the escape key on desktop.
 *
 * An action sheet is created from an array of `buttons`, with each button
 * including properties for its `text`, and optionally a `handler` and `role`.
 * If a handler returns `false` then the action sheet will not be dismissed. An
 * action sheet can also optionally have a `title`, `subTitle` and an `icon`.
 *
 * A button's `role` property can either be `destructive` or `cancel`. Buttons
 * without a role property will have the default look for the platform. Buttons
 * with the `cancel` role will always load as the bottom button, no matter where
 * they are in the array. All other buttons will be displayed in the order they
 * have been added to the `buttons` array. Note: We recommend that `destructive`
 * buttons are always the first button in the array, making them the top button.
 * Additionally, if the action sheet is dismissed by tapping the backdrop, then
 * it will fire the handler from the button with the cancel role.
 *
 * You can pass all of the action sheet's options in the first argument of
 * the create method: `ActionSheet.create(opts)`. Otherwise the action sheet's
 * instance has methods to add options, like `setTitle()` or `addButton()`.
 *
 * @usage
 * ```ts
 * constructor(nav: NavController) {
 *   this.nav = nav;
 * }
 *
 * presentActionSheet() {
 *   let actionSheet = ActionSheet.create({
 *     title: 'Modify your album',
 *     buttons: [
 *       {
 *         text: 'Destructive',
 *         role: 'destructive',
 *         handler: () => {
 *           console.log('Destructive clicked');
 *         }
 *       },
 *       {
 *         text: 'Archive',
 *         handler: () => {
 *           console.log('Archive clicked');
 *         }
 *       },
 *       {
 *         text: 'Cancel',
 *         role: 'cancel',
 *         handler: () => {
 *           console.log('Cancel clicked');
 *         }
 *       }
 *     ]
 *   });
 *
 *   this.nav.present(actionSheet);
 * }
 * ```
 *
 *
 * ### Dismissing And Async Navigation
 *
 * After an action sheet has been dismissed, the app may need to also transition
 * to another page depending on the handler's logic. However, because multiple
 * transitions were fired at roughly the same time, it's difficult for the
 * nav controller to cleanly animate multiple transitions that may
 * have been kicked off asynchronously. This is further described in the
 * [`Nav Transition Promises`](../../nav/NavController/#nav-transition-promises) section. For action sheets,
 * this means it's best to wait for the action sheet to finish its transition
 * out before starting a new transition on the same nav controller.
 *
 * In the example below, after the button has been clicked, its handler
 * waits on async operation to complete, *then* it uses `pop` to navigate
 * back a page in the same stack. The potential problem is that the async operation
 * may have been completed before the action sheet has even finished its transition
 * out. In this case, it's best to ensure the action sheet has finished its transition
 * out first, *then* start the next transition.
 *
 * ```ts
 * let actionSheet = ActionSheet.create({
 *   title: 'Hello',
 *   buttons: [{
 *     text: 'Ok',
 *     handler: () => {
 *       // user has clicked the action sheet button
 *       // begin the action sheet's dimiss transition
 *       let navTransition = actionSheet.dismiss();
 *
 *       // start some async method
 *       someAsyncOperation().then(() => {
 *         // once the async operation has completed
 *         // then run the next nav transition after the
 *         // first transition has finished animating out
 *
 *         navTransition.then(() => {
 *           this.nav.pop();
 *         });
 *       });
 *       return false;
 *     }
 *   }]
 * });
 *
 * this.nav.present(actionSheet);
 * ```
 *
 * It's important to note that the handler returns `false`. A feature of
 * button handlers is that they automatically dismiss the action sheet when their button
 * was clicked, however, we'll need more control regarding the transition. Because
 * the handler returns `false`, then the action sheet does not automatically dismiss
 * itself. Instead, you now have complete control of when the action sheet has finished
 * transitioning, and the ability to wait for the action sheet to finish transitioning
 * out before starting a new transition.
 *
 *
 * @demo /docs/v2/demos/action-sheet/
 * @see {@link /docs/v2/components#action-sheets ActionSheet Component Docs}
 */
var ActionSheet = function (_super) {
    __extends(ActionSheet, _super);
    function ActionSheet(opts) {
        if (opts === void 0) {
            opts = {};
        }
        opts.buttons = opts.buttons || [];
        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
        _super.call(this, ActionSheetCmp, opts);
        this.isOverlay = true;
        // by default, actionsheets should not fire lifecycle events of other views
        // for example, when an actionsheets enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        this.fireOtherLifecycles = false;
    }
    /**
    * @private
    */
    ActionSheet.prototype.getTransitionName = function (direction) {
        var key = 'actionSheet' + (direction === 'back' ? 'Leave' : 'Enter');
        return this._nav && this._nav.config.get(key);
    };
    /**
     * @param {string} title Action sheet title
     */
    ActionSheet.prototype.setTitle = function (title) {
        this.data.title = title;
    };
    /**
     * @param {string} subTitle Action sheet subtitle
     */
    ActionSheet.prototype.setSubTitle = function (subTitle) {
        this.data.subTitle = subTitle;
    };
    /**
     * @param {object} button Action sheet button
     */
    ActionSheet.prototype.addButton = function (button) {
        this.data.buttons.push(button);
    };
    /**
     * Open an action sheet with the following options
     *
     * | Option                | Type       | Description                                                     |
     * |-----------------------|------------|-----------------------------------------------------------------|
     * | title                 |`string`    | The title for the actionsheet                                   |
     * | subTitle              |`string`    | The sub-title for the actionsheet                               |
     * | cssClass              |`string`    | An additional class for custom styles                           |
     * | enableBackdropDismiss |`boolean`   | If the actionsheet should close when the user taps the backdrop |
     * | buttons               |`array<any>`| An array of buttons to display                                  |
     *
     * For the buttons:
     *
     * | Option   | Type     | Description                                                                                                                                      |
     * |----------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------|
     * | text     | `string` | The buttons text                                                                                                                                 |
     * | icon     | `icon`   | The buttons icons                                                                                                                                |
     * | handler  | `any`    | An express the button should evaluate                                                                                                            |
     * | cssClass | `string` | An additional class for custom styles                                                                                                            |
     * | role     | `string` | How the button should be displayed, `destructive` or `cancel`. If not role is provided, it will display the button without any additional styles |
     *
     *
     *
     * @param {object} opts Action sheet options
     */
    ActionSheet.create = function (opts) {
        if (opts === void 0) {
            opts = {};
        }
        return new ActionSheet(opts);
    };
    return ActionSheet;
}(view_controller_1.ViewController);
exports.ActionSheet = ActionSheet;
var ActionSheetCmp = function () {
    function ActionSheetCmp(_viewCtrl, _config, _elementRef, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._config = _config;
        this._elementRef = _elementRef;
        this.d = params.data;
        if (this.d.cssClass) {
            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
        }
        this.id = ++actionSheetIds;
        if (this.d.title) {
            this.hdrId = 'acst-hdr-' + this.id;
        }
        if (this.d.subTitle) {
            this.descId = 'acst-subhdr-' + this.id;
        }
    }
    ActionSheetCmp.prototype.ionViewLoaded = function () {
        var _this = this;
        // normalize the data
        var buttons = [];
        this.d.buttons.forEach(function (button) {
            if (typeof button === 'string') {
                button = { text: button };
            }
            if (!button.cssClass) {
                button.cssClass = '';
            }
            // deprecated warning
            if (button.style) {
                console.warn('Action sheet "style" property has been renamed to "role"');
                button.role = button.style;
            }
            if (button.role === 'cancel') {
                _this.d.cancelButton = button;
            } else {
                if (button.role === 'destructive') {
                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';
                } else if (button.role === 'selected') {
                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-selected';
                }
                buttons.push(button);
            }
        });
        this.d.buttons = buttons;
    };
    ActionSheetCmp.prototype.ionViewDidEnter = function () {
        var activeElement = document.activeElement;
        if (document.activeElement) {
            activeElement.blur();
        }
        var focusableEle = this._elementRef.nativeElement.querySelector('button');
        if (focusableEle) {
            focusableEle.focus();
        }
        this.enabled = true;
    };
    ActionSheetCmp.prototype._keyUp = function (ev) {
        if (this.enabled && this._viewCtrl.isLast()) {
            if (ev.keyCode === key_1.Key.ESCAPE) {
                console.debug('actionsheet, escape button');
                this.bdClick();
            }
        }
    };
    ActionSheetCmp.prototype.click = function (button, dismissDelay) {
        var _this = this;
        if (!this.enabled) {
            return;
        }
        var shouldDismiss = true;
        if (button.handler) {
            // a handler has been provided, execute it
            if (button.handler() === false) {
                // if the return value of the handler is false then do not dismiss
                shouldDismiss = false;
            }
        }
        if (shouldDismiss) {
            setTimeout(function () {
                _this.dismiss(button.role);
            }, dismissDelay || this._config.get('pageTransitionDelay'));
        }
    };
    ActionSheetCmp.prototype.bdClick = function () {
        if (this.enabled && this.d.enableBackdropDismiss) {
            if (this.d.cancelButton) {
                this.click(this.d.cancelButton, 1);
            } else {
                this.dismiss('backdrop');
            }
        }
    };
    ActionSheetCmp.prototype.dismiss = function (role) {
        return this._viewCtrl.dismiss(null, role);
    };
    /** @nocollapse */
    ActionSheetCmp.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-action-sheet',
            template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="action-sheet-wrapper">' + '<div class="action-sheet-container">' + '<div class="action-sheet-group">' + '<div class="action-sheet-title" id="{{hdrId}}" *ngIf="d.title">{{d.title}}</div>' + '<div class="action-sheet-sub-title" id="{{descId}}" *ngIf="d.subTitle">{{d.subTitle}}</div>' + '<button category="action-sheet-button" (click)="click(b)" *ngFor="let b of d.buttons" class="disable-hover" [ngClass]="b.cssClass">' + '<ion-icon [name]="b.icon" *ngIf="b.icon" class="action-sheet-icon"></ion-icon> ' + '{{b.text}}' + '</button>' + '</div>' + '<div class="action-sheet-group" *ngIf="d.cancelButton">' + '<button category="action-sheet-button" (click)="click(d.cancelButton)" class="action-sheet-cancel disable-hover" [ngClass]="d.cancelButton.cssClass">' + '<ion-icon [name]="d.cancelButton.icon" *ngIf="d.cancelButton.icon" class="action-sheet-icon"></ion-icon> ' + '{{d.cancelButton.text}}' + '</button>' + '</div>' + '</div>' + '</div>',
            host: {
                'role': 'dialog',
                '[attr.aria-labelledby]': 'hdrId',
                '[attr.aria-describedby]': 'descId'
            },
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    ActionSheetCmp.ctorParameters = [{ type: view_controller_1.ViewController }, { type: config_1.Config }, { type: core_1.ElementRef }, { type: nav_params_1.NavParams }, { type: core_1.Renderer }];
    /** @nocollapse */
    ActionSheetCmp.propDecorators = {
        '_keyUp': [{ type: core_1.HostListener, args: ['body:keyup', ['$event']] }]
    };
    return ActionSheetCmp;
}();
var ActionSheetSlideIn = function (_super) {
    __extends(ActionSheetSlideIn, _super);
    function ActionSheetSlideIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.4);
        wrapper.fromTo('translateY', '100%', '0%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
    }
    return ActionSheetSlideIn;
}(transition_1.Transition);
transition_1.Transition.register('action-sheet-slide-in', ActionSheetSlideIn);
var ActionSheetSlideOut = function (_super) {
    __extends(ActionSheetSlideOut, _super);
    function ActionSheetSlideOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.4, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(backdrop).add(wrapper);
    }
    return ActionSheetSlideOut;
}(transition_1.Transition);
transition_1.Transition.register('action-sheet-slide-out', ActionSheetSlideOut);
var ActionSheetMdSlideIn = function (_super) {
    __extends(ActionSheetMdSlideIn, _super);
    function ActionSheetMdSlideIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.26);
        wrapper.fromTo('translateY', '100%', '0%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
    }
    return ActionSheetMdSlideIn;
}(transition_1.Transition);
transition_1.Transition.register('action-sheet-md-slide-in', ActionSheetMdSlideIn);
var ActionSheetMdSlideOut = function (_super) {
    __extends(ActionSheetMdSlideOut, _super);
    function ActionSheetMdSlideOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.26, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
    }
    return ActionSheetMdSlideOut;
}(transition_1.Transition);
transition_1.Transition.register('action-sheet-md-slide-out', ActionSheetMdSlideOut);
var ActionSheetWpSlideIn = function (_super) {
    __extends(ActionSheetWpSlideIn, _super);
    function ActionSheetWpSlideIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.16);
        wrapper.fromTo('translateY', '100%', '0%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
    }
    return ActionSheetWpSlideIn;
}(transition_1.Transition);
transition_1.Transition.register('action-sheet-wp-slide-in', ActionSheetWpSlideIn);
var ActionSheetWpSlideOut = function (_super) {
    __extends(ActionSheetWpSlideOut, _super);
    function ActionSheetWpSlideOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
        backdrop.fromTo('opacity', 0.1, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
    }
    return ActionSheetWpSlideOut;
}(transition_1.Transition);
transition_1.Transition.register('action-sheet-wp-slide-out', ActionSheetWpSlideOut);
var actionSheetIds = -1;

/***/ },
/* 850 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var animation_1 = __webpack_require__(147);
var transition_1 = __webpack_require__(208);
var config_1 = __webpack_require__(16);
var util_1 = __webpack_require__(7);
var key_1 = __webpack_require__(210);
var nav_params_1 = __webpack_require__(149);
var view_controller_1 = __webpack_require__(43);
/**
 * @name Alert
 * @description
 * An Alert is a dialog that presents users with information or collects
 * information from the user using inputs. An alert appears on top
 * of the app's content, and must be manually dismissed by the user before
 * they can resume interaction with the app. It can also optionally have a
 * `title`, `subTitle` and `message`.
 *
 * You can pass all of the alert's options in the first argument of
 * the create method: `Alert.create(opts)`. Otherwise the alert's instance
 * has methods to add options, such as `setTitle()` or `addButton()`.
 *
 *
 * ### Alert Buttons
 *
 * In the array of `buttons`, each button includes properties for its `text`,
 * and optionally a `handler`. If a handler returns `false` then the alert
 * will not automatically be dismissed when the button is clicked. All
 * buttons will show  up in the order they have been added to the `buttons`
 * array, from left to right. Note: The right most button (the last one in
 * the array) is the main button.
 *
 * Optionally, a `role` property can be added to a button, such as `cancel`.
 * If a `cancel` role is on one of the buttons, then if the alert is
 * dismissed by tapping the backdrop, then it will fire the handler from
 * the button with a cancel role.
 *
 *
 * ### Alert Inputs
 *
 * Alerts can also include several different inputs whose data can be passed
 * back to the app. Inputs can be used as a simple way to prompt users for
 * information. Radios, checkboxes and text inputs are all accepted, but they
 * cannot be mixed. For example, an alert could have all radio button inputs,
 * or all checkbox inputs, but the same alert cannot mix radio and checkbox
 * inputs. Do note however, different types of "text"" inputs can be mixed,
 * such as `url`, `email`, `text`, etc. If you require a complex form UI
 * which doesn't fit within the guidelines of an alert then we recommend
 * building the form within a modal instead.
 *
 *
 * @usage
 * ```ts
 * constructor(nav: NavController) {
 *   this.nav = nav;
 * }
 *
 * presentAlert() {
 *   let alert = Alert.create({
 *     title: 'Low battery',
 *     subTitle: '10% of battery remaining',
 *     buttons: ['Dismiss']
 *   });
 *   this.nav.present(alert);
 * }
 *
 * presentConfirm() {
 *   let alert = Alert.create({
 *     title: 'Confirm purchase',
 *     message: 'Do you want to buy this book?',
 *     buttons: [
 *       {
 *         text: 'Cancel',
 *         role: 'cancel',
 *         handler: () => {
 *           console.log('Cancel clicked');
 *         }
 *       },
 *       {
 *         text: 'Buy',
 *         handler: () => {
 *           console.log('Buy clicked');
 *         }
 *       }
 *     ]
 *   });
 *   this.nav.present(alert);
 * }
 *
 * presentPrompt() {
 *   let alert = Alert.create({
 *     title: 'Login',
 *     inputs: [
 *       {
 *         name: 'username',
 *         placeholder: 'Username'
 *       },
 *       {
 *         name: 'password',
 *         placeholder: 'Password',
 *         type: 'password'
 *       }
 *     ],
 *     buttons: [
 *       {
 *         text: 'Cancel',
 *         role: 'cancel',
 *         handler: data => {
 *           console.log('Cancel clicked');
 *         }
 *       },
 *       {
 *         text: 'Login',
 *         handler: data => {
 *           if (User.isValid(data.username, data.password)) {
 *             // logged in!
 *           } else {
 *             // invalid login
 *             return false;
 *           }
 *         }
 *       }
 *     ]
 *   });
 *   this.nav.present(alert);
 * }
 * ```
 *
 *
 * ### Dismissing And Async Navigation
 *
 * After an alert has been dismissed, the app may need to also transition
 * to another page depending on the handler's logic. However, because multiple
 * transitions were fired at roughly the same time, it's difficult for the
 * nav controller to cleanly animate multiple transitions that may
 * have been kicked off asynchronously. This is further described in the
 * [`Nav Transition Promises`](../../nav/NavController) section. For alerts,
 * this means it's best to wait for the alert to finish its transition
 * out before starting a new transition on the same nav controller.
 *
 * In the example below, after the alert button has been clicked, its handler
 * waits on async operation to complete, *then* it uses `pop` to navigate
 * back a page in the same stack. The potential problem is that the async operation
 * may have been completed before the alert has even finished its transition
 * out. In this case, it's best to ensure the alert has finished its transition
 * out first, *then* start the next transition.
 *
 * ```ts
 * let alert = Alert.create({
 *   title: 'Hello',
 *   buttons: [{
 *     text: 'Ok',
 *     handler: () => {
 *       // user has clicked the alert button
 *       // begin the alert's dismiss transition
 *       let navTransition = alert.dismiss();
 *
 *       // start some async method
 *       someAsyncOperation().then(() => {
 *         // once the async operation has completed
 *         // then run the next nav transition after the
 *         // first transition has finished animating out
 *
 *         navTransition.then(() => {
 *           this.nav.pop();
 *         });
 *       });
 *       return false;
 *     }
 *   }]
 * });
 *
 * this.nav.present(alert);
 * ```
 *
 * It's important to note that the handler returns `false`. A feature of
 * button handlers is that they automatically dismiss the alert when their button
 * was clicked, however, we'll need more control regarding the transition. Because
 * the handler returns `false`, then the alert does not automatically dismiss
 * itself. Instead, you now have complete control of when the alert has finished
 * transitioning, and the ability to wait for the alert to finish transitioning
 * out before starting a new transition.
 *
 *
 * @demo /docs/v2/demos/alert/
 */
var Alert = function (_super) {
    __extends(Alert, _super);
    function Alert(opts) {
        if (opts === void 0) {
            opts = {};
        }
        opts.inputs = opts.inputs || [];
        opts.buttons = opts.buttons || [];
        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
        _super.call(this, AlertCmp, opts);
        this.isOverlay = true;
        // by default, alerts should not fire lifecycle events of other views
        // for example, when an alert enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        this.fireOtherLifecycles = false;
    }
    /**
    * @private
    */
    Alert.prototype.getTransitionName = function (direction) {
        var key = direction === 'back' ? 'alertLeave' : 'alertEnter';
        return this._nav && this._nav.config.get(key);
    };
    /**
     * @param {string} title Alert title
     */
    Alert.prototype.setTitle = function (title) {
        this.data.title = title;
    };
    /**
     * @param {string} subTitle Alert subtitle
     */
    Alert.prototype.setSubTitle = function (subTitle) {
        this.data.subTitle = subTitle;
    };
    /**
     * @private
     */
    Alert.prototype.setBody = function (message) {
        // deprecated warning
        console.warn('Alert setBody() has been renamed to setMessage()');
        this.setMessage(message);
    };
    /**
     * @param {string} message  Alert message content
     */
    Alert.prototype.setMessage = function (message) {
        this.data.message = message;
    };
    /**
     * @param {object} input Alert input
     */
    Alert.prototype.addInput = function (input) {
        this.data.inputs.push(input);
    };
    /**
     * @param {any} button Alert button
     */
    Alert.prototype.addButton = function (button) {
        this.data.buttons.push(button);
    };
    /**
     * @param {string} cssClass CSS class name to add to the alert's outer wrapper
     */
    Alert.prototype.setCssClass = function (cssClass) {
        this.data.cssClass = cssClass;
    };
    /**
     *
     *  Alert options
     *
     *  | Property              | Type      | Description                                                               |
     *  |-----------------------|-----------|---------------------------------------------------------------------------|
     *  | title                 | `string`  | The string for the alert (optional)                                       |
     *  | subTitle              | `string`  | The subtitle for the alert (optional)                                     |
     *  | message               | `string`  | The message for the alert (optional)                                      |
     *  | cssClass              | `string`  | Any additional class for the alert (optional)                             |
     *  | inputs                | `array`   | An array of inputs for the alert. See input options. (optional)           |
     *  | buttons               | `array`   | An array of buttons for the alert. See buttons options. (optional)        |
     *  | enableBackdropDismiss | `boolean` | Whether the alert should be dismissed by tapping the backdrop (optional)  |
     *
     *
     *  Input options
     *
     *  | Property    | Type      | Description                                                     |
     *  |-------------|-----------|-----------------------------------------------------------------|
     *  | type        | `string`  | The type the input should be, text, tel, number, etc (optional) |
     *  | name        | `string`  | The name for the input (optional)                               |
     *  | placeholder | `string`  | The input's placeholder (optional, for textual/numeric inputs)  |
     *  | value       | `string`  | The input's value (optional)                                    |
     *  | label       | `string`  | The input's label (optional, only for radio/checkbox inputs)    |
     *  | checked     | `boolean` | Whether or not the input is checked or not (optional)           |
     *  | id          | `string`  | The input's id (optional)                                       |
     *
     *  Button options
     *
     *  | Property | Type     | Description                                                    |
     *  |----------|----------|----------------------------------------------------------------|
     *  | text     | `string` | The buttons displayed text                                     |
     *  | handler  | `any`    | Expression that should be evaluated when the button is pressed |
     *  | cssClass | `string` | An additional CSS class for the button                         |
     *  | role     | `string` | The buttons role, null or `cancel`                             |
     *
     * @param {object} opts Alert. See the table above
     */
    Alert.create = function (opts) {
        if (opts === void 0) {
            opts = {};
        }
        return new Alert(opts);
    };
    return Alert;
}(view_controller_1.ViewController);
exports.Alert = Alert;
var AlertCmp = function () {
    function AlertCmp(_viewCtrl, _elementRef, _config, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._elementRef = _elementRef;
        this._config = _config;
        this.d = params.data;
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(function (cssClass) {
                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = ++alertIds;
        this.descId = '';
        this.hdrId = 'alert-hdr-' + this.id;
        this.subHdrId = 'alert-subhdr-' + this.id;
        this.msgId = 'alert-msg-' + this.id;
        this.activeId = '';
        this.lastClick = 0;
        if (this.d.message) {
            this.descId = this.msgId;
        } else if (this.d.subTitle) {
            this.descId = this.subHdrId;
        }
        if (!this.d.message) {
            this.d.message = '';
        }
    }
    AlertCmp.prototype.ionViewLoaded = function () {
        var _this = this;
        // normalize the data
        var data = this.d;
        data.buttons = data.buttons.map(function (button) {
            if (typeof button === 'string') {
                return { text: button };
            }
            return button;
        });
        data.inputs = data.inputs.map(function (input, index) {
            return {
                type: input.type || 'text',
                name: util_1.isPresent(input.name) ? input.name : index,
                placeholder: util_1.isPresent(input.placeholder) ? input.placeholder : '',
                value: util_1.isPresent(input.value) ? input.value : '',
                label: input.label,
                checked: !!input.checked,
                id: 'alert-input-' + _this.id + '-' + index
            };
        });
        // An alert can be created with several different inputs. Radios,
        // checkboxes and inputs are all accepted, but they cannot be mixed.
        var inputTypes = [];
        data.inputs.forEach(function (input) {
            if (inputTypes.indexOf(input.type) < 0) {
                inputTypes.push(input.type);
            }
        });
        if (inputTypes.length > 1 && (inputTypes.indexOf('checkbox') > -1 || inputTypes.indexOf('radio') > -1)) {
            console.warn('Alert cannot mix input types: ' + inputTypes.join('/') + '. Please see alert docs for more info.');
        }
        this.inputType = inputTypes.length ? inputTypes[0] : null;
        var checkedInput = this.d.inputs.find(function (input) {
            return input.checked;
        });
        if (checkedInput) {
            this.activeId = checkedInput.id;
        }
    };
    AlertCmp.prototype._keyUp = function (ev) {
        if (this.enabled && this._viewCtrl.isLast()) {
            if (ev.keyCode === key_1.Key.ENTER) {
                if (this.lastClick + 1000 < Date.now()) {
                    // do not fire this click if there recently was already a click
                    // this can happen when the button has focus and used the enter
                    // key to click the button. However, both the click handler and
                    // this keyup event will fire, so only allow one of them to go.
                    console.debug('alert, enter button');
                    var button = this.d.buttons[this.d.buttons.length - 1];
                    this.btnClick(button);
                }
            } else if (ev.keyCode === key_1.Key.ESCAPE) {
                console.debug('alert, escape button');
                this.bdClick();
            }
        }
    };
    AlertCmp.prototype.ionViewDidEnter = function () {
        var activeElement = document.activeElement;
        if (document.activeElement) {
            activeElement.blur();
        }
        var focusableEle = this._elementRef.nativeElement.querySelector('input,button');
        if (focusableEle) {
            focusableEle.focus();
        }
        this.enabled = true;
    };
    AlertCmp.prototype.btnClick = function (button, dismissDelay) {
        var _this = this;
        if (!this.enabled) {
            return;
        }
        // keep the time of the most recent button click
        this.lastClick = Date.now();
        var shouldDismiss = true;
        if (button.handler) {
            // a handler has been provided, execute it
            // pass the handler the values from the inputs
            if (button.handler(this.getValues()) === false) {
                // if the return value of the handler is false then do not dismiss
                shouldDismiss = false;
            }
        }
        if (shouldDismiss) {
            setTimeout(function () {
                _this.dismiss(button.role);
            }, dismissDelay || this._config.get('pageTransitionDelay'));
        }
    };
    AlertCmp.prototype.rbClick = function (checkedInput) {
        if (this.enabled) {
            this.d.inputs.forEach(function (input) {
                input.checked = checkedInput === input;
            });
            this.activeId = checkedInput.id;
        }
    };
    AlertCmp.prototype.cbClick = function (checkedInput) {
        if (this.enabled) {
            checkedInput.checked = !checkedInput.checked;
        }
    };
    AlertCmp.prototype.bdClick = function () {
        if (this.enabled && this.d.enableBackdropDismiss) {
            var cancelBtn = this.d.buttons.find(function (b) {
                return b.role === 'cancel';
            });
            if (cancelBtn) {
                this.btnClick(cancelBtn, 1);
            } else {
                this.dismiss('backdrop');
            }
        }
    };
    AlertCmp.prototype.dismiss = function (role) {
        return this._viewCtrl.dismiss(this.getValues(), role);
    };
    AlertCmp.prototype.getValues = function () {
        if (this.inputType === 'radio') {
            // this is an alert with radio buttons (single value select)
            // return the one value which is checked, otherwise undefined
            var checkedInput = this.d.inputs.find(function (i) {
                return i.checked;
            });
            return checkedInput ? checkedInput.value : undefined;
        }
        if (this.inputType === 'checkbox') {
            // this is an alert with checkboxes (multiple value select)
            // return an array of all the checked values
            return this.d.inputs.filter(function (i) {
                return i.checked;
            }).map(function (i) {
                return i.value;
            });
        }
        // this is an alert with text inputs
        // return an object of all the values with the input name as the key
        var values = {};
        this.d.inputs.forEach(function (i) {
            values[i.name] = i.value;
        });
        return values;
    };
    /** @nocollapse */
    AlertCmp.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-alert',
            template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="alert-wrapper">' + '<div class="alert-head">' + '<h2 id="{{hdrId}}" class="alert-title" *ngIf="d.title" [innerHTML]="d.title"></h2>' + '<h3 id="{{subHdrId}}" class="alert-sub-title" *ngIf="d.subTitle" [innerHTML]="d.subTitle"></h3>' + '</div>' + '<div id="{{msgId}}" class="alert-message" [innerHTML]="d.message"></div>' + '<div *ngIf="d.inputs.length" [ngSwitch]="inputType">' + '<template ngSwitchCase="radio">' + '<div class="alert-radio-group" role="radiogroup" [attr.aria-labelledby]="hdrId" [attr.aria-activedescendant]="activeId">' + '<button category="alert-radio-button" *ngFor="let i of d.inputs" (click)="rbClick(i)" [attr.aria-checked]="i.checked" [attr.id]="i.id" class="alert-tappable alert-radio" role="radio">' + '<div class="alert-radio-icon"><div class="alert-radio-inner"></div></div>' + '<div class="alert-radio-label">' + '{{i.label}}' + '</div>' + '</button>' + '</div>' + '</template>' + '<template ngSwitchCase="checkbox">' + '<div class="alert-checkbox-group">' + '<button category="alert-checkbox-button" *ngFor="let i of d.inputs" (click)="cbClick(i)" [attr.aria-checked]="i.checked" class="alert-tappable alert-checkbox" role="checkbox">' + '<div class="alert-checkbox-icon"><div class="alert-checkbox-inner"></div></div>' + '<div class="alert-checkbox-label">' + '{{i.label}}' + '</div>' + '</button>' + '</div>' + '</template>' + '<template ngSwitchDefault>' + '<div class="alert-input-group">' + '<div *ngFor="let i of d.inputs" class="alert-input-wrapper">' + '<input [placeholder]="i.placeholder" [(ngModel)]="i.value" [type]="i.type" class="alert-input">' + '</div>' + '</div>' + '</template>' + '</div>' + '<div class="alert-button-group" [ngClass]="{vertical: d.buttons.length>2}">' + '<button category="alert-button" *ngFor="let b of d.buttons" (click)="btnClick(b)" [ngClass]="b.cssClass">' + '{{b.text}}' + '</button>' + '</div>' + '</div>',
            host: {
                'role': 'dialog',
                '[attr.aria-labelledby]': 'hdrId',
                '[attr.aria-describedby]': 'descId'
            },
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    AlertCmp.ctorParameters = [{ type: view_controller_1.ViewController }, { type: core_1.ElementRef }, { type: config_1.Config }, { type: nav_params_1.NavParams }, { type: core_1.Renderer }];
    /** @nocollapse */
    AlertCmp.propDecorators = {
        '_keyUp': [{ type: core_1.HostListener, args: ['body:keyup', ['$event']] }]
    };
    return AlertCmp;
}();
/**
 * Animations for alerts
 */
var AlertPopIn = function (_super) {
    __extends(AlertPopIn, _super);
    function AlertPopIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
        backdrop.fromTo('opacity', 0.01, 0.3);
        this.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
    }
    return AlertPopIn;
}(transition_1.Transition);
transition_1.Transition.register('alert-pop-in', AlertPopIn);
var AlertPopOut = function (_super) {
    __extends(AlertPopOut, _super);
    function AlertPopOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
        backdrop.fromTo('opacity', 0.3, 0);
        this.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
    }
    return AlertPopOut;
}(transition_1.Transition);
transition_1.Transition.register('alert-pop-out', AlertPopOut);
var AlertMdPopIn = function (_super) {
    __extends(AlertMdPopIn, _super);
    function AlertMdPopIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
        backdrop.fromTo('opacity', 0.01, 0.5);
        this.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
    }
    return AlertMdPopIn;
}(transition_1.Transition);
transition_1.Transition.register('alert-md-pop-in', AlertMdPopIn);
var AlertMdPopOut = function (_super) {
    __extends(AlertMdPopOut, _super);
    function AlertMdPopOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
        backdrop.fromTo('opacity', 0.5, 0);
        this.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
    }
    return AlertMdPopOut;
}(transition_1.Transition);
transition_1.Transition.register('alert-md-pop-out', AlertMdPopOut);
var AlertWpPopIn = function (_super) {
    __extends(AlertWpPopIn, _super);
    function AlertWpPopIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
        backdrop.fromTo('opacity', 0.01, 0.5);
        this.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(backdrop).add(wrapper);
    }
    return AlertWpPopIn;
}(transition_1.Transition);
transition_1.Transition.register('alert-wp-pop-in', AlertWpPopIn);
var AlertWpPopOut = function (_super) {
    __extends(AlertWpPopOut, _super);
    function AlertWpPopOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
        backdrop.fromTo('opacity', 0.5, 0);
        this.easing('ease-out').duration(150).add(backdrop).add(wrapper);
    }
    return AlertWpPopOut;
}(transition_1.Transition);
transition_1.Transition.register('alert-wp-pop-out', AlertWpPopOut);
var alertIds = -1;

/***/ },
/* 851 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var config_1 = __webpack_require__(16);
var Badge = function () {
    function Badge(config, _elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        var element = _elementRef.nativeElement;
        this._readAttrs(element);
    }
    /**
     * @private
     */
    Badge.prototype._readAttrs = function (element) {
        var elementAttrs = element.attributes;
        var attrName;
        for (var i = 0, l = elementAttrs.length; i < l; i++) {
            if (elementAttrs[i].value !== '') continue;
            attrName = elementAttrs[i].name;
            // Ignore attributes item-left, item-right
            if (attrName.indexOf('item') === -1) {
                this._setClass(attrName);
            }
        }
    };
    /**
     * @private
     */
    Badge.prototype._setClass = function (color) {
        this._renderer.setElementClass(this._elementRef.nativeElement, 'badge-' + color, true);
    };
    /** @nocollapse */
    Badge.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-badge'
        }] }];
    /** @nocollapse */
    Badge.ctorParameters = [{ type: config_1.Config }, { type: core_1.ElementRef }, { type: core_1.Renderer }];
    return Badge;
}();
exports.Badge = Badge;

/***/ },
/* 852 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var form_1 = __webpack_require__(73);
var item_1 = __webpack_require__(69);
var util_1 = __webpack_require__(7);
exports.CHECKBOX_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () {
        return Checkbox;
    }), multi: true });
var Checkbox = function () {
    function Checkbox(_form, _item) {
        this._form = _form;
        this._item = _item;
        this._checked = false;
        this._disabled = false;
        this.ionChange = new core_1.EventEmitter();
        _form.register(this);
        if (_item) {
            this.id = 'chk-' + _item.registerInput('checkbox');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-checkbox', true);
        }
    }
    Checkbox.prototype._click = function (ev) {
        console.debug('checkbox, checked');
        ev.preventDefault();
        ev.stopPropagation();
        this.onChange(!this._checked);
    };
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: function get() {
            return this._checked;
        },
        set: function set(val) {
            this._setChecked(util_1.isTrueProperty(val));
            this.onChange(this._checked);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Checkbox.prototype._setChecked = function (isChecked) {
        if (isChecked !== this._checked) {
            this._checked = isChecked;
            if (this._init) {
                this.ionChange.emit(this);
            }
            this._item && this._item.setCssClass('item-checkbox-checked', isChecked);
        }
    };
    /**
     * @private
     */
    Checkbox.prototype.writeValue = function (val) {
        this._setChecked(util_1.isTrueProperty(val));
    };
    /**
     * @private
     */
    Checkbox.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function (isChecked) {
            console.debug('checkbox, onChange', isChecked);
            fn(isChecked);
            _this._setChecked(isChecked);
            _this.onTouched();
        };
    };
    /**
     * @private
     */
    Checkbox.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    Object.defineProperty(Checkbox.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-checkbox-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Checkbox.prototype.onChange = function (isChecked) {
        // used when this input does not have an ngModel or ngControl
        console.debug('checkbox, onChange (no ngModel)', isChecked);
        this._setChecked(isChecked);
        this.onTouched();
    };
    /**
     * @private
     */
    Checkbox.prototype.onTouched = function () {};
    /**
     * @private
     */
    Checkbox.prototype.ngAfterContentInit = function () {
        this._init = true;
    };
    /**
     * @private
     */
    Checkbox.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
    };
    /** @nocollapse */
    Checkbox.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-checkbox',
            template: '<div class="checkbox-icon" [class.checkbox-checked]="_checked">' + '<div class="checkbox-inner"></div>' + '</div>' + '<button role="checkbox" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
            host: {
                '[class.checkbox-disabled]': '_disabled'
            },
            providers: [exports.CHECKBOX_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Checkbox.ctorParameters = [{ type: form_1.Form }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    Checkbox.propDecorators = {
        'ionChange': [{ type: core_1.Output }],
        '_click': [{ type: core_1.HostListener, args: ['click', ['$event']] }],
        'checked': [{ type: core_1.Input }],
        'disabled': [{ type: core_1.Input }]
    };
    return Checkbox;
}();
exports.Checkbox = Checkbox;

/***/ },
/* 853 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var config_1 = __webpack_require__(16);
var picker_1 = __webpack_require__(869);
var form_1 = __webpack_require__(73);
var item_1 = __webpack_require__(69);
var util_1 = __webpack_require__(7);
var datetime_util_1 = __webpack_require__(511);
var nav_controller_1 = __webpack_require__(51);
exports.DATETIME_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () {
        return DateTime;
    }), multi: true });
var DateTime = function () {
    function DateTime(_form, _config, _item, _nav) {
        this._form = _form;
        this._config = _config;
        this._item = _item;
        this._nav = _nav;
        this._disabled = false;
        this._text = '';
        this._isOpen = false;
        this._value = {};
        this._locale = {};
        this.displayFormat = 'MMM D, YYYY';
        this.cancelText = 'Cancel';
        this.doneText = 'Done';
        this.pickerOptions = {};
        this.ionChange = new core_1.EventEmitter();
        this.ionCancel = new core_1.EventEmitter();
        this._form.register(this);
        if (_item) {
            this.id = 'dt-' + _item.registerInput('datetime');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-datetime', true);
        }
        if (!_nav) {
            console.error('parent <ion-nav> required for <ion-datetime>');
        }
    }
    DateTime.prototype._click = function (ev) {
        if (ev.detail === 0) {
            // do not continue if the click event came from a form submit
            return;
        }
        ev.preventDefault();
        ev.stopPropagation();
        this.open();
    };
    DateTime.prototype._keyup = function () {
        if (!this._isOpen) {
            this.open();
        }
    };
    /**
     * @private
     */
    DateTime.prototype.open = function () {
        var _this = this;
        if (this._disabled) {
            return;
        }
        console.debug('datetime, open picker');
        // the user may have assigned some options specifically for the alert
        var pickerOptions = util_1.merge({}, this.pickerOptions);
        var picker = picker_1.Picker.create(pickerOptions);
        pickerOptions.buttons = [{
            text: this.cancelText,
            role: 'cancel',
            handler: function handler() {
                _this.ionCancel.emit(null);
            }
        }, {
            text: this.doneText,
            handler: function handler(data) {
                console.log('datetime, done', data);
                _this.onChange(data);
                _this.ionChange.emit(data);
            }
        }];
        this.generate(picker);
        this.validate(picker);
        picker.ionChange.subscribe(function () {
            _this.validate(picker);
        });
        this._nav.present(picker, pickerOptions);
        this._isOpen = true;
        picker.onDismiss(function () {
            _this._isOpen = false;
        });
    };
    /**
     * @private
     */
    DateTime.prototype.generate = function (picker) {
        var _this = this;
        // if a picker format wasn't provided, then fallback
        // to use the display format
        var template = this.pickerFormat || this.displayFormat;
        if (util_1.isPresent(template)) {
            // make sure we've got up to date sizing information
            this.calcMinMax();
            // does not support selecting by day name
            // automaticallly remove any day name formats
            template = template.replace('DDDD', '{~}').replace('DDD', '{~}');
            if (template.indexOf('D') === -1) {
                // there is not a day in the template
                // replace the day name with a numeric one if it exists
                template = template.replace('{~}', 'D');
            }
            // make sure no day name replacer is left in the string
            template = template.replace(/{~}/g, '');
            // parse apart the given template into an array of "formats"
            datetime_util_1.parseTemplate(template).forEach(function (format) {
                // loop through each format in the template
                // create a new picker column to build up with data
                var key = datetime_util_1.convertFormatToKey(format);
                var values;
                // first see if they have exact values to use for this input
                if (util_1.isPresent(_this[key + 'Values'])) {
                    // user provide exact values for this date part
                    values = convertToArrayOfNumbers(_this[key + 'Values'], key);
                } else {
                    // use the default date part values
                    values = datetime_util_1.dateValueRange(format, _this._min, _this._max);
                }
                var column = {
                    name: key,
                    options: values.map(function (val) {
                        return {
                            value: val,
                            text: datetime_util_1.renderTextFormat(format, val, null, _this._locale)
                        };
                    })
                };
                if (column.options.length) {
                    // cool, we've loaded up the columns with options
                    // preselect the option for this column
                    var selected = column.options.find(function (opt) {
                        return opt.value === datetime_util_1.getValueFromFormat(_this._value, format);
                    });
                    if (selected) {
                        // set the select index for this column's options
                        column.selectedIndex = column.options.indexOf(selected);
                    }
                    // add our newly created column to the picker
                    picker.addColumn(column);
                }
            });
            this.divyColumns(picker);
        }
    };
    /**
     * @private
     */
    DateTime.prototype.validate = function (picker) {
        var i;
        var today = new Date();
        var columns = picker.getColumns();
        // find the columns used
        var yearCol = columns.find(function (col) {
            return col.name === 'year';
        });
        var monthCol = columns.find(function (col) {
            return col.name === 'month';
        });
        var dayCol = columns.find(function (col) {
            return col.name === 'day';
        });
        var yearOpt;
        var monthOpt;
        var dayOpt;
        // default to assuming today's year
        var selectedYear = today.getFullYear();
        if (yearCol) {
            yearOpt = yearCol.options[yearCol.selectedIndex];
            if (yearOpt) {
                // they have a selected year value
                selectedYear = yearOpt.value;
            }
        }
        // default to assuming this month has 31 days
        var numDaysInMonth = 31;
        var selectedMonth;
        if (monthCol) {
            monthOpt = monthCol.options[monthCol.selectedIndex];
            if (monthOpt) {
                // they have a selected month value
                selectedMonth = monthOpt.value;
                // calculate how many days are in this month
                numDaysInMonth = datetime_util_1.daysInMonth(selectedMonth, selectedYear);
            }
        }
        // create sort values for the min/max datetimes
        var minCompareVal = datetime_util_1.dateDataSortValue(this._min);
        var maxCompareVal = datetime_util_1.dateDataSortValue(this._max);
        if (monthCol) {
            // enable/disable which months are valid
            // to show within the min/max date range
            for (i = 0; i < monthCol.options.length; i++) {
                monthOpt = monthCol.options[i];
                // loop through each month and see if it
                // is within the min/max date range
                monthOpt.disabled = datetime_util_1.dateSortValue(selectedYear, monthOpt.value, 31) < minCompareVal || datetime_util_1.dateSortValue(selectedYear, monthOpt.value, 1) > maxCompareVal;
            }
        }
        if (dayCol) {
            if (util_1.isPresent(selectedMonth)) {
                // enable/disable which days are valid
                // to show within the min/max date range
                for (i = 0; i < 31; i++) {
                    dayOpt = dayCol.options[i];
                    // loop through each day and see if it
                    // is within the min/max date range
                    var compareVal = datetime_util_1.dateSortValue(selectedYear, selectedMonth, dayOpt.value);
                    dayOpt.disabled = compareVal < minCompareVal || compareVal > maxCompareVal || numDaysInMonth <= i;
                }
            } else {
                // enable/disable which numbers of days to show in this month
                for (i = 0; i < 31; i++) {
                    dayCol.options[i].disabled = numDaysInMonth <= i;
                }
            }
        }
        picker.refresh();
    };
    /**
     * @private
     */
    DateTime.prototype.divyColumns = function (picker) {
        var pickerColumns = picker.getColumns();
        var columns = [];
        pickerColumns.forEach(function (col, i) {
            columns.push(0);
            col.options.forEach(function (opt) {
                if (opt.text.length > columns[i]) {
                    columns[i] = opt.text.length;
                }
            });
        });
        if (columns.length === 2) {
            var width = Math.max(columns[0], columns[1]);
            pickerColumns[0].columnWidth = pickerColumns[1].columnWidth = width * 16 + "px";
        } else if (columns.length === 3) {
            var width = Math.max(columns[0], columns[2]);
            pickerColumns[1].columnWidth = columns[1] * 16 + "px";
            pickerColumns[0].columnWidth = pickerColumns[2].columnWidth = width * 16 + "px";
        } else if (columns.length > 3) {
            columns.forEach(function (col, i) {
                pickerColumns[i].columnWidth = col * 12 + "px";
            });
        }
    };
    /**
     * @private
     */
    DateTime.prototype.setValue = function (newData) {
        datetime_util_1.updateDate(this._value, newData);
    };
    /**
     * @private
     */
    DateTime.prototype.getValue = function () {
        return this._value;
    };
    /**
     * @private
     */
    DateTime.prototype.checkHasValue = function (inputValue) {
        if (this._item) {
            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
        }
    };
    /**
     * @private
     */
    DateTime.prototype.updateText = function () {
        // create the text of the formatted data
        this._text = datetime_util_1.renderDateTime(this.displayFormat, this._value, this._locale);
    };
    /**
     * @private
     */
    DateTime.prototype.calcMinMax = function () {
        var todaysYear = new Date().getFullYear();
        if (util_1.isBlank(this.min)) {
            if (util_1.isPresent(this.yearValues)) {
                this.min = Math.min.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
            } else {
                this.min = (todaysYear - 100).toString();
            }
        }
        if (util_1.isBlank(this.max)) {
            if (util_1.isPresent(this.yearValues)) {
                this.max = Math.max.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
            } else {
                this.max = todaysYear.toString();
            }
        }
        var min = this._min = datetime_util_1.parseDate(this.min);
        var max = this._max = datetime_util_1.parseDate(this.max);
        min.month = min.month || 1;
        min.day = min.day || 1;
        min.hour = min.hour || 0;
        min.minute = min.minute || 0;
        min.second = min.second || 0;
        max.month = max.month || 12;
        max.day = max.day || 31;
        max.hour = max.hour || 23;
        max.minute = max.minute || 59;
        max.second = max.second || 59;
    };
    Object.defineProperty(DateTime.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-datetime-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    DateTime.prototype.writeValue = function (val) {
        console.debug('datetime, writeValue', val);
        this.setValue(val);
        this.updateText();
        this.checkHasValue(val);
    };
    /**
     * @private
     */
    DateTime.prototype.ngAfterContentInit = function () {
        var _this = this;
        // first see if locale names were provided in the inputs
        // then check to see if they're in the config
        // if neither were provided then it will use default English names
        ['monthNames', 'monthShortNames', 'dayNames', 'dayShortNames'].forEach(function (type) {
            _this._locale[type] = convertToArrayOfStrings(util_1.isPresent(_this[type]) ? _this[type] : _this._config.get(type), type);
        });
        // update how the datetime value is displayed as formatted text
        this.updateText();
    };
    /**
     * @private
     */
    DateTime.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function (val) {
            console.debug('datetime, onChange', val);
            _this.setValue(val);
            _this.updateText();
            _this.checkHasValue(val);
            // convert DateTimeData value to iso datetime format
            fn(datetime_util_1.convertDataToISO(_this._value));
            _this.onTouched();
        };
    };
    /**
     * @private
     */
    DateTime.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @private
     */
    DateTime.prototype.onChange = function (val) {
        // onChange used when there is not an ngControl
        console.debug('datetime, onChange w/out ngControl', val);
        this.setValue(val);
        this.updateText();
        this.onTouched();
    };
    /**
     * @private
     */
    DateTime.prototype.onTouched = function () {};
    /**
     * @private
     */
    DateTime.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
    };
    /** @nocollapse */
    DateTime.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-datetime',
            template: '<div class="datetime-text">{{_text}}</div>' + '<button aria-haspopup="true" ' + 'type="button" ' + '[id]="id" ' + 'category="item-cover" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
            host: {
                '[class.datetime-disabled]': '_disabled'
            },
            providers: [exports.DATETIME_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    DateTime.ctorParameters = [{ type: form_1.Form }, { type: config_1.Config }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }, { type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    DateTime.propDecorators = {
        'min': [{ type: core_1.Input }],
        'max': [{ type: core_1.Input }],
        'displayFormat': [{ type: core_1.Input }],
        'pickerFormat': [{ type: core_1.Input }],
        'cancelText': [{ type: core_1.Input }],
        'doneText': [{ type: core_1.Input }],
        'yearValues': [{ type: core_1.Input }],
        'monthValues': [{ type: core_1.Input }],
        'dayValues': [{ type: core_1.Input }],
        'hourValues': [{ type: core_1.Input }],
        'minuteValues': [{ type: core_1.Input }],
        'monthNames': [{ type: core_1.Input }],
        'monthShortNames': [{ type: core_1.Input }],
        'dayNames': [{ type: core_1.Input }],
        'dayShortNames': [{ type: core_1.Input }],
        'pickerOptions': [{ type: core_1.Input }],
        'ionChange': [{ type: core_1.Output }],
        'ionCancel': [{ type: core_1.Output }],
        '_click': [{ type: core_1.HostListener, args: ['click', ['$event']] }],
        '_keyup': [{ type: core_1.HostListener, args: ['keyup.space'] }],
        'disabled': [{ type: core_1.Input }]
    };
    return DateTime;
}();
exports.DateTime = DateTime;
/**
 * @private
 * Use to convert a string of comma separated numbers or
 * an array of numbers, and clean up any user input
 */
function convertToArrayOfNumbers(input, type) {
    var values = [];
    if (util_1.isString(input)) {
        // convert the string to an array of strings
        // auto remove any whitespace and [] characters
        input = input.replace(/\[|\]|\s/g, '').split(',');
    }
    if (util_1.isArray(input)) {
        // ensure each value is an actual number in the returned array
        input.forEach(function (num) {
            num = parseInt(num, 10);
            if (!isNaN(num)) {
                values.push(num);
            }
        });
    }
    if (!values.length) {
        console.warn("Invalid \"" + type + "Values\". Must be an array of numbers, or a comma separated string of numbers.");
    }
    return values;
}
/**
 * @private
 * Use to convert a string of comma separated strings or
 * an array of strings, and clean up any user input
 */
function convertToArrayOfStrings(input, type) {
    if (util_1.isPresent(input)) {
        var values = [];
        if (util_1.isString(input)) {
            // convert the string to an array of strings
            // auto remove any [] characters
            input = input.replace(/\[|\]/g, '').split(',');
        }
        if (util_1.isArray(input)) {
            // trim up each string value
            input.forEach(function (val) {
                val = val.trim();
                if (val) {
                    values.push(val);
                }
            });
        }
        if (!values.length) {
            console.warn("Invalid \"" + type + "Names\". Must be an array of strings, or a comma separated string.");
        }
        return values;
    }
}

/***/ },
/* 854 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var config_1 = __webpack_require__(16);
var infinite_scroll_1 = __webpack_require__(460);
var InfiniteScrollContent = function () {
    function InfiniteScrollContent(inf, _config) {
        this.inf = inf;
        this._config = _config;
    }
    /**
     * @private
     */
    InfiniteScrollContent.prototype.ngOnInit = function () {
        if (!this.loadingSpinner) {
            this.loadingSpinner = this._config.get('infiniteLoadingSpinner', this._config.get('spinner', 'ios'));
        }
    };
    /** @nocollapse */
    InfiniteScrollContent.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-infinite-scroll-content',
            template: '<div class="infinite-loading">' + '<div class="infinite-loading-spinner" *ngIf="loadingSpinner">' + '<ion-spinner [name]="loadingSpinner"></ion-spinner>' + '</div>' + '<div class="infinite-loading-text" [innerHTML]="loadingText" *ngIf="loadingText"></div>' + '</div>',
            host: {
                '[attr.state]': 'inf.state'
            },
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    InfiniteScrollContent.ctorParameters = [{ type: infinite_scroll_1.InfiniteScroll }, { type: config_1.Config }];
    /** @nocollapse */
    InfiniteScrollContent.propDecorators = {
        'loadingSpinner': [{ type: core_1.Input }],
        'loadingText': [{ type: core_1.Input }]
    };
    return InfiniteScrollContent;
}();
exports.InfiniteScrollContent = InfiniteScrollContent;

/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var util_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(17);
var native_input_1 = __webpack_require__(461);
var InputBase = function () {
    function InputBase(config, _form, _item, _app, _platform, _elementRef, _scrollView, _nav, ngControl) {
        this._form = _form;
        this._item = _item;
        this._app = _app;
        this._platform = _platform;
        this._elementRef = _elementRef;
        this._scrollView = _scrollView;
        this._nav = _nav;
        this._disabled = false;
        this._type = 'text';
        this._value = '';
        this.placeholder = '';
        this.blur = new core_1.EventEmitter();
        this.focus = new core_1.EventEmitter();
        this._useAssist = config.getBoolean('scrollAssist', false);
        this._usePadding = config.getBoolean('scrollPadding', this._useAssist);
        this._keyboardHeight = config.getNumber('keyboardHeight');
        this._autoFocusAssist = config.get('autoFocusAssist', 'delay');
        this._autoComplete = config.get('autocomplete', 'off');
        this._autoCorrect = config.get('autocorrect', 'off');
        if (ngControl) {
            ngControl.valueAccessor = this;
            this.inputControl = ngControl;
        }
        _form.register(this);
    }
    InputBase.prototype.ngOnInit = function () {
        if (this._item) {
            this._item.setCssClass('item-input', true);
            this._item.registerInput(this._type);
        }
        var clearInput = this.clearInput;
        if (typeof clearInput === 'string') {
            this.clearInput = clearInput === '' || clearInput === 'true';
        }
    };
    InputBase.prototype.ngAfterContentInit = function () {
        var self = this;
        self._scrollMove = function (ev) {
            // scroll move event listener this instance can reuse
            if (!(self._nav && self._nav.isTransitioning())) {
                self.deregScrollMove();
                if (self.hasFocus()) {
                    self._native.hideFocus(true);
                    self._scrollView.onScrollEnd(function () {
                        self._native.hideFocus(false);
                        if (self.hasFocus()) {
                            // if it still has focus then keep listening
                            self.regScrollMove();
                        }
                    });
                }
            }
        };
        this.setItemInputControlCss();
    };
    InputBase.prototype.ngAfterContentChecked = function () {
        this.setItemInputControlCss();
    };
    InputBase.prototype.setItemInputControlCss = function () {
        var item = this._item;
        var nativeInput = this._native;
        var inputControl = this.inputControl;
        // Set the control classes on the item
        if (item && inputControl) {
            this.setControlCss(item, inputControl);
        }
        // Set the control classes on the native input
        if (nativeInput && inputControl) {
            this.setControlCss(nativeInput, inputControl);
        }
    };
    InputBase.prototype.setControlCss = function (element, control) {
        element.setCssClass('ng-untouched', control.untouched);
        element.setCssClass('ng-touched', control.touched);
        element.setCssClass('ng-pristine', control.pristine);
        element.setCssClass('ng-dirty', control.dirty);
        element.setCssClass('ng-valid', control.valid);
        element.setCssClass('ng-invalid', !control.valid);
    };
    InputBase.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
    };
    Object.defineProperty(InputBase.prototype, "value", {
        get: function get() {
            return this._value;
        },
        set: function set(val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputBase.prototype, "type", {
        get: function get() {
            return this._type;
        },
        set: function set(val) {
            this._type = 'text';
            if (val) {
                val = val.toLowerCase();
                if (/password|email|number|search|tel|url|date|month|time|week/.test(val)) {
                    this._type = val;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputBase.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-input-disabled', this._disabled);
            this._native && this._native.isDisabled(this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputBase.prototype, "_nativeInput", {
        set: function set(nativeInput) {
            var _this = this;
            this._native = nativeInput;
            if (this._item && this._item.labelId !== null) {
                nativeInput.labelledBy(this._item.labelId);
            }
            nativeInput.valueChange.subscribe(function (inputValue) {
                _this.onChange(inputValue);
            });
            this.focusChange(this.hasFocus());
            nativeInput.focusChange.subscribe(function (textInputHasFocus) {
                _this.focusChange(textInputHasFocus);
                _this.checkHasValue(nativeInput.getValue());
                if (!textInputHasFocus) {
                    _this.onTouched(textInputHasFocus);
                }
            });
            this.checkHasValue(nativeInput.getValue());
            this.disabled = this._disabled;
            var ionInputEle = this._elementRef.nativeElement;
            var nativeInputEle = nativeInput.element();
            // copy ion-input attributes to the native input element
            dom_1.copyInputAttributes(ionInputEle, nativeInputEle);
            if (ionInputEle.hasAttribute('autofocus')) {
                // the ion-input element has the autofocus attributes
                ionInputEle.removeAttribute('autofocus');
                if (this._autoFocusAssist === 'immediate') {
                    // config says to immediate focus on the input
                    // works best on android devices
                    nativeInputEle.focus();
                } else if (this._autoFocusAssist === 'delay') {
                    // config says to chill out a bit and focus on the input after transitions
                    // works best on desktop
                    setTimeout(function () {
                        nativeInputEle.focus();
                    }, 650);
                }
            }
            // by default set autocomplete="off" unless specified by the input
            if (ionInputEle.hasAttribute('autocomplete')) {
                this._autoComplete = ionInputEle.getAttribute('autocomplete');
            }
            nativeInputEle.setAttribute('autocomplete', this._autoComplete);
            // by default set autocorrect="off" unless specified by the input
            if (ionInputEle.hasAttribute('autocorrect')) {
                this._autoCorrect = ionInputEle.getAttribute('autocorrect');
            }
            nativeInputEle.setAttribute('autocorrect', this._autoCorrect);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputBase.prototype, "_nextInput", {
        set: function set(nextInput) {
            var _this = this;
            if (nextInput) {
                nextInput.focused.subscribe(function () {
                    _this._form.tabFocus(_this);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * Angular2 Forms API method called by the model (Control) on change to update
     * the checked value.
     * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
     */
    InputBase.prototype.writeValue = function (val) {
        this._value = val;
        this.checkHasValue(val);
    };
    /**
     * @private
     */
    InputBase.prototype.onChange = function (val) {
        this.checkHasValue(val);
    };
    /**
     * @private
     */
    InputBase.prototype.onTouched = function (val) {};
    /**
     * @private
     */
    InputBase.prototype.hasFocus = function () {
        // check if an input has focus or not
        return this._native.hasFocus();
    };
    /**
     * @private
     */
    InputBase.prototype.checkHasValue = function (inputValue) {
        if (this._item) {
            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
        }
    };
    /**
     * @private
     */
    InputBase.prototype.focusChange = function (inputHasFocus) {
        if (this._item) {
            this._item.setCssClass('input-has-focus', inputHasFocus);
        }
        if (!inputHasFocus) {
            this.deregScrollMove();
        }
    };
    InputBase.prototype.pointerStart = function (ev) {
        // input cover touchstart
        console.debug('scroll assist pointerStart', ev.type);
        if (ev.type === 'touchstart') {
            this._isTouch = true;
        }
        if ((this._isTouch || !this._isTouch && ev.type === 'mousedown') && this._app.isEnabled()) {
            // remember where the touchstart/mousedown started
            this._coord = dom_1.pointerCoord(ev);
        }
    };
    InputBase.prototype.pointerEnd = function (ev) {
        // input cover touchend/mouseup
        console.debug('scroll assist pointerEnd', ev.type);
        if (this._isTouch && ev.type === 'mouseup' || !this._app.isEnabled()) {
            // the app is actively doing something right now
            // don't try to scroll in the input
            ev.preventDefault();
            ev.stopPropagation();
        } else if (this._coord) {
            // get where the touchend/mouseup ended
            var endCoord = dom_1.pointerCoord(ev);
            // focus this input if the pointer hasn't moved XX pixels
            // and the input doesn't already have focus
            if (!dom_1.hasPointerMoved(8, this._coord, endCoord) && !this.hasFocus()) {
                ev.preventDefault();
                ev.stopPropagation();
                // begin the input focus process
                console.debug('initFocus', ev.type);
                this.initFocus();
            }
        }
        this._coord = null;
    };
    /**
     * @private
     */
    InputBase.prototype.initFocus = function () {
        var _this = this;
        // begin the process of setting focus to the inner input element
        var scrollView = this._scrollView;
        if (scrollView) {
            // this input is inside of a scroll view
            // find out if text input should be manually scrolled into view
            // get container of this input, probably an ion-item a few nodes up
            var ele = this._elementRef.nativeElement;
            ele = dom_1.closest(ele, 'ion-item,[ion-item]') || ele;
            var scrollData = InputBase.getScrollData(ele.offsetTop, ele.offsetHeight, scrollView.getContentDimensions(), this._keyboardHeight, this._platform.height());
            if (scrollData.scrollAmount > -3 && scrollData.scrollAmount < 3) {
                // the text input is in a safe position that doesn't
                // require it to be scrolled into view, just set focus now
                this.setFocus();
                this.regScrollMove();
                return;
            }
            if (this._usePadding) {
                // add padding to the bottom of the scroll view (if needed)
                scrollView.addScrollPadding(scrollData.scrollPadding);
            }
            // manually scroll the text input to the top
            // do not allow any clicks while it's scrolling
            var scrollDuration = getScrollAssistDuration(scrollData.scrollAmount);
            this._app.setEnabled(false, scrollDuration);
            this._nav && this._nav.setTransitioning(true, scrollDuration);
            // temporarily move the focus to the focus holder so the browser
            // doesn't freak out while it's trying to get the input in place
            // at this point the native text input still does not have focus
            this._native.beginFocus(true, scrollData.inputSafeY);
            // scroll the input into place
            scrollView.scrollTo(0, scrollData.scrollTo, scrollDuration).then(function () {
                // the scroll view is in the correct position now
                // give the native text input focus
                _this._native.beginFocus(false, 0);
                // ensure this is the focused input
                _this.setFocus();
                // all good, allow clicks again
                _this._app.setEnabled(true);
                _this._nav && _this._nav.setTransitioning(false);
                _this.regScrollMove();
                if (_this._usePadding) {
                    _this._scrollView.clearScrollPaddingFocusOut();
                }
            });
        } else {
            // not inside of a scroll view, just focus it
            this.setFocus();
            this.regScrollMove();
        }
    };
    /**
     * @private
     */
    InputBase.prototype.setFocus = function () {
        // immediately set focus
        this._form.setAsFocused(this);
        // set focus on the actual input element
        console.debug("input-base, setFocus " + this._native.element().value);
        this._native.setFocus();
        // ensure the body hasn't scrolled down
        document.body.scrollTop = 0;
    };
    /**
     * @private
     * Angular2 Forms API method called by the view (NgControl) to register the
     * onChange event handler that updates the model (Control).
     * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
     * @param {Function} fn  the onChange event handler.
     */
    InputBase.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @private
     * Angular2 Forms API method called by the view (NgControl) to register
     * the onTouched event handler that marks model (Control) as touched.
     * @param {Function} fn  onTouched event handler.
     */
    InputBase.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @private
     */
    InputBase.prototype.regScrollMove = function () {
        var _this = this;
        // register scroll move listener
        if (this._useAssist && this._scrollView) {
            setTimeout(function () {
                _this.deregScrollMove();
                _this._deregScroll = _this._scrollView.addScrollListener(_this._scrollMove);
            }, 80);
        }
    };
    /**
     * @private
     */
    InputBase.prototype.deregScrollMove = function () {
        // deregister the scroll move listener
        this._deregScroll && this._deregScroll();
    };
    InputBase.prototype.focusNext = function () {
        this._form.tabFocus(this);
    };
    /**
     * @private
     */
    InputBase.getScrollData = function (inputOffsetTop, inputOffsetHeight, scrollViewDimensions, keyboardHeight, plaformHeight) {
        // compute input's Y values relative to the body
        var inputTop = inputOffsetTop + scrollViewDimensions.contentTop - scrollViewDimensions.scrollTop;
        var inputBottom = inputTop + inputOffsetHeight;
        // compute the safe area which is the viewable content area when the soft keyboard is up
        var safeAreaTop = scrollViewDimensions.contentTop;
        var safeAreaHeight = plaformHeight - keyboardHeight - safeAreaTop;
        safeAreaHeight /= 2;
        var safeAreaBottom = safeAreaTop + safeAreaHeight;
        var inputTopWithinSafeArea = inputTop >= safeAreaTop && inputTop <= safeAreaBottom;
        var inputTopAboveSafeArea = inputTop < safeAreaTop;
        var inputTopBelowSafeArea = inputTop > safeAreaBottom;
        var inputBottomWithinSafeArea = inputBottom >= safeAreaTop && inputBottom <= safeAreaBottom;
        var inputBottomBelowSafeArea = inputBottom > safeAreaBottom;
        /*
        Text Input Scroll To Scenarios
        ---------------------------------------
        1) Input top within safe area, bottom within safe area
        2) Input top within safe area, bottom below safe area, room to scroll
        3) Input top above safe area, bottom within safe area, room to scroll
        4) Input top below safe area, no room to scroll, input smaller than safe area
        5) Input top within safe area, bottom below safe area, no room to scroll, input smaller than safe area
        6) Input top within safe area, bottom below safe area, no room to scroll, input larger than safe area
        7) Input top below safe area, no room to scroll, input larger than safe area
        */
        var scrollData = {
            scrollAmount: 0,
            scrollTo: 0,
            scrollPadding: 0,
            inputSafeY: 0
        };
        if (inputTopWithinSafeArea && inputBottomWithinSafeArea) {
            // Input top within safe area, bottom within safe area
            // no need to scroll to a position, it's good as-is
            return scrollData;
        }
        // looks like we'll have to do some auto-scrolling
        if (inputTopBelowSafeArea || inputBottomBelowSafeArea) {
            // Input top and bottom below safe area
            // auto scroll the input up so at least the top of it shows
            if (safeAreaHeight > inputOffsetHeight) {
                // safe area height is taller than the input height, so we
                // can bring it up the input just enough to show the input bottom
                scrollData.scrollAmount = Math.round(safeAreaBottom - inputBottom);
            } else {
                // safe area height is smaller than the input height, so we can
                // only scroll it up so the input top is at the top of the safe area
                // however the input bottom will be below the safe area
                scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
            }
            scrollData.inputSafeY = -(inputTop - safeAreaTop) + 4;
        } else if (inputTopAboveSafeArea) {
            // Input top above safe area
            // auto scroll the input down so at least the top of it shows
            scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
            scrollData.inputSafeY = safeAreaTop - inputTop + 4;
        }
        // figure out where it should scroll to for the best position to the input
        scrollData.scrollTo = scrollViewDimensions.scrollTop - scrollData.scrollAmount;
        if (scrollData.scrollAmount < 0) {
            // when auto-scrolling up, there also needs to be enough
            // content padding at the bottom of the scroll view
            // manually add it if there isn't enough scrollable area
            // figure out how many scrollable area is left to scroll up
            var availablePadding = scrollViewDimensions.scrollHeight - scrollViewDimensions.scrollTop - scrollViewDimensions.contentHeight;
            var paddingSpace = availablePadding + scrollData.scrollAmount;
            if (paddingSpace < 0) {
                // there's not enough scrollable area at the bottom, so manually add more
                scrollData.scrollPadding = scrollViewDimensions.contentHeight - safeAreaHeight;
            }
        }
        // if (!window.safeAreaEle) {
        //   window.safeAreaEle = document.createElement('div');
        //   window.safeAreaEle.style.position = 'absolute';
        //   window.safeAreaEle.style.background = 'rgba(0, 128, 0, 0.7)';
        //   window.safeAreaEle.style.padding = '2px 5px';
        //   window.safeAreaEle.style.textShadow = '1px 1px white';
        //   window.safeAreaEle.style.left = '0px';
        //   window.safeAreaEle.style.right = '0px';
        //   window.safeAreaEle.style.fontWeight = 'bold';
        //   window.safeAreaEle.style.pointerEvents = 'none';
        //   document.body.appendChild(window.safeAreaEle);
        // }
        // window.safeAreaEle.style.top = safeAreaTop + 'px';
        // window.safeAreaEle.style.height = safeAreaHeight + 'px';
        // window.safeAreaEle.innerHTML = `
        //   <div>scrollTo: ${scrollData.scrollTo}</div>
        //   <div>scrollAmount: ${scrollData.scrollAmount}</div>
        //   <div>scrollPadding: ${scrollData.scrollPadding}</div>
        //   <div>inputSafeY: ${scrollData.inputSafeY}</div>
        //   <div>scrollHeight: ${scrollViewDimensions.scrollHeight}</div>
        //   <div>scrollTop: ${scrollViewDimensions.scrollTop}</div>
        //   <div>contentHeight: ${scrollViewDimensions.contentHeight}</div>
        // `;
        return scrollData;
    };
    /** @nocollapse */
    InputBase.propDecorators = {
        'clearInput': [{ type: core_1.Input }],
        'placeholder': [{ type: core_1.Input }],
        '_native': [{ type: core_1.ViewChild, args: [native_input_1.NativeInput] }],
        'blur': [{ type: core_1.Output }],
        'focus': [{ type: core_1.Output }],
        'value': [{ type: core_1.Input }],
        'type': [{ type: core_1.Input }],
        'disabled': [{ type: core_1.Input }],
        '_nativeInput': [{ type: core_1.ViewChild, args: [native_input_1.NativeInput] }],
        '_nextInput': [{ type: core_1.ViewChild, args: [native_input_1.NextInput] }]
    };
    return InputBase;
}();
exports.InputBase = InputBase;
var SCROLL_ASSIST_SPEED = 0.3;
function getScrollAssistDuration(distanceToScroll) {
    distanceToScroll = Math.abs(distanceToScroll);
    var duration = distanceToScroll / SCROLL_ASSIST_SPEED;
    return Math.min(400, Math.max(150, duration));
}

/***/ },
/* 856 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var content_1 = __webpack_require__(111);
var form_1 = __webpack_require__(73);
var input_base_1 = __webpack_require__(855);
var item_1 = __webpack_require__(69);
var native_input_1 = __webpack_require__(461);
var nav_controller_1 = __webpack_require__(51);
var platform_1 = __webpack_require__(72);
var TextInput = function (_super) {
    __extends(TextInput, _super);
    function TextInput(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
        _super.call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl);
    }
    /**
     * @private
     */
    TextInput.prototype.inputBlurred = function (ev) {
        this.blur.emit(ev);
    };
    /**
     * @private
     */
    TextInput.prototype.inputFocused = function (ev) {
        this.focus.emit(ev);
    };
    /**
     * @private
     */
    TextInput.prototype.clearTextInput = function () {
        console.debug('Should clear input');
        this._value = '';
        this.onChange(this._value);
        this.writeValue(this._value);
    };
    /** @nocollapse */
    TextInput.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-input',
            template: '<input [type]="type" [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input">' + '<input [type]="type" aria-hidden="true" next-input *ngIf="_useAssist">' + '<button clear [hidden]="!clearInput" type="button" class="text-input-clear-icon" (click)="clearTextInput()" (mousedown)="clearTextInput()"></button>' + '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
            directives: [native_input_1.NextInput, native_input_1.NativeInput, common_1.NgModel, common_1.NgIf],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    TextInput.ctorParameters = [{ type: config_1.Config }, { type: form_1.Form }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }, { type: app_1.App }, { type: platform_1.Platform }, { type: core_1.ElementRef }, { type: content_1.Content, decorators: [{ type: core_1.Optional }] }, { type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }, { type: common_1.NgControl, decorators: [{ type: core_1.Optional }] }];
    return TextInput;
}(input_base_1.InputBase);
exports.TextInput = TextInput;
var TextArea = function (_super) {
    __extends(TextArea, _super);
    function TextArea(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
        _super.call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl);
    }
    /**
     * @private
     */
    TextArea.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this._item) {
            this._item.setCssClass('item-textarea', true);
        }
    };
    /**
     * @private
     */
    TextArea.prototype.inputBlurred = function (ev) {
        this.blur.emit(ev);
    };
    /**
     * @private
     */
    TextArea.prototype.inputFocused = function (ev) {
        this.focus.emit(ev);
    };
    /** @nocollapse */
    TextArea.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-textarea',
            template: '<textarea [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input"></textarea>' + '<input type="text" aria-hidden="true" next-input *ngIf="_useAssist">' + '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
            directives: [native_input_1.NextInput, native_input_1.NativeInput, common_1.NgModel, common_1.NgIf],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    TextArea.ctorParameters = [{ type: config_1.Config }, { type: form_1.Form }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }, { type: app_1.App }, { type: platform_1.Platform }, { type: core_1.ElementRef }, { type: content_1.Content, decorators: [{ type: core_1.Optional }] }, { type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }, { type: common_1.NgControl, decorators: [{ type: core_1.Optional }] }];
    return TextArea;
}(input_base_1.InputBase);
exports.TextArea = TextArea;

/***/ },
/* 857 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var ui_event_manager_1 = __webpack_require__(153);
var dom_1 = __webpack_require__(17);
var AUTO_SCROLL_MARGIN = 60;
var SCROLL_JUMP = 10;
var ITEM_REORDER_ACTIVE = 'reorder-active';
/**
 * @private
 */
var ItemReorderGesture = function () {
    function ItemReorderGesture(list) {
        this.list = list;
        this.selectedItem = null;
        this.selectedItemEle = null;
        this.events = new ui_event_manager_1.UIEventManager(false);
        var element = this.list.getNativeElement();
        this.events.pointerEvents(element, this.onDragStart.bind(this), this.onDragMove.bind(this), this.onDragEnd.bind(this));
    }
    ItemReorderGesture.prototype.onDragStart = function (ev) {
        var itemEle = ev.target;
        if (itemEle.nodeName !== 'ION-REORDER') {
            return false;
        }
        var item = itemEle['$ionComponent'];
        if (!item) {
            console.error('item does not contain ion component');
            return false;
        }
        ev.preventDefault();
        // Preparing state
        this.selectedItem = item;
        this.selectedItemEle = item.getNativeElement();
        this.selectedItemHeight = item.height();
        this.lastToIndex = item.index;
        this.lastYcoord = -100;
        this.windowHeight = window.innerHeight - AUTO_SCROLL_MARGIN;
        this.lastScrollPosition = this.list.scrollContent(0);
        this.offset = dom_1.pointerCoord(ev);
        this.offset.y += this.lastScrollPosition;
        item.setCssClass(ITEM_REORDER_ACTIVE, true);
        this.list.reorderStart();
        return true;
    };
    ItemReorderGesture.prototype.onDragMove = function (ev) {
        var selectedItem = this.selectedItemEle;
        if (!selectedItem) {
            return;
        }
        ev.preventDefault();
        // Get coordinate
        var coord = dom_1.pointerCoord(ev);
        var posY = coord.y;
        // Scroll if we reach the scroll margins
        var scrollPosition = this.scroll(posY);
        // Only perform hit test if we moved at least 30px from previous position
        if (Math.abs(posY - this.lastYcoord) > 30) {
            var overItem = this.itemForCoord(coord);
            if (overItem) {
                var toIndex = overItem.index;
                if (toIndex !== this.lastToIndex || this.emptyZone) {
                    var fromIndex = this.selectedItem.index;
                    this.lastToIndex = toIndex;
                    this.lastYcoord = posY;
                    this.emptyZone = false;
                    this.list.reorderMove(fromIndex, toIndex, this.selectedItemHeight);
                }
            } else {
                this.emptyZone = true;
            }
        }
        // Update selected item position   
        var ydiff = Math.round(posY - this.offset.y + scrollPosition);
        selectedItem.style[dom_1.CSS.transform] = "translateY(" + ydiff + "px)";
    };
    ItemReorderGesture.prototype.onDragEnd = function () {
        var _this = this;
        if (!this.selectedItemEle) {
            return;
        }
        dom_1.nativeRaf(function () {
            var toIndex = _this.lastToIndex;
            var fromIndex = _this.selectedItem.index;
            _this.selectedItem.setCssClass(ITEM_REORDER_ACTIVE, false);
            _this.selectedItem = null;
            _this.selectedItemEle = null;
            _this.list.reorderEmit(fromIndex, toIndex);
        });
    };
    ItemReorderGesture.prototype.itemForCoord = function (coord) {
        var element = document.elementFromPoint(this.offset.x - 100, coord.y);
        if (!element) {
            return null;
        }
        if (element.nodeName !== 'ION-ITEM') {
            return null;
        }
        var item = element['$ionComponent'];
        if (!item) {
            console.error('item does not have $ionComponent');
            return null;
        }
        return item;
    };
    ItemReorderGesture.prototype.scroll = function (posY) {
        if (posY < AUTO_SCROLL_MARGIN) {
            this.lastScrollPosition = this.list.scrollContent(-SCROLL_JUMP);
        } else if (posY > this.windowHeight) {
            this.lastScrollPosition = this.list.scrollContent(SCROLL_JUMP);
        }
        return this.lastScrollPosition;
    };
    /**
     * @private
     */
    ItemReorderGesture.prototype.destroy = function () {
        this.onDragEnd();
        this.events.unlistenAll();
        this.events = null;
        this.list = null;
    };
    return ItemReorderGesture;
}();
exports.ItemReorderGesture = ItemReorderGesture;

/***/ },
/* 858 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var item_1 = __webpack_require__(69);
var ItemReorder = function () {
    function ItemReorder(item, elementRef) {
        elementRef.nativeElement['$ionComponent'] = item;
    }
    /** @nocollapse */
    ItemReorder.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-reorder',
            template: "<ion-icon name=\"menu\"></ion-icon>"
        }] }];
    /** @nocollapse */
    ItemReorder.ctorParameters = [{ type: item_1.Item, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () {
                return item_1.Item;
            })] }] }, { type: core_1.ElementRef }];
    return ItemReorder;
}();
exports.ItemReorder = ItemReorder;

/***/ },
/* 859 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var drag_gesture_1 = __webpack_require__(507);
var dom_1 = __webpack_require__(17);
var DRAG_THRESHOLD = 20;
var MAX_ATTACK_ANGLE = 20;
var ItemSlidingGesture = function (_super) {
    __extends(ItemSlidingGesture, _super);
    function ItemSlidingGesture(list) {
        _super.call(this, list.getNativeElement(), {
            direction: 'x',
            threshold: DRAG_THRESHOLD
        });
        this.list = list;
        this.selectedContainer = null;
        this.openContainer = null;
        this.listen();
    }
    ItemSlidingGesture.prototype.onTapCallback = function (ev) {
        if (isFromOptionButtons(ev.target)) {
            return;
        }
        var didClose = this.closeOpened();
        if (didClose) {
            console.debug('tap close sliding item, preventDefault');
            ev.preventDefault();
        }
    };
    ItemSlidingGesture.prototype.onDragStart = function (ev) {
        var angle = Math.abs(ev.angle);
        if (angle > MAX_ATTACK_ANGLE && Math.abs(angle - 180) > MAX_ATTACK_ANGLE) {
            this.closeOpened();
            return false;
        }
        if (this.selectedContainer) {
            console.debug('onDragStart, another container is already selected');
            return false;
        }
        var container = getContainer(ev);
        if (!container) {
            console.debug('onDragStart, no itemContainerEle');
            return false;
        }
        // Close open container if it is not the selected one.
        if (container !== this.openContainer) {
            this.closeOpened();
        }
        this.selectedContainer = container;
        this.openContainer = container;
        container.startSliding(ev.center.x);
        return true;
    };
    ItemSlidingGesture.prototype.onDrag = function (ev) {
        if (this.selectedContainer) {
            this.selectedContainer.moveSliding(ev.center.x);
            ev.preventDefault();
        }
        return;
    };
    ItemSlidingGesture.prototype.onDragEnd = function (ev) {
        var _this = this;
        if (this.selectedContainer) {
            ev.preventDefault();
            var openAmount = this.selectedContainer.endSliding(ev.velocityX);
            this.selectedContainer = null;
            // TODO: I am not sure listening for a tap event is the best idea
            // we should try mousedown/touchstart
            if (openAmount === 0) {
                this.openContainer = null;
                this.off('tap', this.onTap);
                this.onTap = null;
            } else if (!this.onTap) {
                this.onTap = function (event) {
                    return _this.onTapCallback(event);
                };
                this.on('tap', this.onTap);
            }
        }
    };
    ItemSlidingGesture.prototype.closeOpened = function () {
        if (this.openContainer) {
            this.openContainer.close();
            this.openContainer = null;
            this.selectedContainer = null;
            this.off('tap', this.onTap);
            this.onTap = null;
            return true;
        }
        return false;
    };
    ItemSlidingGesture.prototype.unlisten = function () {
        _super.prototype.unlisten.call(this);
    };
    return ItemSlidingGesture;
}(drag_gesture_1.DragGesture);
exports.ItemSlidingGesture = ItemSlidingGesture;
function getContainer(ev) {
    var ele = dom_1.closest(ev.target, 'ion-item-sliding', true);
    if (ele) {
        return ele['$ionComponent'];
    }
    return null;
}
function isFromOptionButtons(ele) {
    return !!dom_1.closest(ele, 'ion-item-options', true);
}

/***/ },
/* 860 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(17);
var item_1 = __webpack_require__(69);
var util_1 = __webpack_require__(7);
var list_1 = __webpack_require__(309);
var SWIPE_FACTOR = 1.1;
var ELASTIC_FACTOR = 0.55;
var ItemOptions = function () {
    function ItemOptions(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.ionSwipe = new core_1.EventEmitter();
    }
    /**
     * @private
     */
    ItemOptions.prototype.setCssStyle = function (property, value) {
        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
    };
    /**
     * @private
     */
    ItemOptions.prototype.getSides = function () {
        if (util_1.isPresent(this.side) && this.side === 'left') {
            return 1 /* Left */;
        } else {
                return 2 /* Right */;
            }
    };
    /**
     * @private
     */
    ItemOptions.prototype.width = function () {
        return this._elementRef.nativeElement.offsetWidth;
    };
    /** @nocollapse */
    ItemOptions.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-item-options'
        }] }];
    /** @nocollapse */
    ItemOptions.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }];
    /** @nocollapse */
    ItemOptions.propDecorators = {
        'side': [{ type: core_1.Input }],
        'ionSwipe': [{ type: core_1.Output }]
    };
    return ItemOptions;
}();
exports.ItemOptions = ItemOptions;
var ItemSliding = function () {
    function ItemSliding(_list, _renderer, _elementRef) {
        this._list = _list;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._openAmount = 0;
        this._startX = 0;
        this._optsWidthRightSide = 0;
        this._optsWidthLeftSide = 0;
        this._timer = null;
        this._optsDirty = true;
        this._state = 0 /* Disabled */;
        /**
        * @private
        * */
        this.slidingPercent = 0;
        this.ionDrag = new core_1.EventEmitter();
        _list.enableSlidingItems(true);
        _elementRef.nativeElement.$ionComponent = this;
        _renderer.setElementClass(_elementRef.nativeElement, 'item-wrapper', true);
    }
    Object.defineProperty(ItemSliding.prototype, "_itemOptions", {
        set: function set(itemOptions) {
            var sides = 0;
            for (var _i = 0, _a = itemOptions.toArray(); _i < _a.length; _i++) {
                var item = _a[_i];
                var side = item.getSides();
                if (side === 1 /* Left */) {
                        this._leftOptions = item;
                    } else {
                    this._rightOptions = item;
                }
                sides |= item.getSides();
            }
            this._optsDirty = true;
            this._sides = sides;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    ItemSliding.prototype.startSliding = function (startX) {
        if (this._timer) {
            clearTimeout(this._timer);
            this._timer = null;
        }
        if (this._openAmount === 0) {
            this._optsDirty = true;
            this._setState(1 /* Enabled */);
        }
        this._startX = startX + this._openAmount;
        this.item.setCssStyle(dom_1.CSS.transition, 'none');
    };
    /**
     * @private
     */
    ItemSliding.prototype.moveSliding = function (x) {
        if (this._optsDirty) {
            this.calculateOptsWidth();
            return;
        }
        var openAmount = this._startX - x;
        switch (this._sides) {
            case 2 /* Right */:
                openAmount = Math.max(0, openAmount);
                break;
            case 1 /* Left */:
                openAmount = Math.min(0, openAmount);
                break;
            case 3 /* Both */:
                break;
            default:
                return;
        }
        if (openAmount > this._optsWidthRightSide) {
            var optsWidth = this._optsWidthRightSide;
            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
        } else if (openAmount < -this._optsWidthLeftSide) {
            var optsWidth = -this._optsWidthLeftSide;
            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
        }
        this._setOpenAmount(openAmount, false);
        return openAmount;
    };
    /**
     * @private
     */
    ItemSliding.prototype.endSliding = function (velocity) {
        var restingPoint = this._openAmount > 0 ? this._optsWidthRightSide : -this._optsWidthLeftSide;
        // Check if the drag didn't clear the buttons mid-point
        // and we aren't moving fast enough to swipe open
        var isCloseDirection = this._openAmount > 0 === !(velocity < 0);
        var isMovingFast = Math.abs(velocity) > 0.3;
        var isOnCloseZone = Math.abs(this._openAmount) < Math.abs(restingPoint / 2);
        if (shouldClose(isCloseDirection, isMovingFast, isOnCloseZone)) {
            restingPoint = 0;
        }
        this.fireSwipeEvent();
        this._setOpenAmount(restingPoint, true);
        return restingPoint;
    };
    /**
    * @private
    * */
    ItemSliding.prototype.fireSwipeEvent = function () {
        if (this.slidingPercent > SWIPE_FACTOR) {
            this._rightOptions.ionSwipe.emit(this);
        } else if (this.slidingPercent < -SWIPE_FACTOR) {
            this._leftOptions.ionSwipe.emit(this);
        }
    };
    /**
    * @private
    * */
    ItemSliding.prototype.calculateOptsWidth = function () {
        var _this = this;
        dom_1.nativeRaf(function () {
            if (_this._optsDirty) {
                _this._optsWidthRightSide = 0;
                if (_this._rightOptions) {
                    _this._optsWidthRightSide = _this._rightOptions.width();
                }
                _this._optsWidthLeftSide = 0;
                if (_this._leftOptions) {
                    _this._optsWidthLeftSide = _this._leftOptions.width();
                }
                _this._optsDirty = false;
            }
        });
    };
    /**
     * @private
     */
    ItemSliding.prototype._setOpenAmount = function (openAmount, isFinal) {
        var _this = this;
        if (this._timer) {
            clearTimeout(this._timer);
            this._timer = null;
        }
        this._openAmount = openAmount;
        var didEnd = openAmount === 0;
        if (didEnd) {
            // TODO: refactor. there must exist a better way
            // if sliding ended, we wait 400ms until animation finishes
            this._timer = dom_1.nativeTimeout(function () {
                _this._setState(0 /* Disabled */);
                _this._timer = null;
            }, 400);
            this.slidingPercent = 0;
        } else if (openAmount > 0) {
            this._setState(2 /* Right */);
            this.slidingPercent = openAmount / this._optsWidthRightSide;
        } else if (openAmount < 0) {
            this._setState(3 /* Left */);
            this.slidingPercent = openAmount / this._optsWidthLeftSide;
        }
        if (!isFinal) {
            this.setClass('active-swipe-right', this.slidingPercent > SWIPE_FACTOR);
            this.setClass('active-swipe-left', this.slidingPercent < -SWIPE_FACTOR);
        } else {
            this.item.setCssStyle(dom_1.CSS.transition, '');
        }
        this.ionDrag.emit(this.slidingPercent);
        this.item.setCssStyle(dom_1.CSS.transform, didEnd ? '' : 'translate3d(' + -openAmount + 'px,0,0)');
    };
    ItemSliding.prototype._setState = function (state) {
        if (state !== this._state) {
            this._state = state;
            this.setClass('active-slide', state !== 0 /* Disabled */);
            this.setClass('active-options-right', state === 2 /* Right */);
            this.setClass('active-options-left', state === 3 /* Left */);
            if (state === 0 /* Disabled */ || state === 1 /* Enabled */) {
                    this.setClass('active-swipe-right', false);
                    this.setClass('active-swipe-left', false);
                }
        }
    };
    /**
     * @private
     */
    ItemSliding.prototype.setClass = function (className, add) {
        this._renderer.setElementClass(this._elementRef.nativeElement, className, add);
    };
    /**
     * @private
     */
    ItemSliding.prototype.getOpenAmount = function () {
        return this._openAmount;
    };
    /**
     * Close the sliding item. Items can also be closed from the [List](../../list/List).
     *
     * The sliding item can be closed by grabbing a reference to `ItemSliding`. In the
     * below example, the template reference variable `slidingItem` is placed on the element
     * and passed to the `share` method.
     *
     * ```html
     * <ion-list>
     *   <ion-item-sliding #slidingItem>
     *     <ion-item>
     *       Item
     *     </ion-item>
     *     <ion-item-options>
     *       <button (click)="share(slidingItem)">Share</button>
     *     </ion-item-options>
     *   </ion-item-sliding>
     * </ion-list>
     * ```
     *
     * ```ts
     * import {Component} from '@angular/core';
     * import {ItemSliding} from 'ionic-angular';
     *
     * @Component({...})
     * export class MyClass {
     *   constructor() { }
     *
     *   share(slidingItem: ItemSliding) {
     *     slidingItem.close();
     *   }
     * }
     * ```
     */
    ItemSliding.prototype.close = function () {
        this._setOpenAmount(0, true);
    };
    /** @nocollapse */
    ItemSliding.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-item-sliding',
            template: '<ng-content select="ion-item,[ion-item]"></ng-content>' + '<ng-content select="ion-item-options"></ng-content>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    ItemSliding.ctorParameters = [{ type: list_1.List, decorators: [{ type: core_1.Optional }] }, { type: core_1.Renderer }, { type: core_1.ElementRef }];
    /** @nocollapse */
    ItemSliding.propDecorators = {
        'item': [{ type: core_1.ContentChild, args: [item_1.Item] }],
        'ionDrag': [{ type: core_1.Output }],
        '_itemOptions': [{ type: core_1.ContentChildren, args: [ItemOptions] }]
    };
    return ItemSliding;
}();
exports.ItemSliding = ItemSliding;
function shouldClose(isCloseDirection, isMovingFast, isOnCloseZone) {
    // The logic required to know when the sliding item should close (openAmount=0)
    // depends on three booleans (isCloseDirection, isMovingFast, isOnCloseZone)
    // and it ended up being too complicated to be written manually without errors
    // so the truth table is attached below: (0=false, 1=true)
    // isCloseDirection | isMovingFast | isOnCloseZone || shouldClose
    //         0        |       0      |       0       ||    0
    //         0        |       0      |       1       ||    1
    //         0        |       1      |       0       ||    0
    //         0        |       1      |       1       ||    0
    //         1        |       0      |       0       ||    0
    //         1        |       0      |       1       ||    1
    //         1        |       1      |       0       ||    1
    //         1        |       1      |       1       ||    1
    // The resulting expression was generated by resolving the K-map (Karnaugh map):
    var shouldClose = !isMovingFast && isOnCloseZone || isCloseDirection && isMovingFast;
    return shouldClose;
}

/***/ },
/* 861 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var menu_controller_1 = __webpack_require__(148);
var MenuClose = function () {
    function MenuClose(_menu) {
        this._menu = _menu;
    }
    MenuClose.prototype.close = function () {
        var menu = this._menu.get(this.menuClose);
        menu && menu.close();
    };
    /** @nocollapse */
    MenuClose.decorators = [{ type: core_1.Directive, args: [{
            selector: '[menuClose]'
        }] }];
    /** @nocollapse */
    MenuClose.ctorParameters = [{ type: menu_controller_1.MenuController }];
    /** @nocollapse */
    MenuClose.propDecorators = {
        'menuClose': [{ type: core_1.Input }],
        'close': [{ type: core_1.HostListener, args: ['click'] }]
    };
    return MenuClose;
}();
exports.MenuClose = MenuClose;

/***/ },
/* 862 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var slide_edge_gesture_1 = __webpack_require__(509);
var util_1 = __webpack_require__(7);
/**
 * Gesture attached to the content which the menu is assigned to
 */
var MenuContentGesture = function (_super) {
    __extends(MenuContentGesture, _super);
    function MenuContentGesture(menu, contentEle, options) {
        if (options === void 0) {
            options = {};
        }
        _super.call(this, contentEle, util_1.assign({
            direction: 'x',
            edge: menu.side,
            threshold: 0,
            maxEdgeStart: menu.maxEdgeStart || 75
        }, options));
        this.menu = menu;
    }
    MenuContentGesture.prototype.canStart = function (ev) {
        var menu = this.menu;
        if (!menu.enabled || !menu.swipeEnabled) {
            console.debug('menu can not start, isEnabled:', menu.enabled, 'isSwipeEnabled:', menu.swipeEnabled, 'side:', menu.side);
            return false;
        }
        if (ev.distance > 50) {
            // the distance is longer than you'd expect a side menu swipe to be
            console.debug('menu can not start, distance too far:', ev.distance, 'side:', menu.side);
            return false;
        }
        console.debug('menu canStart,', menu.side, 'isOpen', menu.isOpen, 'angle', ev.angle, 'distance', ev.distance);
        if (menu.side === 'right') {
            // right side
            if (menu.isOpen) {
                // right side, opened
                return true;
            } else {
                // right side, closed
                if (ev.angle > 140 && ev.angle <= 180 || ev.angle > -140 && ev.angle <= -180) {
                    return _super.prototype.canStart.call(this, ev);
                }
            }
        } else {
            // left side
            if (menu.isOpen) {
                // left side, opened
                return true;
            } else {
                // left side, closed
                if (ev.angle > -40 && ev.angle < 40) {
                    return _super.prototype.canStart.call(this, ev);
                }
            }
        }
        // didn't pass the test, don't open this menu
        return false;
    };
    // Set CSS, then wait one frame for it to apply before sliding starts
    MenuContentGesture.prototype.onSlideBeforeStart = function (slide, ev) {
        console.debug('menu gesture, onSlideBeforeStart', this.menu.side);
        this.menu.swipeStart();
    };
    MenuContentGesture.prototype.onSlide = function (slide, ev) {
        var z = this.menu.side === 'right' ? slide.min : slide.max;
        var stepValue = slide.distance / z;
        console.debug('menu gesture, onSlide', this.menu.side, 'distance', slide.distance, 'min', slide.min, 'max', slide.max, 'z', z, 'stepValue', stepValue);
        ev.srcEvent.preventDefault();
        ev.preventDefault();
        this.menu.swipeProgress(stepValue);
    };
    MenuContentGesture.prototype.onSlideEnd = function (slide, ev) {
        var z = this.menu.side === 'right' ? slide.min : slide.max;
        var currentStepValue = slide.distance / z;
        z = Math.abs(z * 0.5);
        var shouldCompleteRight = ev.velocityX >= 0 && (ev.velocityX > 0.2 || slide.delta > z);
        var shouldCompleteLeft = ev.velocityX <= 0 && (ev.velocityX < -0.2 || slide.delta < -z);
        console.debug('menu gesture, onSlide', this.menu.side, 'distance', slide.distance, 'delta', slide.delta, 'velocityX', ev.velocityX, 'min', slide.min, 'max', slide.max, 'shouldCompleteLeft', shouldCompleteLeft, 'shouldCompleteRight', shouldCompleteRight, 'currentStepValue', currentStepValue);
        this.menu.swipeEnd(shouldCompleteLeft, shouldCompleteRight, currentStepValue);
    };
    MenuContentGesture.prototype.getElementStartPos = function (slide, ev) {
        if (this.menu.side === 'right') {
            // right menu
            return this.menu.isOpen ? slide.min : slide.max;
        }
        // left menu
        return this.menu.isOpen ? slide.max : slide.min;
    };
    MenuContentGesture.prototype.getSlideBoundaries = function () {
        if (this.menu.side === 'right') {
            // right menu
            return {
                min: -this.menu.width(),
                max: 0
            };
        }
        // left menu
        return {
            min: 0,
            max: this.menu.width()
        };
    };
    return MenuContentGesture;
}(slide_edge_gesture_1.SlideEdgeGesture);
exports.MenuContentGesture = MenuContentGesture;
/**
 * Gesture attached to the actual menu itself
 */
var MenuTargetGesture = function (_super) {
    __extends(MenuTargetGesture, _super);
    function MenuTargetGesture(menu, menuEle) {
        _super.call(this, menu, menuEle, {
            maxEdgeStart: 0
        });
    }
    return MenuTargetGesture;
}(MenuContentGesture);
exports.MenuTargetGesture = MenuTargetGesture;

/***/ },
/* 863 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var menu_controller_1 = __webpack_require__(148);
var navbar_1 = __webpack_require__(201);
var view_controller_1 = __webpack_require__(43);
var MenuToggle = function () {
    function MenuToggle(_menu, elementRef, _viewCtrl, _navbar) {
        this._menu = _menu;
        this._viewCtrl = _viewCtrl;
        this._navbar = _navbar;
        this._inNavbar = !!_navbar;
    }
    MenuToggle.prototype.toggle = function () {
        var menu = this._menu.get(this.menuToggle);
        menu && menu.toggle();
    };
    Object.defineProperty(MenuToggle.prototype, "isHidden", {
        /**
        * @private
        */
        get: function get() {
            if (this._inNavbar && this._viewCtrl) {
                if (this._viewCtrl.isFirst()) {
                    // this is the first view, so it should always show
                    return false;
                }
                var menu = this._menu.get(this.menuToggle);
                if (menu) {
                    // this is not the root view, so see if this menu
                    // is configured to still be enabled if it's not the root view
                    return !menu.persistent;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    MenuToggle.decorators = [{ type: core_1.Directive, args: [{
            selector: '[menuToggle]',
            host: {
                '[hidden]': 'isHidden',
                'menuToggle': '' // ensures the attr is there for css when using [menuToggle]
            }
        }] }];
    /** @nocollapse */
    MenuToggle.ctorParameters = [{ type: menu_controller_1.MenuController }, { type: core_1.ElementRef }, { type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: navbar_1.Navbar, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    MenuToggle.propDecorators = {
        'menuToggle': [{ type: core_1.Input }],
        'toggle': [{ type: core_1.HostListener, args: ['click'] }]
    };
    return MenuToggle;
}();
exports.MenuToggle = MenuToggle;

/***/ },
/* 864 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var backdrop_1 = __webpack_require__(457);
var config_1 = __webpack_require__(16);
var ion_1 = __webpack_require__(58);
var util_1 = __webpack_require__(7);
var keyboard_1 = __webpack_require__(95);
var menu_gestures_1 = __webpack_require__(862);
var menu_controller_1 = __webpack_require__(148);
var platform_1 = __webpack_require__(72);
var Menu = function (_super) {
    __extends(Menu, _super);
    function Menu(_menuCtrl, _elementRef, _config, _platform, _renderer, _keyboard, _zone) {
        _super.call(this, _elementRef);
        this._menuCtrl = _menuCtrl;
        this._elementRef = _elementRef;
        this._config = _config;
        this._platform = _platform;
        this._renderer = _renderer;
        this._keyboard = _keyboard;
        this._zone = _zone;
        this._preventTime = 0;
        this._isEnabled = true;
        this._isSwipeEnabled = true;
        this._isPers = false;
        this._init = false;
        /**
         * @private
         */
        this.isOpen = false;
        this.ionDrag = new core_1.EventEmitter();
        this.ionOpen = new core_1.EventEmitter();
        this.ionClose = new core_1.EventEmitter();
    }
    Object.defineProperty(Menu.prototype, "enabled", {
        get: function get() {
            return this._isEnabled;
        },
        set: function set(val) {
            this._isEnabled = util_1.isTrueProperty(val);
            this._setListeners();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Menu.prototype, "swipeEnabled", {
        get: function get() {
            return this._isSwipeEnabled;
        },
        set: function set(val) {
            this._isSwipeEnabled = util_1.isTrueProperty(val);
            this._setListeners();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Menu.prototype, "persistent", {
        get: function get() {
            return this._isPers;
        },
        set: function set(val) {
            this._isPers = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Menu.prototype.ngOnInit = function () {
        var self = this;
        self._init = true;
        var content = self.content;
        self._cntEle = content instanceof Node ? content : content && content.getNativeElement && content.getNativeElement();
        // requires content element
        if (!self._cntEle) {
            return console.error('Menu: must have a [content] element to listen for drag events on. Example:\n\n<ion-menu [content]="content"></ion-menu>\n\n<ion-nav #content></ion-nav>');
        }
        // normalize the "side"
        if (self.side !== 'left' && self.side !== 'right') {
            self.side = 'left';
        }
        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'side', self.side);
        // normalize the "type"
        if (!self.type) {
            self.type = self._config.get('menuType');
        }
        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'type', self.type);
        // add the gestures
        self._cntGesture = new menu_gestures_1.MenuContentGesture(self, self.getContentElement());
        self._menuGesture = new menu_gestures_1.MenuTargetGesture(self, self.getNativeElement());
        // register listeners if this menu is enabled
        // check if more than one menu is on the same side
        var hasEnabledSameSideMenu = self._menuCtrl.getMenus().some(function (m) {
            return m.side === self.side && m.enabled;
        });
        if (hasEnabledSameSideMenu) {
            // auto-disable if another menu on the same side is already enabled
            self._isEnabled = false;
        }
        self._setListeners();
        // create a reusable click handler on this instance, but don't assign yet
        self.onContentClick = function (ev) {
            if (self._isEnabled) {
                ev.preventDefault();
                ev.stopPropagation();
                self.close();
            }
        };
        self._cntEle.classList.add('menu-content');
        self._cntEle.classList.add('menu-content-' + self.type);
        // register this menu with the app's menu controller
        self._menuCtrl.register(self);
    };
    /**
     * @private
     */
    Menu.prototype.bdClick = function (ev) {
        console.debug('backdrop clicked');
        ev.preventDefault();
        ev.stopPropagation();
        this._menuCtrl.close();
    };
    /**
     * @private
     */
    Menu.prototype._setListeners = function () {
        var self = this;
        if (self._init) {
            // only listen/unlisten if the menu has initialized
            if (self._isEnabled && self._isSwipeEnabled && !self._cntGesture.isListening) {
                // should listen, but is not currently listening
                console.debug('menu, gesture listen', self.side);
                self._zone.runOutsideAngular(function () {
                    self._cntGesture.listen();
                    self._menuGesture.listen();
                });
            } else if (self._cntGesture.isListening && (!self._isEnabled || !self._isSwipeEnabled)) {
                // should not listen, but is currently listening
                console.debug('menu, gesture unlisten', self.side);
                self._cntGesture.unlisten();
                self._menuGesture.unlisten();
            }
        }
    };
    /**
     * @private
     */
    Menu.prototype._getType = function () {
        if (!this._type) {
            this._type = menu_controller_1.MenuController.create(this.type, this, this._platform);
            if (this._config.get('animate') === false) {
                this._type.ani.duration(0);
            }
        }
        return this._type;
    };
    /**
     * @private
     */
    Menu.prototype.setOpen = function (shouldOpen) {
        var _this = this;
        // _isPrevented is used to prevent unwanted opening/closing after swiping open/close
        // or swiping open the menu while pressing down on the MenuToggle button
        if (shouldOpen && this.isOpen || this._isPrevented()) {
            return Promise.resolve(this.isOpen);
        }
        this._before();
        return new Promise(function (resolve) {
            _this._getType().setOpen(shouldOpen, function () {
                _this._after(shouldOpen);
                resolve(_this.isOpen);
            });
        });
    };
    /**
     * @private
     */
    Menu.prototype.swipeStart = function () {
        // user started swiping the menu open/close
        if (this._isEnabled && this._isSwipeEnabled && !this._isPrevented()) {
            this._before();
            this._getType().setProgressStart(this.isOpen);
        }
    };
    /**
     * @private
     */
    Menu.prototype.swipeProgress = function (stepValue) {
        // user actively dragging the menu
        if (this._isEnabled && this._isSwipeEnabled) {
            this._prevent();
            this._getType().setProgessStep(stepValue);
            this.ionDrag.emit(stepValue);
        }
    };
    /**
     * @private
     */
    Menu.prototype.swipeEnd = function (shouldCompleteLeft, shouldCompleteRight, stepValue) {
        var _this = this;
        // user has finished dragging the menu
        if (this._isEnabled && this._isSwipeEnabled) {
            this._prevent();
            var opening = !this.isOpen;
            var shouldComplete = false;
            if (opening) {
                shouldComplete = this.side === 'right' ? shouldCompleteLeft : shouldCompleteRight;
            } else {
                shouldComplete = this.side === 'right' ? shouldCompleteRight : shouldCompleteLeft;
            }
            this._getType().setProgressEnd(shouldComplete, stepValue, function (isOpen) {
                console.debug('menu, swipeEnd', _this.side);
                _this._after(isOpen);
            });
        }
    };
    Menu.prototype._before = function () {
        // this places the menu into the correct location before it animates in
        // this css class doesn't actually kick off any animations
        if (this._isEnabled) {
            this.getNativeElement().classList.add('show-menu');
            this.getBackdropElement().classList.add('show-backdrop');
            this._prevent();
            this._keyboard.close();
        }
    };
    Menu.prototype._after = function (isOpen) {
        // keep opening/closing the menu disabled for a touch more yet
        // only add listeners/css if it's enabled and isOpen
        // and only remove listeners/css if it's not open
        // emit opened/closed events
        if (this._isEnabled && isOpen || !isOpen) {
            this._prevent();
            this.isOpen = isOpen;
            this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
            this._cntEle.removeEventListener('click', this.onContentClick);
            if (isOpen) {
                this._cntEle.addEventListener('click', this.onContentClick);
                this.ionOpen.emit(true);
            } else {
                this.getNativeElement().classList.remove('show-menu');
                this.getBackdropElement().classList.remove('show-backdrop');
                this.ionClose.emit(true);
            }
        }
    };
    /**
     * @private
     */
    Menu.prototype.tempDisable = function (temporarilyDisable) {
        if (temporarilyDisable) {
            this._prevEnabled = this._isEnabled;
            this._getType().setProgessStep(0);
            this.enable(false);
        } else {
            this.enable(this._prevEnabled);
            this._after(false);
        }
    };
    Menu.prototype._prevent = function () {
        // used to prevent unwanted opening/closing after swiping open/close
        // or swiping open the menu while pressing down on the MenuToggle
        this._preventTime = Date.now() + 20;
    };
    Menu.prototype._isPrevented = function () {
        return this._preventTime > Date.now();
    };
    /**
     * @private
     */
    Menu.prototype.open = function () {
        return this.setOpen(true);
    };
    /**
     * @private
     */
    Menu.prototype.close = function () {
        return this.setOpen(false);
    };
    /**
     * @private
     */
    Menu.prototype.toggle = function () {
        return this.setOpen(!this.isOpen);
    };
    /**
     * @private
     */
    Menu.prototype.enable = function (shouldEnable) {
        var _this = this;
        this.enabled = shouldEnable;
        if (!shouldEnable && this.isOpen) {
            // close if this menu is open, and should not be enabled
            this.close();
        }
        if (shouldEnable) {
            // if this menu should be enabled
            // then find all the other menus on this same side
            // and automatically disable other same side menus
            var sameSideMenus = this._menuCtrl.getMenus().filter(function (m) {
                return m.side === _this.side && m !== _this;
            }).map(function (m) {
                return m.enabled = false;
            });
        }
        return this;
    };
    /**
     * @private
     */
    Menu.prototype.swipeEnable = function (shouldEnable) {
        this.swipeEnabled = shouldEnable;
        return this;
    };
    /**
     * @private
     */
    Menu.prototype.getMenuElement = function () {
        return this.getNativeElement();
    };
    /**
     * @private
     */
    Menu.prototype.getContentElement = function () {
        return this._cntEle;
    };
    /**
     * @private
     */
    Menu.prototype.getBackdropElement = function () {
        return this.backdrop.elementRef.nativeElement;
    };
    /**
     * @private
     */
    Menu.prototype.ngOnDestroy = function () {
        this._menuCtrl.unregister(this);
        this._cntGesture && this._cntGesture.destroy();
        this._menuGesture && this._menuGesture.destroy();
        this._type && this._type.destroy();
        this._resizeUnreg && this._resizeUnreg();
        this._cntEle = null;
    };
    /** @nocollapse */
    Menu.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-menu',
            host: {
                'role': 'navigation'
            },
            template: '<ng-content></ng-content>' + '<ion-backdrop (click)="bdClick($event)" disableScroll="false"></ion-backdrop>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Menu.ctorParameters = [{ type: menu_controller_1.MenuController }, { type: core_1.ElementRef }, { type: config_1.Config }, { type: platform_1.Platform }, { type: core_1.Renderer }, { type: keyboard_1.Keyboard }, { type: core_1.NgZone }];
    /** @nocollapse */
    Menu.propDecorators = {
        'backdrop': [{ type: core_1.ViewChild, args: [backdrop_1.Backdrop] }],
        'content': [{ type: core_1.Input }],
        'id': [{ type: core_1.Input }],
        'side': [{ type: core_1.Input }],
        'type': [{ type: core_1.Input }],
        'enabled': [{ type: core_1.Input }],
        'swipeEnabled': [{ type: core_1.Input }],
        'persistent': [{ type: core_1.Input }],
        'maxEdgeStart': [{ type: core_1.Input }],
        'ionDrag': [{ type: core_1.Output }],
        'ionOpen': [{ type: core_1.Output }],
        'ionClose': [{ type: core_1.Output }]
    };
    return Menu;
}(ion_1.Ion);
exports.Menu = Menu;

/***/ },
/* 865 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var nav_controller_1 = __webpack_require__(51);
var NavPop = function () {
    function NavPop(_nav) {
        this._nav = _nav;
        if (!_nav) {
            console.error('nav-pop must be within a NavController');
        }
    }
    /**
     * @private
     */
    NavPop.prototype.onClick = function () {
        this._nav && this._nav.pop();
    };
    /** @nocollapse */
    NavPop.decorators = [{ type: core_1.Directive, args: [{
            selector: '[nav-pop]',
            host: {
                '(click)': 'onClick()',
                'role': 'link'
            }
        }] }];
    /** @nocollapse */
    NavPop.ctorParameters = [{ type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }];
    return NavPop;
}();
exports.NavPop = NavPop;

/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var nav_controller_1 = __webpack_require__(51);
var NavPush = function () {
    function NavPush(_nav) {
        this._nav = _nav;
        if (!_nav) {
            console.error('nav-push must be within a NavController');
        }
    }
    /**
     * @private
     */
    NavPush.prototype.onClick = function () {
        var destination, params;
        if (this.navPush instanceof Array) {
            if (this.navPush.length > 2) {
                throw 'Too many [navPush] arguments, expects [View, { params }]';
            }
            destination = this.navPush[0];
            params = this.navPush[1] || this.navParams;
        } else {
            destination = this.navPush;
            params = this.navParams;
        }
        this._nav && this._nav.push(destination, params);
    };
    /** @nocollapse */
    NavPush.decorators = [{ type: core_1.Directive, args: [{
            selector: '[navPush]',
            host: {
                '(click)': 'onClick()',
                'role': 'link'
            }
        }] }];
    /** @nocollapse */
    NavPush.ctorParameters = [{ type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    NavPush.propDecorators = {
        'navPush': [{ type: core_1.Input }],
        'navParams': [{ type: core_1.Input }]
    };
    return NavPush;
}();
exports.NavPush = NavPush;

/***/ },
/* 867 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var NavRouter = function () {
    function NavRouter() {}
    /** @nocollapse */
    NavRouter.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-nav'
        }] }];
    return NavRouter;
}();
exports.NavRouter = NavRouter;

/***/ },
/* 868 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var util_1 = __webpack_require__(7);
var slide_edge_gesture_1 = __webpack_require__(509);
var SwipeBackGesture = function (_super) {
    __extends(SwipeBackGesture, _super);
    function SwipeBackGesture(element, options, _nav, _menuCtrl) {
        _super.call(this, element, util_1.assign({
            direction: 'x',
            maxEdgeStart: 75
        }, options));
        this._nav = _nav;
        this._menuCtrl = _menuCtrl;
    }
    SwipeBackGesture.prototype.canStart = function (ev) {
        // the gesture swipe angle must be mainly horizontal and the
        // gesture distance would be relatively short for a swipe back
        // and swipe back must be possible on this nav controller
        if (ev.angle > -40 && ev.angle < 40 && ev.distance < 50 && this._nav.canSwipeBack()) {
            // passed the tests, now see if the super says it's cool or not
            return _super.prototype.canStart.call(this, ev);
        }
        // nerp, not today
        return false;
    };
    SwipeBackGesture.prototype.onSlideBeforeStart = function (slideData, ev) {
        console.debug('swipeBack, onSlideBeforeStart', ev.srcEvent.type);
        this._nav.swipeBackStart();
        this._menuCtrl.tempDisable(true);
    };
    SwipeBackGesture.prototype.onSlide = function (slide) {
        var stepValue = slide.distance / slide.max;
        console.debug('swipeBack, onSlide, distance', slide.distance, 'max', slide.max, 'stepValue', stepValue);
        this._nav.swipeBackProgress(stepValue);
    };
    SwipeBackGesture.prototype.onSlideEnd = function (slide, ev) {
        var shouldComplete = Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5;
        var currentStepValue = slide.distance / slide.max;
        console.debug('swipeBack, onSlideEnd, shouldComplete', shouldComplete, 'currentStepValue', currentStepValue);
        this._nav.swipeBackEnd(shouldComplete, currentStepValue);
        this._menuCtrl.tempDisable(false);
    };
    return SwipeBackGesture;
}(slide_edge_gesture_1.SlideEdgeGesture);
exports.SwipeBackGesture = SwipeBackGesture;

/***/ },
/* 869 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var platform_browser_1 = __webpack_require__(97);
var animation_1 = __webpack_require__(147);
var dom_1 = __webpack_require__(17);
var util_1 = __webpack_require__(7);
var config_1 = __webpack_require__(16);
var key_1 = __webpack_require__(210);
var nav_params_1 = __webpack_require__(149);
var transition_1 = __webpack_require__(208);
var ui_event_manager_1 = __webpack_require__(153);
var view_controller_1 = __webpack_require__(43);
/**
 * @name Picker
 * @description
 *
 */
var Picker = function (_super) {
    __extends(Picker, _super);
    function Picker(opts) {
        if (opts === void 0) {
            opts = {};
        }
        opts.columns = opts.columns || [];
        opts.buttons = opts.buttons || [];
        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
        _super.call(this, PickerDisplayCmp, opts);
        this.isOverlay = true;
        this.ionChange = new core_1.EventEmitter();
        // by default, pickers should not fire lifecycle events of other views
        // for example, when an picker enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        this.fireOtherLifecycles = false;
        this.usePortal = true;
    }
    /**
    * @private
    */
    Picker.prototype.getTransitionName = function (direction) {
        var key = direction === 'back' ? 'pickerLeave' : 'pickerEnter';
        return this._nav && this._nav.config.get(key);
    };
    /**
     * @param {any} button Picker toolbar button
     */
    Picker.prototype.addButton = function (button) {
        this.data.buttons.push(button);
    };
    /**
     * @param {any} button Picker toolbar button
     */
    Picker.prototype.addColumn = function (column) {
        this.data.columns.push(column);
    };
    Picker.prototype.getColumns = function () {
        return this.data.columns;
    };
    Picker.prototype.refresh = function () {
        this.instance.refresh && this.instance.refresh();
    };
    /**
     * @param {string} cssClass CSS class name to add to the picker's outer wrapper.
     */
    Picker.prototype.setCssClass = function (cssClass) {
        this.data.cssClass = cssClass;
    };
    Picker.create = function (opts) {
        if (opts === void 0) {
            opts = {};
        }
        return new Picker(opts);
    };
    /** @nocollapse */
    Picker.propDecorators = {
        'ionChange': [{ type: core_1.Output }]
    };
    return Picker;
}(view_controller_1.ViewController);
exports.Picker = Picker;
var PickerColumnCmp = function () {
    function PickerColumnCmp(config, elementRef, _sanitizer) {
        this.elementRef = elementRef;
        this._sanitizer = _sanitizer;
        this.y = 0;
        this.pos = [];
        this.startY = null;
        this.receivingEvents = false;
        this.events = new ui_event_manager_1.UIEventManager();
        this.ionChange = new core_1.EventEmitter();
        this.rotateFactor = config.getNumber('pickerRotateFactor', 0);
    }
    PickerColumnCmp.prototype.ngAfterViewInit = function () {
        var _this = this;
        // get the scrollable element within the column
        var colEle = this.colEle.nativeElement;
        this.colHeight = colEle.clientHeight;
        // get the height of one option
        this.optHeight = colEle.firstElementChild ? colEle.firstElementChild.clientHeight : 0;
        // set the scroll position for the selected option
        this.setSelected(this.col.selectedIndex, 0);
        // Listening for pointer events
        this.events.pointerEventsRef(this.elementRef, function (ev) {
            return _this.pointerStart(ev);
        }, function (ev) {
            return _this.pointerMove(ev);
        }, function (ev) {
            return _this.pointerEnd(ev);
        });
    };
    PickerColumnCmp.prototype.ngOnDestroy = function () {
        this.events.unlistenAll();
    };
    PickerColumnCmp.prototype.pointerStart = function (ev) {
        console.debug('picker, pointerStart', ev.type, this.startY);
        // cancel any previous raf's that haven't fired yet
        dom_1.cancelRaf(this.rafId);
        // remember where the pointer started from`
        this.startY = dom_1.pointerCoord(ev).y;
        // reset everything
        this.receivingEvents = true;
        this.velocity = 0;
        this.pos.length = 0;
        this.pos.push(this.startY, Date.now());
        var minY = this.col.options.length - 1;
        var maxY = 0;
        for (var i = 0; i < this.col.options.length; i++) {
            if (!this.col.options[i].disabled) {
                minY = Math.min(minY, i);
                maxY = Math.max(maxY, i);
            }
        }
        this.minY = minY * this.optHeight * -1;
        this.maxY = maxY * this.optHeight * -1;
        return true;
    };
    PickerColumnCmp.prototype.pointerMove = function (ev) {
        ev.preventDefault();
        ev.stopPropagation();
        if (this.startY === null) {
            return;
        }
        var currentY = dom_1.pointerCoord(ev).y;
        this.pos.push(currentY, Date.now());
        // update the scroll position relative to pointer start position
        var y = this.y + (currentY - this.startY);
        if (y > this.minY) {
            // scrolling up higher than scroll area
            y = Math.pow(y, 0.8);
            this.bounceFrom = y;
        } else if (y < this.maxY) {
            // scrolling down below scroll area
            y += Math.pow(this.maxY - y, 0.9);
            this.bounceFrom = y;
        } else {
            this.bounceFrom = 0;
        }
        this.update(y, 0, false, false);
    };
    PickerColumnCmp.prototype.pointerEnd = function (ev) {
        if (!this.receivingEvents) {
            return;
        }
        this.receivingEvents = false;
        this.velocity = 0;
        if (this.bounceFrom > 0) {
            // bounce back up
            this.update(this.minY, 100, true, true);
        } else if (this.bounceFrom < 0) {
            // bounce back down
            this.update(this.maxY, 100, true, true);
        } else if (this.startY !== null) {
            var endY = dom_1.pointerCoord(ev).y;
            console.debug('picker, pointerEnd', ev.type, endY);
            this.pos.push(endY, Date.now());
            var endPos = this.pos.length - 1;
            var startPos = endPos;
            var timeRange = Date.now() - 100;
            // move pointer to position measured 100ms ago
            for (var i = endPos; i > 0 && this.pos[i] > timeRange; i -= 2) {
                startPos = i;
            }
            if (startPos !== endPos) {
                // compute relative movement between these two points
                var timeOffset = this.pos[endPos] - this.pos[startPos];
                var movedTop = this.pos[startPos - 1] - this.pos[endPos - 1];
                // based on XXms compute the movement to apply for each render step
                this.velocity = movedTop / timeOffset * FRAME_MS;
            }
            if (Math.abs(endY - this.startY) > 3) {
                ev.preventDefault();
                ev.stopPropagation();
                var y = this.y + (endY - this.startY);
                this.update(y, 0, true, true);
            }
        }
        this.startY = null;
        this.decelerate();
    };
    PickerColumnCmp.prototype.decelerate = function () {
        var y = 0;
        dom_1.cancelRaf(this.rafId);
        if (isNaN(this.y) || !this.optHeight) {
            // fallback in case numbers get outta wack
            this.update(y, 0, true, true);
        } else if (Math.abs(this.velocity) > 0) {
            // still decelerating
            this.velocity *= DECELERATION_FRICTION;
            // do not let it go slower than a velocity of 1
            this.velocity = this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1);
            y = Math.round(this.y - this.velocity);
            if (y > this.minY) {
                // whoops, it's trying to scroll up farther than the options we have!
                y = this.minY;
                this.velocity = 0;
            } else if (y < this.maxY) {
                // gahh, it's trying to scroll down farther than we can!
                y = this.maxY;
                this.velocity = 0;
            }
            console.log("decelerate y: " + y + ", velocity: " + this.velocity + ", optHeight: " + this.optHeight);
            var notLockedIn = y % this.optHeight !== 0 || Math.abs(this.velocity) > 1;
            this.update(y, 0, true, !notLockedIn);
            if (notLockedIn) {
                // isn't locked in yet, keep decelerating until it is
                this.rafId = dom_1.raf(this.decelerate.bind(this));
            }
        } else if (this.y % this.optHeight !== 0) {
            // needs to still get locked into a position so options line up
            var currentPos = Math.abs(this.y % this.optHeight);
            // create a velocity in the direction it needs to scroll
            this.velocity = currentPos > this.optHeight / 2 ? 1 : -1;
            this.decelerate();
        }
    };
    PickerColumnCmp.prototype.optClick = function (ev, index) {
        if (!this.velocity) {
            ev.preventDefault();
            ev.stopPropagation();
            this.setSelected(index, 150);
        }
    };
    PickerColumnCmp.prototype.setSelected = function (selectedIndex, duration) {
        // if there is a selected index, then figure out it's y position
        // if there isn't a selected index, then just use the top y position
        var y = selectedIndex > -1 ? selectedIndex * this.optHeight * -1 : 0;
        dom_1.cancelRaf(this.rafId);
        this.velocity = 0;
        // so what y position we're at
        this.update(y, duration, true, true);
    };
    PickerColumnCmp.prototype.update = function (y, duration, saveY, emitChange) {
        // ensure we've got a good round number :)
        y = Math.round(y);
        this.col.selectedIndex = Math.max(Math.abs(Math.round(y / this.optHeight)), 0);
        for (var i = 0; i < this.col.options.length; i++) {
            var opt = this.col.options[i];
            var optTop = i * this.optHeight;
            var optOffset = optTop + y;
            var rotateX = optOffset * this.rotateFactor;
            var translateX = 0;
            var translateY = 0;
            var translateZ = 0;
            if (this.rotateFactor !== 0) {
                translateX = 0;
                translateZ = 90;
                if (rotateX > 90 || rotateX < -90) {
                    translateX = -9999;
                    rotateX = 0;
                }
            } else {
                translateY = optOffset;
            }
            opt._trans = this._sanitizer.bypassSecurityTrustStyle("rotateX(" + rotateX + "deg) translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)");
            opt._dur = duration > 0 ? duration + 'ms' : '';
        }
        if (saveY) {
            this.y = y;
        }
        if (emitChange) {
            if (this.lastIndex === undefined) {
                // have not set a last index yet
                this.lastIndex = this.col.selectedIndex;
            } else if (this.lastIndex !== this.col.selectedIndex) {
                // new selected index has changed from the last index
                // update the lastIndex and emit that it has changed
                this.lastIndex = this.col.selectedIndex;
                this.ionChange.emit(this.col.options[this.col.selectedIndex]);
            }
        }
    };
    PickerColumnCmp.prototype.refresh = function () {
        var min = this.col.options.length - 1;
        var max = 0;
        for (var i = 0; i < this.col.options.length; i++) {
            if (!this.col.options[i].disabled) {
                min = Math.min(min, i);
                max = Math.max(max, i);
            }
        }
        var selectedIndex = util_1.clamp(min, this.col.selectedIndex, max);
        if (selectedIndex !== this.col.selectedIndex) {
            var y = selectedIndex * this.optHeight * -1;
            this.update(y, 150, true, true);
        }
    };
    /** @nocollapse */
    PickerColumnCmp.decorators = [{ type: core_1.Component, args: [{
            selector: '.picker-col',
            template: '<div *ngIf="col.prefix" class="picker-prefix" [style.width]="col.prefixWidth">{{col.prefix}}</div>' + '<div class="picker-opts" #colEle [style.width]="col.optionsWidth">' + '<button *ngFor="let o of col.options; let i=index" [style.transform]="o._trans" [style.transitionDuration]="o._dur" [class.picker-opt-selected]="col.selectedIndex === i" [class.picker-opt-disabled]="o.disabled" (click)="optClick($event, i)" type="button" category="picker-opt">' + '{{o.text}}' + '</button>' + '</div>' + '<div *ngIf="col.suffix" class="picker-suffix" [style.width]="col.suffixWidth">{{col.suffix}}</div>',
            host: {
                '[style.min-width]': 'col.columnWidth',
                '[class.picker-opts-left]': 'col.align=="left"',
                '[class.picker-opts-right]': 'col.align=="right"'
            }
        }] }];
    /** @nocollapse */
    PickerColumnCmp.ctorParameters = [{ type: config_1.Config }, { type: core_1.ElementRef }, { type: platform_browser_1.DomSanitizationService }];
    /** @nocollapse */
    PickerColumnCmp.propDecorators = {
        'colEle': [{ type: core_1.ViewChild, args: ['colEle'] }],
        'col': [{ type: core_1.Input }],
        'ionChange': [{ type: core_1.Output }]
    };
    return PickerColumnCmp;
}();
var PickerDisplayCmp = function () {
    function PickerDisplayCmp(_viewCtrl, _elementRef, _config, params, renderer) {
        this._viewCtrl = _viewCtrl;
        this._elementRef = _elementRef;
        this._config = _config;
        this.d = params.data;
        if (this.d.cssClass) {
            this.d.cssClass.split(' ').forEach(function (cssClass) {
                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
            });
        }
        this.id = ++pickerIds;
        this.lastClick = 0;
    }
    PickerDisplayCmp.prototype.ionViewLoaded = function () {
        // normalize the data
        var data = this.d;
        data.buttons = data.buttons.map(function (button) {
            if (util_1.isString(button)) {
                return { text: button };
            }
            if (button.role) {
                button.cssRole = "picker-toolbar-" + button.role;
            }
            return button;
        });
        // clean up dat data
        data.columns = data.columns.map(function (column) {
            if (!util_1.isPresent(column.columnWidth)) {
                column.columnWidth = 100 / data.columns.length + '%';
            }
            if (!util_1.isPresent(column.options)) {
                column.options = [];
            }
            column.options = column.options.map(function (inputOpt) {
                var opt = {
                    text: '',
                    value: '',
                    disabled: inputOpt.disabled
                };
                if (util_1.isPresent(inputOpt)) {
                    if (util_1.isString(inputOpt) || util_1.isNumber(inputOpt)) {
                        opt.text = inputOpt.toString();
                        opt.value = inputOpt;
                    } else {
                        opt.text = util_1.isPresent(inputOpt.text) ? inputOpt.text : inputOpt.value;
                        opt.value = util_1.isPresent(inputOpt.value) ? inputOpt.value : inputOpt.text;
                    }
                }
                return opt;
            });
            return column;
        });
    };
    PickerDisplayCmp.prototype.refresh = function () {
        this._cols.forEach(function (column) {
            column.refresh();
        });
    };
    PickerDisplayCmp.prototype._colChange = function (selectedOption) {
        // one of the columns has changed its selected index
        var picker = this._viewCtrl;
        picker.ionChange.emit(this.getSelected());
    };
    PickerDisplayCmp.prototype._keyUp = function (ev) {
        if (this.enabled && this._viewCtrl.isLast()) {
            if (ev.keyCode === key_1.Key.ENTER) {
                if (this.lastClick + 1000 < Date.now()) {
                    // do not fire this click if there recently was already a click
                    // this can happen when the button has focus and used the enter
                    // key to click the button. However, both the click handler and
                    // this keyup event will fire, so only allow one of them to go.
                    console.debug('picker, enter button');
                    var button = this.d.buttons[this.d.buttons.length - 1];
                    this.btnClick(button);
                }
            } else if (ev.keyCode === key_1.Key.ESCAPE) {
                console.debug('picker, escape button');
                this.bdClick();
            }
        }
    };
    PickerDisplayCmp.prototype.ionViewDidEnter = function () {
        var activeElement = document.activeElement;
        if (activeElement) {
            activeElement.blur();
        }
        var focusableEle = this._elementRef.nativeElement.querySelector('button');
        if (focusableEle) {
            focusableEle.focus();
        }
        this.enabled = true;
    };
    PickerDisplayCmp.prototype.btnClick = function (button, dismissDelay) {
        var _this = this;
        if (!this.enabled) {
            return;
        }
        // keep the time of the most recent button click
        this.lastClick = Date.now();
        var shouldDismiss = true;
        if (button.handler) {
            // a handler has been provided, execute it
            // pass the handler the values from the inputs
            if (button.handler(this.getSelected()) === false) {
                // if the return value of the handler is false then do not dismiss
                shouldDismiss = false;
            }
        }
        if (shouldDismiss) {
            setTimeout(function () {
                _this.dismiss(button.role);
            }, dismissDelay || this._config.get('pageTransitionDelay'));
        }
    };
    PickerDisplayCmp.prototype.bdClick = function () {
        if (this.enabled && this.d.enableBackdropDismiss) {
            this.dismiss('backdrop');
        }
    };
    PickerDisplayCmp.prototype.dismiss = function (role) {
        return this._viewCtrl.dismiss(this.getSelected(), role);
    };
    PickerDisplayCmp.prototype.getSelected = function () {
        var selected = {};
        this.d.columns.forEach(function (col, index) {
            var selectedColumn = col.options[col.selectedIndex];
            selected[col.name] = {
                text: selectedColumn ? selectedColumn.text : null,
                value: selectedColumn ? selectedColumn.value : null,
                columnIndex: index
            };
        });
        return selected;
    };
    /** @nocollapse */
    PickerDisplayCmp.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-picker-cmp',
            template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="picker-wrapper">' + '<div class="picker-toolbar">' + '<div *ngFor="let b of d.buttons" class="picker-toolbar-button" [ngClass]="b.cssRole">' + '<button (click)="btnClick(b)" [ngClass]="b.cssClass" class="picker-button" clear>' + '{{b.text}}' + '</button>' + '</div>' + '</div>' + '<div class="picker-columns">' + '<div class="picker-above-highlight"></div>' + '<div *ngFor="let c of d.columns" [col]="c" class="picker-col" (ionChange)="_colChange($event)"></div>' + '<div class="picker-below-highlight"></div>' + '</div>' + '</div>',
            host: {
                'role': 'dialog'
            },
            directives: [PickerColumnCmp],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    PickerDisplayCmp.ctorParameters = [{ type: view_controller_1.ViewController }, { type: core_1.ElementRef }, { type: config_1.Config }, { type: nav_params_1.NavParams }, { type: core_1.Renderer }];
    /** @nocollapse */
    PickerDisplayCmp.propDecorators = {
        '_cols': [{ type: core_1.ViewChildren, args: [PickerColumnCmp] }],
        '_keyUp': [{ type: core_1.HostListener, args: ['body:keyup', ['$event']] }]
    };
    return PickerDisplayCmp;
}();
/**
 * Animations for pickers
 */
var PickerSlideIn = function (_super) {
    __extends(PickerSlideIn, _super);
    function PickerSlideIn(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.picker-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.26);
        wrapper.fromTo('translateY', '100%', '0%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
    }
    return PickerSlideIn;
}(transition_1.Transition);
transition_1.Transition.register('picker-slide-in', PickerSlideIn);
var PickerSlideOut = function (_super) {
    __extends(PickerSlideOut, _super);
    function PickerSlideOut(enteringView, leavingView, opts) {
        _super.call(this, enteringView, leavingView, opts);
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new animation_1.Animation(ele.querySelector('.picker-wrapper'));
        backdrop.fromTo('opacity', 0.26, 0);
        wrapper.fromTo('translateY', '0%', '100%');
        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
    }
    return PickerSlideOut;
}(transition_1.Transition);
transition_1.Transition.register('picker-slide-out', PickerSlideOut);
var pickerIds = -1;
var DECELERATION_FRICTION = 0.97;
var FRAME_MS = 1000 / 60;

/***/ },
/* 870 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var form_1 = __webpack_require__(73);
var util_1 = __webpack_require__(7);
var item_1 = __webpack_require__(69);
var radio_group_1 = __webpack_require__(465);
var RadioButton = function () {
    function RadioButton(_form, _item, _group) {
        this._form = _form;
        this._item = _item;
        this._group = _group;
        this._checked = false;
        this._disabled = false;
        this._value = null;
        this.ionSelect = new core_1.EventEmitter();
        _form.register(this);
        if (_group) {
            // register with the radiogroup
            this.id = 'rb-' + _group.add(this);
        }
        if (_item) {
            // register the input inside of the item
            // reset to the item's id instead of the radiogroup id
            this.id = 'rb-' + _item.registerInput('radio');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-radio', true);
        }
    }
    Object.defineProperty(RadioButton.prototype, "value", {
        get: function get() {
            // if the value is not defined then use it's unique id
            return util_1.isBlank(this._value) ? this.id : this._value;
        },
        set: function set(val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "checked", {
        get: function get() {
            return this._checked;
        },
        set: function set(isChecked) {
            this._checked = util_1.isTrueProperty(isChecked);
            if (this._item) {
                this._item.setCssClass('item-radio-checked', this._checked);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-radio-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    RadioButton.prototype._click = function (ev) {
        console.debug('radio, select', this.id);
        ev.preventDefault();
        ev.stopPropagation();
        this.checked = true;
        this.ionSelect.emit(this.value);
    };
    /**
     * @private
     */
    RadioButton.prototype.ngOnInit = function () {
        if (this._group && util_1.isPresent(this._group.value)) {
            this.checked = util_1.isCheckedProperty(this._group.value, this.value);
        }
    };
    /**
     * @private
     */
    RadioButton.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
        this._group && this._group.remove(this);
    };
    /** @nocollapse */
    RadioButton.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-radio',
            template: '<div class="radio-icon" [class.radio-checked]="_checked">' + '<div class="radio-inner"></div>' + '</div>' + '<button role="radio" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
            host: {
                '[class.radio-disabled]': '_disabled'
            },
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    RadioButton.ctorParameters = [{ type: form_1.Form }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }, { type: radio_group_1.RadioGroup, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    RadioButton.propDecorators = {
        'ionSelect': [{ type: core_1.Output }],
        'value': [{ type: core_1.Input }],
        'checked': [{ type: core_1.Input }],
        'disabled': [{ type: core_1.Input }],
        '_click': [{ type: core_1.HostListener, args: ['click', ['$event']] }]
    };
    return RadioButton;
}();
exports.RadioButton = RadioButton;

/***/ },
/* 871 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var util_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(17);
var debouncer_1 = __webpack_require__(512);
var form_1 = __webpack_require__(73);
var item_1 = __webpack_require__(69);
var ui_event_manager_1 = __webpack_require__(153);
exports.RANGE_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () {
        return Range;
    }), multi: true });
var RangeKnob = function () {
    function RangeKnob(range) {
        this.range = range;
    }
    Object.defineProperty(RangeKnob.prototype, "ratio", {
        get: function get() {
            return this._ratio;
        },
        set: function set(ratio) {
            this._ratio = util_1.clamp(0, ratio, 1);
            this._val = this.range.ratioToValue(this._ratio);
            if (this.range.snaps) {
                this._ratio = this.range.valueToRatio(this._val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeKnob.prototype, "value", {
        get: function get() {
            return this._val;
        },
        set: function set(val) {
            if (util_1.isString(val)) {
                val = Math.round(val);
            }
            if (util_1.isNumber(val) && !isNaN(val)) {
                this._ratio = this.range.valueToRatio(val);
                this._val = this.range.ratioToValue(this._ratio);
            }
        },
        enumerable: true,
        configurable: true
    });
    RangeKnob.prototype.position = function () {
        this._x = this._ratio * 100 + "%";
    };
    RangeKnob.prototype.ngOnInit = function () {
        if (util_1.isPresent(this.range.value)) {
            // we already have a value
            if (this.range.dualKnobs) {
                // we have a value and there are two knobs
                if (this.upper) {
                    // this is the upper knob
                    this.value = this.range.value.upper;
                } else {
                    // this is the lower knob
                    this.value = this.range.value.lower;
                }
            } else {
                // we have a value and there is only one knob
                this.value = this.range.value;
            }
        } else {
            // we do not have a value so set defaults
            this.ratio = this.range.dualKnobs && this.upper ? 1 : 0;
        }
        this.position();
    };
    /** @nocollapse */
    RangeKnob.decorators = [{ type: core_1.Component, args: [{
            selector: '.range-knob-handle',
            template: '<div class="range-pin" *ngIf="range.pin">{{_val}}</div>' + '<div class="range-knob"></div>',
            host: {
                '[class.range-knob-pressed]': 'pressed',
                '[class.range-knob-min]': '_val===range.min',
                '[class.range-knob-max]': '_val===range.max',
                '[style.left]': '_x',
                '[style.top]': '_y',
                '[style.transform]': '_trns',
                '[attr.aria-valuenow]': '_val',
                '[attr.aria-valuemin]': 'range.min',
                '[attr.aria-valuemax]': 'range.max',
                'role': 'slider',
                'tabindex': '0'
            },
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    RangeKnob.ctorParameters = [{ type: Range, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () {
                return Range;
            })] }] }];
    /** @nocollapse */
    RangeKnob.propDecorators = {
        'upper': [{ type: core_1.Input }]
    };
    return RangeKnob;
}();
exports.RangeKnob = RangeKnob;
var Range = function () {
    function Range(_form, _item, _renderer) {
        this._form = _form;
        this._item = _item;
        this._renderer = _renderer;
        this._dual = false;
        this._disabled = false;
        this._start = null;
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._snaps = false;
        this._debouncer = new debouncer_1.Debouncer(0);
        this._events = new ui_event_manager_1.UIEventManager();
        this.ionChange = new core_1.EventEmitter();
        _form.register(this);
        if (_item) {
            this.id = 'rng-' + _item.registerInput('range');
            this._labelId = 'lbl-' + _item.id;
            _item.setCssClass('item-range', true);
        }
    }
    Object.defineProperty(Range.prototype, "min", {
        get: function get() {
            return this._min;
        },
        set: function set(val) {
            val = Math.round(val);
            if (!isNaN(val)) {
                this._min = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "max", {
        get: function get() {
            return this._max;
        },
        set: function set(val) {
            val = Math.round(val);
            if (!isNaN(val)) {
                this._max = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "step", {
        get: function get() {
            return this._step;
        },
        set: function set(val) {
            val = Math.round(val);
            if (!isNaN(val) && val > 0) {
                this._step = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "snaps", {
        get: function get() {
            return this._snaps;
        },
        set: function set(val) {
            this._snaps = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "pin", {
        get: function get() {
            return this._pin;
        },
        set: function set(val) {
            this._pin = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "debounce", {
        get: function get() {
            return this._debouncer.wait;
        },
        set: function set(val) {
            this._debouncer.wait = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "dualKnobs", {
        get: function get() {
            return this._dual;
        },
        set: function set(val) {
            this._dual = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Range.prototype.ngAfterViewInit = function () {
        var barL = '';
        var barR = '';
        var firstRatio = this._knobs.first.ratio;
        if (this._dual) {
            var lastRatio = this._knobs.last.ratio;
            barL = Math.min(firstRatio, lastRatio) * 100 + "%";
            barR = 100 - Math.max(firstRatio, lastRatio) * 100 + "%";
        } else {
            barR = 100 - firstRatio * 100 + "%";
        }
        this._renderer.setElementStyle(this._bar.nativeElement, 'left', barL);
        this._renderer.setElementStyle(this._bar.nativeElement, 'right', barR);
        // add touchstart/mousedown listeners
        this._events.pointerEventsRef(this._slider, this.pointerDown.bind(this), this.pointerMove.bind(this), this.pointerUp.bind(this));
        this.createTicks();
    };
    /**
     * @private
     */
    Range.prototype.pointerDown = function (ev) {
        // TODO: we could stop listening for events instead of checking this._disabled.
        // since there are a lot of events involved, this solution is
        // enough for the moment
        if (this._disabled) {
            return false;
        }
        console.debug("range, " + ev.type);
        // prevent default so scrolling does not happen
        ev.preventDefault();
        ev.stopPropagation();
        // get the start coordinates
        this._start = dom_1.pointerCoord(ev);
        // get the full dimensions of the slider element
        var rect = this._rect = this._slider.nativeElement.getBoundingClientRect();
        // figure out the offset
        // the start of the pointer could actually
        // have been left or right of the slider bar
        if (this._start.x < rect.left) {
            rect.xOffset = this._start.x - rect.left;
        } else if (this._start.x > rect.right) {
            rect.xOffset = this._start.x - rect.right;
        } else {
            rect.xOffset = 0;
        }
        // figure out which knob we're interacting with
        this.setActiveKnob(this._start, rect);
        // update the ratio for the active knob
        this.updateKnob(this._start, rect);
        // update the active knob's position
        this._active.position();
        this._pressed = this._active.pressed = true;
        return true;
    };
    /**
     * @private
     */
    Range.prototype.pointerMove = function (ev) {
        console.debug("range, " + ev.type);
        // prevent default so scrolling does not happen
        ev.preventDefault();
        ev.stopPropagation();
        if (this._start !== null && this._active !== null) {
            // only use pointer move if it's a valid pointer
            // and we already have start coordinates
            // update the ratio for the active knob
            this.updateKnob(dom_1.pointerCoord(ev), this._rect);
            // update the active knob's position
            this._active.position();
            this._pressed = this._active.pressed = true;
        }
    };
    /**
     * @private
     */
    Range.prototype.pointerUp = function (ev) {
        console.debug("range, " + ev.type);
        // prevent default so scrolling does not happen
        ev.preventDefault();
        ev.stopPropagation();
        // update the ratio for the active knob
        this.updateKnob(dom_1.pointerCoord(ev), this._rect);
        // update the active knob's position
        this._active.position();
        // clear the start coordinates and active knob
        this._start = this._active = null;
        this._pressed = this._knobs.first.pressed = this._knobs.last.pressed = false;
    };
    /**
     * @private
     */
    Range.prototype.setActiveKnob = function (current, rect) {
        // figure out which knob is the closest one to the pointer
        var ratio = (current.x - rect.left) / rect.width;
        if (this._dual && Math.abs(ratio - this._knobs.first.ratio) > Math.abs(ratio - this._knobs.last.ratio)) {
            this._active = this._knobs.last;
        } else {
            this._active = this._knobs.first;
        }
    };
    /**
     * @private
     */
    Range.prototype.updateKnob = function (current, rect) {
        var _this = this;
        // figure out where the pointer is currently at
        // update the knob being interacted with
        if (this._active) {
            var oldVal = this._active.value;
            this._active.ratio = (current.x - rect.left) / rect.width;
            var newVal = this._active.value;
            if (oldVal !== newVal) {
                // value has been updated
                if (this._dual) {
                    this.value = {
                        lower: Math.min(this._knobs.first.value, this._knobs.last.value),
                        upper: Math.max(this._knobs.first.value, this._knobs.last.value)
                    };
                } else {
                    this.value = newVal;
                }
                this._debouncer.debounce(function () {
                    _this.onChange(_this.value);
                    _this.ionChange.emit(_this);
                });
            }
            this.updateBar();
        }
    };
    /**
     * @private
     */
    Range.prototype.updateBar = function () {
        var firstRatio = this._knobs.first.ratio;
        if (this._dual) {
            var lastRatio = this._knobs.last.ratio;
            this._barL = Math.min(firstRatio, lastRatio) * 100 + "%";
            this._barR = 100 - Math.max(firstRatio, lastRatio) * 100 + "%";
        } else {
            this._barL = '';
            this._barR = 100 - firstRatio * 100 + "%";
        }
        this.updateTicks();
    };
    /**
     * @private
     */
    Range.prototype.createTicks = function () {
        var _this = this;
        if (this._snaps) {
            dom_1.raf(function () {
                // TODO: Fix to not use RAF
                _this._ticks = [];
                for (var value = _this._min; value <= _this._max; value += _this._step) {
                    var ratio = _this.valueToRatio(value);
                    _this._ticks.push({
                        ratio: ratio,
                        left: ratio * 100 + "%"
                    });
                }
                _this.updateTicks();
            });
        }
    };
    /**
     * @private
     */
    Range.prototype.updateTicks = function () {
        if (this._snaps) {
            var ratio_1 = this.ratio;
            if (this._dual) {
                var upperRatio_1 = this.ratioUpper;
                this._ticks.forEach(function (t) {
                    t.active = t.ratio >= ratio_1 && t.ratio <= upperRatio_1;
                });
            } else {
                this._ticks.forEach(function (t) {
                    t.active = t.ratio <= ratio_1;
                });
            }
        }
    };
    /**
     * @private
     */
    Range.prototype.ratioToValue = function (ratio) {
        ratio = Math.round((this._max - this._min) * ratio + this._min);
        return Math.round(ratio / this._step) * this._step;
    };
    /**
     * @private
     */
    Range.prototype.valueToRatio = function (value) {
        value = Math.round(util_1.clamp(this._min, value, this._max) / this._step) * this._step;
        return (value - this._min) / (this._max - this._min);
    };
    /**
     * @private
     */
    Range.prototype.writeValue = function (val) {
        if (util_1.isPresent(val)) {
            var knobs = this._knobs;
            this.value = val;
            if (this._knobs) {
                if (this._dual) {
                    knobs.first.value = val.lower;
                    knobs.last.value = val.upper;
                    knobs.last.position();
                } else {
                    knobs.first.value = val;
                }
                knobs.first.position();
                this.updateBar();
            }
        }
    };
    /**
     * @private
     */
    Range.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function (val) {
            fn(val);
            _this.onTouched();
        };
    };
    /**
     * @private
     */
    Range.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    Object.defineProperty(Range.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-range-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "ratio", {
        /**
         * Returns the ratio of the knob's is current location, which is a number between `0` and `1`.
         * If two knobs are used, this property represents the lower value.
         */
        get: function get() {
            if (this._dual) {
                return Math.min(this._knobs.first.ratio, this._knobs.last.ratio);
            }
            return this._knobs.first.ratio;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "ratioUpper", {
        /**
         * Returns the ratio of the upper value's is current location, which is a number between `0` and `1`.
         * If there is only one knob, then this will return `null`.
         */
        get: function get() {
            if (this._dual) {
                return Math.max(this._knobs.first.ratio, this._knobs.last.ratio);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Range.prototype.onChange = function (val) {
        // used when this input does not have an ngModel or ngControl
        this.onTouched();
    };
    /**
     * @private
     */
    Range.prototype.onTouched = function () {};
    /**
     * @private
     */
    Range.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
        this._events.unlistenAll();
    };
    /** @nocollapse */
    Range.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-range',
            template: '<ng-content select="[range-left]"></ng-content>' + '<div class="range-slider" #slider>' + '<div class="range-tick" *ngFor="let t of _ticks" [style.left]="t.left" [class.range-tick-active]="t.active"></div>' + '<div class="range-bar"></div>' + '<div class="range-bar range-bar-active" [style.left]="_barL" [style.right]="_barR" #bar></div>' + '<div class="range-knob-handle"></div>' + '<div class="range-knob-handle" [upper]="true" *ngIf="_dual"></div>' + '</div>' + '<ng-content select="[range-right]"></ng-content>',
            host: {
                '[class.range-disabled]': '_disabled',
                '[class.range-pressed]': '_pressed',
                '[class.range-has-pin]': '_pin'
            },
            directives: [common_1.NgIf, common_1.NgFor, RangeKnob],
            providers: [exports.RANGE_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Range.ctorParameters = [{ type: form_1.Form }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }, { type: core_1.Renderer }];
    /** @nocollapse */
    Range.propDecorators = {
        '_bar': [{ type: core_1.ViewChild, args: ['bar'] }],
        '_slider': [{ type: core_1.ViewChild, args: ['slider'] }],
        '_knobs': [{ type: core_1.ViewChildren, args: [RangeKnob] }],
        'min': [{ type: core_1.Input }],
        'max': [{ type: core_1.Input }],
        'step': [{ type: core_1.Input }],
        'snaps': [{ type: core_1.Input }],
        'pin': [{ type: core_1.Input }],
        'debounce': [{ type: core_1.Input }],
        'dualKnobs': [{ type: core_1.Input }],
        'ionChange': [{ type: core_1.Output }],
        'disabled': [{ type: core_1.Input }]
    };
    return Range;
}();
exports.Range = Range;

/***/ },
/* 872 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var config_1 = __webpack_require__(16);
var refresher_1 = __webpack_require__(466);
var RefresherContent = function () {
    function RefresherContent(r, _config) {
        this.r = r;
        this._config = _config;
    }
    /**
     * @private
     */
    RefresherContent.prototype.ngOnInit = function () {
        if (!this.pullingIcon) {
            this.pullingIcon = this._config.get('ionPullIcon', 'arrow-down');
        }
        if (!this.refreshingSpinner) {
            this.refreshingSpinner = this._config.get('ionRefreshingSpinner', this._config.get('spinner', 'ios'));
        }
    };
    /** @nocollapse */
    RefresherContent.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-refresher-content',
            template: '<div class="refresher-pulling">' + '<div class="refresher-pulling-icon" *ngIf="pullingIcon">' + '<ion-icon [name]="pullingIcon"></ion-icon>' + '</div>' + '<div class="refresher-pulling-text" [innerHTML]="pullingText" *ngIf="pullingText"></div>' + '</div>' + '<div class="refresher-refreshing">' + '<div class="refresher-refreshing-icon">' + '<ion-spinner [name]="refreshingSpinner"></ion-spinner>' + '</div>' + '<div class="refresher-refreshing-text" [innerHTML]="refreshingText" *ngIf="refreshingText"></div>' + '</div>',
            host: {
                '[attr.state]': 'r.state'
            },
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    RefresherContent.ctorParameters = [{ type: refresher_1.Refresher }, { type: config_1.Config }];
    /** @nocollapse */
    RefresherContent.propDecorators = {
        'pullingIcon': [{ type: core_1.Input }],
        'pullingText': [{ type: core_1.Input }],
        'refreshingSpinner': [{ type: core_1.Input }],
        'refreshingText': [{ type: core_1.Input }]
    };
    return RefresherContent;
}();
exports.RefresherContent = RefresherContent;

/***/ },
/* 873 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var ion_1 = __webpack_require__(58);
var Scroll = function (_super) {
    __extends(Scroll, _super);
    function Scroll(elementRef) {
        _super.call(this, elementRef);
        /**
         * @private
         */
        this.maxScale = 3;
        /**
         * @private
         */
        this.zoomDuration = 250;
    }
    /**
     * @private
     */
    Scroll.prototype.ngOnInit = function () {
        this.scrollElement = this.getNativeElement().children[0];
    };
    /**
     * @private
     * Add a scroll event handler to the scroll element if it exists.
     * @param {Function} handler  The scroll handler to add to the scroll element.
     * @returns {?Function} a function to remove the specified handler, otherwise
     * undefined if the scroll element doesn't exist.
     */
    Scroll.prototype.addScrollEventListener = function (handler) {
        var _this = this;
        if (!this.scrollElement) {
            return;
        }
        this.scrollElement.addEventListener('scroll', handler);
        return function () {
            _this.scrollElement.removeEventListener('scroll', handler);
        };
    };
    /** @nocollapse */
    Scroll.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-scroll',
            inputs: ['scrollX', 'scrollY', 'zoom', 'maxZoom'],
            host: {
                '[class.scroll-x]': 'scrollX',
                '[class.scroll-y]': 'scrollY'
            },
            template: '<scroll-content>' + '<div class="scroll-zoom-wrapper">' + '<ng-content></ng-content>' + '</div>' + '</scroll-content>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Scroll.ctorParameters = [{ type: core_1.ElementRef }];
    return Scroll;
}(ion_1.Ion);
exports.Scroll = Scroll;

/***/ },
/* 874 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var config_1 = __webpack_require__(16);
var util_1 = __webpack_require__(7);
var debouncer_1 = __webpack_require__(512);
var Searchbar = function () {
    function Searchbar(_elementRef, _config, ngControl) {
        this._elementRef = _elementRef;
        this._config = _config;
        this._value = '';
        this._shouldBlur = true;
        this._isActive = false;
        this._debouncer = new debouncer_1.Debouncer(250);
        this.cancelButtonText = 'Cancel';
        this.showCancelButton = false;
        this.placeholder = 'Search';
        this.type = 'search';
        this.ionInput = new core_1.EventEmitter();
        this.ionBlur = new core_1.EventEmitter();
        this.ionFocus = new core_1.EventEmitter();
        this.ionCancel = new core_1.EventEmitter();
        this.ionClear = new core_1.EventEmitter();
        /**
         * @private
         */
        this.onChange = function (_) {};
        /**
         * @private
         */
        this.onTouched = function () {};
        // If the user passed a ngControl we need to set the valueAccessor
        if (ngControl) {
            ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(Searchbar.prototype, "debounce", {
        get: function get() {
            return this._debouncer.wait;
        },
        set: function set(val) {
            this._debouncer.wait = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Searchbar.prototype, "searchbarInput", {
        set: function set(searchbarInput) {
            this._searchbarInput = searchbarInput;
            var inputEle = searchbarInput.nativeElement;
            // By defalt set autocomplete="off" unless specified by the input
            var autoComplete = this.autocomplete === '' || this.autocomplete === 'on' ? 'on' : this._config.get('autocomplete', 'off');
            inputEle.setAttribute('autocomplete', autoComplete);
            // by default set autocorrect="off" unless specified by the input
            var autoCorrect = this.autocorrect === '' || this.autocorrect === 'on' ? 'on' : this._config.get('autocorrect', 'off');
            inputEle.setAttribute('autocorrect', autoCorrect);
            // by default set spellcheck="false" unless specified by the input
            var spellCheck = this.spellcheck === '' || this.spellcheck === 'true' || this.spellcheck === true ? true : this._config.getBoolean('spellcheck', false);
            inputEle.setAttribute('spellcheck', spellCheck);
            // by default set type="search" unless specified by the input
            inputEle.setAttribute('type', this.type);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Searchbar.prototype, "value", {
        get: function get() {
            return this._value;
        },
        set: function set(val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * On Initialization check for attributes
     */
    Searchbar.prototype.ngOnInit = function () {
        var showCancelButton = this.showCancelButton;
        if (typeof showCancelButton === 'string') {
            this.showCancelButton = showCancelButton === '' || showCancelButton === 'true';
        }
    };
    /**
     * @private
     * After View Initialization position the elements
     */
    Searchbar.prototype.ngAfterViewInit = function () {
        this.positionElements();
    };
    /**
     * @private
     * Positions the input search icon, placeholder, and the cancel button
     * based on the input value and if it is focused. (ios only)
     */
    Searchbar.prototype.positionElements = function () {
        if (this._config.get('mode') !== 'ios') return;
        // Position the input placeholder & search icon
        if (this._searchbarInput && this._searchbarIcon) {
            this.positionInputPlaceholder(this._searchbarInput.nativeElement, this._searchbarIcon.nativeElement);
        }
        // Position the cancel button
        if (this._cancelButton && this._cancelButton.nativeElement) {
            this.positionCancelButton(this._cancelButton.nativeElement);
        }
    };
    /**
     * @private
     * Calculates the amount of padding/margin left for the elements
     * in order to center them based on the placeholder width
     */
    Searchbar.prototype.positionInputPlaceholder = function (inputEle, iconEle) {
        if (this.shouldAlignLeft()) {
            inputEle.removeAttribute('style');
            iconEle.removeAttribute('style');
        } else {
            // Create a dummy span to get the placeholder width
            var tempSpan = document.createElement('span');
            tempSpan.innerHTML = this.placeholder;
            document.body.appendChild(tempSpan);
            // Get the width of the span then remove it
            var textWidth = tempSpan.offsetWidth;
            tempSpan.remove();
            // Set the input padding left
            var inputLeft = 'calc(50% - ' + textWidth / 2 + 'px)';
            inputEle.style.paddingLeft = inputLeft;
            // Set the icon margin left
            var iconLeft = 'calc(50% - ' + (textWidth / 2 + 30) + 'px)';
            iconEle.style.marginLeft = iconLeft;
        }
    };
    /**
     * @private
     * Show the iOS Cancel button on focus, hide it offscreen otherwise
     */
    Searchbar.prototype.positionCancelButton = function (cancelButtonEle) {
        if (cancelButtonEle.offsetWidth > 0) {
            if (this._sbHasFocus) {
                cancelButtonEle.style.marginRight = '0';
            } else {
                cancelButtonEle.style.marginRight = -cancelButtonEle.offsetWidth + 'px';
            }
        }
    };
    /**
     * @private
     * Align the input placeholder left on focus or if a value exists
     */
    Searchbar.prototype.shouldAlignLeft = function () {
        return this._value && this._value.toString().trim() !== '' || this._sbHasFocus === true;
    };
    /**
     * @private
     * Update the Searchbar input value when the input changes
     */
    Searchbar.prototype.inputChanged = function (ev) {
        var _this = this;
        var value = ev.target.value;
        this._debouncer.debounce(function () {
            _this._value = value;
            _this.onChange(_this._value);
            _this.ionInput.emit(ev);
        });
    };
    /**
     * @private
     * Sets the Searchbar to focused and active on input focus.
     */
    Searchbar.prototype.inputFocused = function (ev) {
        this.ionFocus.emit(ev);
        this._sbHasFocus = true;
        this._isActive = true;
        this.positionElements();
    };
    /**
     * @private
     * Sets the Searchbar to not focused and checks if it should align left
     * based on whether there is a value in the searchbar or not.
     */
    Searchbar.prototype.inputBlurred = function (ev) {
        // _shouldBlur determines if it should blur
        // if we are clearing the input we still want to stay focused in the input
        if (this._shouldBlur === false) {
            this._searchbarInput.nativeElement.focus();
            this._shouldBlur = true;
            return;
        }
        this.ionBlur.emit(ev);
        this._sbHasFocus = false;
        this.positionElements();
    };
    /**
     * @private
     * Clears the input field and triggers the control change.
     */
    Searchbar.prototype.clearInput = function (ev) {
        this.ionClear.emit(ev);
        if (util_1.isPresent(this._value) && this._value !== '') {
            this._value = '';
            this.onChange(this._value);
            this.ionInput.emit(ev);
        }
        this._shouldBlur = false;
    };
    /**
     * @private
     * Clears the input field and tells the input to blur since
     * the clearInput function doesn't want the input to blur
     * then calls the custom cancel function if the user passed one in.
     */
    Searchbar.prototype.cancelSearchbar = function (ev) {
        this.ionCancel.emit(ev);
        this.clearInput(ev);
        this._shouldBlur = true;
        this._isActive = false;
    };
    /**
     * @private
     * Write a new value to the element.
     */
    Searchbar.prototype.writeValue = function (val) {
        this._value = val;
        this.positionElements();
    };
    /**
     * @private
     * Set the function to be called when the control receives a change event.
     */
    Searchbar.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @private
     * Set the function to be called when the control receives a touch event.
     */
    Searchbar.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /** @nocollapse */
    Searchbar.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-searchbar',
            host: {
                '[class.searchbar-has-value]': '_value',
                '[class.searchbar-active]': '_isActive',
                '[class.searchbar-show-cancel]': 'showCancelButton',
                '[class.searchbar-left-aligned]': 'shouldAlignLeft()'
            },
            template: '<div class="searchbar-input-container">' + '<button (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" clear dark class="searchbar-md-cancel">' + '<ion-icon name="arrow-back"></ion-icon>' + '</button>' + '<div #searchbarIcon class="searchbar-search-icon"></div>' + '<input #searchbarInput [(ngModel)]="_value" [attr.placeholder]="placeholder" (input)="inputChanged($event)" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" class="searchbar-input">' + '<button clear class="searchbar-clear-icon" (click)="clearInput($event)" (mousedown)="clearInput($event)"></button>' + '</div>' + '<button #cancelButton [tabindex]="_isActive ? 1 : -1" clear (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" class="searchbar-ios-cancel">{{cancelButtonText}}</button>',
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgModel]
        }] }];
    /** @nocollapse */
    Searchbar.ctorParameters = [{ type: core_1.ElementRef }, { type: config_1.Config }, { type: common_1.NgControl, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    Searchbar.propDecorators = {
        'cancelButtonText': [{ type: core_1.Input }],
        'showCancelButton': [{ type: core_1.Input }],
        'debounce': [{ type: core_1.Input }],
        'placeholder': [{ type: core_1.Input }],
        'autocomplete': [{ type: core_1.Input }],
        'autocorrect': [{ type: core_1.Input }],
        'spellcheck': [{ type: core_1.Input }],
        'type': [{ type: core_1.Input }],
        'ionInput': [{ type: core_1.Output }],
        'ionBlur': [{ type: core_1.Output }],
        'ionFocus': [{ type: core_1.Output }],
        'ionCancel': [{ type: core_1.Output }],
        'ionClear': [{ type: core_1.Output }],
        '_sbHasFocus': [{ type: core_1.HostBinding, args: ['class.searchbar-has-focus'] }],
        'searchbarInput': [{ type: core_1.ViewChild, args: ['searchbarInput'] }],
        '_searchbarIcon': [{ type: core_1.ViewChild, args: ['searchbarIcon'] }],
        '_cancelButton': [{ type: core_1.ViewChild, args: ['cancelButton', { read: core_1.ElementRef }] }],
        'value': [{ type: core_1.Input }]
    };
    return Searchbar;
}();
exports.Searchbar = Searchbar;

/***/ },
/* 875 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var util_1 = __webpack_require__(7);
var SegmentButton = function () {
    function SegmentButton(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._disabled = false;
        this.ionSelect = new core_1.EventEmitter();
    }
    Object.defineProperty(SegmentButton.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this.setCssClass('segment-button-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    SegmentButton.prototype.setCssClass = function (cssClass, shouldAdd) {
        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
    };
    SegmentButton.prototype.onClick = function () {
        console.debug('SegmentButton, select', this.value);
        this.ionSelect.emit(this);
    };
    /**
     * @private
     */
    SegmentButton.prototype.ngOnInit = function () {
        if (!util_1.isPresent(this.value)) {
            console.warn('<ion-segment-button> requires a "value" attribute');
        }
    };
    Object.defineProperty(SegmentButton.prototype, "isActive", {
        /**
         * @private
         */
        set: function set(isActive) {
            this._renderer.setElementClass(this._elementRef.nativeElement, 'segment-activated', isActive);
            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-pressed', isActive);
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    SegmentButton.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-segment-button',
            template: '<ng-content></ng-content>' + '<ion-button-effect></ion-button-effect>',
            host: {
                'tappable': '',
                'class': 'segment-button',
                'role': 'button'
            },
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    SegmentButton.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }];
    /** @nocollapse */
    SegmentButton.propDecorators = {
        'value': [{ type: core_1.Input }],
        'ionSelect': [{ type: core_1.Output }],
        'disabled': [{ type: core_1.Input }],
        'onClick': [{ type: core_1.HostListener, args: ['click'] }]
    };
    return SegmentButton;
}();
exports.SegmentButton = SegmentButton;
var Segment = function () {
    function Segment(ngControl) {
        this._disabled = false;
        this.ionChange = new core_1.EventEmitter();
        /**
         * @private
         */
        this.onChange = function (_) {};
        /**
         * @private
         */
        this.onTouched = function (_) {};
        if (ngControl) {
            ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(Segment.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            if (this._buttons) {
                var buttons = this._buttons.toArray();
                for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
                    var button = buttons_1[_i];
                    button.setCssClass('segment-button-disabled', this._disabled);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * Write a new value to the element.
     */
    Segment.prototype.writeValue = function (value) {
        this.value = util_1.isPresent(value) ? value : '';
        if (this._buttons) {
            var buttons = this._buttons.toArray();
            for (var _i = 0, buttons_2 = buttons; _i < buttons_2.length; _i++) {
                var button = buttons_2[_i];
                button.isActive = button.value === this.value;
            }
        }
    };
    /**
     * @private
     */
    Segment.prototype.ngAfterViewInit = function () {
        var _this = this;
        var buttons = this._buttons.toArray();
        for (var _i = 0, buttons_3 = buttons; _i < buttons_3.length; _i++) {
            var button = buttons_3[_i];
            button.ionSelect.subscribe(function (selectedButton) {
                _this.writeValue(selectedButton.value);
                _this.onChange(selectedButton.value);
                _this.ionChange.emit(selectedButton);
            });
            if (util_1.isPresent(this.value)) {
                button.isActive = button.value === this.value;
            }
            if (util_1.isTrueProperty(this._disabled)) {
                button.setCssClass('segment-button-disabled', this._disabled);
            }
        }
    };
    /**
     * @private
     * Set the function to be called when the control receives a change event.
     */
    Segment.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @private
     * Set the function to be called when the control receives a touch event.
     */
    Segment.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /** @nocollapse */
    Segment.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-segment'
        }] }];
    /** @nocollapse */
    Segment.ctorParameters = [{ type: common_1.NgControl, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    Segment.propDecorators = {
        'ionChange': [{ type: core_1.Output }],
        '_buttons': [{ type: core_1.ContentChildren, args: [SegmentButton] }],
        'disabled': [{ type: core_1.Input }]
    };
    return Segment;
}();
exports.Segment = Segment;

/***/ },
/* 876 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var action_sheet_1 = __webpack_require__(849);
var alert_1 = __webpack_require__(850);
var form_1 = __webpack_require__(73);
var util_1 = __webpack_require__(7);
var item_1 = __webpack_require__(69);
var nav_controller_1 = __webpack_require__(51);
var option_1 = __webpack_require__(464);
exports.SELECT_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () {
        return Select;
    }), multi: true });
var Select = function () {
    function Select(_form, _elementRef, _renderer, _item, _nav) {
        this._form = _form;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._item = _item;
        this._nav = _nav;
        this._disabled = false;
        this._multi = false;
        this._values = [];
        this._texts = [];
        this._text = '';
        this._isOpen = false;
        this.cancelText = 'Cancel';
        this.okText = 'OK';
        this.alertOptions = {};
        this.checked = false;
        this.interface = '';
        this.ionChange = new core_1.EventEmitter();
        this.ionCancel = new core_1.EventEmitter();
        this._form.register(this);
        if (_item) {
            this.id = 'sel-' + _item.registerInput('select');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-select', true);
        }
        if (!_nav) {
            console.error('parent <ion-nav> required for <ion-select>');
        }
    }
    Select.prototype._click = function (ev) {
        if (ev.detail === 0) {
            // do not continue if the click event came from a form submit
            return;
        }
        ev.preventDefault();
        ev.stopPropagation();
        this._open();
    };
    Select.prototype._keyup = function () {
        if (!this._isOpen) {
            this._open();
        }
    };
    Select.prototype._open = function () {
        var _this = this;
        if (this._disabled) {
            return;
        }
        console.debug('select, open alert');
        // the user may have assigned some options specifically for the alert
        var alertOptions = util_1.merge({}, this.alertOptions);
        // make sure their buttons array is removed from the options
        // and we create a new array for the alert's two buttons
        alertOptions.buttons = [{
            text: this.cancelText,
            role: 'cancel',
            handler: function handler() {
                _this.ionCancel.emit(null);
            }
        }];
        // if the alertOptions didn't provide an title then use the label's text
        if (!alertOptions.title && this._item) {
            alertOptions.title = this._item.getLabelText();
        }
        var options = this._options.toArray();
        if (this.interface === 'action-sheet' && options.length > 6) {
            console.warn('Interface cannot be "action-sheet" with more than 6 options. Using the "alert" interface.');
            this.interface = 'alert';
        }
        if (this.interface === 'action-sheet' && this._multi) {
            console.warn('Interface cannot be "action-sheet" with a multi-value select. Using the "alert" interface.');
            this.interface = 'alert';
        }
        var overlay;
        if (this.interface === 'action-sheet') {
            alertOptions.buttons = alertOptions.buttons.concat(options.map(function (input) {
                return {
                    role: input.checked ? 'selected' : '',
                    text: input.text,
                    handler: function handler() {
                        _this.onChange(input.value);
                        _this.ionChange.emit(input.value);
                    }
                };
            }));
            alertOptions.cssClass = 'select-action-sheet';
            overlay = action_sheet_1.ActionSheet.create(alertOptions);
        } else {
            // default to use the alert interface
            this.interface = 'alert';
            // user cannot provide inputs from alertOptions
            // alert inputs must be created by ionic from ion-options
            alertOptions.inputs = this._options.map(function (input) {
                return {
                    type: _this._multi ? 'checkbox' : 'radio',
                    label: input.text,
                    value: input.value,
                    checked: input.checked
                };
            });
            // create the alert instance from our built up alertOptions
            overlay = alert_1.Alert.create(alertOptions);
            if (this._multi) {
                // use checkboxes
                overlay.setCssClass('select-alert multiple-select-alert');
            } else {
                // use radio buttons
                overlay.setCssClass('select-alert single-select-alert');
            }
            overlay.addButton({
                text: this.okText,
                handler: function handler(selectedValues) {
                    _this.onChange(selectedValues);
                    _this.ionChange.emit(selectedValues);
                }
            });
        }
        this._nav.present(overlay, alertOptions);
        this._isOpen = true;
        overlay.onDismiss(function () {
            _this._isOpen = false;
        });
    };
    Object.defineProperty(Select.prototype, "multiple", {
        get: function get() {
            return this._multi;
        },
        set: function set(val) {
            this._multi = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "text", {
        /**
         * @private
         */
        get: function get() {
            return this._multi ? this._texts : this._texts.join();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "options", {
        set: function set(val) {
            this._options = val;
            if (!this._values.length) {
                // there are no values set at this point
                // so check to see who should be checked
                this._values = val.filter(function (o) {
                    return o.checked;
                }).map(function (o) {
                    return o.value;
                });
            }
            this._updOpts();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Select.prototype._updOpts = function () {
        var _this = this;
        this._texts = [];
        if (this._options) {
            this._options.forEach(function (option) {
                // check this option if the option's value is in the values array
                option.checked = _this._values.some(function (selectValue) {
                    return util_1.isCheckedProperty(selectValue, option.value);
                });
                if (option.checked) {
                    _this._texts.push(option.text);
                }
            });
        }
        this._text = this._texts.join(', ');
    };
    Object.defineProperty(Select.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-select-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Select.prototype.writeValue = function (val) {
        console.debug('select, writeValue', val);
        this._values = Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val];
        this._updOpts();
    };
    /**
     * @private
     */
    Select.prototype.ngAfterContentInit = function () {
        this._updOpts();
    };
    /**
     * @private
     */
    Select.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function (val) {
            console.debug('select, onChange', val);
            fn(val);
            _this._values = Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val];
            _this._updOpts();
            _this.onTouched();
        };
    };
    /**
     * @private
     */
    Select.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @private
     */
    Select.prototype.onChange = function (val) {
        // onChange used when there is not an ngControl
        console.debug('select, onChange w/out ngControl', val);
        this._values = Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val];
        this._updOpts();
        this.onTouched();
    };
    /**
     * @private
     */
    Select.prototype.onTouched = function () {};
    /**
     * @private
     */
    Select.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
    };
    /** @nocollapse */
    Select.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-select',
            template: '<div *ngIf="!_text" class="select-placeholder select-text">{{placeholder}}</div>' + '<div *ngIf="_text" class="select-text">{{_text}}</div>' + '<div class="select-icon">' + '<div class="select-icon-inner"></div>' + '</div>' + '<button aria-haspopup="true" ' + '[id]="id" ' + 'category="item-cover" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
            host: {
                '[class.select-disabled]': '_disabled'
            },
            providers: [exports.SELECT_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    Select.ctorParameters = [{ type: form_1.Form }, { type: core_1.ElementRef }, { type: core_1.Renderer }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }, { type: nav_controller_1.NavController, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    Select.propDecorators = {
        'cancelText': [{ type: core_1.Input }],
        'okText': [{ type: core_1.Input }],
        'placeholder': [{ type: core_1.Input }],
        'alertOptions': [{ type: core_1.Input }],
        'checked': [{ type: core_1.Input }],
        'interface': [{ type: core_1.Input }],
        'ionChange': [{ type: core_1.Output }],
        'ionCancel': [{ type: core_1.Output }],
        '_click': [{ type: core_1.HostListener, args: ['click', ['$event']] }],
        '_keyup': [{ type: core_1.HostListener, args: ['keyup.space'] }],
        'multiple': [{ type: core_1.Input }],
        'options': [{ type: core_1.ContentChildren, args: [option_1.Option] }],
        'disabled': [{ type: core_1.Input }]
    };
    return Select;
}();
exports.Select = Select;

/***/ },
/* 877 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var platform_1 = __webpack_require__(72);
/**
 * @private
 */
var DisplayWhen = function () {
    function DisplayWhen(conditions, platform, ngZone) {
        var _this = this;
        this.isMatch = false;
        this.platform = platform;
        if (!conditions) return;
        this.conditions = conditions.split(',');
        // check if its one of the matching platforms first
        // a platform does not change during the life of an app
        for (var i = 0; i < this.conditions.length; i++) {
            if (this.conditions[i] && platform.is(this.conditions[i])) {
                this.isMatch = true;
                return;
            }
        }
        if (this.orientation()) {
            // add window resize listener
            platform.onResize(function () {
                ngZone.run(function () {
                    _this.orientation();
                });
            });
            return;
        }
    }
    DisplayWhen.prototype.orientation = function () {
        for (var i = 0; i < this.conditions.length; i++) {
            if (this.conditions[i] === 'portrait') {
                this.isMatch = this.platform.isPortrait();
                return true;
            }
            if (this.conditions[i] === 'landscape') {
                this.isMatch = this.platform.isLandscape();
                return true;
            }
        }
    };
    return DisplayWhen;
}();
exports.DisplayWhen = DisplayWhen;
var ShowWhen = function (_super) {
    __extends(ShowWhen, _super);
    function ShowWhen(showWhen, platform, ngZone) {
        _super.call(this, showWhen, platform, ngZone);
    }
    /** @nocollapse */
    ShowWhen.decorators = [{ type: core_1.Directive, args: [{
            selector: '[showWhen]',
            host: {
                '[class.hidden-show-when]': '!isMatch'
            }
        }] }];
    /** @nocollapse */
    ShowWhen.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Attribute, args: ['showWhen'] }] }, { type: platform_1.Platform }, { type: core_1.NgZone }];
    return ShowWhen;
}(DisplayWhen);
exports.ShowWhen = ShowWhen;
var HideWhen = function (_super) {
    __extends(HideWhen, _super);
    function HideWhen(hideWhen, platform, ngZone) {
        _super.call(this, hideWhen, platform, ngZone);
    }
    /** @nocollapse */
    HideWhen.decorators = [{ type: core_1.Directive, args: [{
            selector: '[hideWhen]',
            host: {
                '[class.hidden-hide-when]': 'isMatch'
            }
        }] }];
    /** @nocollapse */
    HideWhen.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Attribute, args: ['hideWhen'] }] }, { type: platform_1.Platform }, { type: core_1.NgZone }];
    return HideWhen;
}(DisplayWhen);
exports.HideWhen = HideWhen;

/***/ },
/* 878 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var animation_1 = __webpack_require__(147);
var gesture_1 = __webpack_require__(508);
var dom_1 = __webpack_require__(17);
var util_1 = __webpack_require__(7);
var util_2 = __webpack_require__(209);
var ion_1 = __webpack_require__(58);
var swiper_widget_1 = __webpack_require__(879);
var Slides = function (_super) {
    __extends(Slides, _super);
    function Slides(elementRef, renderer) {
        var _this = this;
        _super.call(this, elementRef);
        this.ionWillChange = new core_1.EventEmitter();
        this.ionDidChange = new core_1.EventEmitter();
        this.ionDrag = new core_1.EventEmitter();
        this.rapidUpdate = util_1.debounce(function () {
            _this.update();
        }, 10);
        this.id = ++slidesId;
        this.slideId = 'slides-' + this.id;
        renderer.setElementClass(elementRef.nativeElement, this.slideId, true);
    }
    /**
     * @private
     */
    Slides.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.options) {
            this.options = {};
        }
        if (util_1.isPresent(this.pager)) {
            // beta.5 2016-04-18 deprecated warning
            // Pager should be passed as an option
            console.warn('The "pager" attribute has been deprecated. Please pass it in options.');
            // Remove this with the deprecation warning
            this.showPager = util_1.isTrueProperty(this.pager);
        }
        if (util_1.isPresent(this.zoom)) {
            // beta.5 2016-04-18 deprecated warning
            // Zoom should be passed as an option
            console.warn('The "zoom" attribute has been deprecated. Please pass it in options.');
        }
        if (util_1.isPresent(this.options.pager)) {
            this.showPager = util_1.isTrueProperty(this.options.pager);
        }
        var paginationId = '.' + this.slideId + ' .swiper-pagination';
        var options = util_1.defaults({
            pagination: paginationId
        }, this.options);
        options.onTap = function (swiper, e) {
            _this.onTap(swiper, e);
            return _this.options.onTap && _this.options.onTap(swiper, e);
        };
        options.onClick = function (swiper, e) {
            _this.onClick(swiper, e);
            return _this.options.onClick && _this.options.onClick(swiper, e);
        };
        options.onDoubleTap = function (swiper, e) {
            _this.onDoubleTap(swiper, e);
            return _this.options.onDoubleTap && _this.options.onDoubleTap(swiper, e);
        };
        options.onTransitionStart = function (swiper, e) {
            _this.onTransitionStart(swiper, e);
            return _this.options.onTransitionStart && _this.options.onTransitionStart(swiper, e);
        };
        options.onTransitionEnd = function (swiper, e) {
            _this.onTransitionEnd(swiper, e);
            return _this.options.onTransitionEnd && _this.options.onTransitionEnd(swiper, e);
        };
        options.onSlideChangeStart = function (swiper) {
            _this.ionWillChange.emit(swiper);
            return _this.options.onSlideChangeStart && _this.options.onSlideChangeStart(swiper);
        };
        options.onSlideChangeEnd = function (swiper) {
            _this.ionDidChange.emit(swiper);
            return _this.options.onSlideChangeEnd && _this.options.onSlideChangeEnd(swiper);
        };
        options.onLazyImageLoad = function (swiper, slide, img) {
            return _this.options.onLazyImageLoad && _this.options.onLazyImageLoad(swiper, slide, img);
        };
        options.onLazyImageReady = function (swiper, slide, img) {
            return _this.options.onLazyImageReady && _this.options.onLazyImageReady(swiper, slide, img);
        };
        options.onSliderMove = function (swiper, e) {
            _this.ionDrag.emit(swiper);
            return _this.options.onSliderMove && _this.options.onSliderMove(swiper, e);
        };
        setTimeout(function () {
            var swiper = new swiper_widget_1.Swiper(_this.getNativeElement().children[0], options);
            _this.slider = swiper;
        });
        /*
        * TODO: Finish this
        if (isTrueProperty(this.zoom)) {
          this.enableZoom = true;
          setTimeout(() => {
            this.initZoom();
          })
        }
        */
    };
    /**
     * @private
     */
    Slides.prototype.onTap = function (swiper, e) {};
    /**
     * @private
     */
    Slides.prototype.onClick = function (swiper, e) {};
    /**
     * @private
     */
    Slides.prototype.onDoubleTap = function (swiper, e) {
        this.toggleZoom(swiper, e);
    };
    /**
     * @private
     */
    Slides.prototype.onLazyImageLoad = function (swiper, slide, img) {};
    /**
     * @private
     */
    Slides.prototype.onLazyImageReady = function (swiper, slide, img) {};
    /*
    nextButton(swiper: any, e: any) {
    }
    prevButton() {
    }
    indexButton() {
    }
    */
    /**
     * @private
     */
    Slides.prototype.initZoom = function () {
        var _this = this;
        this.zoomDuration = this.zoomDuration || 230;
        this.maxScale = this.zoomMax || 3;
        this.zoomElement = this.getNativeElement().children[0].children[0];
        this.zoomElement && this.zoomElement.classList.add('ion-scroll-zoom');
        this.zoomGesture = new gesture_1.Gesture(this.zoomElement);
        this.zoomGesture.listen();
        this.scale = 1;
        this.zoomLastPosX = 0;
        this.zoomLastPosY = 0;
        var lastScale,
            startX,
            startY,
            posX = 0,
            posY = 0,
            zoomRect;
        this.viewportWidth = this.getNativeElement().offsetWidth;
        this.viewportHeight = this.getNativeElement().offsetHeight;
        this.zoomElement.addEventListener('touchstart', function (e) {
            _this.onTouchStart(e);
        });
        this.zoomElement.addEventListener('touchmove', function (e) {
            _this.onTouchMove(e);
        });
        this.zoomElement.addEventListener('touchend', function (e) {
            _this.onTouchEnd(e);
        });
        this.zoomGesture.on('pinchstart', function (e) {
            lastScale = _this.scale;
            console.debug('Last scale', e.scale);
        });
        this.zoomGesture.on('pinch', function (e) {
            _this.scale = Math.max(1, Math.min(lastScale * e.scale, 10));
            console.debug('Scaling', _this.scale);
            _this.zoomElement.style[dom_1.CSS.transform] = 'scale(' + _this.scale + ')';
            zoomRect = _this.zoomElement.getBoundingClientRect();
        });
        this.zoomGesture.on('pinchend', function () {
            // last_scale = Math.max(1, Math.min(last_scale * e.scale, 10));
            if (_this.scale > _this.maxScale) {
                var za = new animation_1.Animation(_this.zoomElement).duration(_this.zoomDuration).easing('linear').from('scale', _this.scale).to('scale', _this.maxScale);
                za.play();
                _this.scale = _this.maxScale;
            }
        });
    };
    /**
     * @private
     */
    Slides.prototype.resetZoom = function () {
        if (this.zoomElement) {
            this.zoomElement.parentElement.style[dom_1.CSS.transform] = '';
            this.zoomElement.style[dom_1.CSS.transform] = 'scale(1)';
        }
        this.scale = 1;
        this.zoomLastPosX = 0;
        this.zoomLastPosY = 0;
    };
    /**
     * @private
     */
    Slides.prototype.toggleZoom = function (swiper, e) {
        console.debug('Try toggle zoom');
        if (!this.enableZoom) {
            return;
        }
        console.debug('Toggling zoom', e);
        /*
        let x = e.pointers[0].clientX;
        let y = e.pointers[0].clientY;
             let mx = this.viewportWidth / 2;
        let my = this.viewportHeight / 2;
             let tx, ty;
             if (x > mx) {
          // Greater than half
          tx = -x;
        } else {
          // Less than or equal to half
          tx = (this.viewportWidth - x);
        }
        if (y > my) {
          ty = -y;
        } else {
          ty = y-my;
        }
             console.debug(y);
        */
        var zi = new animation_1.Animation(this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
        var zw = new animation_1.Animation(this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
        var za = new animation_1.Animation();
        za.add(zi);
        if (this.scale > 1) {
            // zoom out
            // zw.fromTo('translateX', posX + 'px', '0px');
            // zw.fromTo('translateY', posY + 'px', '0px');
            zi.from('scale', this.scale);
            zi.to('scale', 1);
            za.play();
            // posX = 0;
            // posY = 0;
            this.scale = 1;
        } else {
            // zoom in
            // zw.fromTo('translateX', posX + 'px', tx + 'px');
            // zw.fromTo('translateY', posY + 'px', ty + 'px');
            zi.from('scale', this.scale);
            zi.to('scale', this.maxScale);
            za.play();
            // posX = tx;
            // posY = ty;
            this.scale = this.maxScale;
        }
    };
    /**
     * @private
     */
    Slides.prototype.onTransitionStart = function (swiper, e) {};
    /**
     * @private
     */
    Slides.prototype.onTransitionEnd = function (swiper, e) {};
    /**
     * @private
     */
    Slides.prototype.onTouchStart = function (e) {
        console.debug('Touch start', e);
        // TODO: Support mice as well
        var target = util_2.dom.closest(e.target, '.slide').children[0].children[0];
        this.touch = {
            x: null,
            y: null,
            startX: e.touches[0].clientX,
            startY: e.touches[0].clientY,
            deltaX: 0,
            deltaY: 0,
            lastX: 0,
            lastY: 0,
            target: target.parentElement,
            zoomable: target,
            zoomableWidth: target.offsetWidth,
            zoomableHeight: target.offsetHeight
        };
        console.debug('Target', this.touch.target);
        // TODO: android prevent default
    };
    /**
     * @private
     */
    Slides.prototype.onTouchMove = function (e) {
        this.touch.deltaX = e.touches[0].clientX - this.touch.startX;
        this.touch.deltaY = e.touches[0].clientY - this.touch.startY;
        // TODO: Make sure we need to transform (image is bigger than viewport)
        var zoomableScaledWidth = this.touch.zoomableWidth * this.scale;
        var zoomableScaledHeight = this.touch.zoomableHeight * this.scale;
        var x1 = Math.min(this.viewportWidth / 2 - zoomableScaledWidth / 2, 0);
        var x2 = -x1;
        var y1 = Math.min(this.viewportHeight / 2 - zoomableScaledHeight / 2, 0);
        var y2 = -y1;
        console.debug('BOUNDS', x1, x2, y1, y2);
        if (this.scale <= 1) {
            return;
        }
        console.debug('PAN', e);
        // move image
        this.touch.x = this.touch.deltaX + this.touch.lastX;
        this.touch.y = this.touch.deltaY + this.touch.lastY;
        if (this.touch.x < x1) {
            console.debug('OUT ON LEFT');
        }
        if (this.touch.x > x2) {
            console.debug('OUT ON RIGHT');
        }
        if (this.touch.x > this.viewportWidth) {} else if (-this.touch.x > this.viewportWidth) {} else {
            console.debug('TRANSFORM', this.touch.x, this.touch.y, this.touch.target);
            // this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
            this.touch.target.style[dom_1.CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    };
    /**
     * @private
     */
    Slides.prototype.onTouchEnd = function (e) {
        console.debug('PANEND', e);
        if (this.scale > 1) {
            if (Math.abs(this.touch.x) > this.viewportWidth) {
                // TODO what is posX?
                var posX = posX > 0 ? this.viewportWidth - 1 : -(this.viewportWidth - 1);
                console.debug('Setting on posx', this.touch.x);
            }
            /*
            if (posY > this.viewportHeight/2) {
              let z = new Animation(this.zoomElement.parentElement);
              z.fromTo('translateY', posY + 'px', Math.min(this.viewportHeight/2 + 30, posY));
              z.play();
            } else {
              let z = new Animation(this.zoomElement.parentElement);
              z.fromTo('translateY', posY + 'px', Math.max(this.viewportHeight/2 - 30, posY));
              z.play();
            }
            */
            this.touch.lastX = this.touch.x;
            this.touch.lastY = this.touch.y;
        }
    };
    /**
     * @private
     * Update the underlying slider implementation. Call this if you've added or removed
     * child slides.
     */
    Slides.prototype.update = function () {
        var _this = this;
        setTimeout(function () {
            _this.slider.update();
            // Don't allow pager to show with > 10 slides
            if (_this.length() > 10) {
                _this.showPager = false;
            }
        });
    };
    /**
     * Transition to the specified slide.
     *
     * @param {number} index  The index number of the slide.
     * @param {number} speed  Transition duration (in ms). Optional.
     * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
     */
    Slides.prototype.slideTo = function (index, speed, runCallbacks) {
        this.slider.slideTo(index, speed, runCallbacks);
    };
    /**
     * Transition to the next slide.
     *
     * @param {number} speed  Transition duration (in ms). Optional.
     * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
     */
    Slides.prototype.slideNext = function (speed, runCallbacks) {
        this.slider.slideNext(runCallbacks, speed);
    };
    /**
     * Transition to the previous slide.
     *
     * @param {number} speed  Transition duration (in ms). Optional.
     * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
     */
    Slides.prototype.slidePrev = function (speed, runCallbacks) {
        this.slider.slidePrev(runCallbacks, speed);
    };
    /**
     * Get the index of the active slide.
     *
     * @returns {number} The index number of the current slide.
     */
    Slides.prototype.getActiveIndex = function () {
        return this.slider.activeIndex;
    };
    /**
     * Get the index of the previous slide.
     *
     * @returns {number} The index number of the previous slide.
     */
    Slides.prototype.getPreviousIndex = function () {
        return this.slider.previousIndex;
    };
    /**
     * Get the total number of slides.
     *
     * @returns {number} The total number of slides.
     */
    Slides.prototype.length = function () {
        return this.slider.slides.length;
    };
    /**
     * Get whether or not the current slide is the last slide.
     *
     * @returns {boolean} If the slide is the last slide or not.
     */
    Slides.prototype.isEnd = function () {
        return this.slider.isEnd;
    };
    /**
     * Get whether or not the current slide is the first slide.
     *
     * @returns {boolean} If the slide is the first slide or not.
     */
    Slides.prototype.isBeginning = function () {
        return this.slider.isBeginning;
    };
    /**
     * Get the `Swiper` instance.
     *
     * The Slides component wraps the `Swiper` component built by iDangero.us. See the
     * [Swiper API Docs](http://idangero.us/swiper/api/) for information on using
     * the `Swiper` instance directly.
     *
     * @returns {Swiper}
     */
    Slides.prototype.getSlider = function () {
        return this.slider;
    };
    /** @nocollapse */
    Slides.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-slides',
            template: '<div class="swiper-container">' + '<div class="swiper-wrapper">' + '<ng-content></ng-content>' + '</div>' + '<div [class.hide]="!showPager" class="swiper-pagination"></div>' + '</div>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Slides.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }];
    /** @nocollapse */
    Slides.propDecorators = {
        'options': [{ type: core_1.Input }],
        'pager': [{ type: core_1.Input }],
        'zoom': [{ type: core_1.Input }],
        'zoomDuration': [{ type: core_1.Input }],
        'zoomMax': [{ type: core_1.Input }],
        'ionWillChange': [{ type: core_1.Output }],
        'ionDidChange': [{ type: core_1.Output }],
        'ionDrag': [{ type: core_1.Output }]
    };
    return Slides;
}(ion_1.Ion);
exports.Slides = Slides;
var Slide = function () {
    function Slide(elementRef, slides) {
        this.slides = slides;
        this.ele = elementRef.nativeElement;
        this.ele.classList.add('swiper-slide');
        slides.rapidUpdate();
    }
    Slide.prototype.ngOnDestroy = function () {
        this.slides.rapidUpdate();
    };
    /** @nocollapse */
    Slide.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-slide',
            template: '<div class="slide-zoom"><ng-content></ng-content></div>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Slide.ctorParameters = [{ type: core_1.ElementRef }, { type: Slides, decorators: [{ type: core_1.Host }] }];
    /** @nocollapse */
    Slide.propDecorators = {
        'zoom': [{ type: core_1.Input }]
    };
    return Slide;
}();
exports.Slide = Slide;
var SlideLazy = function () {
    function SlideLazy() {}
    SlideLazy.decorators = [{ type: core_1.Directive, args: [{
            selector: 'slide-lazy',
            host: {
                'class': 'swiper-lazy'
            }
        }] }];
    return SlideLazy;
}();
exports.SlideLazy = SlideLazy;
var slidesId = -1;

/***/ },
/* 879 */
/***/ function(module, exports) {

"use strict";
/**
 * Swiper 3.1.2
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 *
 * http://www.idangero.us/swiper/
 *
 * Copyright 2015, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: August 22, 2015
 */'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};var $;/*===========================
  Swiper
  ===========================*/module.exports.Swiper=Swiper;function Swiper(container,params){if(!(this instanceof Swiper))return new Swiper(container,params);var defaults={direction:'horizontal',touchEventsTarget:'container',initialSlide:0,speed:300,// autoplay
autoplay:false,autoplayDisableOnInteraction:true,// To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
iOSEdgeSwipeDetection:false,iOSEdgeSwipeThreshold:20,// Free mode
freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeSticky:false,// Set wrapper width
setWrapperSize:false,// Virtual Translate
virtualTranslate:false,// Effects
effect:'slide',// 'slide' or 'fade' or 'cube' or 'coverflow'
coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},cube:{slideShadows:true,shadow:true,shadowOffset:20,shadowScale:0.94},fade:{crossFade:false},// Parallax
parallax:false,// Scrollbar
scrollbar:null,scrollbarHide:true,// Keyboard Mousewheel
keyboardControl:false,mousewheelControl:false,mousewheelReleaseOnEdges:false,mousewheelInvert:false,mousewheelForceToAxis:false,mousewheelSensitivity:1,// Hash Navigation
hashnav:false,// Slides grid
spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:'column',slidesPerGroup:1,centeredSlides:false,slidesOffsetBefore:0,// in px
slidesOffsetAfter:0,// in px
// Round length
roundLengths:false,// Touches
touchRatio:1,touchAngle:45,simulateTouch:true,shortSwipes:true,longSwipes:true,longSwipesRatio:0.5,longSwipesMs:300,followFinger:true,onlyExternal:false,threshold:0,touchMoveStopPropagation:true,// Pagination
pagination:null,paginationElement:'span',paginationClickable:false,paginationHide:false,paginationBulletRender:null,// Resistance
resistance:true,resistanceRatio:0.85,// Next/prev buttons
nextButton:null,prevButton:null,// Progress
watchSlidesProgress:false,watchSlidesVisibility:false,// Cursor
grabCursor:false,// Clicks
preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false,// Lazy Loading
lazyLoading:false,lazyLoadingInPrevNext:false,lazyLoadingOnTransitionStart:false,// Images
preloadImages:true,updateOnImagesReady:true,// loop
loop:false,loopAdditionalSlides:0,loopedSlides:null,// Control
control:undefined,controlInverse:false,controlBy:'slide',//or 'container'
// Swiping/no swiping
allowSwipeToPrev:true,allowSwipeToNext:true,swipeHandler:null,//'.swipe-handler',
noSwiping:true,noSwipingClass:'swiper-no-swiping',// NS
slideClass:'swiper-slide',slideActiveClass:'swiper-slide-active',slideVisibleClass:'swiper-slide-visible',slideDuplicateClass:'swiper-slide-duplicate',slideNextClass:'swiper-slide-next',slidePrevClass:'swiper-slide-prev',wrapperClass:'swiper-wrapper',bulletClass:'swiper-pagination-bullet',bulletActiveClass:'swiper-pagination-bullet-active',buttonDisabledClass:'swiper-button-disabled',paginationHiddenClass:'swiper-pagination-hidden',// Observer
observer:false,observeParents:false,// Accessibility
a11y:false,prevSlideMessage:'Previous slide',nextSlideMessage:'Next slide',firstSlideMessage:'This is the first slide',lastSlideMessage:'This is the last slide',paginationBulletMessage:'Go to slide {{index}}',// Callbacks
runCallbacksOnInit:true/*
          Callbacks:
          onInit: function (swiper)
          onDestroy: function (swiper)
          onClick: function (swiper, e)
          onTap: function (swiper, e)
          onDoubleTap: function (swiper, e)
          onSliderMove: function (swiper, e)
          onSlideChangeStart: function (swiper)
          onSlideChangeEnd: function (swiper)
          onTransitionStart: function (swiper)
          onTransitionEnd: function (swiper)
          onImagesReady: function (swiper)
          onProgress: function (swiper, progress)
          onTouchStart: function (swiper, e)
          onTouchMove: function (swiper, e)
          onTouchMoveOpposite: function (swiper, e)
          onTouchEnd: function (swiper, e)
          onReachBeginning: function (swiper)
          onReachEnd: function (swiper)
          onSetTransition: function (swiper, duration)
          onSetTranslate: function (swiper, translate)
          onAutoplayStart: function (swiper)
          onAutoplayStop: function (swiper),
          onLazyImageLoad: function (swiper, slide, image)
          onLazyImageReady: function (swiper, slide, image)
          */};var initialVirtualTranslate=params&&params.virtualTranslate;params=params||{};for(var def in defaults){if(typeof params[def]==='undefined'){params[def]=defaults[def];}else if(_typeof(params[def])==='object'){for(var deepDef in defaults[def]){if(typeof params[def][deepDef]==='undefined'){params[def][deepDef]=defaults[def][deepDef];}}}}// Swiper
var s=this;// Version
s.version='3.1.0';// Params
s.params=params;// Classname
s.classNames=[];/*=========================
        Dom Library and plugins
        ===========================*/if(typeof $!=='undefined'&&typeof Dom7!=='undefined'){$=Dom7;}if(typeof $==='undefined'){if(typeof Dom7==='undefined'){$=window.Dom7||window.Zepto||window.jQuery;}else{$=Dom7;}if(!$)return;}// Export it to Swiper instance
s.$=$;/*=========================
        Preparation - Define Container, Wrapper and Pagination
        ===========================*/s.container=$(container);if(s.container.length===0)return;if(s.container.length>1){s.container.each(function(){new Swiper(this,params);});return;}// Save instance in container HTML Element and in data
s.container[0].swiper=s;s.container.data('swiper',s);s.classNames.push('swiper-container-'+s.params.direction);if(s.params.freeMode){s.classNames.push('swiper-container-free-mode');}if(!s.support.flexbox){s.classNames.push('swiper-container-no-flexbox');s.params.slidesPerColumn=1;}// Enable slides progress when required
if(s.params.parallax||s.params.watchSlidesVisibility){s.params.watchSlidesProgress=true;}// Coverflow / 3D
if(['cube','coverflow'].indexOf(s.params.effect)>=0){if(s.support.transforms3d){s.params.watchSlidesProgress=true;s.classNames.push('swiper-container-3d');}else{s.params.effect='slide';}}if(s.params.effect!=='slide'){s.classNames.push('swiper-container-'+s.params.effect);}if(s.params.effect==='cube'){s.params.resistanceRatio=0;s.params.slidesPerView=1;s.params.slidesPerColumn=1;s.params.slidesPerGroup=1;s.params.centeredSlides=false;s.params.spaceBetween=0;s.params.virtualTranslate=true;s.params.setWrapperSize=false;}if(s.params.effect==='fade'){s.params.slidesPerView=1;s.params.slidesPerColumn=1;s.params.slidesPerGroup=1;s.params.watchSlidesProgress=true;s.params.spaceBetween=0;if(typeof initialVirtualTranslate==='undefined'){s.params.virtualTranslate=true;}}// Grab Cursor
if(s.params.grabCursor&&s.support.touch){s.params.grabCursor=false;}// Wrapper
s.wrapper=s.container.children('.'+s.params.wrapperClass);// Pagination
if(s.params.pagination){s.paginationContainer=$(s.params.pagination);if(s.params.paginationClickable){s.paginationContainer.addClass('swiper-pagination-clickable');}}// Is Horizontal
function isH(){return s.params.direction==='horizontal';}// RTL
s.rtl=isH()&&(s.container[0].dir.toLowerCase()==='rtl'||s.container.css('direction')==='rtl');if(s.rtl){s.classNames.push('swiper-container-rtl');}// Wrong RTL support
if(s.rtl){s.wrongRTL=s.wrapper.css('display')==='-webkit-box';}// Columns
if(s.params.slidesPerColumn>1){s.classNames.push('swiper-container-multirow');}// Check for Android
if(s.device.android){s.classNames.push('swiper-container-android');}// Add classes
s.container.addClass(s.classNames.join(' '));// Translate
s.translate=0;// Progress
s.progress=0;// Velocity
s.velocity=0;/*=========================
        Locks, unlocks
        ===========================*/s.lockSwipeToNext=function(){s.params.allowSwipeToNext=false;};s.lockSwipeToPrev=function(){s.params.allowSwipeToPrev=false;};s.lockSwipes=function(){s.params.allowSwipeToNext=s.params.allowSwipeToPrev=false;};s.unlockSwipeToNext=function(){s.params.allowSwipeToNext=true;};s.unlockSwipeToPrev=function(){s.params.allowSwipeToPrev=true;};s.unlockSwipes=function(){s.params.allowSwipeToNext=s.params.allowSwipeToPrev=true;};/*=========================
        Round helper
        ===========================*/function round(a){return Math.floor(a);}/*=========================
        Set grab cursor
        ===========================*/if(s.params.grabCursor){s.container[0].style.cursor='move';s.container[0].style.cursor='-webkit-grab';s.container[0].style.cursor='-moz-grab';s.container[0].style.cursor='grab';}/*=========================
        Update on Images Ready
        ===========================*/s.imagesToLoad=[];s.imagesLoaded=0;s.loadImage=function(imgElement,src,checkForComplete,callback){var image;function onReady(){if(callback)callback();}if(!imgElement.complete||!checkForComplete){if(src){image=new window.Image();image.onload=onReady;image.onerror=onReady;image.src=src;}else{onReady();}}else{//image already loaded...
onReady();}};s.preloadImages=function(){s.imagesToLoad=s.container.find('img');function _onReady(){if(typeof s==='undefined'||s===null)return;if(s.imagesLoaded!==undefined)s.imagesLoaded++;if(s.imagesLoaded===s.imagesToLoad.length){if(s.params.updateOnImagesReady)s.update();s.emit('onImagesReady',s);}}for(var i=0;i<s.imagesToLoad.length;i++){s.loadImage(s.imagesToLoad[i],s.imagesToLoad[i].currentSrc||s.imagesToLoad[i].getAttribute('src'),true,_onReady);}};/*=========================
        Autoplay
        ===========================*/s.autoplayTimeoutId=undefined;s.autoplaying=false;s.autoplayPaused=false;function autoplay(){s.autoplayTimeoutId=setTimeout(function(){if(s.params.loop){s.fixLoop();s._slideNext();}else{if(!s.isEnd){s._slideNext();}else{if(!params.autoplayStopOnLast){s._slideTo(0);}else{s.stopAutoplay();}}}},s.params.autoplay);}s.startAutoplay=function(){if(typeof s.autoplayTimeoutId!=='undefined')return false;if(!s.params.autoplay)return false;if(s.autoplaying)return false;s.autoplaying=true;s.emit('onAutoplayStart',s);autoplay();};s.stopAutoplay=function(internal){if(!s.autoplayTimeoutId)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplaying=false;s.autoplayTimeoutId=undefined;s.emit('onAutoplayStop',s);};s.pauseAutoplay=function(speed){if(s.autoplayPaused)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplayPaused=true;if(speed===0){s.autoplayPaused=false;autoplay();}else{s.wrapper.transitionEnd(function(){if(!s)return;s.autoplayPaused=false;if(!s.autoplaying){s.stopAutoplay();}else{autoplay();}});}};/*=========================
        Min/Max Translate
        ===========================*/s.minTranslate=function(){return-s.snapGrid[0];};s.maxTranslate=function(){return-s.snapGrid[s.snapGrid.length-1];};/*=========================
        Slider/slides sizes
        ===========================*/s.updateContainerSize=function(){var width,height;if(typeof s.params.width!=='undefined'){width=s.params.width;}else{width=s.container[0].clientWidth;}if(typeof s.params.height!=='undefined'){height=s.params.height;}else{height=s.container[0].clientHeight;}if(width===0&&isH()||height===0&&!isH()){return;}//Subtract paddings
width=width-parseInt(s.container.css('padding-left'),10)-parseInt(s.container.css('padding-right'),10);height=height-parseInt(s.container.css('padding-top'),10)-parseInt(s.container.css('padding-bottom'),10);// Store values
s.width=width;s.height=height;s.size=isH()?s.width:s.height;};s.updateSlidesSize=function(){s.slides=s.wrapper.children('.'+s.params.slideClass);s.snapGrid=[];s.slidesGrid=[];s.slidesSizesGrid=[];var spaceBetween=s.params.spaceBetween,slidePosition=-s.params.slidesOffsetBefore,i,prevSlideSize=0,index=0;if(typeof spaceBetween==='string'&&spaceBetween.indexOf('%')>=0){spaceBetween=parseFloat(spaceBetween.replace('%',''))/100*s.size;}s.virtualSize=-spaceBetween;// reset margins
if(s.rtl)s.slides.css({marginLeft:'',marginTop:''});else s.slides.css({marginRight:'',marginBottom:''});var slidesNumberEvenToRows;if(s.params.slidesPerColumn>1){if(Math.floor(s.slides.length/s.params.slidesPerColumn)===s.slides.length/s.params.slidesPerColumn){slidesNumberEvenToRows=s.slides.length;}else{slidesNumberEvenToRows=Math.ceil(s.slides.length/s.params.slidesPerColumn)*s.params.slidesPerColumn;}}// Calc slides
var slideSize;var slidesPerColumn=s.params.slidesPerColumn;var slidesPerRow=slidesNumberEvenToRows/slidesPerColumn;var numFullColumns=slidesPerRow-(s.params.slidesPerColumn*slidesPerRow-s.slides.length);for(i=0;i<s.slides.length;i++){slideSize=0;var slide=s.slides.eq(i);if(s.params.slidesPerColumn>1){// Set slides order
var newSlideOrderIndex;var column,row;if(s.params.slidesPerColumnFill==='column'){column=Math.floor(i/slidesPerColumn);row=i-column*slidesPerColumn;if(column>numFullColumns||column===numFullColumns&&row===slidesPerColumn-1){if(++row>=slidesPerColumn){row=0;column++;}}newSlideOrderIndex=column+row*slidesNumberEvenToRows/slidesPerColumn;slide.css({'-webkit-box-ordinal-group':newSlideOrderIndex,'-moz-box-ordinal-group':newSlideOrderIndex,'-ms-flex-order':newSlideOrderIndex,'-webkit-order':newSlideOrderIndex,'order':newSlideOrderIndex});}else{row=Math.floor(i/slidesPerRow);column=i-row*slidesPerRow;}slide.css({'margin-top':row!==0&&s.params.spaceBetween&&s.params.spaceBetween+'px'}).attr('data-swiper-column',column).attr('data-swiper-row',row);}if(slide.css('display')==='none')continue;if(s.params.slidesPerView==='auto'){slideSize=isH()?slide.outerWidth(true):slide.outerHeight(true);if(s.params.roundLengths)slideSize=round(slideSize);}else{slideSize=(s.size-(s.params.slidesPerView-1)*spaceBetween)/s.params.slidesPerView;if(s.params.roundLengths)slideSize=round(slideSize);if(isH()){s.slides[i].style.width=slideSize+'px';}else{s.slides[i].style.height=slideSize+'px';}}s.slides[i].swiperSlideSize=slideSize;s.slidesSizesGrid.push(slideSize);if(s.params.centeredSlides){slidePosition=slidePosition+slideSize/2+prevSlideSize/2+spaceBetween;if(i===0)slidePosition=slidePosition-s.size/2-spaceBetween;if(Math.abs(slidePosition)<1/1000)slidePosition=0;if(index%s.params.slidesPerGroup===0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);}else{if(index%s.params.slidesPerGroup===0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);slidePosition=slidePosition+slideSize+spaceBetween;}s.virtualSize+=slideSize+spaceBetween;prevSlideSize=slideSize;index++;}s.virtualSize=Math.max(s.virtualSize,s.size)+s.params.slidesOffsetAfter;var newSlidesGrid;if(s.rtl&&s.wrongRTL&&(s.params.effect==='slide'||s.params.effect==='coverflow')){s.wrapper.css({width:s.virtualSize+s.params.spaceBetween+'px'});}if(!s.support.flexbox||s.params.setWrapperSize){if(isH())s.wrapper.css({width:s.virtualSize+s.params.spaceBetween+'px'});else s.wrapper.css({height:s.virtualSize+s.params.spaceBetween+'px'});}if(s.params.slidesPerColumn>1){s.virtualSize=(slideSize+s.params.spaceBetween)*slidesNumberEvenToRows;s.virtualSize=Math.ceil(s.virtualSize/s.params.slidesPerColumn)-s.params.spaceBetween;s.wrapper.css({width:s.virtualSize+s.params.spaceBetween+'px'});if(s.params.centeredSlides){newSlidesGrid=[];for(i=0;i<s.snapGrid.length;i++){if(s.snapGrid[i]<s.virtualSize+s.snapGrid[0])newSlidesGrid.push(s.snapGrid[i]);}s.snapGrid=newSlidesGrid;}}// Remove last grid elements depending on width
if(!s.params.centeredSlides){newSlidesGrid=[];for(i=0;i<s.snapGrid.length;i++){if(s.snapGrid[i]<=s.virtualSize-s.size){newSlidesGrid.push(s.snapGrid[i]);}}s.snapGrid=newSlidesGrid;if(Math.floor(s.virtualSize-s.size)>Math.floor(s.snapGrid[s.snapGrid.length-1])){s.snapGrid.push(s.virtualSize-s.size);}}if(s.snapGrid.length===0)s.snapGrid=[0];if(s.params.spaceBetween!==0){if(isH()){if(s.rtl)s.slides.css({marginLeft:spaceBetween+'px'});else s.slides.css({marginRight:spaceBetween+'px'});}else s.slides.css({marginBottom:spaceBetween+'px'});}if(s.params.watchSlidesProgress){s.updateSlidesOffset();}};s.updateSlidesOffset=function(){for(var i=0;i<s.slides.length;i++){s.slides[i].swiperSlideOffset=isH()?s.slides[i].offsetLeft:s.slides[i].offsetTop;}};/*=========================
        Slider/slides progress
        ===========================*/s.updateSlidesProgress=function(translate){if(typeof translate==='undefined'){translate=s.translate||0;}if(s.slides.length===0)return;if(typeof s.slides[0].swiperSlideOffset==='undefined')s.updateSlidesOffset();var offsetCenter=-translate;if(s.rtl)offsetCenter=translate;// Visible Slides
var containerBox=s.container[0].getBoundingClientRect();var sideBefore=isH()?'left':'top';var sideAfter=isH()?'right':'bottom';s.slides.removeClass(s.params.slideVisibleClass);for(var i=0;i<s.slides.length;i++){var slide=s.slides[i];var slideProgress=(offsetCenter-slide.swiperSlideOffset)/(slide.swiperSlideSize+s.params.spaceBetween);if(s.params.watchSlidesVisibility){var slideBefore=-(offsetCenter-slide.swiperSlideOffset);var slideAfter=slideBefore+s.slidesSizesGrid[i];var isVisible=slideBefore>=0&&slideBefore<s.size||slideAfter>0&&slideAfter<=s.size||slideBefore<=0&&slideAfter>=s.size;if(isVisible){s.slides.eq(i).addClass(s.params.slideVisibleClass);}}slide.progress=s.rtl?-slideProgress:slideProgress;}};s.updateProgress=function(translate){if(typeof translate==='undefined'){translate=s.translate||0;}var translatesDiff=s.maxTranslate()-s.minTranslate();if(translatesDiff===0){s.progress=0;s.isBeginning=s.isEnd=true;}else{s.progress=(translate-s.minTranslate())/translatesDiff;s.isBeginning=s.progress<=0;s.isEnd=s.progress>=1;}if(s.isBeginning)s.emit('onReachBeginning',s);if(s.isEnd)s.emit('onReachEnd',s);if(s.params.watchSlidesProgress)s.updateSlidesProgress(translate);s.emit('onProgress',s,s.progress);};s.updateActiveIndex=function(){var translate=s.rtl?s.translate:-s.translate;var newActiveIndex,i,snapIndex;for(i=0;i<s.slidesGrid.length;i++){if(typeof s.slidesGrid[i+1]!=='undefined'){if(translate>=s.slidesGrid[i]&&translate<s.slidesGrid[i+1]-(s.slidesGrid[i+1]-s.slidesGrid[i])/2){newActiveIndex=i;}else if(translate>=s.slidesGrid[i]&&translate<s.slidesGrid[i+1]){newActiveIndex=i+1;}}else{if(translate>=s.slidesGrid[i]){newActiveIndex=i;}}}// Normalize slideIndex
if(newActiveIndex<0||typeof newActiveIndex==='undefined')newActiveIndex=0;// for (i = 0; i < s.slidesGrid.length; i++) {
// if (- translate >= s.slidesGrid[i]) {
// newActiveIndex = i;
// }
// }
snapIndex=Math.floor(newActiveIndex/s.params.slidesPerGroup);if(snapIndex>=s.snapGrid.length)snapIndex=s.snapGrid.length-1;if(newActiveIndex===s.activeIndex){return;}s.snapIndex=snapIndex;s.previousIndex=s.activeIndex;s.activeIndex=newActiveIndex;s.updateClasses();};/*=========================
        Classes
        ===========================*/s.updateClasses=function(){s.slides.removeClass(s.params.slideActiveClass+' '+s.params.slideNextClass+' '+s.params.slidePrevClass);var activeSlide=s.slides.eq(s.activeIndex);// Active classes
activeSlide.addClass(s.params.slideActiveClass);activeSlide.next('.'+s.params.slideClass).addClass(s.params.slideNextClass);activeSlide.prev('.'+s.params.slideClass).addClass(s.params.slidePrevClass);// Pagination
if(s.bullets&&s.bullets.length>0){s.bullets.removeClass(s.params.bulletActiveClass);var bulletIndex;if(s.params.loop){bulletIndex=Math.ceil(s.activeIndex-s.loopedSlides)/s.params.slidesPerGroup;if(bulletIndex>s.slides.length-1-s.loopedSlides*2){bulletIndex=bulletIndex-(s.slides.length-s.loopedSlides*2);}if(bulletIndex>s.bullets.length-1)bulletIndex=bulletIndex-s.bullets.length;}else{if(typeof s.snapIndex!=='undefined'){bulletIndex=s.snapIndex;}else{bulletIndex=s.activeIndex||0;}}if(s.paginationContainer.length>1){s.bullets.each(function(){if($(this).index()===bulletIndex)$(this).addClass(s.params.bulletActiveClass);});}else{s.bullets.eq(bulletIndex).addClass(s.params.bulletActiveClass);}}// Next/active buttons
if(!s.params.loop){if(s.params.prevButton){if(s.isBeginning){$(s.params.prevButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.disable($(s.params.prevButton));}else{$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.enable($(s.params.prevButton));}}if(s.params.nextButton){if(s.isEnd){$(s.params.nextButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.disable($(s.params.nextButton));}else{$(s.params.nextButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.enable($(s.params.nextButton));}}}};/*=========================
        Pagination
        ===========================*/s.updatePagination=function(){if(!s.params.pagination)return;if(s.paginationContainer&&s.paginationContainer.length>0){var bulletsHTML='';var numberOfBullets=s.params.loop?Math.ceil((s.slides.length-s.loopedSlides*2)/s.params.slidesPerGroup):s.snapGrid.length;for(var i=0;i<numberOfBullets;i++){if(s.params.paginationBulletRender){bulletsHTML+=s.params.paginationBulletRender(i,s.params.bulletClass);}else{bulletsHTML+='<'+s.params.paginationElement+' class="'+s.params.bulletClass+'"></'+s.params.paginationElement+'>';}}s.paginationContainer.html(bulletsHTML);s.bullets=s.paginationContainer.find('.'+s.params.bulletClass);if(s.params.paginationClickable&&s.params.a11y&&s.a11y){s.a11y.initPagination();}}};/*=========================
        Common update method
        ===========================*/s.update=function(updateTranslate){s.updateContainerSize();s.updateSlidesSize();s.updateProgress();s.updatePagination();s.updateClasses();if(s.params.scrollbar&&s.scrollbar){s.scrollbar.set();}function forceSetTranslate(){newTranslate=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}if(updateTranslate){var translated,newTranslate;if(s.controller&&s.controller.spline){s.controller.spline=undefined;}if(s.params.freeMode){forceSetTranslate();}else{if((s.params.slidesPerView==='auto'||s.params.slidesPerView>1)&&s.isEnd&&!s.params.centeredSlides){translated=s.slideTo(s.slides.length-1,0,false,true);}else{translated=s.slideTo(s.activeIndex,0,false,true);}if(!translated){forceSetTranslate();}}}};/*=========================
        Resize Handler
        ===========================*/s.onResize=function(forceUpdatePagination){// Disable locks on resize
var allowSwipeToPrev=s.params.allowSwipeToPrev;var allowSwipeToNext=s.params.allowSwipeToNext;s.params.allowSwipeToPrev=s.params.allowSwipeToNext=true;s.updateContainerSize();s.updateSlidesSize();if(s.params.slidesPerView==='auto'||s.params.freeMode||forceUpdatePagination)s.updatePagination();if(s.params.scrollbar&&s.scrollbar){s.scrollbar.set();}if(s.controller&&s.controller.spline){s.controller.spline=undefined;}if(s.params.freeMode){var newTranslate=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}else{s.updateClasses();if((s.params.slidesPerView==='auto'||s.params.slidesPerView>1)&&s.isEnd&&!s.params.centeredSlides){s.slideTo(s.slides.length-1,0,false,true);}else{s.slideTo(s.activeIndex,0,false,true);}}// Return locks after resize
s.params.allowSwipeToPrev=allowSwipeToPrev;s.params.allowSwipeToNext=allowSwipeToNext;};/*=========================
        Events
        ===========================*///Define Touch Events
var desktopEvents=['mousedown','mousemove','mouseup'];if(window.navigator.pointerEnabled)desktopEvents=['pointerdown','pointermove','pointerup'];else if(window.navigator.msPointerEnabled)desktopEvents=['MSPointerDown','MSPointerMove','MSPointerUp'];s.touchEvents={start:s.support.touch||!s.params.simulateTouch?'touchstart':desktopEvents[0],move:s.support.touch||!s.params.simulateTouch?'touchmove':desktopEvents[1],end:s.support.touch||!s.params.simulateTouch?'touchend':desktopEvents[2]};// WP8 Touch Events Fix
if(window.navigator.pointerEnabled||window.navigator.msPointerEnabled){(s.params.touchEventsTarget==='container'?s.container:s.wrapper).addClass('swiper-wp8-'+s.params.direction);}// Attach/detach events
s.initEvents=function(detach){console.debug('swiper initEvents',detach?'detach':'attach');var actionDom=detach?'off':'on';var action=detach?'removeEventListener':'addEventListener';var touchEventsTarget=s.params.touchEventsTarget==='container'?s.container[0]:s.wrapper[0];var target=s.support.touch?touchEventsTarget:document;var moveCapture=s.params.nested?true:false;//Touch Events
if(s.browser.ie){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);target[action](s.touchEvents.move,s.onTouchMove,moveCapture);target[action](s.touchEvents.end,s.onTouchEnd,false);}else{if(s.support.touch){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);touchEventsTarget[action](s.touchEvents.move,s.onTouchMove,moveCapture);touchEventsTarget[action](s.touchEvents.end,s.onTouchEnd,false);}if(params.simulateTouch&&!s.device.ios&&!s.device.android){touchEventsTarget[action]('mousedown',s.onTouchStart,false);document[action]('mousemove',s.onTouchMove,moveCapture);document[action]('mouseup',s.onTouchEnd,false);}}window[action]('resize',s.onResize);// Next, Prev, Index
if(s.params.nextButton){$(s.params.nextButton)[actionDom]('click',s.onClickNext);if(s.params.a11y&&s.a11y)$(s.params.nextButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.prevButton){$(s.params.prevButton)[actionDom]('click',s.onClickPrev);if(s.params.a11y&&s.a11y)$(s.params.prevButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.pagination&&s.params.paginationClickable){$(s.paginationContainer)[actionDom]('click','.'+s.params.bulletClass,s.onClickIndex);if(s.params.a11y&&s.a11y)$(s.paginationContainer)[actionDom]('keydown','.'+s.params.bulletClass,s.a11y.onEnterKey);}// Prevent Links Clicks
if(s.params.preventClicks||s.params.preventClicksPropagation)touchEventsTarget[action]('click',s.preventClicks,true);};s.attachEvents=function(detach){s.initEvents();};s.detachEvents=function(){s.initEvents(true);};/*=========================
        Handle Clicks
        ===========================*/// Prevent Clicks
s.allowClick=true;s.preventClicks=function(e){if(!s.allowClick){if(s.params.preventClicks)e.preventDefault();if(s.params.preventClicksPropagation&&s.animating){e.stopPropagation();e.stopImmediatePropagation();}}};// Clicks
s.onClickNext=function(e){e.preventDefault();if(s.isEnd&&!s.params.loop)return;s.slideNext();};s.onClickPrev=function(e){e.preventDefault();if(s.isBeginning&&!s.params.loop)return;s.slidePrev();};s.onClickIndex=function(e){e.preventDefault();var index=$(this).index()*s.params.slidesPerGroup;if(s.params.loop)index=index+s.loopedSlides;s.slideTo(index);};/*=========================
        Handle Touches
        ===========================*/function findElementInEvent(e,selector){var el=$(e.target);if(!el.is(selector)){if(typeof selector==='string'){el=el.parents(selector);}else if(selector.nodeType){var found;el.parents().each(function(index,_el){if(_el===selector)found=selector;});if(!found)return undefined;else return selector;}}if(el.length===0){return undefined;}return el[0];}s.updateClickedSlide=function(e){var slide=findElementInEvent(e,'.'+s.params.slideClass);var slideFound=false;if(slide){for(var i=0;i<s.slides.length;i++){if(s.slides[i]===slide)slideFound=true;}}if(slide&&slideFound){s.clickedSlide=slide;s.clickedIndex=$(slide).index();}else{s.clickedSlide=undefined;s.clickedIndex=undefined;return;}if(s.params.slideToClickedSlide&&s.clickedIndex!==undefined&&s.clickedIndex!==s.activeIndex){var slideToIndex=s.clickedIndex,realIndex;if(s.params.loop){realIndex=$(s.clickedSlide).attr('data-swiper-slide-index');if(slideToIndex>s.slides.length-s.params.slidesPerView){s.fixLoop();slideToIndex=s.wrapper.children('.'+s.params.slideClass+'[data-swiper-slide-index="'+realIndex+'"]').eq(0).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else if(slideToIndex<s.params.slidesPerView-1){s.fixLoop();var duplicatedSlides=s.wrapper.children('.'+s.params.slideClass+'[data-swiper-slide-index="'+realIndex+'"]');slideToIndex=duplicatedSlides.eq(duplicatedSlides.length-1).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else{s.slideTo(slideToIndex);}}else{s.slideTo(slideToIndex);}}};var isTouched,isMoved,touchStartTime,isScrolling,currentTranslate,startTranslate,allowThresholdMove,// Form elements to match
formElements='input, select, textarea, button',// Last click time
lastClickTime=Date.now(),clickTimeout,//Velocities
velocities=[],allowMomentumBounce;// Animating Flag
s.animating=false;// Touches information
s.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};// Touch handlers
var isTouchEvent,startMoving;s.onTouchStart=function(e){if(e.originalEvent)e=e.originalEvent;isTouchEvent=e.type==='touchstart';if(!isTouchEvent&&'which'in e&&e.which===3)return;if(s.params.noSwiping&&findElementInEvent(e,'.'+s.params.noSwipingClass)){s.allowClick=true;return;}if(s.params.swipeHandler){if(!findElementInEvent(e,s.params.swipeHandler))return;}var startX=s.touches.currentX=e.type==='touchstart'?e.targetTouches[0].pageX:e.pageX;var startY=s.touches.currentY=e.type==='touchstart'?e.targetTouches[0].pageY:e.pageY;// Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
if(s.device.ios&&s.params.iOSEdgeSwipeDetection&&startX<=s.params.iOSEdgeSwipeThreshold){return;}isTouched=true;isMoved=false;isScrolling=undefined;startMoving=undefined;s.touches.startX=startX;s.touches.startY=startY;touchStartTime=Date.now();s.allowClick=true;s.updateContainerSize();s.swipeDirection=undefined;if(s.params.threshold>0)allowThresholdMove=false;if(e.type!=='touchstart'){var preventDefault=true;if($(e.target).is(formElements))preventDefault=false;if(document.activeElement&&$(document.activeElement).is(formElements)){document.activeElement.blur();}if(preventDefault){e.preventDefault();}}s.emit('onTouchStart',s,e);};s.onTouchMove=function(e){if(e.originalEvent)e=e.originalEvent;if(isTouchEvent&&e.type==='mousemove')return;if(e.preventedByNestedSwiper)return;if(s.params.onlyExternal){// isMoved = true;
s.allowClick=false;if(isTouched){s.touches.startX=s.touches.currentX=e.type==='touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.startY=s.touches.currentY=e.type==='touchmove'?e.targetTouches[0].pageY:e.pageY;touchStartTime=Date.now();}return;}if(isTouchEvent&&document.activeElement){if(e.target===document.activeElement&&$(e.target).is(formElements)){isMoved=true;s.allowClick=false;return;}}s.emit('onTouchMove',s,e);if(e.targetTouches&&e.targetTouches.length>1)return;s.touches.currentX=e.type==='touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.currentY=e.type==='touchmove'?e.targetTouches[0].pageY:e.pageY;if(typeof isScrolling==='undefined'){var touchAngle=Math.atan2(Math.abs(s.touches.currentY-s.touches.startY),Math.abs(s.touches.currentX-s.touches.startX))*180/Math.PI;isScrolling=isH()?touchAngle>s.params.touchAngle:90-touchAngle>s.params.touchAngle;}if(isScrolling){s.emit('onTouchMoveOpposite',s,e);}if(typeof startMoving==='undefined'&&s.browser.ieTouch){if(s.touches.currentX!==s.touches.startX||s.touches.currentY!==s.touches.startY){startMoving=true;}}if(!isTouched)return;if(isScrolling){isTouched=false;return;}if(!startMoving&&s.browser.ieTouch){return;}s.allowClick=false;s.emit('onSliderMove',s,e);e.preventDefault();if(s.params.touchMoveStopPropagation&&!s.params.nested){e.stopPropagation();}if(!isMoved){if(params.loop){s.fixLoop();}startTranslate=s.getWrapperTranslate();s.setWrapperTransition(0);if(s.animating){s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');}if(s.params.autoplay&&s.autoplaying){if(s.params.autoplayDisableOnInteraction){s.stopAutoplay();}else{s.pauseAutoplay();}}allowMomentumBounce=false;//Grab Cursor
if(s.params.grabCursor){s.container[0].style.cursor='move';s.container[0].style.cursor='-webkit-grabbing';s.container[0].style.cursor='-moz-grabbin';s.container[0].style.cursor='grabbing';}}isMoved=true;var diff=s.touches.diff=isH()?s.touches.currentX-s.touches.startX:s.touches.currentY-s.touches.startY;diff=diff*s.params.touchRatio;if(s.rtl)diff=-diff;s.swipeDirection=diff>0?'prev':'next';currentTranslate=diff+startTranslate;var disableParentSwiper=true;if(diff>0&&currentTranslate>s.minTranslate()){disableParentSwiper=false;if(s.params.resistance)currentTranslate=s.minTranslate()-1+Math.pow(-s.minTranslate()+startTranslate+diff,s.params.resistanceRatio);}else if(diff<0&&currentTranslate<s.maxTranslate()){disableParentSwiper=false;if(s.params.resistance)currentTranslate=s.maxTranslate()+1-Math.pow(s.maxTranslate()-startTranslate-diff,s.params.resistanceRatio);}if(disableParentSwiper){e.preventedByNestedSwiper=true;}// Directions locks
if(!s.params.allowSwipeToNext&&s.swipeDirection==='next'&&currentTranslate<startTranslate){currentTranslate=startTranslate;}if(!s.params.allowSwipeToPrev&&s.swipeDirection==='prev'&&currentTranslate>startTranslate){currentTranslate=startTranslate;}if(!s.params.followFinger)return;// Threshold
if(s.params.threshold>0){if(Math.abs(diff)>s.params.threshold||allowThresholdMove){if(!allowThresholdMove){allowThresholdMove=true;s.touches.startX=s.touches.currentX;s.touches.startY=s.touches.currentY;currentTranslate=startTranslate;s.touches.diff=isH()?s.touches.currentX-s.touches.startX:s.touches.currentY-s.touches.startY;return;}}else{currentTranslate=startTranslate;return;}}// Update active index in free mode
if(s.params.freeMode||s.params.watchSlidesProgress){s.updateActiveIndex();}if(s.params.freeMode){//Velocity
if(velocities.length===0){velocities.push({position:s.touches[isH()?'startX':'startY'],time:touchStartTime});}velocities.push({position:s.touches[isH()?'currentX':'currentY'],time:new window.Date().getTime()});}// Update progress
s.updateProgress(currentTranslate);// Update translate
s.setWrapperTranslate(currentTranslate);};s.onTouchEnd=function(e){if(e.originalEvent)e=e.originalEvent;s.emit('onTouchEnd',s,e);if(!isTouched)return;//Return Grab Cursor
if(s.params.grabCursor&&isMoved&&isTouched){s.container[0].style.cursor='move';s.container[0].style.cursor='-webkit-grab';s.container[0].style.cursor='-moz-grab';s.container[0].style.cursor='grab';}// Time diff
var touchEndTime=Date.now();var timeDiff=touchEndTime-touchStartTime;// Tap, doubleTap, Click
if(s.allowClick){s.updateClickedSlide(e);s.emit('onTap',s,e);if(timeDiff<300&&touchEndTime-lastClickTime>300){if(clickTimeout)clearTimeout(clickTimeout);clickTimeout=setTimeout(function(){if(!s)return;if(s.params.paginationHide&&s.paginationContainer.length>0&&!$(e.target).hasClass(s.params.bulletClass)){s.paginationContainer.toggleClass(s.params.paginationHiddenClass);}s.emit('onClick',s,e);},300);}if(timeDiff<300&&touchEndTime-lastClickTime<300){if(clickTimeout)clearTimeout(clickTimeout);s.emit('onDoubleTap',s,e);}}lastClickTime=Date.now();setTimeout(function(){if(s)s.allowClick=true;},0);if(!isTouched||!isMoved||!s.swipeDirection||s.touches.diff===0||currentTranslate===startTranslate){isTouched=isMoved=false;return;}isTouched=isMoved=false;var currentPos;if(s.params.followFinger){currentPos=s.rtl?s.translate:-s.translate;}else{currentPos=-currentTranslate;}if(s.params.freeMode){if(currentPos<-s.minTranslate()){s.slideTo(s.activeIndex);return;}else if(currentPos>-s.maxTranslate()){if(s.slides.length<s.snapGrid.length){s.slideTo(s.snapGrid.length-1);}else{s.slideTo(s.slides.length-1);}return;}if(s.params.freeModeMomentum){if(velocities.length>1){var lastMoveEvent=velocities.pop(),velocityEvent=velocities.pop();var distance=lastMoveEvent.position-velocityEvent.position;var time=lastMoveEvent.time-velocityEvent.time;s.velocity=distance/time;s.velocity=s.velocity/2;if(Math.abs(s.velocity)<0.02){s.velocity=0;}// this implies that the user stopped moving a finger then released.
// There would be no events with distance zero, so the last event is stale.
if(time>150||new window.Date().getTime()-lastMoveEvent.time>300){s.velocity=0;}}else{s.velocity=0;}velocities.length=0;var momentumDuration=1000*s.params.freeModeMomentumRatio;var momentumDistance=s.velocity*momentumDuration;var newPosition=s.translate+momentumDistance;if(s.rtl)newPosition=-newPosition;var doBounce=false;var afterBouncePosition;var bounceAmount=Math.abs(s.velocity)*20*s.params.freeModeMomentumBounceRatio;if(newPosition<s.maxTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition+s.maxTranslate()<-bounceAmount){newPosition=s.maxTranslate()-bounceAmount;}afterBouncePosition=s.maxTranslate();doBounce=true;allowMomentumBounce=true;}else{newPosition=s.maxTranslate();}}else if(newPosition>s.minTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition-s.minTranslate()>bounceAmount){newPosition=s.minTranslate()+bounceAmount;}afterBouncePosition=s.minTranslate();doBounce=true;allowMomentumBounce=true;}else{newPosition=s.minTranslate();}}else if(s.params.freeModeSticky){var j=0,nextSlide;for(j=0;j<s.snapGrid.length;j+=1){if(s.snapGrid[j]>-newPosition){nextSlide=j;break;}}if(Math.abs(s.snapGrid[nextSlide]-newPosition)<Math.abs(s.snapGrid[nextSlide-1]-newPosition)||s.swipeDirection==='next'){newPosition=s.snapGrid[nextSlide];}else{newPosition=s.snapGrid[nextSlide-1];}if(!s.rtl)newPosition=-newPosition;}//Fix duration
if(s.velocity!==0){if(s.rtl){momentumDuration=Math.abs((-newPosition-s.translate)/s.velocity);}else{momentumDuration=Math.abs((newPosition-s.translate)/s.velocity);}}else if(s.params.freeModeSticky){s.slideReset();return;}if(s.params.freeModeMomentumBounce&&doBounce){s.updateProgress(afterBouncePosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();s.animating=true;s.wrapper.transitionEnd(function(){if(!s||!allowMomentumBounce)return;s.emit('onMomentumBounce',s);s.setWrapperTransition(s.params.speed);s.setWrapperTranslate(afterBouncePosition);s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});});}else if(s.velocity){s.updateProgress(newPosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();if(!s.animating){s.animating=true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});}}else{s.updateProgress(newPosition);}s.updateActiveIndex();}if(!s.params.freeModeMomentum||timeDiff>=s.params.longSwipesMs){s.updateProgress();s.updateActiveIndex();}return;}// Find current slide
var i,stopIndex=0,groupSize=s.slidesSizesGrid[0];for(i=0;i<s.slidesGrid.length;i+=s.params.slidesPerGroup){if(typeof s.slidesGrid[i+s.params.slidesPerGroup]!=='undefined'){if(currentPos>=s.slidesGrid[i]&&currentPos<s.slidesGrid[i+s.params.slidesPerGroup]){stopIndex=i;groupSize=s.slidesGrid[i+s.params.slidesPerGroup]-s.slidesGrid[i];}}else{if(currentPos>=s.slidesGrid[i]){stopIndex=i;groupSize=s.slidesGrid[s.slidesGrid.length-1]-s.slidesGrid[s.slidesGrid.length-2];}}}// Find current slide size
var ratio=(currentPos-s.slidesGrid[stopIndex])/groupSize;if(timeDiff>s.params.longSwipesMs){// Long touches
if(!s.params.longSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection==='next'){if(ratio>=s.params.longSwipesRatio)s.slideTo(stopIndex+s.params.slidesPerGroup);else s.slideTo(stopIndex);}if(s.swipeDirection==='prev'){if(ratio>1-s.params.longSwipesRatio)s.slideTo(stopIndex+s.params.slidesPerGroup);else s.slideTo(stopIndex);}}else{// Short swipes
if(!s.params.shortSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection==='next'){s.slideTo(stopIndex+s.params.slidesPerGroup);}if(s.swipeDirection==='prev'){s.slideTo(stopIndex);}}};/*=========================
        Transitions
        ===========================*/s._slideTo=function(slideIndex,speed){return s.slideTo(slideIndex,speed,true,true);};s.slideTo=function(slideIndex,speed,runCallbacks,internal){if(typeof runCallbacks==='undefined')runCallbacks=true;if(typeof slideIndex==='undefined')slideIndex=0;if(slideIndex<0)slideIndex=0;s.snapIndex=Math.floor(slideIndex/s.params.slidesPerGroup);if(s.snapIndex>=s.snapGrid.length)s.snapIndex=s.snapGrid.length-1;var translate=-s.snapGrid[s.snapIndex];// Stop autoplay
if(s.params.autoplay&&s.autoplaying){if(internal||!s.params.autoplayDisableOnInteraction){s.pauseAutoplay(speed);}else{s.stopAutoplay();}}// Update progress
s.updateProgress(translate);// Normalize slideIndex
for(var i=0;i<s.slidesGrid.length;i++){if(-Math.floor(translate*100)>=Math.floor(s.slidesGrid[i]*100)){slideIndex=i;}}// Directions locks
if(!s.params.allowSwipeToNext&&translate<s.translate&&translate<s.minTranslate()){return false;}if(!s.params.allowSwipeToPrev&&translate>s.translate&&translate>s.maxTranslate()){if((s.activeIndex||0)!==slideIndex)return false;}// Update Index
if(typeof speed==='undefined')speed=s.params.speed;s.previousIndex=s.activeIndex||0;s.activeIndex=slideIndex;if(translate===s.translate){s.updateClasses();return false;}s.updateClasses();s.onTransitionStart(runCallbacks);var translateX=isH()?translate:0,translateY=isH()?0:translate;if(speed===0){s.setWrapperTransition(0);s.setWrapperTranslate(translate);s.onTransitionEnd(runCallbacks);}else{s.setWrapperTransition(speed);s.setWrapperTranslate(translate);if(!s.animating){s.animating=true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd(runCallbacks);});}}return true;};s.onTransitionStart=function(runCallbacks){if(typeof runCallbacks==='undefined')runCallbacks=true;if(s.lazy)s.lazy.onTransitionStart();if(runCallbacks){s.emit('onTransitionStart',s);if(s.activeIndex!==s.previousIndex){s.emit('onSlideChangeStart',s);}}};s.onTransitionEnd=function(runCallbacks){s.animating=false;s.setWrapperTransition(0);if(typeof runCallbacks==='undefined')runCallbacks=true;if(s.lazy)s.lazy.onTransitionEnd();if(runCallbacks){s.emit('onTransitionEnd',s);if(s.activeIndex!==s.previousIndex){s.emit('onSlideChangeEnd',s);}}if(s.params.hashnav&&s.hashnav){s.hashnav.setHash();}};s.slideNext=function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex+s.params.slidesPerGroup,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex+s.params.slidesPerGroup,speed,runCallbacks,internal);};s._slideNext=function(speed){return s.slideNext(true,speed,true);};s.slidePrev=function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex-1,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex-1,speed,runCallbacks,internal);};s._slidePrev=function(speed){return s.slidePrev(true,speed,true);};s.slideReset=function(runCallbacks,speed,internal){return s.slideTo(s.activeIndex,speed,runCallbacks);};/*=========================
        Translate/transition helpers
        ===========================*/s.setWrapperTransition=function(duration,byController){s.wrapper.transition(duration);if(s.params.effect!=='slide'&&s.effects[s.params.effect]){s.effects[s.params.effect].setTransition(duration);}if(s.params.parallax&&s.parallax){s.parallax.setTransition(duration);}if(s.params.scrollbar&&s.scrollbar){s.scrollbar.setTransition(duration);}if(s.params.control&&s.controller){s.controller.setTransition(duration,byController);}s.emit('onSetTransition',s,duration);};s.setWrapperTranslate=function(translate,updateActiveIndex,byController){var x=0,y=0,z=0;if(isH()){x=s.rtl?-translate:translate;}else{y=translate;}if(!s.params.virtualTranslate){if(s.support.transforms3d)s.wrapper.transform('translate3d('+x+'px, '+y+'px, '+z+'px)');else s.wrapper.transform('translate('+x+'px, '+y+'px)');}s.translate=isH()?x:y;if(updateActiveIndex)s.updateActiveIndex();if(s.params.effect!=='slide'&&s.effects[s.params.effect]){s.effects[s.params.effect].setTranslate(s.translate);}if(s.params.parallax&&s.parallax){s.parallax.setTranslate(s.translate);}if(s.params.scrollbar&&s.scrollbar){s.scrollbar.setTranslate(s.translate);}if(s.params.control&&s.controller){s.controller.setTranslate(s.translate,byController);}s.emit('onSetTranslate',s,s.translate);};s.getTranslate=function(el,axis){var matrix,curTransform,curStyle,transformMatrix;// automatic axis detection
if(typeof axis==='undefined'){axis='x';}if(s.params.virtualTranslate){return s.rtl?-s.translate:s.translate;}curStyle=window.getComputedStyle(el,null);if(window.WebKitCSSMatrix){// Some old versions of Webkit choke when 'none' is passed; pass
// empty string instead in this case
transformMatrix=new window.WebKitCSSMatrix(curStyle.webkitTransform==='none'?'':curStyle.webkitTransform);}else{transformMatrix=curStyle.MozTransform||curStyle.OTransform||curStyle.MsTransform||curStyle.msTransform||curStyle.transform||curStyle.getPropertyValue('transform').replace('translate(','matrix(1, 0, 0, 1,');matrix=transformMatrix.toString().split(',');}if(axis==='x'){//Latest Chrome and webkits Fix
if(window.WebKitCSSMatrix)curTransform=transformMatrix.m41;//Crazy IE10 Matrix
else if(matrix.length===16)curTransform=parseFloat(matrix[12]);//Normal Browsers
else curTransform=parseFloat(matrix[4]);}if(axis==='y'){//Latest Chrome and webkits Fix
if(window.WebKitCSSMatrix)curTransform=transformMatrix.m42;//Crazy IE10 Matrix
else if(matrix.length===16)curTransform=parseFloat(matrix[13]);//Normal Browsers
else curTransform=parseFloat(matrix[5]);}if(s.rtl&&curTransform)curTransform=-curTransform;return curTransform||0;};s.getWrapperTranslate=function(axis){if(typeof axis==='undefined'){axis=isH()?'x':'y';}return s.getTranslate(s.wrapper[0],axis);};/*=========================
        Observer
        ===========================*/s.observers=[];function initObserver(target,options){options=options||{};// create an observer instance
var ObserverFunc=window.MutationObserver||window.WebkitMutationObserver;var observer=new ObserverFunc(function(mutations){mutations.forEach(function(mutation){s.onResize(true);s.emit('onObserverUpdate',s,mutation);});});observer.observe(target,{attributes:typeof options.attributes==='undefined'?true:options.attributes,childList:typeof options.childList==='undefined'?true:options.childList,characterData:typeof options.characterData==='undefined'?true:options.characterData});s.observers.push(observer);}s.initObservers=function(){if(s.params.observeParents){var containerParents=s.container.parents();for(var i=0;i<containerParents.length;i++){initObserver(containerParents[i]);}}// Observe container
initObserver(s.container[0],{childList:false});// Observe wrapper
initObserver(s.wrapper[0],{attributes:false});};s.disconnectObservers=function(){for(var i=0;i<s.observers.length;i++){s.observers[i].disconnect();}s.observers=[];};/*=========================
        Loop
        ===========================*/// Create looped slides
s.createLoop=function(){// Remove duplicated slides
s.wrapper.children('.'+s.params.slideClass+'.'+s.params.slideDuplicateClass).remove();var slides=s.wrapper.children('.'+s.params.slideClass);if(s.params.slidesPerView==='auto'&&!s.params.loopedSlides)s.params.loopedSlides=slides.length;s.loopedSlides=parseInt(s.params.loopedSlides||s.params.slidesPerView,10);s.loopedSlides=s.loopedSlides+s.params.loopAdditionalSlides;if(s.loopedSlides>slides.length){s.loopedSlides=slides.length;}var prependSlides=[],appendSlides=[],i;slides.each(function(index,el){var slide=$(this);if(index<s.loopedSlides)appendSlides.push(el);if(index<slides.length&&index>=slides.length-s.loopedSlides)prependSlides.push(el);slide.attr('data-swiper-slide-index',index);});for(i=0;i<appendSlides.length;i++){s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}for(i=prependSlides.length-1;i>=0;i--){s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}};s.destroyLoop=function(){s.wrapper.children('.'+s.params.slideClass+'.'+s.params.slideDuplicateClass).remove();s.slides.removeAttr('data-swiper-slide-index');};s.fixLoop=function(){var newIndex;//Fix For Negative Oversliding
if(s.activeIndex<s.loopedSlides){newIndex=s.slides.length-s.loopedSlides*3+s.activeIndex;newIndex=newIndex+s.loopedSlides;s.slideTo(newIndex,0,false,true);}//Fix For Positive Oversliding
else if(s.params.slidesPerView==='auto'&&s.activeIndex>=s.loopedSlides*2||s.activeIndex>s.slides.length-s.params.slidesPerView*2){newIndex=-s.slides.length+s.activeIndex+s.loopedSlides;newIndex=newIndex+s.loopedSlides;s.slideTo(newIndex,0,false,true);}};/*=========================
        Append/Prepend/Remove Slides
        ===========================*/s.appendSlide=function(slides){if(s.params.loop){s.destroyLoop();}if((typeof slides==='undefined'?'undefined':_typeof(slides))==='object'&&slides.length){for(var i=0;i<slides.length;i++){if(slides[i])s.wrapper.append(slides[i]);}}else{s.wrapper.append(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer&&s.support.observer)){s.update(true);}};s.prependSlide=function(slides){if(s.params.loop){s.destroyLoop();}var newActiveIndex=s.activeIndex+1;if((typeof slides==='undefined'?'undefined':_typeof(slides))==='object'&&slides.length){for(var i=0;i<slides.length;i++){if(slides[i])s.wrapper.prepend(slides[i]);}newActiveIndex=s.activeIndex+slides.length;}else{s.wrapper.prepend(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer&&s.support.observer)){s.update(true);}s.slideTo(newActiveIndex,0,false);};s.removeSlide=function(slidesIndexes){if(s.params.loop){s.destroyLoop();s.slides=s.wrapper.children('.'+s.params.slideClass);}var newActiveIndex=s.activeIndex,indexToRemove;if((typeof slidesIndexes==='undefined'?'undefined':_typeof(slidesIndexes))==='object'&&slidesIndexes.length){for(var i=0;i<slidesIndexes.length;i++){indexToRemove=slidesIndexes[i];if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove<newActiveIndex)newActiveIndex--;}newActiveIndex=Math.max(newActiveIndex,0);}else{indexToRemove=slidesIndexes;if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove<newActiveIndex)newActiveIndex--;newActiveIndex=Math.max(newActiveIndex,0);}if(s.params.loop){s.createLoop();}if(!(s.params.observer&&s.support.observer)){s.update(true);}if(s.params.loop){s.slideTo(newActiveIndex+s.loopedSlides,0,false);}else{s.slideTo(newActiveIndex,0,false);}};s.removeAllSlides=function(){var slidesIndexes=[];for(var i=0;i<s.slides.length;i++){slidesIndexes.push(i);}s.removeSlide(slidesIndexes);};/*=========================
        Effects
        ===========================*/s.effects={fade:{setTranslate:function setTranslate(){for(var i=0;i<s.slides.length;i++){var slide=s.slides.eq(i);var offset=slide[0].swiperSlideOffset;var tx=-offset;if(!s.params.virtualTranslate)tx=tx-s.translate;var ty=0;if(!isH()){ty=tx;tx=0;}var slideOpacity=s.params.fade.crossFade?Math.max(1-Math.abs(slide[0].progress),0):1+Math.min(Math.max(slide[0].progress,-1),0);slide.css({opacity:slideOpacity}).transform('translate3d('+tx+'px, '+ty+'px, 0px)');}},setTransition:function setTransition(duration){s.slides.transition(duration);if(s.params.virtualTranslate&&duration!==0){var eventTriggered=false;s.slides.transitionEnd(function(){if(eventTriggered)return;if(!s)return;eventTriggered=true;s.animating=false;var triggerEvents=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'];for(var i=0;i<triggerEvents.length;i++){s.wrapper.trigger(triggerEvents[i]);}});}}},cube:{setTranslate:function setTranslate(){var wrapperRotate=0,cubeShadow;if(s.params.cube.shadow){if(isH()){cubeShadow=s.wrapper.find('.swiper-cube-shadow');if(cubeShadow.length===0){cubeShadow=$('<div class="swiper-cube-shadow"></div>');s.wrapper.append(cubeShadow);}cubeShadow.css({height:s.width+'px'});}else{cubeShadow=s.container.find('.swiper-cube-shadow');if(cubeShadow.length===0){cubeShadow=$('<div class="swiper-cube-shadow"></div>');s.container.append(cubeShadow);}}}for(var i=0;i<s.slides.length;i++){var slide=s.slides.eq(i);var slideAngle=i*90;var round=Math.floor(slideAngle/360);if(s.rtl){slideAngle=-slideAngle;round=Math.floor(-slideAngle/360);}var progress=Math.max(Math.min(slide[0].progress,1),-1);var tx=0,ty=0,tz=0;if(i%4===0){tx=-round*4*s.size;tz=0;}else if((i-1)%4===0){tx=0;tz=-round*4*s.size;}else if((i-2)%4===0){tx=s.size+round*4*s.size;tz=s.size;}else if((i-3)%4===0){tx=-s.size;tz=3*s.size+s.size*4*round;}if(s.rtl){tx=-tx;}if(!isH()){ty=tx;tx=0;}var transform='rotateX('+(isH()?0:-slideAngle)+'deg) rotateY('+(isH()?slideAngle:0)+'deg) translate3d('+tx+'px, '+ty+'px, '+tz+'px)';if(progress<=1&&progress>-1){wrapperRotate=i*90+progress*90;if(s.rtl)wrapperRotate=-i*90-progress*90;}slide.transform(transform);if(s.params.cube.slideShadows){//Set shadows
var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length===0){shadowBefore=$('<div class="swiper-slide-shadow-'+(isH()?'left':'top')+'"></div>');slide.append(shadowBefore);}if(shadowAfter.length===0){shadowAfter=$('<div class="swiper-slide-shadow-'+(isH()?'right':'bottom')+'"></div>');slide.append(shadowAfter);}var shadowOpacity=slide[0].progress;if(shadowBefore.length)shadowBefore[0].style.opacity=-slide[0].progress;if(shadowAfter.length)shadowAfter[0].style.opacity=slide[0].progress;}}s.wrapper.css({'-webkit-transform-origin':'50% 50% -'+s.size/2+'px','-moz-transform-origin':'50% 50% -'+s.size/2+'px','-ms-transform-origin':'50% 50% -'+s.size/2+'px','transform-origin':'50% 50% -'+s.size/2+'px'});if(s.params.cube.shadow){if(isH()){cubeShadow.transform('translate3d(0px, '+(s.width/2+s.params.cube.shadowOffset)+'px, '+-s.width/2+'px) rotateX(90deg) rotateZ(0deg) scale('+s.params.cube.shadowScale+')');}else{var shadowAngle=Math.abs(wrapperRotate)-Math.floor(Math.abs(wrapperRotate)/90)*90;var multiplier=1.5-(Math.sin(shadowAngle*2*Math.PI/360)/2+Math.cos(shadowAngle*2*Math.PI/360)/2);var scale1=s.params.cube.shadowScale,scale2=s.params.cube.shadowScale/multiplier,offset=s.params.cube.shadowOffset;cubeShadow.transform('scale3d('+scale1+', 1, '+scale2+') translate3d(0px, '+(s.height/2+offset)+'px, '+-s.height/2/scale2+'px) rotateX(-90deg)');}}var zFactor=s.isSafari||s.isUiWebView?-s.size/2:0;s.wrapper.transform('translate3d(0px,0,'+zFactor+'px) rotateX('+(isH()?0:wrapperRotate)+'deg) rotateY('+(isH()?-wrapperRotate:0)+'deg)');},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);if(s.params.cube.shadow&&!isH()){s.container.find('.swiper-cube-shadow').transition(duration);}}},coverflow:{setTranslate:function setTranslate(){var transform=s.translate;var center=isH()?-transform+s.width/2:-transform+s.height/2;var rotate=isH()?s.params.coverflow.rotate:-s.params.coverflow.rotate;var translate=s.params.coverflow.depth;//Each slide offset from center
for(var i=0,length=s.slides.length;i<length;i++){var slide=s.slides.eq(i);var slideSize=s.slidesSizesGrid[i];var slideOffset=slide[0].swiperSlideOffset;var offsetMultiplier=(center-slideOffset-slideSize/2)/slideSize*s.params.coverflow.modifier;var rotateY=isH()?rotate*offsetMultiplier:0;var rotateX=isH()?0:rotate*offsetMultiplier;// var rotateZ = 0
var translateZ=-translate*Math.abs(offsetMultiplier);var translateY=isH()?0:s.params.coverflow.stretch*offsetMultiplier;var translateX=isH()?s.params.coverflow.stretch*offsetMultiplier:0;//Fix for ultra small values
if(Math.abs(translateX)<0.001)translateX=0;if(Math.abs(translateY)<0.001)translateY=0;if(Math.abs(translateZ)<0.001)translateZ=0;if(Math.abs(rotateY)<0.001)rotateY=0;if(Math.abs(rotateX)<0.001)rotateX=0;var slideTransform='translate3d('+translateX+'px,'+translateY+'px,'+translateZ+'px)  rotateX('+rotateX+'deg) rotateY('+rotateY+'deg)';slide.transform(slideTransform);slide[0].style.zIndex=-Math.abs(Math.round(offsetMultiplier))+1;if(s.params.coverflow.slideShadows){//Set shadows
var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length===0){shadowBefore=$('<div class="swiper-slide-shadow-'+(isH()?'left':'top')+'"></div>');slide.append(shadowBefore);}if(shadowAfter.length===0){shadowAfter=$('<div class="swiper-slide-shadow-'+(isH()?'right':'bottom')+'"></div>');slide.append(shadowAfter);}if(shadowBefore.length)shadowBefore[0].style.opacity=offsetMultiplier>0?offsetMultiplier:0;if(shadowAfter.length)shadowAfter[0].style.opacity=-offsetMultiplier>0?-offsetMultiplier:0;}}//Set correct perspective for IE10
if(s.browser.ie){var ws=s.wrapper[0].style;ws.perspectiveOrigin=center+'px 50%';}},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);}}};/*=========================
        Images Lazy Loading
        ===========================*/s.lazy={initialImageLoaded:false,loadImageInSlide:function loadImageInSlide(index,loadInDuplicate){if(typeof index==='undefined')return;if(typeof loadInDuplicate==='undefined')loadInDuplicate=true;if(s.slides.length===0)return;var slide=s.slides.eq(index);var img=slide.find('.swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)');if(slide.hasClass('swiper-lazy')&&!slide.hasClass('swiper-lazy-loaded')&&!slide.hasClass('swiper-lazy-loading')){img.add(slide[0]);}if(img.length===0)return;img.each(function(){var _img=$(this);_img.addClass('swiper-lazy-loading');var background=_img.attr('data-background');var src=_img.attr('data-src');s.loadImage(_img[0],src||background,false,function(){if(background){_img.css('background-image','url('+background+')');_img.removeAttr('data-background');}else{_img.attr('src',src);_img.removeAttr('data-src');}_img.addClass('swiper-lazy-loaded').removeClass('swiper-lazy-loading');slide.find('.swiper-lazy-preloader, .preloader').remove();if(s.params.loop&&loadInDuplicate){var slideOriginalIndex=slide.attr('data-swiper-slide-index');if(slide.hasClass(s.params.slideDuplicateClass)){var originalSlide=s.wrapper.children('[data-swiper-slide-index="'+slideOriginalIndex+'"]:not(.'+s.params.slideDuplicateClass+')');s.lazy.loadImageInSlide(originalSlide.index(),false);}else{var duplicatedSlide=s.wrapper.children('.'+s.params.slideDuplicateClass+'[data-swiper-slide-index="'+slideOriginalIndex+'"]');s.lazy.loadImageInSlide(duplicatedSlide.index(),false);}}s.emit('onLazyImageReady',s,slide[0],_img[0]);});s.emit('onLazyImageLoad',s,slide[0],_img[0]);});},load:function load(){var i;if(s.params.watchSlidesVisibility){s.wrapper.children('.'+s.params.slideVisibleClass).each(function(){s.lazy.loadImageInSlide($(this).index());});}else{if(s.params.slidesPerView>1){for(i=s.activeIndex;i<s.activeIndex+s.params.slidesPerView;i++){if(s.slides[i])s.lazy.loadImageInSlide(i);}}else{s.lazy.loadImageInSlide(s.activeIndex);}}if(s.params.lazyLoadingInPrevNext){if(s.params.slidesPerView>1){// Next Slides
for(i=s.activeIndex+s.params.slidesPerView;i<s.activeIndex+s.params.slidesPerView+s.params.slidesPerView;i++){if(s.slides[i])s.lazy.loadImageInSlide(i);}// Prev Slides
for(i=s.activeIndex-s.params.slidesPerView;i<s.activeIndex;i++){if(s.slides[i])s.lazy.loadImageInSlide(i);}}else{var nextSlide=s.wrapper.children('.'+s.params.slideNextClass);if(nextSlide.length>0)s.lazy.loadImageInSlide(nextSlide.index());var prevSlide=s.wrapper.children('.'+s.params.slidePrevClass);if(prevSlide.length>0)s.lazy.loadImageInSlide(prevSlide.index());}}},onTransitionStart:function onTransitionStart(){if(s.params.lazyLoading){if(s.params.lazyLoadingOnTransitionStart||!s.params.lazyLoadingOnTransitionStart&&!s.lazy.initialImageLoaded){s.lazy.load();}}},onTransitionEnd:function onTransitionEnd(){if(s.params.lazyLoading&&!s.params.lazyLoadingOnTransitionStart){s.lazy.load();}}};/*=========================
        Scrollbar
        ===========================*/s.scrollbar={set:function set(){if(!s.params.scrollbar)return;var sb=s.scrollbar;sb.track=$(s.params.scrollbar);sb.drag=sb.track.find('.swiper-scrollbar-drag');if(sb.drag.length===0){sb.drag=$('<div class="swiper-scrollbar-drag"></div>');sb.track.append(sb.drag);}sb.drag[0].style.width='';sb.drag[0].style.height='';sb.trackSize=isH()?sb.track[0].offsetWidth:sb.track[0].offsetHeight;sb.divider=s.size/s.virtualSize;sb.moveDivider=sb.divider*(sb.trackSize/s.size);sb.dragSize=sb.trackSize*sb.divider;if(isH()){sb.drag[0].style.width=sb.dragSize+'px';}else{sb.drag[0].style.height=sb.dragSize+'px';}if(sb.divider>=1){sb.track[0].style.display='none';}else{sb.track[0].style.display='';}if(s.params.scrollbarHide){sb.track[0].style.opacity=0;}},setTranslate:function setTranslate(){if(!s.params.scrollbar)return;var diff;var sb=s.scrollbar;var translate=s.translate||0;var newPos;var newSize=sb.dragSize;newPos=(sb.trackSize-sb.dragSize)*s.progress;if(s.rtl&&isH()){newPos=-newPos;if(newPos>0){newSize=sb.dragSize-newPos;newPos=0;}else if(-newPos+sb.dragSize>sb.trackSize){newSize=sb.trackSize+newPos;}}else{if(newPos<0){newSize=sb.dragSize+newPos;newPos=0;}else if(newPos+sb.dragSize>sb.trackSize){newSize=sb.trackSize-newPos;}}if(isH()){if(s.support.transforms3d){sb.drag.transform('translate3d('+newPos+'px, 0, 0)');}else{sb.drag.transform('translateX('+newPos+'px)');}sb.drag[0].style.width=newSize+'px';}else{if(s.support.transforms3d){sb.drag.transform('translate3d(0px, '+newPos+'px, 0)');}else{sb.drag.transform('translateY('+newPos+'px)');}sb.drag[0].style.height=newSize+'px';}if(s.params.scrollbarHide){clearTimeout(sb.timeout);sb.track[0].style.opacity=1;sb.timeout=setTimeout(function(){sb.track[0].style.opacity=0;sb.track.transition(400);},1000);}},setTransition:function setTransition(duration){if(!s.params.scrollbar)return;s.scrollbar.drag.transition(duration);}};/*=========================
        Controller
        ===========================*/s.controller={LinearSpline:function LinearSpline(x,y){this.x=x;this.y=y;this.lastIndex=x.length-1;// Given an x value (x2), return the expected y2 value:
// (x1,y1) is the known point before given value,
// (x3,y3) is the known point after given value.
var i1,i3;var l=this.x.length;this.interpolate=function(x2){if(!x2)return 0;// Get the indexes of x1 and x3 (the array indexes before and after given x2):
i3=binarySearch(this.x,x2);i1=i3-1;// We have our indexes i1 & i3, so we can calculate already:
// y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
return(x2-this.x[i1])*(this.y[i3]-this.y[i1])/(this.x[i3]-this.x[i1])+this.y[i1];};var binarySearch=function(){var maxIndex,minIndex,guess;return function(array,val){minIndex=-1;maxIndex=array.length;while(maxIndex-minIndex>1){if(array[guess=maxIndex+minIndex>>1]<=val){minIndex=guess;}else{maxIndex=guess;}}return maxIndex;};}();},//xxx: for now i will just save one spline function to to
getInterpolateFunction:function getInterpolateFunction(c){if(!s.controller.spline)s.controller.spline=s.params.loop?new s.controller.LinearSpline(s.slidesGrid,c.slidesGrid):new s.controller.LinearSpline(s.snapGrid,c.snapGrid);},setTranslate:function setTranslate(translate,byController){var controlled=s.params.control;var multiplier,controlledTranslate;function setControlledTranslate(c){// this will create an Interpolate function based on the snapGrids
// x is the Grid of the scrolled scroller and y will be the controlled scroller
// it makes sense to create this only once and recall it for the interpolation
// the function does a lot of value caching for performance
translate=c.rtl&&c.params.direction==='horizontal'?-s.translate:s.translate;if(s.params.controlBy==='slide'){s.controller.getInterpolateFunction(c);// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
// but it did not work out
controlledTranslate=-s.controller.spline.interpolate(-translate);}if(!controlledTranslate||s.params.controlBy==='container'){multiplier=(c.maxTranslate()-c.minTranslate())/(s.maxTranslate()-s.minTranslate());controlledTranslate=(translate-s.minTranslate())*multiplier+c.minTranslate();}if(s.params.controlInverse){controlledTranslate=c.maxTranslate()-controlledTranslate;}c.updateProgress(controlledTranslate);c.setWrapperTranslate(controlledTranslate,false,s);c.updateActiveIndex();}if(s.isArray(controlled)){for(var i=0;i<controlled.length;i++){if(controlled[i]!==byController&&controlled[i]instanceof Swiper){setControlledTranslate(controlled[i]);}}}else if(controlled instanceof Swiper&&byController!==controlled){setControlledTranslate(controlled);}},setTransition:function setTransition(duration,byController){var controlled=s.params.control;var i;function setControlledTransition(c){c.setWrapperTransition(duration,s);if(duration!==0){c.onTransitionStart();c.wrapper.transitionEnd(function(){if(!controlled)return;if(c.params.loop&&s.params.controlBy==='slide'){c.fixLoop();}c.onTransitionEnd();});}}if(s.isArray(controlled)){for(i=0;i<controlled.length;i++){if(controlled[i]!==byController&&controlled[i]instanceof Swiper){setControlledTransition(controlled[i]);}}}else if(controlled instanceof Swiper&&byController!==controlled){setControlledTransition(controlled);}}};/*=========================
        Hash Navigation
        ===========================*/s.hashnav={init:function init(){if(!s.params.hashnav)return;s.hashnav.initialized=true;var hash=document.location.hash.replace('#','');if(!hash)return;var speed=0;for(var i=0,length=s.slides.length;i<length;i++){var slide=s.slides.eq(i);var slideHash=slide.attr('data-hash');if(slideHash===hash&&!slide.hasClass(s.params.slideDuplicateClass)){var index=slide.index();s.slideTo(index,speed,s.params.runCallbacksOnInit,true);}}},setHash:function setHash(){if(!s.hashnav.initialized||!s.params.hashnav)return;document.location.hash=s.slides.eq(s.activeIndex).attr('data-hash')||'';}};/*=========================
        Keyboard Control
        ===========================*/function handleKeyboard(e){if(e.originalEvent)e=e.originalEvent;//jquery fix
var kc=e.keyCode||e.charCode;// Directions locks
if(!s.params.allowSwipeToNext&&(isH()&&kc===39||!isH()&&kc===40)){return false;}if(!s.params.allowSwipeToPrev&&(isH()&&kc===37||!isH()&&kc===38)){return false;}if(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey){return;}if(document.activeElement&&document.activeElement.nodeName&&(document.activeElement.nodeName.toLowerCase()==='input'||document.activeElement.nodeName.toLowerCase()==='textarea')){return;}if(kc===37||kc===39||kc===38||kc===40){var inView=false;//Check that swiper should be inside of visible area of window
if(s.container.parents('.swiper-slide').length>0&&s.container.parents('.swiper-slide-active').length===0){return;}var windowScroll={left:window.pageXOffset,top:window.pageYOffset};var windowWidth=window.innerWidth;var windowHeight=window.innerHeight;var swiperOffset=s.container.offset();if(s.rtl)swiperOffset.left=swiperOffset.left-s.container[0].scrollLeft;var swiperCoord=[[swiperOffset.left,swiperOffset.top],[swiperOffset.left+s.width,swiperOffset.top],[swiperOffset.left,swiperOffset.top+s.height],[swiperOffset.left+s.width,swiperOffset.top+s.height]];for(var i=0;i<swiperCoord.length;i++){var point=swiperCoord[i];if(point[0]>=windowScroll.left&&point[0]<=windowScroll.left+windowWidth&&point[1]>=windowScroll.top&&point[1]<=windowScroll.top+windowHeight){inView=true;}}if(!inView)return;}if(isH()){if(kc===37||kc===39){if(e.preventDefault)e.preventDefault();else e.returnValue=false;}if(kc===39&&!s.rtl||kc===37&&s.rtl)s.slideNext();if(kc===37&&!s.rtl||kc===39&&s.rtl)s.slidePrev();}else{if(kc===38||kc===40){if(e.preventDefault)e.preventDefault();else e.returnValue=false;}if(kc===40)s.slideNext();if(kc===38)s.slidePrev();}}s.disableKeyboardControl=function(){$(document).off('keydown',handleKeyboard);};s.enableKeyboardControl=function(){$(document).on('keydown',handleKeyboard);};/*=========================
        Mousewheel Control
        ===========================*/s.mousewheel={event:false,lastScrollTime:new window.Date().getTime()};if(s.params.mousewheelControl){try{new window.WheelEvent('wheel');s.mousewheel.event='wheel';}catch(e){}if(!s.mousewheel.event&&document.onmousewheel!==undefined){s.mousewheel.event='mousewheel';}if(!s.mousewheel.event){s.mousewheel.event='DOMMouseScroll';}}function handleMousewheel(e){if(e.originalEvent)e=e.originalEvent;//jquery fix
var we=s.mousewheel.event;var delta=0;//Opera & IE
if(e.detail)delta=-e.detail;//WebKits
else if(we==='mousewheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.wheelDeltaX)>Math.abs(e.wheelDeltaY))delta=e.wheelDeltaX;else return;}else{if(Math.abs(e.wheelDeltaY)>Math.abs(e.wheelDeltaX))delta=e.wheelDeltaY;else return;}}else{delta=e.wheelDelta;}}//Old FireFox
else if(we==='DOMMouseScroll')delta=-e.detail;//New FireFox
else if(we==='wheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.deltaX)>Math.abs(e.deltaY))delta=-e.deltaX;else return;}else{if(Math.abs(e.deltaY)>Math.abs(e.deltaX))delta=-e.deltaY;else return;}}else{delta=Math.abs(e.deltaX)>Math.abs(e.deltaY)?-e.deltaX:-e.deltaY;}}if(s.params.mousewheelInvert)delta=-delta;if(!s.params.freeMode){if(new window.Date().getTime()-s.mousewheel.lastScrollTime>60){if(delta<0){if((!s.isEnd||s.params.loop)&&!s.animating)s.slideNext();else if(s.params.mousewheelReleaseOnEdges)return true;}else{if((!s.isBeginning||s.params.loop)&&!s.animating)s.slidePrev();else if(s.params.mousewheelReleaseOnEdges)return true;}}s.mousewheel.lastScrollTime=new window.Date().getTime();}else{//Freemode or scrollContainer:
var position=s.getWrapperTranslate()+delta*s.params.mousewheelSensitivity;if(position>0)position=0;if(position<s.maxTranslate())position=s.maxTranslate();s.setWrapperTransition(0);s.setWrapperTranslate(position);s.updateProgress();s.updateActiveIndex();if(s.params.freeModeSticky){clearTimeout(s.mousewheel.timeout);s.mousewheel.timeout=setTimeout(function(){s.slideReset();},300);}// Return page scroll on edge positions
if(position===0||position===s.maxTranslate())return;}if(s.params.autoplay)s.stopAutoplay();if(e.preventDefault)e.preventDefault();else e.returnValue=false;return false;}s.disableMousewheelControl=function(){if(!s.mousewheel.event)return false;s.container.off(s.mousewheel.event,handleMousewheel);return true;};s.enableMousewheelControl=function(){if(!s.mousewheel.event)return false;s.container.on(s.mousewheel.event,handleMousewheel);return true;};/*=========================
        Parallax
        ===========================*/function setParallaxTransform(el,progress){el=$(el);var p,pX,pY;p=el.attr('data-swiper-parallax')||'0';pX=el.attr('data-swiper-parallax-x');pY=el.attr('data-swiper-parallax-y');if(pX||pY){pX=pX||'0';pY=pY||'0';}else{if(isH()){pX=p;pY='0';}else{pY=p;pX='0';}}if(pX.indexOf('%')>=0){pX=parseInt(pX,10)*progress+'%';}else{pX=pX*progress+'px';}if(pY.indexOf('%')>=0){pY=parseInt(pY,10)*progress+'%';}else{pY=pY*progress+'px';}el.transform('translate3d('+pX+', '+pY+',0px)');}s.parallax={setTranslate:function setTranslate(){s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){setParallaxTransform(this,s.progress);});s.slides.each(function(){var slide=$(this);slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var progress=Math.min(Math.max(slide[0].progress,-1),1);setParallaxTransform(this,progress);});});},setTransition:function setTransition(duration){if(typeof duration==='undefined')duration=s.params.speed;s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var el=$(this);var parallaxDuration=parseInt(el.attr('data-swiper-parallax-duration'),10)||duration;if(duration===0)parallaxDuration=0;el.transition(parallaxDuration);});}};/*=========================
        Plugins API. Collect all and init all plugins
        ===========================*/s._plugins=[];for(var plugin in s.plugins){var p=s.plugins[plugin](s,s.params[plugin]);if(p)s._plugins.push(p);}// Method to call all plugins event/method
s.callPlugins=function(eventName){for(var i=0;i<s._plugins.length;i++){if(eventName in s._plugins[i]){s._plugins[i][eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}}};/*=========================
        Events/Callbacks/Plugins Emitter
        ===========================*/function normalizeEventName(eventName){if(eventName.indexOf('on')!==0){if(eventName[0]!==eventName[0].toUpperCase()){eventName='on'+eventName[0].toUpperCase()+eventName.substring(1);}else{eventName='on'+eventName;}}return eventName;}s.emitterEventListeners={};s.emit=function(eventName){// Trigger callbacks
if(s.params[eventName]){s.params[eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}var i;// Trigger events
if(s.emitterEventListeners[eventName]){for(i=0;i<s.emitterEventListeners[eventName].length;i++){s.emitterEventListeners[eventName][i](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}}// Trigger plugins
if(s.callPlugins)s.callPlugins(eventName,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);};s.on=function(eventName,handler){eventName=normalizeEventName(eventName);if(!s.emitterEventListeners[eventName])s.emitterEventListeners[eventName]=[];s.emitterEventListeners[eventName].push(handler);return s;};s.off=function(eventName,handler){var i;eventName=normalizeEventName(eventName);if(typeof handler==='undefined'){// Remove all handlers for such event
s.emitterEventListeners[eventName]=[];return s;}if(!s.emitterEventListeners[eventName]||s.emitterEventListeners[eventName].length===0)return;for(i=0;i<s.emitterEventListeners[eventName].length;i++){if(s.emitterEventListeners[eventName][i]===handler)s.emitterEventListeners[eventName].splice(i,1);}return s;};s.once=function(eventName,handler){eventName=normalizeEventName(eventName);var _handler=function _handler(){handler(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);s.off(eventName,_handler);};s.on(eventName,_handler);return s;};// Accessibility tools
s.a11y={makeFocusable:function makeFocusable($el){$el.attr('tabIndex','0');return $el;},addRole:function addRole($el,role){$el.attr('role',role);return $el;},addLabel:function addLabel($el,label){$el.attr('aria-label',label);return $el;},disable:function disable($el){$el.attr('aria-disabled',true);return $el;},enable:function enable($el){$el.attr('aria-disabled',false);return $el;},onEnterKey:function onEnterKey(event){if(event.keyCode!==13)return;if($(event.target).is(s.params.nextButton)){s.onClickNext(event);if(s.isEnd){s.a11y.notify(s.params.lastSlideMessage);}else{s.a11y.notify(s.params.nextSlideMessage);}}else if($(event.target).is(s.params.prevButton)){s.onClickPrev(event);if(s.isBeginning){s.a11y.notify(s.params.firstSlideMessage);}else{s.a11y.notify(s.params.prevSlideMessage);}}if($(event.target).is('.'+s.params.bulletClass)){$(event.target)[0].click();}},liveRegion:$('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),notify:function notify(message){var notification=s.a11y.liveRegion;if(notification.length===0)return;notification.html('');notification.html(message);},init:function init(){// Setup accessibility
if(s.params.nextButton){var nextButton=$(s.params.nextButton);s.a11y.makeFocusable(nextButton);s.a11y.addRole(nextButton,'button');s.a11y.addLabel(nextButton,s.params.nextSlideMessage);}if(s.params.prevButton){var prevButton=$(s.params.prevButton);s.a11y.makeFocusable(prevButton);s.a11y.addRole(prevButton,'button');s.a11y.addLabel(prevButton,s.params.prevSlideMessage);}$(s.container).append(s.a11y.liveRegion);},initPagination:function initPagination(){if(s.params.pagination&&s.params.paginationClickable&&s.bullets&&s.bullets.length){s.bullets.each(function(){var bullet=$(this);s.a11y.makeFocusable(bullet);s.a11y.addRole(bullet,'button');s.a11y.addLabel(bullet,s.params.paginationBulletMessage.replace(/{{index}}/,bullet.index()+1));});}},destroy:function destroy(){if(s.a11y.liveRegion&&s.a11y.liveRegion.length>0)s.a11y.liveRegion.remove();}};/*=========================
        Init/Destroy
        ===========================*/s.init=function(){if(s.params.loop)s.createLoop();s.updateContainerSize();s.updateSlidesSize();s.updatePagination();if(s.params.scrollbar&&s.scrollbar){s.scrollbar.set();}if(s.params.effect!=='slide'&&s.effects[s.params.effect]){if(!s.params.loop)s.updateProgress();s.effects[s.params.effect].setTranslate();}if(s.params.loop){s.slideTo(s.params.initialSlide+s.loopedSlides,0,s.params.runCallbacksOnInit);}else{s.slideTo(s.params.initialSlide,0,s.params.runCallbacksOnInit);if(s.params.initialSlide===0){if(s.parallax&&s.params.parallax)s.parallax.setTranslate();if(s.lazy&&s.params.lazyLoading){s.lazy.load();s.lazy.initialImageLoaded=true;}}}s.attachEvents();if(s.params.observer&&s.support.observer){s.initObservers();}if(s.params.preloadImages&&!s.params.lazyLoading){s.preloadImages();}if(s.params.autoplay){s.startAutoplay();}if(s.params.keyboardControl){if(s.enableKeyboardControl)s.enableKeyboardControl();}if(s.params.mousewheelControl){if(s.enableMousewheelControl)s.enableMousewheelControl();}if(s.params.hashnav){if(s.hashnav)s.hashnav.init();}if(s.params.a11y&&s.a11y)s.a11y.init();s.emit('onInit',s);};// Cleanup dynamic styles
s.cleanupStyles=function(){// Container
s.container.removeClass(s.classNames.join(' ')).removeAttr('style');// Wrapper
s.wrapper.removeAttr('style');// Slides
if(s.slides&&s.slides.length){s.slides.removeClass([s.params.slideVisibleClass,s.params.slideActiveClass,s.params.slideNextClass,s.params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-column').removeAttr('data-swiper-row');}// Pagination/Bullets
if(s.paginationContainer&&s.paginationContainer.length){s.paginationContainer.removeClass(s.params.paginationHiddenClass);}if(s.bullets&&s.bullets.length){s.bullets.removeClass(s.params.bulletActiveClass);}// Buttons
if(s.params.prevButton)$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.nextButton)$(s.params.nextButton).removeClass(s.params.buttonDisabledClass);// Scrollbar
if(s.params.scrollbar&&s.scrollbar){if(s.scrollbar.track&&s.scrollbar.track.length)s.scrollbar.track.removeAttr('style');if(s.scrollbar.drag&&s.scrollbar.drag.length)s.scrollbar.drag.removeAttr('style');}};// Destroy
s.destroy=function(deleteInstance,cleanupStyles){// Detach evebts
s.detachEvents();// Stop autoplay
s.stopAutoplay();// Destroy loop
if(s.params.loop){s.destroyLoop();}// Cleanup styles
if(cleanupStyles){s.cleanupStyles();}// Disconnect observer
s.disconnectObservers();// Disable keyboard/mousewheel
if(s.params.keyboardControl){if(s.disableKeyboardControl)s.disableKeyboardControl();}if(s.params.mousewheelControl){if(s.disableMousewheelControl)s.disableMousewheelControl();}// Disable a11y
if(s.params.a11y&&s.a11y)s.a11y.destroy();// Destroy callback
s.emit('onDestroy');// Delete instance
if(deleteInstance!==false)s=null;};s.init();// Return swiper instance
return s;};/*==================================================
      Prototype
  ====================================================*/Swiper.prototype={isSafari:function(){var ua=navigator.userAgent.toLowerCase();return ua.indexOf('safari')>=0&&ua.indexOf('chrome')<0&&ua.indexOf('android')<0;}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),isArray:function isArray(arr){return Object.prototype.toString.apply(arr)==='[object Array]';},/*==================================================
      Browser
      ====================================================*/browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1},/*==================================================
      Devices
      ====================================================*/device:function(){var ua=navigator.userAgent;var android=ua.match(/(Android);?[\s\/]+([\d.]+)?/);var ipad=ua.match(/(iPad).*OS\s([\d_]+)/);var ipod=ua.match(/(iPod)(.*OS\s([\d_]+))?/);var iphone=!ipad&&ua.match(/(iPhone\sOS)\s([\d_]+)/);return{ios:ipad||iphone||ipod,android:android};}(),/*==================================================
      Feature Detection
      ====================================================*/support:{touch:window.Modernizr&&Modernizr.touch===true||function(){return!!('ontouchstart'in window||window.DocumentTouch&&document instanceof DocumentTouch);}(),transforms3d:window.Modernizr&&Modernizr.csstransforms3d===true||function(){var div=document.createElement('div').style;return'webkitPerspective'in div||'MozPerspective'in div||'OPerspective'in div||'MsPerspective'in div||'perspective'in div;}(),flexbox:function(){var div=document.createElement('div').style;var styles='alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient'.split(' ');for(var i=0;i<styles.length;i++){if(styles[i]in div)return true;}}(),observer:function(){return'MutationObserver'in window||'WebkitMutationObserver'in window;}()},/*==================================================
      Plugins
      ====================================================*/plugins:{}};/*===========================
  Dom7 Library
  ===========================*/var Dom7=function(){var Dom7=function Dom7(arr){var _this=this,i=0;// Create array-like object
for(i=0;i<arr.length;i++){_this[i]=arr[i];}_this.length=arr.length;// Return collection with methods
return this;};var $=function $(selector,context){var arr=[],i=0;if(selector&&!context){if(selector instanceof Dom7){return selector;}}if(selector){// String
if(typeof selector==='string'){var els,tempParent,html=selector.trim();if(html.indexOf('<')>=0&&html.indexOf('>')>=0){var toCreate='div';if(html.indexOf('<li')===0)toCreate='ul';if(html.indexOf('<tr')===0)toCreate='tbody';if(html.indexOf('<td')===0||html.indexOf('<th')===0)toCreate='tr';if(html.indexOf('<tbody')===0)toCreate='table';if(html.indexOf('<option')===0)toCreate='select';tempParent=document.createElement(toCreate);tempParent.innerHTML=selector;for(i=0;i<tempParent.childNodes.length;i++){arr.push(tempParent.childNodes[i]);}}else{if(!context&&selector[0]==='#'&&!selector.match(/[ .<>:~]/)){// Pure ID selector
els=[document.getElementById(selector.split('#')[1])];}else{// Other selectors
els=(context||document).querySelectorAll(selector);}for(i=0;i<els.length;i++){if(els[i])arr.push(els[i]);}}}// Node/element
else if(selector.nodeType||selector===window||selector===document){arr.push(selector);}//Array of elements or instance of Dom
else if(selector.length>0&&selector[0].nodeType){for(i=0;i<selector.length;i++){arr.push(selector[i]);}}}return new Dom7(arr);};Dom7.prototype={// Classes and attriutes
addClass:function addClass(className){if(typeof className==='undefined'){return this;}var classes=className.split(' ');for(var i=0;i<classes.length;i++){for(var j=0;j<this.length;j++){this[j].classList.add(classes[i]);}}return this;},removeClass:function removeClass(className){var classes=className.split(' ');for(var i=0;i<classes.length;i++){for(var j=0;j<this.length;j++){this[j].classList.remove(classes[i]);}}return this;},hasClass:function hasClass(className){if(!this[0])return false;else return this[0].classList.contains(className);},toggleClass:function toggleClass(className){var classes=className.split(' ');for(var i=0;i<classes.length;i++){for(var j=0;j<this.length;j++){this[j].classList.toggle(classes[i]);}}return this;},attr:function attr(attrs,value){if(arguments.length===1&&typeof attrs==='string'){// Get attr
if(this[0])return this[0].getAttribute(attrs);else return undefined;}else{// Set attrs
for(var i=0;i<this.length;i++){if(arguments.length===2){// String
this[i].setAttribute(attrs,value);}else{// Object
for(var attrName in attrs){this[i][attrName]=attrs[attrName];this[i].setAttribute(attrName,attrs[attrName]);}}}return this;}},removeAttr:function removeAttr(attr){for(var i=0;i<this.length;i++){this[i].removeAttribute(attr);}return this;},data:function data(key,value){if(typeof value==='undefined'){// Get value
if(this[0]){var dataKey=this[0].getAttribute('data-'+key);if(dataKey)return dataKey;else if(this[0].dom7ElementDataStorage&&key in this[0].dom7ElementDataStorage)return this[0].dom7ElementDataStorage[key];else return undefined;}else return undefined;}else{// Set value
for(var i=0;i<this.length;i++){var el=this[i];if(!el.dom7ElementDataStorage)el.dom7ElementDataStorage={};el.dom7ElementDataStorage[key]=value;}return this;}},// Transforms
transform:function transform(_transform){for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransform=elStyle.MsTransform=elStyle.msTransform=elStyle.MozTransform=elStyle.OTransform=elStyle.transform=_transform;}return this;},transition:function transition(duration){if(typeof duration!=='string'){duration=duration+'ms';}for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransitionDuration=elStyle.MsTransitionDuration=elStyle.msTransitionDuration=elStyle.MozTransitionDuration=elStyle.OTransitionDuration=elStyle.transitionDuration=duration;}return this;},//Events
on:function on(eventName,targetSelector,listener,capture){function handleLiveEvent(e){var target=e.target;if($(target).is(targetSelector))listener.call(target,e);else{var parents=$(target).parents();for(var k=0;k<parents.length;k++){if($(parents[k]).is(targetSelector))listener.call(parents[k],e);}}}var events=eventName.split(' ');var i,j;for(i=0;i<this.length;i++){if(typeof targetSelector==='function'||targetSelector===false){// Usual events
if(typeof targetSelector==='function'){listener=arguments[1];capture=arguments[2]||false;}for(j=0;j<events.length;j++){this[i].addEventListener(events[j],listener,capture);}}else{//Live events
for(j=0;j<events.length;j++){if(!this[i].dom7LiveListeners)this[i].dom7LiveListeners=[];this[i].dom7LiveListeners.push({listener:listener,liveListener:handleLiveEvent});this[i].addEventListener(events[j],handleLiveEvent,capture);}}}return this;},off:function off(eventName,targetSelector,listener,capture){var events=eventName.split(' ');for(var i=0;i<events.length;i++){for(var j=0;j<this.length;j++){if(typeof targetSelector==='function'||targetSelector===false){// Usual events
if(typeof targetSelector==='function'){listener=arguments[1];capture=arguments[2]||false;}this[j].removeEventListener(events[i],listener,capture);}else{// Live event
if(this[j].dom7LiveListeners){for(var k=0;k<this[j].dom7LiveListeners.length;k++){if(this[j].dom7LiveListeners[k].listener===listener){this[j].removeEventListener(events[i],this[j].dom7LiveListeners[k].liveListener,capture);}}}}}}return this;},once:function once(eventName,targetSelector,listener,capture){var dom=this;if(typeof targetSelector==='function'){targetSelector=false;listener=arguments[1];capture=arguments[2];}function proxy(e){listener(e);dom.off(eventName,targetSelector,proxy,capture);}dom.on(eventName,targetSelector,proxy,capture);},trigger:function trigger(eventName,eventData){for(var i=0;i<this.length;i++){var evt;try{evt=new window.CustomEvent(eventName,{detail:eventData,bubbles:true,cancelable:true});}catch(e){evt=document.createEvent('Event');evt.initEvent(eventName,true,true);evt.detail=eventData;}this[i].dispatchEvent(evt);}return this;},transitionEnd:function transitionEnd(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){/*jshint validthis:true */if(e.target!==this)return;callback.call(this,e);for(i=0;i<events.length;i++){dom.off(events[i],fireCallBack);}}if(callback){for(i=0;i<events.length;i++){dom.on(events[i],fireCallBack);}}return this;},// Sizing/Styles
width:function width(){if(this[0]===window){return window.innerWidth;}else{if(this.length>0){return parseFloat(this.css('width'));}else{return null;}}},outerWidth:function outerWidth(includeMargins){if(this.length>0){if(includeMargins)return this[0].offsetWidth+parseFloat(this.css('margin-right'))+parseFloat(this.css('margin-left'));else return this[0].offsetWidth;}else return null;},height:function height(){if(this[0]===window){return window.innerHeight;}else{if(this.length>0){return parseFloat(this.css('height'));}else{return null;}}},outerHeight:function outerHeight(includeMargins){if(this.length>0){if(includeMargins)return this[0].offsetHeight+parseFloat(this.css('margin-top'))+parseFloat(this.css('margin-bottom'));else return this[0].offsetHeight;}else return null;},offset:function offset(){if(this.length>0){var el=this[0];var box=el.getBoundingClientRect();var body=document.body;var clientTop=el.clientTop||body.clientTop||0;var clientLeft=el.clientLeft||body.clientLeft||0;var scrollTop=window.pageYOffset||el.scrollTop;var scrollLeft=window.pageXOffset||el.scrollLeft;return{top:box.top+scrollTop-clientTop,left:box.left+scrollLeft-clientLeft};}else{return null;}},css:function css(props,value){var i;if(arguments.length===1){if(typeof props==='string'){if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(props);}else{for(i=0;i<this.length;i++){for(var prop in props){this[i].style[prop]=props[prop];}}return this;}}if(arguments.length===2&&typeof props==='string'){for(i=0;i<this.length;i++){this[i].style[props]=value;}return this;}return this;},//Dom manipulation
each:function each(callback){for(var i=0;i<this.length;i++){callback.call(this[i],i,this[i]);}return this;},html:function html(_html){if(typeof _html==='undefined'){return this[0]?this[0].innerHTML:undefined;}else{for(var i=0;i<this.length;i++){this[i].innerHTML=_html;}return this;}},is:function is(selector){if(!this[0])return false;var compareWith,i;if(typeof selector==='string'){var el=this[0];if(el===document)return selector===document;if(el===window)return selector===window;if(el.matches)return el.matches(selector);else if(el.webkitMatchesSelector)return el.webkitMatchesSelector(selector);else if(el.mozMatchesSelector)return el.mozMatchesSelector(selector);else if(el.msMatchesSelector)return el.msMatchesSelector(selector);else{compareWith=$(selector);for(i=0;i<compareWith.length;i++){if(compareWith[i]===this[0])return true;}return false;}}else if(selector===document)return this[0]===document;else if(selector===window)return this[0]===window;else{if(selector.nodeType||selector instanceof Dom7){compareWith=selector.nodeType?[selector]:selector;for(i=0;i<compareWith.length;i++){if(compareWith[i]===this[0])return true;}return false;}return false;}},index:function index(){if(this[0]){var child=this[0];var i=0;while((child=child.previousSibling)!==null){if(child.nodeType===1)i++;}return i;}else return undefined;},eq:function eq(index){if(typeof index==='undefined')return this;var length=this.length;var returnIndex;if(index>length-1){return new Dom7([]);}if(index<0){returnIndex=length+index;if(returnIndex<0)return new Dom7([]);else return new Dom7([this[returnIndex]]);}return new Dom7([this[index]]);},append:function append(newChild){var i,j;for(i=0;i<this.length;i++){if(typeof newChild==='string'){var tempDiv=document.createElement('div');tempDiv.innerHTML=newChild;while(tempDiv.firstChild){this[i].appendChild(tempDiv.firstChild);}}else if(newChild instanceof Dom7){for(j=0;j<newChild.length;j++){this[i].appendChild(newChild[j]);}}else{this[i].appendChild(newChild);}}return this;},prepend:function prepend(newChild){var i,j;for(i=0;i<this.length;i++){if(typeof newChild==='string'){var tempDiv=document.createElement('div');tempDiv.innerHTML=newChild;for(j=tempDiv.childNodes.length-1;j>=0;j--){this[i].insertBefore(tempDiv.childNodes[j],this[i].childNodes[0]);}// this[i].insertAdjacentHTML('afterbegin', newChild);
}else if(newChild instanceof Dom7){for(j=0;j<newChild.length;j++){this[i].insertBefore(newChild[j],this[i].childNodes[0]);}}else{this[i].insertBefore(newChild,this[i].childNodes[0]);}}return this;},insertBefore:function insertBefore(selector){var before=$(selector);for(var i=0;i<this.length;i++){if(before.length===1){before[0].parentNode.insertBefore(this[i],before[0]);}else if(before.length>1){for(var j=0;j<before.length;j++){before[j].parentNode.insertBefore(this[i].cloneNode(true),before[j]);}}}},insertAfter:function insertAfter(selector){var after=$(selector);for(var i=0;i<this.length;i++){if(after.length===1){after[0].parentNode.insertBefore(this[i],after[0].nextSibling);}else if(after.length>1){for(var j=0;j<after.length;j++){after[j].parentNode.insertBefore(this[i].cloneNode(true),after[j].nextSibling);}}}},next:function next(selector){if(this.length>0){if(selector){if(this[0].nextElementSibling&&$(this[0].nextElementSibling).is(selector))return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}else{if(this[0].nextElementSibling)return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},nextAll:function nextAll(selector){var nextEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.nextElementSibling){var next=el.nextElementSibling;if(selector){if($(next).is(selector))nextEls.push(next);}else nextEls.push(next);el=next;}return new Dom7(nextEls);},prev:function prev(selector){if(this.length>0){if(selector){if(this[0].previousElementSibling&&$(this[0].previousElementSibling).is(selector))return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}else{if(this[0].previousElementSibling)return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},prevAll:function prevAll(selector){var prevEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.previousElementSibling){var prev=el.previousElementSibling;if(selector){if($(prev).is(selector))prevEls.push(prev);}else prevEls.push(prev);el=prev;}return new Dom7(prevEls);},parent:function parent(selector){var parents=[];for(var i=0;i<this.length;i++){if(selector){if($(this[i].parentNode).is(selector))parents.push(this[i].parentNode);}else{parents.push(this[i].parentNode);}}return $($.unique(parents));},parents:function parents(selector){var parents=[];for(var i=0;i<this.length;i++){var parent=this[i].parentNode;while(parent){if(selector){if($(parent).is(selector))parents.push(parent);}else{parents.push(parent);}parent=parent.parentNode;}}return $($.unique(parents));},find:function find(selector){var foundElements=[];for(var i=0;i<this.length;i++){var found=this[i].querySelectorAll(selector);for(var j=0;j<found.length;j++){foundElements.push(found[j]);}}return new Dom7(foundElements);},children:function children(selector){var children=[];for(var i=0;i<this.length;i++){var childNodes=this[i].childNodes;for(var j=0;j<childNodes.length;j++){if(!selector){if(childNodes[j].nodeType===1)children.push(childNodes[j]);}else{if(childNodes[j].nodeType===1&&$(childNodes[j]).is(selector))children.push(childNodes[j]);}}}return new Dom7($.unique(children));},remove:function remove(){for(var i=0;i<this.length;i++){if(this[i].parentNode)this[i].parentNode.removeChild(this[i]);}return this;},add:function add(){var dom=this;var i,j;for(i=0;i<arguments.length;i++){var toAdd=$(arguments[i]);for(j=0;j<toAdd.length;j++){dom[dom.length]=toAdd[j];dom.length++;}}return dom;}};$.fn=Dom7.prototype;$.unique=function(arr){var unique=[];for(var i=0;i<arr.length;i++){if(unique.indexOf(arr[i])===-1)unique.push(arr[i]);}return unique;};return $;}();/*===========================
   Get Dom libraries
   ===========================*/var swiperDomPlugins=['jQuery','Zepto','Dom7'];for(var i=0;i<swiperDomPlugins.length;i++){if(window[swiperDomPlugins[i]]){addLibraryPlugin(window[swiperDomPlugins[i]]);}}// Required DOM Plugins
var domLib;if(typeof Dom7==='undefined'){domLib=window.Dom7||window.Zepto||window.jQuery;}else{domLib=Dom7;}/*===========================
  Add .swiper plugin from Dom libraries
  ===========================*/function addLibraryPlugin(lib){lib.fn.swiper=function(params){var firstInstance;lib(this).each(function(){var s=new Swiper(this,params);if(!firstInstance)firstInstance=s;});return firstInstance;};}if(domLib){if(!('transitionEnd'in domLib.fn)){domLib.fn.transitionEnd=function(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){/*jshint validthis:true */if(e.target!==this)return;callback.call(this,e);for(i=0;i<events.length;i++){dom.off(events[i],fireCallBack);}}if(callback){for(i=0;i<events.length;i++){dom.on(events[i],fireCallBack);}}return this;};}if(!('transform'in domLib.fn)){domLib.fn.transform=function(transform){for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransform=elStyle.MsTransform=elStyle.msTransform=elStyle.MozTransform=elStyle.OTransform=elStyle.transform=transform;}return this;};}if(!('transition'in domLib.fn)){domLib.fn.transition=function(duration){if(typeof duration!=='string'){duration=duration+'ms';}for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransitionDuration=elStyle.MsTransitionDuration=elStyle.msTransitionDuration=elStyle.MozTransitionDuration=elStyle.OTransitionDuration=elStyle.transitionDuration=duration;}return this;};}}

/***/ },
/* 880 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var config_1 = __webpack_require__(16);
var Spinner = function () {
    function Spinner(_config) {
        this._config = _config;
        this._dur = null;
        this.paused = false;
    }
    Object.defineProperty(Spinner.prototype, "name", {
        get: function get() {
            return this._name;
        },
        set: function set(val) {
            this._name = val;
            this.load();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Spinner.prototype, "duration", {
        get: function get() {
            return this._dur;
        },
        set: function set(val) {
            this._dur = val;
            this.load();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Spinner.prototype.ngOnInit = function () {
        this._init = true;
        this.load();
    };
    /**
     * @private
     */
    Spinner.prototype.load = function () {
        if (this._init) {
            this._l = [];
            this._c = [];
            var name = this._name || this._config.get('spinner', 'ios');
            var spinner = SPINNERS[name];
            if (spinner) {
                this._applied = 'spinner-' + name;
                if (spinner.lines) {
                    for (var i = 0, l = spinner.lines; i < l; i++) {
                        this._l.push(this._loadEle(spinner, i, l));
                    }
                } else if (spinner.circles) {
                    for (var i = 0, l = spinner.circles; i < l; i++) {
                        this._c.push(this._loadEle(spinner, i, l));
                    }
                }
            }
        }
    };
    Spinner.prototype._loadEle = function (spinner, index, total) {
        var duration = this._dur || spinner.dur;
        var data = spinner.fn(duration, index, total);
        data.style.animationDuration = duration + 'ms';
        return data;
    };
    /** @nocollapse */
    Spinner.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-spinner',
            template: '<svg viewBox="0 0 64 64" *ngFor="let i of _c" [ngStyle]="i.style">' + '<circle [attr.r]="i.r" transform="translate(32,32)"></circle>' + '</svg>' + '<svg viewBox="0 0 64 64" *ngFor="let i of _l" [ngStyle]="i.style">' + '<line [attr.y1]="i.y1" [attr.y2]="i.y2" transform="translate(32,32)"></line>' + '</svg>',
            directives: [common_1.NgStyle, common_1.NgFor],
            host: {
                '[class]': '_applied',
                '[class.spinner-paused]': 'paused'
            },
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Spinner.ctorParameters = [{ type: config_1.Config }];
    /** @nocollapse */
    Spinner.propDecorators = {
        'name': [{ type: core_1.Input }],
        'duration': [{ type: core_1.Input }],
        'paused': [{ type: core_1.Input }]
    };
    return Spinner;
}();
exports.Spinner = Spinner;
var SPINNERS = {
    ios: {
        dur: 1000,
        lines: 12,
        fn: function fn(dur, index, total) {
            return {
                y1: 17,
                y2: 29,
                style: {
                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    'ios-small': {
        dur: 1000,
        lines: 12,
        fn: function fn(dur, index, total) {
            return {
                y1: 12,
                y2: 20,
                style: {
                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    bubbles: {
        dur: 1000,
        circles: 9,
        fn: function fn(dur, index, total) {
            return {
                r: 5,
                style: {
                    top: 9 * Math.sin(2 * Math.PI * index / total),
                    left: 9 * Math.cos(2 * Math.PI * index / total),
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    circles: {
        dur: 1000,
        circles: 8,
        fn: function fn(dur, index, total) {
            return {
                r: 5,
                style: {
                    top: 9 * Math.sin(2 * Math.PI * index / total),
                    left: 9 * Math.cos(2 * Math.PI * index / total),
                    animationDelay: -(dur - dur / total * index) + 'ms'
                }
            };
        }
    },
    crescent: {
        dur: 750,
        circles: 1,
        fn: function fn(dur) {
            return {
                r: 26,
                style: {}
            };
        }
    },
    dots: {
        dur: 750,
        circles: 3,
        fn: function fn(dur, index, total) {
            return {
                r: 6,
                style: {
                    left: 9 - 9 * index,
                    animationDelay: -(110 * index) + 'ms'
                }
            };
        }
    }
};

/***/ },
/* 881 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var config_1 = __webpack_require__(16);
var ion_1 = __webpack_require__(58);
var TabButton = function (_super) {
    __extends(TabButton, _super);
    function TabButton(config, elementRef) {
        _super.call(this, elementRef);
        this.ionSelect = new core_1.EventEmitter();
        this.disHover = config.get('hoverCSS') === false;
        this.layout = config.get('tabbarLayout');
    }
    TabButton.prototype.ngOnInit = function () {
        this.tab.btn = this;
        this.layout = this.tab.parent.tabbarLayout || this.layout;
        this.hasTitle = !!this.tab.tabTitle;
        this.hasIcon = !!this.tab.tabIcon && this.layout !== 'icon-hide';
        this.hasTitleOnly = this.hasTitle && !this.hasIcon;
        this.hasIconOnly = this.hasIcon && !this.hasTitle;
        this.hasBadge = !!this.tab.tabBadge;
    };
    TabButton.prototype.onClick = function (ev) {
        this.ionSelect.emit(this.tab);
        ev.preventDefault();
    };
    /** @nocollapse */
    TabButton.decorators = [{ type: core_1.Directive, args: [{
            selector: '.tab-button',
            host: {
                '[attr.id]': 'tab._btnId',
                '[attr.aria-controls]': 'tab._panelId',
                '[attr.aria-selected]': 'tab.isSelected',
                '[class.has-title]': 'hasTitle',
                '[class.has-icon]': 'hasIcon',
                '[class.has-title-only]': 'hasTitleOnly',
                '[class.icon-only]': 'hasIconOnly',
                '[class.has-badge]': 'hasBadge',
                '[class.disable-hover]': 'disHover'
            }
        }] }];
    /** @nocollapse */
    TabButton.ctorParameters = [{ type: config_1.Config }, { type: core_1.ElementRef }];
    /** @nocollapse */
    TabButton.propDecorators = {
        'tab': [{ type: core_1.Input }],
        'ionSelect': [{ type: core_1.Output }],
        'onClick': [{ type: core_1.HostListener, args: ['click', ['$event']] }]
    };
    return TabButton;
}(ion_1.Ion);
exports.TabButton = TabButton;

/***/ },
/* 882 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(17);
var TabHighlight = function () {
    function TabHighlight(_elementRef) {
        this._elementRef = _elementRef;
    }
    TabHighlight.prototype.select = function (tab) {
        var _this = this;
        dom_1.rafFrames(3, function () {
            var d = tab.btn.getDimensions();
            var ele = _this._elementRef.nativeElement;
            ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
            if (!_this._init) {
                _this._init = true;
                dom_1.rafFrames(6, function () {
                    ele.classList.add('animate');
                });
            }
        });
    };
    /** @nocollapse */
    TabHighlight.decorators = [{ type: core_1.Directive, args: [{
            selector: 'tab-highlight'
        }] }];
    /** @nocollapse */
    TabHighlight.ctorParameters = [{ type: core_1.ElementRef }];
    return TabHighlight;
}();
exports.TabHighlight = TabHighlight;

/***/ },
/* 883 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var util_1 = __webpack_require__(7);
var keyboard_1 = __webpack_require__(95);
var nav_controller_1 = __webpack_require__(51);
var tabs_1 = __webpack_require__(311);
var Tab = function (_super) {
    __extends(Tab, _super);
    function Tab(parent, app, config, keyboard, elementRef, zone, renderer, compiler, _cd) {
        // A Tab is a NavController for its child pages
        _super.call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler);
        this.parent = parent;
        this._cd = _cd;
        this._isEnabled = true;
        this._isShown = true;
        this.ionSelect = new core_1.EventEmitter();
        parent.add(this);
        if (parent.rootNav) {
            this._sbEnabled = parent.rootNav.isSwipeBackEnabled();
        }
        this._panelId = 'tabpanel-' + this.id;
        this._btnId = 'tab-' + this.id;
    }
    Object.defineProperty(Tab.prototype, "enabled", {
        get: function get() {
            return this._isEnabled;
        },
        set: function set(val) {
            this._isEnabled = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "show", {
        get: function get() {
            return this._isShown;
        },
        set: function set(val) {
            this._isShown = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "swipeBackEnabled", {
        get: function get() {
            return this._sbEnabled;
        },
        set: function set(val) {
            this._sbEnabled = util_1.isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "_vp", {
        set: function set(val) {
            this.setViewport(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Tab.prototype.ngOnInit = function () {
        this.tabBadgeStyle = this.tabBadgeStyle ? this.tabBadgeStyle : 'default';
    };
    /**
     * @private
     */
    Tab.prototype.load = function (opts, done) {
        if (!this._loaded && this.root) {
            this.push(this.root, this.rootParams, opts).then(function () {
                done(true);
            });
            this._loaded = true;
        } else {
            done(false);
        }
    };
    /**
     * @private
     */
    Tab.prototype.preload = function (wait) {
        var _this = this;
        this._loadTmr = setTimeout(function () {
            if (!_this._loaded) {
                console.debug('Tabs, preload', _this.id);
                _this.load({
                    animate: false,
                    preload: true
                }, function () {});
            }
        }, wait);
    };
    /**
     * @private
     */
    Tab.prototype.loadPage = function (viewCtrl, viewport, opts, done) {
        var _this = this;
        var isTabSubPage = this.parent.subPages && viewCtrl.index > 0;
        if (isTabSubPage) {
            viewport = this.parent.portal;
        }
        _super.prototype.loadPage.call(this, viewCtrl, viewport, opts, function () {
            if (isTabSubPage) {
                // add the .tab-subpage css class to tabs pages that should act like subpages
                var pageEleRef = viewCtrl.pageRef();
                if (pageEleRef) {
                    _this._renderer.setElementClass(pageEleRef.nativeElement, 'tab-subpage', true);
                }
            }
            done();
        });
    };
    /**
     * @private
     */
    Tab.prototype.setSelected = function (isSelected) {
        this.isSelected = isSelected;
        if (isSelected) {
            // this is the selected tab, detect changes
            this._cd.reattach();
        } else {
            // this tab is not selected, do not detect changes
            this._cd.detach();
        }
    };
    Object.defineProperty(Tab.prototype, "index", {
        /**
         * @private
         */
        get: function get() {
            return this.parent.getIndex(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Tab.prototype.ngOnDestroy = function () {
        clearTimeout(this._loadTmr);
        _super.prototype.ngOnDestroy.call(this);
    };
    /** @nocollapse */
    Tab.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-tab',
            host: {
                '[class.show-tab]': 'isSelected',
                '[attr.id]': '_panelId',
                '[attr.aria-labelledby]': '_btnId',
                'role': 'tabpanel'
            },
            template: '<div #viewport></div><div class="nav-decor"></div>',
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [common_1.NgIf]
        }] }];
    /** @nocollapse */
    Tab.ctorParameters = [{ type: tabs_1.Tabs, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () {
                return tabs_1.Tabs;
            })] }] }, { type: app_1.App }, { type: config_1.Config }, { type: keyboard_1.Keyboard }, { type: core_1.ElementRef }, { type: core_1.NgZone }, { type: core_1.Renderer }, { type: core_1.ComponentResolver }, { type: core_1.ChangeDetectorRef }];
    /** @nocollapse */
    Tab.propDecorators = {
        'root': [{ type: core_1.Input }],
        'rootParams': [{ type: core_1.Input }],
        'tabTitle': [{ type: core_1.Input }],
        'tabIcon': [{ type: core_1.Input }],
        'tabBadge': [{ type: core_1.Input }],
        'tabBadgeStyle': [{ type: core_1.Input }],
        'enabled': [{ type: core_1.Input }],
        'show': [{ type: core_1.Input }],
        'swipeBackEnabled': [{ type: core_1.Input }],
        'ionSelect': [{ type: core_1.Output }],
        '_vp': [{ type: core_1.ViewChild, args: ['viewport', { read: core_1.ViewContainerRef }] }]
    };
    return Tab;
}(nav_controller_1.NavController);
exports.Tab = Tab;

/***/ },
/* 884 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activator_1 = __webpack_require__(467);
var dom_1 = __webpack_require__(17);
/**
 * @private
 */
var RippleActivator = function (_super) {
    __extends(RippleActivator, _super);
    function RippleActivator(app, config) {
        _super.call(this, app, config);
    }
    RippleActivator.prototype.downAction = function (ev, activatableEle, startCoord) {
        var self = this;
        if (self.disableActivated(ev)) {
            return;
        }
        // queue to have this element activated
        self._queue.push(activatableEle);
        dom_1.nativeRaf(function () {
            for (var i = 0; i < self._queue.length; i++) {
                var queuedEle = self._queue[i];
                if (queuedEle && queuedEle.parentNode) {
                    self._active.push(queuedEle);
                    // DOM WRITE
                    queuedEle.classList.add(self._css);
                    var j = queuedEle.childElementCount;
                    while (j--) {
                        var rippleEle = queuedEle.children[j];
                        if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
                            // DOM WRITE
                            rippleEle.style.left = '-9999px';
                            rippleEle.style.opacity = '';
                            rippleEle.style[dom_1.CSS.transform] = 'scale(0.001) translateZ(0px)';
                            rippleEle.style[dom_1.CSS.transition] = '';
                            // DOM READ
                            var clientRect = activatableEle.getBoundingClientRect();
                            rippleEle.$top = clientRect.top;
                            rippleEle.$left = clientRect.left;
                            rippleEle.$width = clientRect.width;
                            rippleEle.$height = clientRect.height;
                            break;
                        }
                    }
                }
            }
            self._queue = [];
        });
    };
    RippleActivator.prototype.upAction = function (ev, activatableEle, startCoord) {
        var self = this;
        if (!dom_1.hasPointerMoved(6, startCoord, dom_1.pointerCoord(ev))) {
            var i = activatableEle.childElementCount;
            while (i--) {
                var rippleEle = activatableEle.children[i];
                if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
                    var clientPointerX = startCoord.x - rippleEle.$left;
                    var clientPointerY = startCoord.y - rippleEle.$top;
                    var x = Math.max(Math.abs(rippleEle.$width - clientPointerX), clientPointerX) * 2;
                    var y = Math.max(Math.abs(rippleEle.$height - clientPointerY), clientPointerY) * 2;
                    var diameter = Math.min(Math.max(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), 64), 240);
                    if (activatableEle.hasAttribute('ion-item')) {
                        diameter = Math.min(diameter, 140);
                    }
                    var radius = Math.sqrt(rippleEle.$width + rippleEle.$height);
                    var scaleTransitionDuration = Math.max(1600 * Math.sqrt(radius / TOUCH_DOWN_ACCEL) + 0.5, 260);
                    var opacityTransitionDuration = scaleTransitionDuration * 0.7;
                    var opacityTransitionDelay = scaleTransitionDuration - opacityTransitionDuration;
                    // DOM WRITE
                    rippleEle.style.width = rippleEle.style.height = diameter + 'px';
                    rippleEle.style.marginTop = rippleEle.style.marginLeft = -(diameter / 2) + 'px';
                    rippleEle.style.left = clientPointerX + 'px';
                    rippleEle.style.top = clientPointerY + 'px';
                    rippleEle.style.opacity = '0';
                    rippleEle.style[dom_1.CSS.transform] = 'scale(1) translateZ(0px)';
                    rippleEle.style[dom_1.CSS.transition] = 'transform ' + scaleTransitionDuration + 'ms,opacity ' + opacityTransitionDuration + 'ms ' + opacityTransitionDelay + 'ms';
                }
            }
        }
        _super.prototype.upAction.call(this, ev, activatableEle, startCoord);
    };
    RippleActivator.prototype.deactivate = function () {
        // remove the active class from all active elements
        var self = this;
        self._queue = [];
        dom_1.rafFrames(2, function () {
            for (var i = 0; i < self._active.length; i++) {
                self._active[i].classList.remove(self._css);
            }
            self._active = [];
        });
    };
    return RippleActivator;
}(activator_1.Activator);
exports.RippleActivator = RippleActivator;
var TOUCH_DOWN_ACCEL = 300;

/***/ },
/* 885 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var activator_1 = __webpack_require__(467);
var app_1 = __webpack_require__(57);
var config_1 = __webpack_require__(16);
var dom_1 = __webpack_require__(17);
var ripple_1 = __webpack_require__(884);
var TapClick = function () {
    function TapClick(config, app, zone) {
        this.app = app;
        this.lastTouch = 0;
        this.disableClick = 0;
        this.lastActivated = 0;
        var self = this;
        if (config.get('activator') === 'ripple') {
            self.activator = new ripple_1.RippleActivator(app, config);
        } else if (config.get('activator') === 'highlight') {
            self.activator = new activator_1.Activator(app, config);
        }
        self.usePolyfill = config.get('tapPolyfill') === true;
        zone.runOutsideAngular(function () {
            addListener('click', self.click.bind(self), true);
            addListener('touchstart', self.touchStart.bind(self));
            addListener('touchend', self.touchEnd.bind(self));
            addListener('touchcancel', self.pointerCancel.bind(self));
            addListener('mousedown', self.mouseDown.bind(self), true);
            addListener('mouseup', self.mouseUp.bind(self), true);
        });
        self.pointerMove = function (ev) {
            if (dom_1.hasPointerMoved(POINTER_MOVE_UNTIL_CANCEL, self.startCoord, dom_1.pointerCoord(ev))) {
                self.pointerCancel(ev);
            }
        };
    }
    TapClick.prototype.touchStart = function (ev) {
        this.lastTouch = Date.now();
        this.pointerStart(ev);
    };
    TapClick.prototype.touchEnd = function (ev) {
        this.lastTouch = Date.now();
        if (this.usePolyfill && this.startCoord && this.app.isEnabled()) {
            // only dispatch mouse click events from a touchend event
            // when tapPolyfill config is true, and the startCoordand endCoord
            // are not too far off from each other
            var endCoord = dom_1.pointerCoord(ev);
            if (!dom_1.hasPointerMoved(POINTER_TOLERANCE, this.startCoord, endCoord)) {
                // prevent native mouse click events for XX amount of time
                this.disableClick = this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT;
                if (this.app.isScrolling()) {
                    // do not fire off a click event while the app was scrolling
                    console.debug('click from touch prevented by scrolling ' + Date.now());
                } else {
                    // dispatch a mouse click event
                    console.debug('create click from touch ' + Date.now());
                    var clickEvent = document.createEvent('MouseEvents');
                    clickEvent.initMouseEvent('click', true, true, window, 1, 0, 0, endCoord.x, endCoord.y, false, false, false, false, 0, null);
                    clickEvent.isIonicTap = true;
                    ev.target.dispatchEvent(clickEvent);
                }
            }
        }
        this.pointerEnd(ev);
    };
    TapClick.prototype.mouseDown = function (ev) {
        if (this.isDisabledNativeClick()) {
            console.debug('mouseDown prevent ' + ev.target.tagName + ' ' + Date.now());
            // does not prevent default on purpose
            // so native blur events from inputs can happen
            ev.stopPropagation();
        } else if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
            this.pointerStart(ev);
        }
    };
    TapClick.prototype.mouseUp = function (ev) {
        if (this.isDisabledNativeClick()) {
            console.debug('mouseUp prevent ' + ev.target.tagName + ' ' + Date.now());
            ev.preventDefault();
            ev.stopPropagation();
        }
        if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
            this.pointerEnd(ev);
        }
    };
    TapClick.prototype.pointerStart = function (ev) {
        var activatableEle = getActivatableTarget(ev.target);
        if (activatableEle) {
            this.startCoord = dom_1.pointerCoord(ev);
            var now = Date.now();
            if (this.lastActivated + 150 < now) {
                this.activator && this.activator.downAction(ev, activatableEle, this.startCoord);
                this.lastActivated = now;
            }
            this.moveListeners(true);
        } else {
            this.startCoord = null;
        }
    };
    TapClick.prototype.pointerEnd = function (ev) {
        if (this.startCoord && this.activator) {
            var activatableEle = getActivatableTarget(ev.target);
            if (activatableEle) {
                this.activator.upAction(ev, activatableEle, this.startCoord);
            }
        }
        this.moveListeners(false);
    };
    TapClick.prototype.pointerCancel = function (ev) {
        console.debug('pointerCancel from ' + ev.type + ' ' + Date.now());
        this.activator && this.activator.clearState();
        this.moveListeners(false);
    };
    TapClick.prototype.moveListeners = function (shouldAdd) {
        removeListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
        if (shouldAdd) {
            addListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
        }
    };
    TapClick.prototype.click = function (ev) {
        var preventReason = null;
        if (!this.app.isEnabled()) {
            preventReason = 'appDisabled';
        } else if (!ev.isIonicTap && this.isDisabledNativeClick()) {
            preventReason = 'nativeClick';
        }
        if (preventReason !== null) {
            console.debug('click prevent ' + preventReason + ' ' + Date.now());
            ev.preventDefault();
            ev.stopPropagation();
        }
    };
    TapClick.prototype.isDisabledNativeClick = function () {
        return this.disableClick > Date.now();
    };
    /** @nocollapse */
    TapClick.decorators = [{ type: core_1.Injectable }];
    /** @nocollapse */
    TapClick.ctorParameters = [{ type: config_1.Config }, { type: app_1.App }, { type: core_1.NgZone }];
    return TapClick;
}();
exports.TapClick = TapClick;
function getActivatableTarget(ele) {
    var targetEle = ele;
    for (var x = 0; x < 4; x++) {
        if (!targetEle) break;
        if (exports.isActivatable(targetEle)) return targetEle;
        targetEle = targetEle.parentElement;
    }
    return null;
}
/**
 * @private
 */
exports.isActivatable = function (ele) {
    if (ACTIVATABLE_ELEMENTS.test(ele.tagName)) {
        return true;
    }
    var attributes = ele.attributes;
    for (var i = 0, l = attributes.length; i < l; i++) {
        if (ACTIVATABLE_ATTRIBUTES.test(attributes[i].name)) {
            return true;
        }
    }
    return false;
};
function addListener(type, listener, useCapture) {
    document.addEventListener(type, listener, useCapture);
}
function removeListener(type, listener) {
    document.removeEventListener(type, listener);
}
var ACTIVATABLE_ELEMENTS = /^(A|BUTTON)$/;
var ACTIVATABLE_ATTRIBUTES = /tappable|button/i;
var POINTER_TOLERANCE = 4;
var POINTER_MOVE_UNTIL_CANCEL = 10;
var DISABLE_NATIVE_CLICK_AMOUNT = 2500;

/***/ },
/* 886 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(5);
var form_1 = __webpack_require__(73);
var util_1 = __webpack_require__(7);
var item_1 = __webpack_require__(69);
var dom_1 = __webpack_require__(17);
var ui_event_manager_1 = __webpack_require__(153);
exports.TOGGLE_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () {
        return Toggle;
    }), multi: true });
var Toggle = function () {
    function Toggle(_form, _elementRef, _renderer, _item) {
        this._form = _form;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._item = _item;
        this._checked = false;
        this._disabled = false;
        this._activated = false;
        this._msPrv = 0;
        this._events = new ui_event_manager_1.UIEventManager();
        this.ionChange = new core_1.EventEmitter();
        this._form.register(this);
        if (_item) {
            this.id = 'tgl-' + _item.registerInput('toggle');
            this._labelId = 'lbl-' + _item.id;
            this._item.setCssClass('item-toggle', true);
        }
    }
    Toggle.prototype.pointerDown = function (ev) {
        this._startX = dom_1.pointerCoord(ev).x;
        this._activated = true;
        return true;
    };
    Toggle.prototype.pointerMove = function (ev) {
        if (this._startX) {
            var currentX = dom_1.pointerCoord(ev).x;
            console.debug('toggle, pointerMove', ev.type, currentX);
            if (this._checked) {
                if (currentX + 15 < this._startX) {
                    this.onChange(false);
                    this._startX = currentX;
                    this._activated = true;
                }
            } else if (currentX - 15 > this._startX) {
                this.onChange(true);
                this._startX = currentX;
                this._activated = currentX < this._startX + 5;
            }
        }
    };
    Toggle.prototype.pointerUp = function (ev) {
        if (this._startX) {
            var endX = dom_1.pointerCoord(ev).x;
            if (this.checked) {
                if (this._startX + 4 > endX) {
                    this.onChange(false);
                }
            } else if (this._startX - 4 < endX) {
                this.onChange(true);
            }
            this._activated = false;
            this._startX = null;
        }
    };
    Object.defineProperty(Toggle.prototype, "checked", {
        get: function get() {
            return this._checked;
        },
        set: function set(val) {
            this._setChecked(util_1.isTrueProperty(val));
            this.onChange(this._checked);
        },
        enumerable: true,
        configurable: true
    });
    Toggle.prototype._setChecked = function (isChecked) {
        if (isChecked !== this._checked) {
            this._checked = isChecked;
            if (this._init) {
                this.ionChange.emit(this);
            }
            this._item && this._item.setCssClass('item-toggle-checked', isChecked);
        }
    };
    /**
     * @private
     */
    Toggle.prototype.writeValue = function (val) {
        this._setChecked(util_1.isTrueProperty(val));
    };
    /**
     * @private
     */
    Toggle.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function (isChecked) {
            console.debug('toggle, onChange', isChecked);
            fn(isChecked);
            _this._setChecked(isChecked);
            _this.onTouched();
        };
    };
    /**
     * @private
     */
    Toggle.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    Object.defineProperty(Toggle.prototype, "disabled", {
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = util_1.isTrueProperty(val);
            this._item && this._item.setCssClass('item-toggle-disabled', this._disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Toggle.prototype.onChange = function (isChecked) {
        // used when this input does not have an ngModel or ngControl
        console.debug('toggle, onChange (no ngModel)', isChecked);
        this._setChecked(isChecked);
        this.onTouched();
    };
    /**
     * @private
     */
    Toggle.prototype.onTouched = function () {};
    /**
     * @private
     */
    Toggle.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._init = true;
        this._events.pointerEventsRef(this._elementRef, function (ev) {
            return _this.pointerDown(ev);
        }, function (ev) {
            return _this.pointerMove(ev);
        }, function (ev) {
            return _this.pointerUp(ev);
        });
    };
    /**
     * @private
     */
    Toggle.prototype.ngOnDestroy = function () {
        this._form.deregister(this);
        this._events.unlistenAll();
    };
    /** @nocollapse */
    Toggle.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-toggle',
            template: '<div class="toggle-icon" [class.toggle-checked]="_checked" [class.toggle-activated]="_activated">' + '<div class="toggle-inner"></div>' + '</div>' + '<button role="checkbox" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
            host: {
                '[class.toggle-disabled]': '_disabled'
            },
            providers: [exports.TOGGLE_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    Toggle.ctorParameters = [{ type: form_1.Form }, { type: core_1.ElementRef }, { type: core_1.Renderer }, { type: item_1.Item, decorators: [{ type: core_1.Optional }] }];
    /** @nocollapse */
    Toggle.propDecorators = {
        'ionChange': [{ type: core_1.Output }],
        'checked': [{ type: core_1.Input }],
        'disabled': [{ type: core_1.Input }]
    };
    return Toggle;
}();
exports.Toggle = Toggle;

/***/ },
/* 887 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var button_1 = __webpack_require__(308);
var navbar_1 = __webpack_require__(201);
var toolbar_1 = __webpack_require__(202);
var ToolbarItem = function () {
    function ToolbarItem(elementRef, toolbar, navbar) {
        toolbar && toolbar.addItemRef(elementRef);
        navbar && navbar.addItemRef(elementRef);
        this.inToolbar = !!(toolbar || navbar);
    }
    Object.defineProperty(ToolbarItem.prototype, "_buttons", {
        set: function set(buttons) {
            if (this.inToolbar) {
                button_1.Button.setRoles(buttons, 'bar-button');
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    ToolbarItem.decorators = [{ type: core_1.Directive, args: [{
            selector: 'ion-buttons,[menuToggle]'
        }] }];
    /** @nocollapse */
    ToolbarItem.ctorParameters = [{ type: core_1.ElementRef }, { type: toolbar_1.Toolbar, decorators: [{ type: core_1.Optional }] }, { type: navbar_1.Navbar, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [core_1.forwardRef(function () {
                return navbar_1.Navbar;
            })] }] }];
    /** @nocollapse */
    ToolbarItem.propDecorators = {
        '_buttons': [{ type: core_1.ContentChildren, args: [button_1.Button] }]
    };
    return ToolbarItem;
}();
exports.ToolbarItem = ToolbarItem;

/***/ },
/* 888 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(0);
var ion_1 = __webpack_require__(58);
var navbar_1 = __webpack_require__(201);
var toolbar_1 = __webpack_require__(202);
var ToolbarTitle = function (_super) {
    __extends(ToolbarTitle, _super);
    function ToolbarTitle(_elementRef, toolbar, navbar) {
        _super.call(this, _elementRef);
        this._elementRef = _elementRef;
        toolbar && toolbar.setTitleCmp(this);
        navbar && navbar.setTitleCmp(this);
    }
    /**
     * @private
     */
    ToolbarTitle.prototype.getTitleText = function () {
        return this._elementRef.nativeElement.textContent;
    };
    /** @nocollapse */
    ToolbarTitle.decorators = [{ type: core_1.Component, args: [{
            selector: 'ion-title',
            template: '<div class="toolbar-title">' + '<ng-content></ng-content>' + '</div>',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None
        }] }];
    /** @nocollapse */
    ToolbarTitle.ctorParameters = [{ type: core_1.ElementRef }, { type: toolbar_1.Toolbar, decorators: [{ type: core_1.Optional }] }, { type: navbar_1.Navbar, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [core_1.forwardRef(function () {
                return navbar_1.Navbar;
            })] }] }];
    return ToolbarTitle;
}(ion_1.Ion);
exports.ToolbarTitle = ToolbarTitle;

/***/ },
/* 889 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var core_1 = __webpack_require__(0);
var virtual_util_1 = __webpack_require__(890);
var dom_1 = __webpack_require__(17);
var config_1 = __webpack_require__(16);
var content_1 = __webpack_require__(111);
var img_1 = __webpack_require__(459);
var util_1 = __webpack_require__(7);
var platform_1 = __webpack_require__(72);
var view_controller_1 = __webpack_require__(43);
var virtual_item_1 = __webpack_require__(468);
var VirtualScroll = function () {
    function VirtualScroll(_iterableDiffers, _elementRef, _renderer, _zone, _cd, _content, _platform, _ctrl, config) {
        this._iterableDiffers = _iterableDiffers;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._zone = _zone;
        this._cd = _cd;
        this._content = _content;
        this._platform = _platform;
        this._ctrl = _ctrl;
        this._records = [];
        this._cells = [];
        this._nodes = [];
        this._vHeight = 0;
        this._lastCheck = 0;
        this._data = {
            scrollTop: 0
        };
        this._queue = null;
        this.bufferRatio = 2;
        this.approxItemWidth = '100%';
        this.approxItemHeight = '40px';
        this.approxHeaderWidth = '100%';
        this.approxHeaderHeight = '40px';
        this.approxFooterWidth = '100%';
        this.approxFooterHeight = '40px';
        this._eventAssist = config.getBoolean('virtualScrollEventAssist');
    }
    Object.defineProperty(VirtualScroll.prototype, "virtualScroll", {
        set: function set(val) {
            this._records = val;
            if (util_1.isBlank(this._differ) && util_1.isPresent(val)) {
                this._differ = this._iterableDiffers.find(val).create(this._cd, this._trackBy);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VirtualScroll.prototype, "headerFn", {
        set: function set(val) {
            if (util_1.isFunction(val)) {
                this._hdrFn = val.bind(this._ctrl && this._ctrl.instance || this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VirtualScroll.prototype, "footerFn", {
        set: function set(val) {
            if (util_1.isFunction(val)) {
                this._ftrFn = val.bind(this._ctrl && this._ctrl.instance || this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VirtualScroll.prototype, "virtualTrackBy", {
        set: function set(val) {
            this._trackBy = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    VirtualScroll.prototype.ngDoCheck = function () {
        if (this._init) {
            this.update(true);
        }
    };
    /**
     * @private
     */
    VirtualScroll.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this._init) {
            if (!this._itmTmp) {
                throw 'virtualItem required within virtualScroll';
            }
            this._init = true;
            this.update(true);
            this._platform.onResize(function () {
                console.debug('VirtualScroll, onResize');
                _this.update(false);
            });
        }
    };
    /**
     * @private
     * DOM READ THEN DOM WRITE
     */
    VirtualScroll.prototype.update = function (checkChanges) {
        var self = this;
        if (!self._records || !self._records.length) return;
        if (checkChanges) {
            if (util_1.isPresent(self._differ)) {
                var changes = self._differ.diff(self._records);
                if (!util_1.isPresent(changes)) return;
            }
        }
        console.debug('VirtualScroll, update, records:', self._records.length);
        // reset everything
        self._cells.length = 0;
        self._nodes.length = 0;
        self._itmTmp.viewContainer.clear();
        self._elementRef.nativeElement.parentElement.scrollTop = 0;
        var attempts = 0;
        function readDimensions(done /* cuz promises add unnecessary overhead here */) {
            if (self._data.valid) {
                // good to go, we already have good dimension data
                done();
            } else {
                // ******** DOM READ ****************
                virtual_util_1.calcDimensions(self._data, self._elementRef.nativeElement.parentElement, self.approxItemWidth, self.approxItemHeight, self.approxHeaderWidth, self.approxHeaderHeight, self.approxFooterWidth, self.approxFooterHeight, self.bufferRatio);
                if (self._data.valid) {
                    // sweet, we got some good dimension data!
                    done();
                } else if (attempts < 30) {
                    // oh no! the DOM doesn't have good data yet!
                    // let's try again in XXms, and give up eventually if we never get data
                    attempts++;
                    dom_1.nativeRaf(function () {
                        readDimensions(done);
                    });
                }
            }
        }
        // ******** DOM READ ****************
        readDimensions(function () {
            virtual_util_1.processRecords(self._data.renderHeight, self._records, self._cells, self._hdrFn, self._ftrFn, self._data);
            // ******** DOM WRITE ****************
            self.renderVirtual();
            // list for scroll events
            self.addScrollListener();
        });
    };
    /**
     * @private
     * DOM WRITE
     */
    VirtualScroll.prototype.renderVirtual = function () {
        // initialize nodes with the correct cell data
        this._data.topCell = 0;
        this._data.bottomCell = this._cells.length - 1;
        virtual_util_1.populateNodeData(0, this._data.bottomCell, this._data.viewWidth, true, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, true);
        // ******** DOM WRITE ****************
        this._cd.detectChanges();
        // wait a frame before trying to read and calculate the dimensions
        dom_1.nativeRaf(this.postRenderVirtual.bind(this));
    };
    /**
     * @private
     * DOM READ THEN DOM WRITE
     */
    VirtualScroll.prototype.postRenderVirtual = function () {
        // ******** DOM READ THEN DOM WRITE ****************
        virtual_util_1.initReadNodes(this._nodes, this._cells, this._data);
        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
        // ******** DOM WRITE ****************
        this._renderer.setElementClass(this._elementRef.nativeElement, 'virtual-scroll', true);
        // ******** DOM WRITE ****************
        virtual_util_1.writeToNodes(this._nodes, this._cells, this._records.length);
        // ******** DOM WRITE ****************
        this.setVirtualHeight(virtual_util_1.estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
    };
    /**
     * @private
     */
    VirtualScroll.prototype.scrollUpdate = function () {
        dom_1.clearNativeTimeout(this._tmId);
        this._tmId = dom_1.nativeTimeout(this.onScrollEnd.bind(this), SCROLL_END_TIMEOUT_MS);
        var data = this._data;
        if (this._queue === QUEUE_CHANGE_DETECTION) {
            // ******** DOM WRITE ****************
            this._cd.detectChanges();
            // ******** DOM WRITE ****************
            virtual_util_1.writeToNodes(this._nodes, this._cells, this._records.length);
            // ******** DOM WRITE ****************
            this.setVirtualHeight(virtual_util_1.estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
            this._queue = null;
        } else {
            data.scrollDiff = data.scrollTop - this._lastCheck;
            if (Math.abs(data.scrollDiff) > SCROLL_DIFFERENCE_MINIMUM) {
                // don't bother updating if the scrollTop hasn't changed much
                this._lastCheck = data.scrollTop;
                if (data.scrollDiff > 0) {
                    // load data we may not have processed yet
                    var stopAtHeight = data.scrollTop + data.renderHeight;
                    virtual_util_1.processRecords(stopAtHeight, this._records, this._cells, this._hdrFn, this._ftrFn, data);
                }
                // ******** DOM READ ****************
                virtual_util_1.updateDimensions(this._nodes, this._cells, data, false);
                virtual_util_1.adjustRendered(this._cells, data);
                var madeChanges = virtual_util_1.populateNodeData(data.topCell, data.bottomCell, data.viewWidth, data.scrollDiff > 0, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, false);
                if (madeChanges) {
                    // do not update images while scrolling
                    this._imgs.forEach(function (img) {
                        img.enable(false);
                    });
                    // queue making updates in the next frame
                    this._queue = QUEUE_CHANGE_DETECTION;
                } else {
                    this._queue = null;
                }
            }
        }
    };
    /**
     * @private
     * DOM WRITE
     */
    VirtualScroll.prototype.onScrollEnd = function () {
        // scrolling is done, allow images to be updated now
        this._imgs.forEach(function (img) {
            img.enable(true);
        });
        // ******** DOM READ ****************
        virtual_util_1.updateDimensions(this._nodes, this._cells, this._data, false);
        virtual_util_1.adjustRendered(this._cells, this._data);
        // ******** DOM WRITE ****************
        this._cd.detectChanges();
        // ******** DOM WRITE ****************
        this.setVirtualHeight(virtual_util_1.estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.05));
    };
    /**
     * @private
     * DOM WRITE
     */
    VirtualScroll.prototype.setVirtualHeight = function (newVirtualHeight) {
        if (newVirtualHeight !== this._vHeight) {
            // ******** DOM WRITE ****************
            this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', newVirtualHeight > 0 ? newVirtualHeight + 'px' : '');
            this._vHeight = newVirtualHeight;
            console.debug('VirtualScroll, height', newVirtualHeight);
        }
    };
    /**
     * @private
     * NO DOM
     */
    VirtualScroll.prototype.addScrollListener = function () {
        var self = this;
        if (!self._unreg) {
            self._zone.runOutsideAngular(function () {
                function onScroll() {
                    // ******** DOM READ ****************
                    self._data.scrollTop = self._content.getScrollTop();
                    // ******** DOM READ THEN DOM WRITE ****************
                    self.scrollUpdate();
                }
                if (self._eventAssist) {
                    // use JS scrolling for iOS UIWebView
                    // goal is to completely remove this when iOS
                    // fully supports scroll events
                    // listen to JS scroll events
                    self._unreg = self._content.jsScroll(onScroll);
                } else {
                    // listen to native scroll events
                    self._unreg = self._content.addScrollListener(onScroll);
                }
            });
        }
    };
    /**
     * @private
     * NO DOM
     */
    VirtualScroll.prototype.ngOnDestroy = function () {
        this._unreg && this._unreg();
        this._unreg = null;
    };
    /** @nocollapse */
    VirtualScroll.decorators = [{ type: core_1.Directive, args: [{
            selector: '[virtualScroll]'
        }] }];
    /** @nocollapse */
    VirtualScroll.ctorParameters = [{ type: core_1.IterableDiffers }, { type: core_1.ElementRef }, { type: core_1.Renderer }, { type: core_1.NgZone }, { type: core_1.ChangeDetectorRef }, { type: content_1.Content }, { type: platform_1.Platform }, { type: view_controller_1.ViewController, decorators: [{ type: core_1.Optional }] }, { type: config_1.Config }];
    /** @nocollapse */
    VirtualScroll.propDecorators = {
        '_itmTmp': [{ type: core_1.ContentChild, args: [virtual_item_1.VirtualItem] }],
        '_hdrTmp': [{ type: core_1.ContentChild, args: [virtual_item_1.VirtualHeader] }],
        '_ftrTmp': [{ type: core_1.ContentChild, args: [virtual_item_1.VirtualFooter] }],
        '_imgs': [{ type: core_1.ContentChildren, args: [img_1.Img] }],
        'virtualScroll': [{ type: core_1.Input }],
        'bufferRatio': [{ type: core_1.Input }],
        'approxItemWidth': [{ type: core_1.Input }],
        'approxItemHeight': [{ type: core_1.Input }],
        'approxHeaderWidth': [{ type: core_1.Input }],
        'approxHeaderHeight': [{ type: core_1.Input }],
        'approxFooterWidth': [{ type: core_1.Input }],
        'approxFooterHeight': [{ type: core_1.Input }],
        'headerFn': [{ type: core_1.Input }],
        'footerFn': [{ type: core_1.Input }],
        'virtualTrackBy': [{ type: core_1.Input }]
    };
    return VirtualScroll;
}();
exports.VirtualScroll = VirtualScroll;
var SCROLL_END_TIMEOUT_MS = 140;
var SCROLL_DIFFERENCE_MINIMUM = 20;
var QUEUE_CHANGE_DETECTION = 0;

/***/ },
/* 890 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var dom_1 = __webpack_require__(17);
/**
 * NO DOM
 */
function processRecords(stopAtHeight, records, cells, headerFn, footerFn, data) {
    var record;
    var startRecordIndex;
    var previousCell;
    var tmpData;
    var lastRecordIndex = records.length - 1;
    if (cells.length) {
        // we already have cells
        previousCell = cells[cells.length - 1];
        if (previousCell.top + previousCell.height > stopAtHeight) {
            return;
        }
        startRecordIndex = previousCell.record + 1;
    } else {
        // no cells have been created yet
        previousCell = {
            row: 0,
            width: 0,
            height: 0,
            top: 0,
            left: 0,
            tmpl: -1
        };
        startRecordIndex = 0;
    }
    var processedTotal = 0;
    for (var recordIndex = startRecordIndex; recordIndex <= lastRecordIndex; recordIndex++) {
        record = records[recordIndex];
        if (headerFn) {
            tmpData = headerFn(record, recordIndex, records);
            if (tmpData !== null) {
                // add header data
                previousCell = addCell(previousCell, recordIndex, TEMPLATE_HEADER, tmpData, data.hdrWidth, data.hdrHeight, data.viewWidth);
                cells.push(previousCell);
            }
        }
        // add item data
        previousCell = addCell(previousCell, recordIndex, TEMPLATE_ITEM, null, data.itmWidth, data.itmHeight, data.viewWidth);
        cells.push(previousCell);
        if (footerFn) {
            tmpData = footerFn(record, recordIndex, records);
            if (tmpData !== null) {
                // add footer data
                previousCell = addCell(previousCell, recordIndex, TEMPLATE_FOOTER, tmpData, data.ftrWidth, data.ftrHeight, data.viewWidth);
                cells.push(previousCell);
            }
        }
        if (previousCell.record === lastRecordIndex) {
            previousCell.isLast = true;
        }
        // should always process at least 3 records
        processedTotal++;
        if (previousCell.top + previousCell.height + data.itmHeight > stopAtHeight && processedTotal > 3) {
            return;
        }
    }
}
exports.processRecords = processRecords;
function addCell(previousCell, recordIndex, tmpl, tmplData, cellWidth, cellHeight, viewportWidth) {
    var newCell;
    if (previousCell.left + previousCell.width + cellWidth > viewportWidth) {
        // add a new cell in a new row
        newCell = {
            record: recordIndex,
            tmpl: tmpl,
            row: previousCell.row + 1,
            width: cellWidth,
            height: cellHeight,
            top: previousCell.top + previousCell.height,
            left: 0,
            reads: 0
        };
    } else {
        // add a new cell in the same row
        newCell = {
            record: recordIndex,
            tmpl: tmpl,
            row: previousCell.row,
            width: cellWidth,
            height: cellHeight,
            top: previousCell.top,
            left: previousCell.left + previousCell.width,
            reads: 0
        };
    }
    if (tmplData) {
        newCell.data = tmplData;
    }
    return newCell;
}
/**
 * NO DOM
 */
function populateNodeData(startCellIndex, endCellIndex, viewportWidth, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp, initialLoad) {
    var madeChanges = false;
    var node;
    var availableNode;
    var cell;
    var previousCell;
    var isAlreadyRendered;
    var lastRecordIndex = records.length - 1;
    var viewInsertIndex = null;
    var totalNodes = nodes.length;
    var templateRef;
    startCellIndex = Math.max(startCellIndex, 0);
    endCellIndex = Math.min(endCellIndex, cells.length - 1);
    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {
        cell = cells[cellIndex];
        availableNode = null;
        isAlreadyRendered = false;
        // find the first one that's available
        if (!initialLoad) {
            for (var i = 0; i < totalNodes; i++) {
                node = nodes[i];
                if (cell.tmpl !== node.tmpl || i === 0 && cellIndex !== 0) {
                    // the cell must use the correct template
                    // first node can only be used by the first cell (css :first-child reasons)
                    // this node is never available to be reused
                    continue;
                } else if (node.isLastRecord) {
                    // very last record, but could be a header/item/footer
                    if (cell.record === lastRecordIndex) {
                        availableNode = nodes[i];
                        availableNode.hidden = false;
                        break;
                    }
                    // this node is for the last record, but not actually the last
                    continue;
                }
                if (node.cell === cellIndex) {
                    isAlreadyRendered = true;
                    break;
                }
                if (node.cell < startCellIndex || node.cell > endCellIndex) {
                    if (!availableNode) {
                        // havent gotten an available node yet
                        availableNode = nodes[i];
                    } else if (scrollingDown) {
                        // scrolling down
                        if (node.cell < availableNode.cell) {
                            availableNode = nodes[i];
                        }
                    } else {
                        // scrolling up
                        if (node.cell > availableNode.cell) {
                            availableNode = nodes[i];
                        }
                    }
                }
            }
            if (isAlreadyRendered) {
                continue;
            }
        }
        if (!availableNode) {
            // did not find an available node to put the cell data into
            // insert a new node before the last record nodes
            if (viewInsertIndex === null) {
                viewInsertIndex = -1;
                for (var j = totalNodes - 1; j >= 0; j--) {
                    node = nodes[j];
                    if (node && !node.isLastRecord) {
                        viewInsertIndex = viewContainer.indexOf(node.view);
                        break;
                    }
                }
            }
            // select which templateRef should be used for this cell
            templateRef = cell.tmpl === TEMPLATE_HEADER ? hdrTmp : cell.tmpl === TEMPLATE_FOOTER ? ftrTmp : itmTmp;
            if (!templateRef) {
                console.error("virtual" + (cell.tmpl === TEMPLATE_HEADER ? 'Header' : cell.tmpl === TEMPLATE_FOOTER ? 'Footer' : 'Item') + " template required");
                continue;
            }
            availableNode = {
                tmpl: cell.tmpl,
                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)
            };
            totalNodes = nodes.push(availableNode);
        }
        // console.debug(`node was cell ${availableNode.cell} but is now ${cellIndex}, was top: ${cell.top}`);
        // assign who's the new cell index for this node
        availableNode.cell = cellIndex;
        // apply the cell's data to this node
        availableNode.view.context.$implicit = cell.data || records[cell.record];
        availableNode.view.context.index = cellIndex;
        availableNode.hasChanges = true;
        availableNode.lastTransform = null;
        madeChanges = true;
    }
    if (initialLoad) {
        // add nodes that go at the very end, and only represent the last record
        var lastNodeTempData = records[lastRecordIndex] || {};
        addLastNodes(nodes, viewContainer, TEMPLATE_HEADER, hdrTmp, lastNodeTempData);
        addLastNodes(nodes, viewContainer, TEMPLATE_ITEM, itmTmp, lastNodeTempData);
        addLastNodes(nodes, viewContainer, TEMPLATE_FOOTER, ftrTmp, lastNodeTempData);
    }
    return madeChanges;
}
exports.populateNodeData = populateNodeData;
function addLastNodes(nodes, viewContainer, templateType, templateRef, temporaryData) {
    if (templateRef) {
        var node = {
            tmpl: templateType,
            view: viewContainer.createEmbeddedView(templateRef),
            isLastRecord: true,
            hidden: true
        };
        node.view.context.$implicit = temporaryData;
        nodes.push(node);
    }
}
/**
 * DOM READ THEN DOM WRITE
 */
function initReadNodes(nodes, cells, data) {
    if (nodes.length && cells.length) {
        // first node
        // ******** DOM READ ****************
        var firstEle = getElement(nodes[0]);
        cells[0].top = firstEle.clientTop;
        cells[0].left = firstEle.clientLeft;
        cells[0].row = 0;
        // ******** DOM READ ****************
        updateDimensions(nodes, cells, data, true);
        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].hidden) {
                // ******** DOM WRITE ****************
                getElement(nodes[i]).classList.add('virtual-hidden');
            }
        }
    }
}
exports.initReadNodes = initReadNodes;
/**
 * DOM READ
 */
function updateDimensions(nodes, cells, data, initialUpdate) {
    var node;
    var element;
    var totalCells = cells.length;
    var cell;
    var previousCell;
    for (var i = 0; i < nodes.length; i++) {
        node = nodes[i];
        cell = cells[node.cell];
        // read element dimensions if they haven't been checked enough times
        if (cell && cell.reads < REQUIRED_DOM_READS && !node.hidden) {
            element = getElement(node);
            // ******** DOM READ ****************
            readElements(cell, element);
            if (initialUpdate) {
                // update estimated dimensions with more accurate dimensions
                if (cell.tmpl === TEMPLATE_HEADER) {
                    data.hdrHeight = cell.height;
                    if (cell.left === 0) {
                        data.hdrWidth = cell.width;
                    }
                } else if (cell.tmpl === TEMPLATE_FOOTER) {
                    data.ftrHeight = cell.height;
                    if (cell.left === 0) {
                        data.ftrWidth = cell.width;
                    }
                } else {
                    data.itmHeight = cell.height;
                    if (cell.left === 0) {
                        data.itmWidth = cell.width;
                    }
                }
            }
            cell.reads++;
        }
    }
    // figure out which cells are currently viewable within the viewport
    var viewableBottom = data.scrollTop + data.viewHeight;
    data.topViewCell = totalCells;
    data.bottomViewCell = 0;
    // completely realign position to ensure they're all accurately placed
    for (var i = 1; i < totalCells; i++) {
        cell = cells[i];
        previousCell = cells[i - 1];
        if (previousCell.left + previousCell.width + cell.width > data.viewWidth) {
            // new row
            cell.row++;
            cell.top = previousCell.top + previousCell.height;
            cell.left = 0;
        } else {
            // same row
            cell.row = previousCell.row;
            cell.top = previousCell.top;
            cell.left = previousCell.left + previousCell.width;
        }
        // figure out which cells are viewable within the viewport
        if (cell.top + cell.height > data.scrollTop && i < data.topViewCell) {
            data.topViewCell = i;
        } else if (cell.top < viewableBottom && i > data.bottomViewCell) {
            data.bottomViewCell = i;
        }
    }
}
exports.updateDimensions = updateDimensions;
/**
 * DOM READ
 */
function readElements(cell, element) {
    // ******** DOM READ ****************
    var styles = window.getComputedStyle(element);
    // ******** DOM READ ****************
    cell.left = element.offsetLeft - parseFloat(styles.marginLeft);
    // ******** DOM READ ****************
    cell.width = element.offsetWidth + parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
    // ******** DOM READ ****************
    cell.height = element.offsetHeight + parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
}
/**
 * DOM WRITE
 */
function writeToNodes(nodes, cells, totalRecords) {
    var node;
    var element;
    var cell;
    var totalCells = Math.max(totalRecords, cells.length).toString();
    var transform;
    for (var i = 0, ilen = nodes.length; i < ilen; i++) {
        node = nodes[i];
        if (!node.hidden) {
            cell = cells[node.cell];
            transform = "translate3d(" + cell.left + "px," + cell.top + "px,0px)";
            if (node.lastTransform !== transform) {
                element = getElement(node);
                if (element) {
                    // ******** DOM WRITE ****************
                    element.style[dom_1.CSS.transform] = node.lastTransform = transform;
                    // ******** DOM WRITE ****************
                    element.classList.add('virtual-position');
                    if (node.isLastRecord) {
                        // its the last record, now with data and safe to show
                        // ******** DOM WRITE ****************
                        element.classList.remove('virtual-hidden');
                    }
                    // https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
                    // ******** DOM WRITE ****************
                    element.setAttribute('aria-posinset', (node.cell + 1).toString());
                    // https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
                    // ******** DOM WRITE ****************
                    element.setAttribute('aria-setsize', totalCells);
                }
            }
        }
    }
}
exports.writeToNodes = writeToNodes;
/**
 * NO DOM
 */
function adjustRendered(cells, data) {
    // figure out which cells should be rendered
    var cell;
    var lastRow = -1;
    var cellsRenderHeight = 0;
    var maxRenderHeight = data.renderHeight - data.itmHeight;
    var totalCells = cells.length;
    var viewableRenderedPadding = data.itmHeight < 90 ? VIEWABLE_RENDERED_PADDING : 0;
    if (data.scrollDiff > 0) {
        // scrolling down
        data.topCell = Math.max(data.topViewCell - viewableRenderedPadding, 0);
        data.bottomCell = Math.min(data.topCell + 2, totalCells - 1);
        for (var i = data.topCell; i < totalCells; i++) {
            cell = cells[i];
            if (cell.row !== lastRow) {
                cellsRenderHeight += cell.height;
                lastRow = cell.row;
            }
            if (i > data.bottomCell) {
                data.bottomCell = i;
            }
            if (cellsRenderHeight >= maxRenderHeight) {
                break;
            }
        }
    } else {
        // scroll up
        data.bottomCell = Math.min(data.bottomViewCell + viewableRenderedPadding, totalCells - 1);
        data.topCell = Math.max(data.bottomCell - 2, 0);
        for (var i = data.bottomCell; i >= 0; i--) {
            cell = cells[i];
            if (cell.row !== lastRow) {
                cellsRenderHeight += cell.height;
                lastRow = cell.row;
            }
            if (i < data.topCell) {
                data.topCell = i;
            }
            if (cellsRenderHeight >= maxRenderHeight) {
                break;
            }
        }
    }
    // console.log(`adjustRendered topCell: ${data.topCell}, bottomCell: ${data.bottomCell}, cellsRenderHeight: ${cellsRenderHeight}, data.renderHeight: ${data.renderHeight}`);
}
exports.adjustRendered = adjustRendered;
/**
 * NO DOM
 */
function getVirtualHeight(totalRecords, lastCell) {
    if (lastCell.record >= totalRecords - 1) {
        return lastCell.top + lastCell.height;
    }
    var unknownRecords = totalRecords - lastCell.record - 1;
    var knownHeight = lastCell.top + lastCell.height;
    return Math.ceil(knownHeight + knownHeight / (totalRecords - unknownRecords) * unknownRecords);
}
exports.getVirtualHeight = getVirtualHeight;
/**
 * NO DOM
 */
function estimateHeight(totalRecords, lastCell, existingHeight, difference) {
    var newHeight = getVirtualHeight(totalRecords, lastCell);
    var percentToBottom = lastCell.record / (totalRecords - 1);
    var diff = Math.abs(existingHeight - newHeight);
    if (diff > newHeight * difference || percentToBottom > .995) {
        return newHeight;
    }
    return existingHeight;
}
exports.estimateHeight = estimateHeight;
/**
 * DOM READ
 */
function calcDimensions(data, viewportElement, approxItemWidth, approxItemHeight, appoxHeaderWidth, approxHeaderHeight, approxFooterWidth, approxFooterHeight, bufferRatio) {
    // get the parent container's viewport height
    // ******** DOM READ ****************
    data.viewWidth = viewportElement.offsetWidth;
    // ******** DOM READ ****************
    data.viewHeight = viewportElement.offsetHeight;
    // the height we'd like to render, which is larger than viewable
    data.renderHeight = data.viewHeight * bufferRatio;
    if (data.viewWidth > 0 && data.viewHeight > 0) {
        data.itmWidth = calcWidth(data.viewWidth, approxItemWidth);
        data.itmHeight = calcHeight(data.viewHeight, approxItemHeight);
        data.hdrWidth = calcWidth(data.viewWidth, appoxHeaderWidth);
        data.hdrHeight = calcHeight(data.viewHeight, approxHeaderHeight);
        data.ftrWidth = calcWidth(data.viewWidth, approxFooterWidth);
        data.ftrHeight = calcHeight(data.viewHeight, approxFooterHeight);
        data.valid = true;
    }
}
exports.calcDimensions = calcDimensions;
/**
 * NO DOM
 */
function calcWidth(viewportWidth, approxWidth) {
    if (approxWidth.indexOf('%') > 0) {
        return viewportWidth * (parseFloat(approxWidth) / 100);
    } else if (approxWidth.indexOf('px') > 0) {
        return parseFloat(approxWidth);
    }
    throw 'virtual scroll width can only use "%" or "px" units';
}
/**
 * NO DOM
 */
function calcHeight(viewportHeight, approxHeight) {
    if (approxHeight.indexOf('px') > 0) {
        return parseFloat(approxHeight);
    }
    throw 'virtual scroll height must use "px" units';
}
/**
 * NO DOM
 */
function getElement(node) {
    var rootNodes = node.view.rootNodes;
    for (var i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
    return null;
}
var VirtualContext = function () {
    function VirtualContext($implicit, index, count) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    Object.defineProperty(VirtualContext.prototype, "first", {
        get: function get() {
            return this.index === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VirtualContext.prototype, "last", {
        get: function get() {
            return this.index === this.count - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VirtualContext.prototype, "even", {
        get: function get() {
            return this.index % 2 === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VirtualContext.prototype, "odd", {
        get: function get() {
            return !this.even;
        },
        enumerable: true,
        configurable: true
    });
    return VirtualContext;
}();
exports.VirtualContext = VirtualContext;
var TEMPLATE_ITEM = 0;
var TEMPLATE_HEADER = 1;
var TEMPLATE_FOOTER = 2;
var VIEWABLE_RENDERED_PADDING = 3;
var REQUIRED_DOM_READS = 2;

/***/ },
/* 891 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var platform_browser_dynamic_1 = __webpack_require__(211);
var core_1 = __webpack_require__(0);
var http_1 = __webpack_require__(410);
var app_1 = __webpack_require__(57);
var click_block_1 = __webpack_require__(510);
var dom_1 = __webpack_require__(17);
var config_1 = __webpack_require__(16);
var events_1 = __webpack_require__(929);
var feature_detect_1 = __webpack_require__(930);
var form_1 = __webpack_require__(73);
var directives_1 = __webpack_require__(892);
var util_1 = __webpack_require__(7);
var keyboard_1 = __webpack_require__(95);
var menu_controller_1 = __webpack_require__(148);
var platform_1 = __webpack_require__(72);
var scroll_view_1 = __webpack_require__(513);
var tap_click_1 = __webpack_require__(885);
var translate_1 = __webpack_require__(928);
var _reflect = Reflect;
/**
 * @name ionicBootstrap
 * @description
 * `ionicBootstrap` allows you to bootstrap your entire application. Similar to Angular's `bootstrap`, `ionicBootstrap`
 * takes a root component in order to start the app. You can pass along any providers that you may want to inject into your
 * app as an array for the second argument. You can also pass a config object as the third argument to configure your app's settings.
 *
 * @usage
 *
 * ```ts
 * import { ionicBootstrap } from 'ionic-angular';
 * import { Component } from '@angular/core';
 *
 * @Component({
 *   templateUrl: 'build/app.html',
 * })
 * export class MyClass{}
 *
 * ionicBootstrap(MyClass, null, {tabbarPlacement: 'bottom'})
 * ```
 */
function ionicBootstrap(appRootComponent, customProviders, config) {
    // get all Ionic Providers
    var providers = ionicProviders(customProviders, config);
    // automatically set "ion-app" selector to users root component
    addSelector(appRootComponent, 'ion-app');
    cssReady(function () {
        // call angular bootstrap
        platform_browser_dynamic_1.bootstrap(appRootComponent, providers).then(function (ngComponentRef) {
            // ionic app has finished bootstrapping
            ionicPostBootstrap(ngComponentRef);
        });
    });
}
exports.ionicBootstrap = ionicBootstrap;
/**
 * @private
 */
function ionicPostBootstrap(ngComponentRef) {
    var app = ngComponentRef.injector.get(app_1.App);
    app.setAppInjector(ngComponentRef.injector);
    // prepare platform ready
    var platform = ngComponentRef.injector.get(platform_1.Platform);
    platform.setZone(ngComponentRef.injector.get(core_1.NgZone));
    platform.prepareReady();
    // TODO: Use PLATFORM_INITIALIZER
    ngComponentRef.injector.get(tap_click_1.TapClick);
    return ngComponentRef;
}
exports.ionicPostBootstrap = ionicPostBootstrap;
var cssLoadAttempt = 0;
function cssReady(done) {
    var appEle = document.body.querySelector('ion-app');
    if (!appEle || appEle.clientHeight > 0 || cssLoadAttempt > 300) {
        done();
    } else {
        dom_1.nativeRaf(function () {
            cssLoadAttempt++;
            cssReady(done);
        });
    }
}
/**
 * @private
 */
function ionicProviders(customProviders, config) {
    // create an instance of Config
    if (!(config instanceof config_1.Config)) {
        config = new config_1.Config(config);
    }
    // enable production mode if config set to true
    if (config.getBoolean('prodMode')) {
        core_1.enableProdMode();
    }
    // create an instance of Platform
    var platform = new platform_1.Platform();
    // initialize platform
    platform.setUrl(window.location.href);
    platform.setUserAgent(window.navigator.userAgent);
    platform.setNavigatorPlatform(window.navigator.platform);
    platform.load(config);
    config.setPlatform(platform);
    var clickBlock = new click_block_1.ClickBlock();
    var events = new events_1.Events();
    var featureDetect = new feature_detect_1.FeatureDetect();
    setupDom(window, document, config, platform, clickBlock, featureDetect);
    bindEvents(window, document, platform, events);
    var providers = [app_1.App, core_1.provide(click_block_1.ClickBlock, { useValue: clickBlock }), core_1.provide(config_1.Config, { useValue: config }), core_1.provide(events_1.Events, { useValue: events }), core_1.provide(feature_detect_1.FeatureDetect, { useValue: featureDetect }), form_1.Form, keyboard_1.Keyboard, menu_controller_1.MenuController, core_1.provide(platform_1.Platform, { useValue: platform }), translate_1.Translate, tap_click_1.TapClick, core_1.provide(core_1.PLATFORM_DIRECTIVES, { useValue: directives_1.IONIC_DIRECTIVES, multi: true }), http_1.HTTP_PROVIDERS];
    if (util_1.isPresent(customProviders)) {
        providers.push(customProviders);
    }
    return providers;
}
exports.ionicProviders = ionicProviders;
function setupDom(window, document, config, platform, clickBlock, featureDetect) {
    var bodyEle = document.body;
    var mode = config.get('mode');
    // if dynamic mode links have been added the fire up the correct one
    var modeLinkAttr = mode + '-href';
    var linkEle = document.head.querySelector('link[' + modeLinkAttr + ']');
    if (linkEle) {
        var href = linkEle.getAttribute(modeLinkAttr);
        linkEle.removeAttribute(modeLinkAttr);
        linkEle.href = href;
    }
    // set the mode class name
    // ios/md/wp
    bodyEle.classList.add(mode);
    // language and direction
    platform.setDir(document.documentElement.dir, false);
    platform.setLang(document.documentElement.lang, false);
    var versions = platform.versions();
    platform.platforms().forEach(function (platformName) {
        // platform-ios
        var platformClass = 'platform-' + platformName;
        bodyEle.classList.add(platformClass);
        var platformVersion = versions[platformName];
        if (platformVersion) {
            // platform-ios9
            platformClass += platformVersion.major;
            bodyEle.classList.add(platformClass);
            // platform-ios9_3
            bodyEle.classList.add(platformClass + '_' + platformVersion.minor);
        }
    });
    // touch devices should not use :hover CSS pseudo
    // enable :hover CSS when the "hoverCSS" setting is not false
    if (config.getBoolean('hoverCSS', true) !== false) {
        bodyEle.classList.add('enable-hover');
    }
    if (config.getBoolean('clickBlock', true) !== false) {
        clickBlock.enable();
    }
    // run feature detection tests
    featureDetect.run(window, document);
}
/**
 * Bind some global events and publish on the 'app' channel
 */
function bindEvents(window, document, platform, events) {
    window.addEventListener('online', function (ev) {
        events.publish('app:online', ev);
    }, false);
    window.addEventListener('offline', function (ev) {
        events.publish('app:offline', ev);
    }, false);
    window.addEventListener('orientationchange', function (ev) {
        events.publish('app:rotated', ev);
    });
    // When that status taps, we respond
    window.addEventListener('statusTap', function (ev) {
        // TODO: Make this more better
        var el = document.elementFromPoint(platform.width() / 2, platform.height() / 2);
        if (!el) {
            return;
        }
        var content = dom_1.closest(el, 'scroll-content');
        if (content) {
            var scroll = new scroll_view_1.ScrollView(content);
            scroll.scrollTo(0, 0, 300);
        }
    });
    // start listening for resizes XXms after the app starts
    dom_1.nativeTimeout(function () {
        window.addEventListener('resize', function () {
            platform.windowResize();
        });
    }, 2000);
}
/**
 * @private
 */
function addSelector(type, selector) {
    if (type) {
        var annotations = _reflect.getMetadata('annotations', type);
        if (annotations && !annotations[0].selector) {
            annotations[0].selector = selector;
            _reflect.defineMetadata('annotations', annotations, type);
        }
    }
}
exports.addSelector = addSelector;

/***/ },
/* 892 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var common_1 = __webpack_require__(5);
var menu_1 = __webpack_require__(864);
var menu_toggle_1 = __webpack_require__(863);
var menu_close_1 = __webpack_require__(861);
var backdrop_1 = __webpack_require__(457);
var badge_1 = __webpack_require__(851);
var button_1 = __webpack_require__(308);
var content_1 = __webpack_require__(111);
var img_1 = __webpack_require__(459);
var scroll_1 = __webpack_require__(873);
var infinite_scroll_1 = __webpack_require__(460);
var infinite_scroll_content_1 = __webpack_require__(854);
var refresher_1 = __webpack_require__(466);
var refresher_content_1 = __webpack_require__(872);
var slides_1 = __webpack_require__(878);
var tabs_1 = __webpack_require__(311);
var tab_1 = __webpack_require__(883);
var list_1 = __webpack_require__(309);
var item_1 = __webpack_require__(69);
var item_sliding_1 = __webpack_require__(860);
var virtual_scroll_1 = __webpack_require__(889);
var virtual_item_1 = __webpack_require__(468);
var toolbar_1 = __webpack_require__(202);
var toolbar_item_1 = __webpack_require__(887);
var toolbar_title_1 = __webpack_require__(888);
var icon_1 = __webpack_require__(458);
var spinner_1 = __webpack_require__(880);
var checkbox_1 = __webpack_require__(852);
var select_1 = __webpack_require__(876);
var option_1 = __webpack_require__(464);
var datetime_1 = __webpack_require__(853);
var toggle_1 = __webpack_require__(886);
var input_1 = __webpack_require__(856);
var label_1 = __webpack_require__(462);
var segment_1 = __webpack_require__(875);
var radio_button_1 = __webpack_require__(870);
var radio_group_1 = __webpack_require__(465);
var range_1 = __webpack_require__(871);
var searchbar_1 = __webpack_require__(874);
var nav_1 = __webpack_require__(310);
var nav_pop_1 = __webpack_require__(865);
var nav_push_1 = __webpack_require__(866);
var nav_router_1 = __webpack_require__(867);
var navbar_1 = __webpack_require__(201);
var show_hide_when_1 = __webpack_require__(877);
/**
 * @private
 * @name IONIC_DIRECTIVES
 * @description
 * The core Ionic directives as well as Angular's `CORE_DIRECTIVES` and `FORM_DIRECTIVES` are
 * available automatically when you bootstrap your app with the `ionicBootstrap`. This means
 * if you are using custom components you do not need to import `IONIC_DIRECTIVES` as they
 * are part of the app's default directives.
 *
 *
 * #### Angular
 * - CORE_DIRECTIVES
 * - FORM_DIRECTIVES
 *
 * #### Ionic
 * - Menu
 * - MenuToggle
 * - MenuClose
 * - Badge
 * - Button
 * - Content
 * - Scroll
 * - InfiniteScroll
 * - InfiniteScrollContent
 * - Refresher
 * - RefresherContent
 * - Img
 * - List
 * - ListHeader
 * - Item
 * - ItemContent
 * - ItemSliding
 * - VirtualScroll
 * - VirtualItem
 * - VirtualHeader
 * - VirtualFooter
 * - Slides
 * - Slide
 * - SlideLazy
 * - Tabs
 * - Tab
 * - Header
 * - Footer
 * - Toolbar
 * - ToolbarTitle
 * - ToolbarItem
 * - Icon
 * - Spinner
 * - Searchbar
 * - Segment
 * - SegmentButton
 * - Checkbox
 * - RadioGroup
 * - RadioButton
 * - Select
 * - Option
 * - DateTime
 * - Toggle
 * - TextArea
 * - TextInput
 * - Label
 * - Nav
 * - NavbarTemplate
 * - Navbar
 * - NavPush
 * - NavPop
 * - NavRouter
 * - IdRef
 * - ShowWhen
 * - HideWhen
 */
exports.IONIC_DIRECTIVES = [
// Angular
common_1.CORE_DIRECTIVES, common_1.FORM_DIRECTIVES,
// Content
menu_1.Menu, menu_toggle_1.MenuToggle, menu_close_1.MenuClose, backdrop_1.Backdrop, badge_1.Badge, button_1.Button, content_1.Content, scroll_1.Scroll, infinite_scroll_1.InfiniteScroll, infinite_scroll_content_1.InfiniteScrollContent, refresher_1.Refresher, refresher_content_1.RefresherContent, img_1.Img,
// Lists
list_1.List, list_1.ListHeader, item_1.Item, item_1.ItemContent, item_sliding_1.ItemSliding, item_sliding_1.ItemOptions, virtual_scroll_1.VirtualScroll, virtual_item_1.VirtualItem, virtual_item_1.VirtualHeader, virtual_item_1.VirtualFooter,
// Slides
slides_1.Slides, slides_1.Slide, slides_1.SlideLazy,
// Tabs
tabs_1.Tabs, tab_1.Tab,
// Toolbar
toolbar_1.Header, toolbar_1.Footer, toolbar_1.Toolbar, toolbar_title_1.ToolbarTitle, toolbar_item_1.ToolbarItem,
// Media
icon_1.Icon, spinner_1.Spinner,
// Forms
searchbar_1.Searchbar, segment_1.Segment, segment_1.SegmentButton, checkbox_1.Checkbox, radio_group_1.RadioGroup, radio_button_1.RadioButton, range_1.Range, select_1.Select, option_1.Option, datetime_1.DateTime, toggle_1.Toggle, input_1.TextArea, input_1.TextInput, label_1.Label,
// Nav
nav_1.Nav, navbar_1.NavbarTemplate, navbar_1.Navbar, nav_push_1.NavPush, nav_pop_1.NavPop, nav_router_1.NavRouter, show_hide_when_1.ShowWhen, show_hide_when_1.HideWhen];

/***/ },
/* 893 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animation__ = __webpack_require__(36);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var SlideIn = function (_Animation) {
    _inherits(SlideIn, _Animation);

    function SlideIn(element) {
        _classCallCheck(this, SlideIn);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideIn).call(this, element));

        _this.easing('cubic-bezier(0.1,0.7,0.1,1)').duration(400).fromTo('translateY', '100%', '0%');
        return _this;
    }

    return SlideIn;
}(__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"]);

__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"].register('slide-in', SlideIn);

var SlideOut = function (_Animation2) {
    _inherits(SlideOut, _Animation2);

    function SlideOut(element) {
        _classCallCheck(this, SlideOut);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideOut).call(this, element));

        _this2.easing('ease-out').duration(250).fromTo('translateY', '0%', '100%');
        return _this2;
    }

    return SlideOut;
}(__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"]);

__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"].register('slide-out', SlideOut);

var FadeIn = function (_Animation3) {
    _inherits(FadeIn, _Animation3);

    function FadeIn(element) {
        _classCallCheck(this, FadeIn);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(FadeIn).call(this, element));

        _this3.easing('ease-in').duration(400).fromTo('opacity', 0.001, 1, true);
        return _this3;
    }

    return FadeIn;
}(__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"]);

__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"].register('fade-in', FadeIn);

var FadeOut = function (_Animation4) {
    _inherits(FadeOut, _Animation4);

    function FadeOut(element) {
        _classCallCheck(this, FadeOut);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(FadeOut).call(this, element));

        _this4.easing('ease-out').duration(250).fromTo('opacity', 0.999, 0);
        return _this4;
    }

    return FadeOut;
}(__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"]);

__WEBPACK_IMPORTED_MODULE_0__animation__["Animation"].register('fade-out', FadeOut);

/***/ },
/* 894 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_action_sheet_action_sheet__ = __webpack_require__(469);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_alert_alert__ = __webpack_require__(470);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_backdrop_backdrop__ = __webpack_require__(312);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_badge_badge__ = __webpack_require__(471);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_button_button__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_checkbox_checkbox__ = __webpack_require__(472);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_content_content__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_datetime_datetime__ = __webpack_require__(473);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_icon_icon__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_img_img__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_infinite_scroll_infinite_scroll__ = __webpack_require__(315);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__components_infinite_scroll_infinite_scroll_content__ = __webpack_require__(474);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_input_input__ = __webpack_require__(475);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_item_item__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_item_item_reorder__ = __webpack_require__(477);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__ = __webpack_require__(478);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__components_label_label__ = __webpack_require__(316);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__components_list_list__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__components_loading_loading__ = __webpack_require__(898);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__components_menu_menu__ = __webpack_require__(481);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__components_menu_menu_close__ = __webpack_require__(479);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__components_menu_menu_controller__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__components_menu_menu_toggle__ = __webpack_require__(480);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__components_menu_menu_types__ = __webpack_require__(900);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__components_modal_modal__ = __webpack_require__(901);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__components_nav_nav__ = __webpack_require__(484);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__components_nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__components_nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__components_nav_nav_pop__ = __webpack_require__(482);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__components_nav_nav_push__ = __webpack_require__(483);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__components_nav_view_controller__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__components_navbar_navbar__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__components_option_option__ = __webpack_require__(317);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__components_picker_picker__ = __webpack_require__(485);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__components_popover_popover__ = __webpack_require__(905);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__components_radio_radio_button__ = __webpack_require__(486);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__components_radio_radio_group__ = __webpack_require__(318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__components_range_range__ = __webpack_require__(487);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__components_refresher_refresher__ = __webpack_require__(319);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__components_refresher_refresher_content__ = __webpack_require__(488);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__components_scroll_scroll__ = __webpack_require__(489);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__components_searchbar_searchbar__ = __webpack_require__(490);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__components_segment_segment__ = __webpack_require__(491);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__components_select_select__ = __webpack_require__(492);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__ = __webpack_require__(493);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__components_slides_slides__ = __webpack_require__(494);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__components_spinner_spinner__ = __webpack_require__(495);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__components_tabs_tab__ = __webpack_require__(320);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__components_tabs_tabs__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__components_tap_click_tap_click__ = __webpack_require__(497);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__components_toast_toast__ = __webpack_require__(910);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__components_toggle_toggle__ = __webpack_require__(498);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__components_virtual_scroll_virtual_scroll__ = __webpack_require__(500);
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__components_action_sheet_action_sheet__, "a")) __webpack_require__.d(exports, "ActionSheet", function() { return __WEBPACK_IMPORTED_MODULE_0__components_action_sheet_action_sheet__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__components_action_sheet_action_sheet__, "ActionSheetOptions")) __webpack_require__.d(exports, "ActionSheetOptions", function() { return __WEBPACK_IMPORTED_MODULE_0__components_action_sheet_action_sheet__["ActionSheetOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__components_alert_alert__, "a")) __webpack_require__.d(exports, "Alert", function() { return __WEBPACK_IMPORTED_MODULE_1__components_alert_alert__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__components_alert_alert__, "AlertOptions")) __webpack_require__.d(exports, "AlertOptions", function() { return __WEBPACK_IMPORTED_MODULE_1__components_alert_alert__["AlertOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__components_alert_alert__, "AlertInputOptions")) __webpack_require__.d(exports, "AlertInputOptions", function() { return __WEBPACK_IMPORTED_MODULE_1__components_alert_alert__["AlertInputOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__components_app_app__, "a")) __webpack_require__.d(exports, "App", function() { return __WEBPACK_IMPORTED_MODULE_2__components_app_app__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_3__components_backdrop_backdrop__, "a")) __webpack_require__.d(exports, "Backdrop", function() { return __WEBPACK_IMPORTED_MODULE_3__components_backdrop_backdrop__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_4__components_badge_badge__, "a")) __webpack_require__.d(exports, "Badge", function() { return __WEBPACK_IMPORTED_MODULE_4__components_badge_badge__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_5__components_button_button__, "a")) __webpack_require__.d(exports, "Button", function() { return __WEBPACK_IMPORTED_MODULE_5__components_button_button__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_6__components_checkbox_checkbox__, "a")) __webpack_require__.d(exports, "Checkbox", function() { return __WEBPACK_IMPORTED_MODULE_6__components_checkbox_checkbox__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_7__components_content_content__, "a")) __webpack_require__.d(exports, "Content", function() { return __WEBPACK_IMPORTED_MODULE_7__components_content_content__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_8__components_datetime_datetime__, "a")) __webpack_require__.d(exports, "DateTime", function() { return __WEBPACK_IMPORTED_MODULE_8__components_datetime_datetime__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_9__components_icon_icon__, "a")) __webpack_require__.d(exports, "Icon", function() { return __WEBPACK_IMPORTED_MODULE_9__components_icon_icon__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_10__components_img_img__, "a")) __webpack_require__.d(exports, "Img", function() { return __WEBPACK_IMPORTED_MODULE_10__components_img_img__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_11__components_infinite_scroll_infinite_scroll__, "a")) __webpack_require__.d(exports, "InfiniteScroll", function() { return __WEBPACK_IMPORTED_MODULE_11__components_infinite_scroll_infinite_scroll__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_12__components_infinite_scroll_infinite_scroll_content__, "a")) __webpack_require__.d(exports, "InfiniteScrollContent", function() { return __WEBPACK_IMPORTED_MODULE_12__components_infinite_scroll_infinite_scroll_content__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_13__components_input_input__, "a")) __webpack_require__.d(exports, "TextArea", function() { return __WEBPACK_IMPORTED_MODULE_13__components_input_input__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_13__components_input_input__, "b")) __webpack_require__.d(exports, "TextInput", function() { return __WEBPACK_IMPORTED_MODULE_13__components_input_input__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_14__components_item_item__, "a")) __webpack_require__.d(exports, "Item", function() { return __WEBPACK_IMPORTED_MODULE_14__components_item_item__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_15__components_item_item_reorder__, "a")) __webpack_require__.d(exports, "ItemReorder", function() { return __WEBPACK_IMPORTED_MODULE_15__components_item_item_reorder__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__, "a")) __webpack_require__.d(exports, "ItemSliding", function() { return __WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__, "c")) __webpack_require__.d(exports, "ItemSideFlags", function() { return __WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__, "b")) __webpack_require__.d(exports, "ItemOptions", function() { return __WEBPACK_IMPORTED_MODULE_16__components_item_item_sliding__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_17__components_label_label__, "a")) __webpack_require__.d(exports, "Label", function() { return __WEBPACK_IMPORTED_MODULE_17__components_label_label__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_18__components_list_list__, "b")) __webpack_require__.d(exports, "ListHeader", function() { return __WEBPACK_IMPORTED_MODULE_18__components_list_list__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_18__components_list_list__, "a")) __webpack_require__.d(exports, "List", function() { return __WEBPACK_IMPORTED_MODULE_18__components_list_list__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_19__components_loading_loading__, "LoadingOptions")) __webpack_require__.d(exports, "LoadingOptions", function() { return __WEBPACK_IMPORTED_MODULE_19__components_loading_loading__["LoadingOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_19__components_loading_loading__, "b")) __webpack_require__.d(exports, "Loading", function() { return __WEBPACK_IMPORTED_MODULE_19__components_loading_loading__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_20__components_menu_menu__, "a")) __webpack_require__.d(exports, "Menu", function() { return __WEBPACK_IMPORTED_MODULE_20__components_menu_menu__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_21__components_menu_menu_close__, "a")) __webpack_require__.d(exports, "MenuClose", function() { return __WEBPACK_IMPORTED_MODULE_21__components_menu_menu_close__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_22__components_menu_menu_controller__, "a")) __webpack_require__.d(exports, "MenuController", function() { return __WEBPACK_IMPORTED_MODULE_22__components_menu_menu_controller__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_23__components_menu_menu_toggle__, "a")) __webpack_require__.d(exports, "MenuToggle", function() { return __WEBPACK_IMPORTED_MODULE_23__components_menu_menu_toggle__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_24__components_menu_menu_types__, "a")) __webpack_require__.d(exports, "MenuType", function() { return __WEBPACK_IMPORTED_MODULE_24__components_menu_menu_types__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_25__components_modal_modal__, "a")) __webpack_require__.d(exports, "Modal", function() { return __WEBPACK_IMPORTED_MODULE_25__components_modal_modal__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_25__components_modal_modal__, "ModalOptions")) __webpack_require__.d(exports, "ModalOptions", function() { return __WEBPACK_IMPORTED_MODULE_25__components_modal_modal__["ModalOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_26__components_nav_nav__, "a")) __webpack_require__.d(exports, "Nav", function() { return __WEBPACK_IMPORTED_MODULE_26__components_nav_nav__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_27__components_nav_nav_controller__, "a")) __webpack_require__.d(exports, "NavController", function() { return __WEBPACK_IMPORTED_MODULE_27__components_nav_nav_controller__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_27__components_nav_nav_controller__, "NavOptions")) __webpack_require__.d(exports, "NavOptions", function() { return __WEBPACK_IMPORTED_MODULE_27__components_nav_nav_controller__["NavOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_28__components_nav_nav_params__, "a")) __webpack_require__.d(exports, "NavParams", function() { return __WEBPACK_IMPORTED_MODULE_28__components_nav_nav_params__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_29__components_nav_nav_pop__, "a")) __webpack_require__.d(exports, "NavPop", function() { return __WEBPACK_IMPORTED_MODULE_29__components_nav_nav_pop__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_30__components_nav_nav_push__, "a")) __webpack_require__.d(exports, "NavPush", function() { return __WEBPACK_IMPORTED_MODULE_30__components_nav_nav_push__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_31__components_nav_view_controller__, "a")) __webpack_require__.d(exports, "ViewController", function() { return __WEBPACK_IMPORTED_MODULE_31__components_nav_view_controller__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_32__components_navbar_navbar__, "b")) __webpack_require__.d(exports, "NavbarTemplate", function() { return __WEBPACK_IMPORTED_MODULE_32__components_navbar_navbar__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_32__components_navbar_navbar__, "a")) __webpack_require__.d(exports, "Navbar", function() { return __WEBPACK_IMPORTED_MODULE_32__components_navbar_navbar__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_33__components_option_option__, "a")) __webpack_require__.d(exports, "Option", function() { return __WEBPACK_IMPORTED_MODULE_33__components_option_option__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_34__components_picker_picker__, "a")) __webpack_require__.d(exports, "Picker", function() { return __WEBPACK_IMPORTED_MODULE_34__components_picker_picker__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_34__components_picker_picker__, "PickerColumn")) __webpack_require__.d(exports, "PickerColumn", function() { return __WEBPACK_IMPORTED_MODULE_34__components_picker_picker__["PickerColumn"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_34__components_picker_picker__, "PickerColumnOption")) __webpack_require__.d(exports, "PickerColumnOption", function() { return __WEBPACK_IMPORTED_MODULE_34__components_picker_picker__["PickerColumnOption"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_34__components_picker_picker__, "PickerOptions")) __webpack_require__.d(exports, "PickerOptions", function() { return __WEBPACK_IMPORTED_MODULE_34__components_picker_picker__["PickerOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_35__components_popover_popover__, "a")) __webpack_require__.d(exports, "Popover", function() { return __WEBPACK_IMPORTED_MODULE_35__components_popover_popover__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_35__components_popover_popover__, "PopoverOptions")) __webpack_require__.d(exports, "PopoverOptions", function() { return __WEBPACK_IMPORTED_MODULE_35__components_popover_popover__["PopoverOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_36__components_radio_radio_button__, "a")) __webpack_require__.d(exports, "RadioButton", function() { return __WEBPACK_IMPORTED_MODULE_36__components_radio_radio_button__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_37__components_radio_radio_group__, "a")) __webpack_require__.d(exports, "RadioGroup", function() { return __WEBPACK_IMPORTED_MODULE_37__components_radio_radio_group__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_38__components_range_range__, "a")) __webpack_require__.d(exports, "Range", function() { return __WEBPACK_IMPORTED_MODULE_38__components_range_range__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_38__components_range_range__, "ClientRect")) __webpack_require__.d(exports, "ClientRect", function() { return __WEBPACK_IMPORTED_MODULE_38__components_range_range__["ClientRect"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_38__components_range_range__, "c")) __webpack_require__.d(exports, "RangeKnob", function() { return __WEBPACK_IMPORTED_MODULE_38__components_range_range__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_39__components_refresher_refresher__, "a")) __webpack_require__.d(exports, "Refresher", function() { return __WEBPACK_IMPORTED_MODULE_39__components_refresher_refresher__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_40__components_refresher_refresher_content__, "a")) __webpack_require__.d(exports, "RefresherContent", function() { return __WEBPACK_IMPORTED_MODULE_40__components_refresher_refresher_content__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_41__components_scroll_scroll__, "a")) __webpack_require__.d(exports, "Scroll", function() { return __WEBPACK_IMPORTED_MODULE_41__components_scroll_scroll__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_42__components_searchbar_searchbar__, "a")) __webpack_require__.d(exports, "Searchbar", function() { return __WEBPACK_IMPORTED_MODULE_42__components_searchbar_searchbar__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_43__components_segment_segment__, "a")) __webpack_require__.d(exports, "Segment", function() { return __WEBPACK_IMPORTED_MODULE_43__components_segment_segment__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_43__components_segment_segment__, "b")) __webpack_require__.d(exports, "SegmentButton", function() { return __WEBPACK_IMPORTED_MODULE_43__components_segment_segment__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_44__components_select_select__, "a")) __webpack_require__.d(exports, "Select", function() { return __WEBPACK_IMPORTED_MODULE_44__components_select_select__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__, "a")) __webpack_require__.d(exports, "ShowWhen", function() { return __WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__, "c")) __webpack_require__.d(exports, "DisplayWhen", function() { return __WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__, "b")) __webpack_require__.d(exports, "HideWhen", function() { return __WEBPACK_IMPORTED_MODULE_45__components_show_hide_when_show_hide_when__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_46__components_slides_slides__, "a")) __webpack_require__.d(exports, "Slides", function() { return __WEBPACK_IMPORTED_MODULE_46__components_slides_slides__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_46__components_slides_slides__, "b")) __webpack_require__.d(exports, "Slide", function() { return __WEBPACK_IMPORTED_MODULE_46__components_slides_slides__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_46__components_slides_slides__, "c")) __webpack_require__.d(exports, "SlideLazy", function() { return __WEBPACK_IMPORTED_MODULE_46__components_slides_slides__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_47__components_spinner_spinner__, "a")) __webpack_require__.d(exports, "Spinner", function() { return __WEBPACK_IMPORTED_MODULE_47__components_spinner_spinner__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_48__components_tabs_tab__, "a")) __webpack_require__.d(exports, "Tab", function() { return __WEBPACK_IMPORTED_MODULE_48__components_tabs_tab__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_49__components_tabs_tabs__, "a")) __webpack_require__.d(exports, "Tabs", function() { return __WEBPACK_IMPORTED_MODULE_49__components_tabs_tabs__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_50__components_tap_click_tap_click__, "b")) __webpack_require__.d(exports, "isActivatable", function() { return __WEBPACK_IMPORTED_MODULE_50__components_tap_click_tap_click__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_50__components_tap_click_tap_click__, "a")) __webpack_require__.d(exports, "TapClick", function() { return __WEBPACK_IMPORTED_MODULE_50__components_tap_click_tap_click__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_51__components_toast_toast__, "a")) __webpack_require__.d(exports, "Toast", function() { return __WEBPACK_IMPORTED_MODULE_51__components_toast_toast__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_51__components_toast_toast__, "ToastOptions")) __webpack_require__.d(exports, "ToastOptions", function() { return __WEBPACK_IMPORTED_MODULE_51__components_toast_toast__["ToastOptions"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_52__components_toggle_toggle__, "a")) __webpack_require__.d(exports, "Toggle", function() { return __WEBPACK_IMPORTED_MODULE_52__components_toggle_toggle__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__, "b")) __webpack_require__.d(exports, "Toolbar", function() { return __WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__["b"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__, "a")) __webpack_require__.d(exports, "ToolbarBase", function() { return __WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__["a"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__, "c")) __webpack_require__.d(exports, "Header", function() { return __WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__["c"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__, "d")) __webpack_require__.d(exports, "Footer", function() { return __WEBPACK_IMPORTED_MODULE_53__components_toolbar_toolbar__["d"]; });
/* harmony reexport */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_54__components_virtual_scroll_virtual_scroll__, "a")) __webpack_require__.d(exports, "VirtualScroll", function() { return __WEBPACK_IMPORTED_MODULE_54__components_virtual_scroll_virtual_scroll__["a"]; });
























































/***/ },
/* 895 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__native_input__ = __webpack_require__(476);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return InputBase; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var InputBase = function () {
    function InputBase(config, _form, _item, _app, _platform, _elementRef, _scrollView, _nav, ngControl) {
        _classCallCheck(this, InputBase);

        this._form = _form;
        this._item = _item;
        this._app = _app;
        this._platform = _platform;
        this._elementRef = _elementRef;
        this._scrollView = _scrollView;
        this._nav = _nav;
        this._disabled = false;
        this._type = 'text';
        this._value = '';
        this.placeholder = '';
        this.blur = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.focus = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._useAssist = config.getBoolean('scrollAssist', false);
        this._usePadding = config.getBoolean('scrollPadding', this._useAssist);
        this._keyboardHeight = config.getNumber('keyboardHeight');
        this._autoFocusAssist = config.get('autoFocusAssist', 'delay');
        this._autoComplete = config.get('autocomplete', 'off');
        this._autoCorrect = config.get('autocorrect', 'off');
        if (ngControl) {
            ngControl.valueAccessor = this;
            this.inputControl = ngControl;
        }
        _form.register(this);
    }

    _createClass(InputBase, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            if (this._item) {
                this._item.setCssClass('item-input', true);
                this._item.registerInput(this._type);
            }
            var clearInput = this.clearInput;
            if (typeof clearInput === 'string') {
                this.clearInput = clearInput === '' || clearInput === 'true';
            }
        }
    }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
            var self = this;
            self._scrollMove = function (ev) {
                // scroll move event listener this instance can reuse
                if (!(self._nav && self._nav.isTransitioning())) {
                    self.deregScrollMove();
                    if (self.hasFocus()) {
                        self._native.hideFocus(true);
                        self._scrollView.onScrollEnd(function () {
                            self._native.hideFocus(false);
                            if (self.hasFocus()) {
                                // if it still has focus then keep listening
                                self.regScrollMove();
                            }
                        });
                    }
                }
            };
            this.setItemInputControlCss();
        }
    }, {
        key: "ngAfterContentChecked",
        value: function ngAfterContentChecked() {
            this.setItemInputControlCss();
        }
    }, {
        key: "setItemInputControlCss",
        value: function setItemInputControlCss() {
            var item = this._item;
            var nativeInput = this._native;
            var inputControl = this.inputControl;
            // Set the control classes on the item
            if (item && inputControl) {
                this.setControlCss(item, inputControl);
            }
            // Set the control classes on the native input
            if (nativeInput && inputControl) {
                this.setControlCss(nativeInput, inputControl);
            }
        }
    }, {
        key: "setControlCss",
        value: function setControlCss(element, control) {
            element.setCssClass('ng-untouched', control.untouched);
            element.setCssClass('ng-touched', control.touched);
            element.setCssClass('ng-pristine', control.pristine);
            element.setCssClass('ng-dirty', control.dirty);
            element.setCssClass('ng-valid', control.valid);
            element.setCssClass('ng-invalid', !control.valid);
        }
    }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
            this._form.deregister(this);
        }
    }, {
        key: "writeValue",

        /**
         * @private
         * Angular2 Forms API method called by the model (Control) on change to update
         * the checked value.
         * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
         */
        value: function writeValue(val) {
            this._value = val;
            this.checkHasValue(val);
        }
        /**
         * @private
         */

    }, {
        key: "onChange",
        value: function onChange(val) {
            this.checkHasValue(val);
        }
        /**
         * @private
         */

    }, {
        key: "onTouched",
        value: function onTouched(val) {}
        /**
         * @private
         */

    }, {
        key: "hasFocus",
        value: function hasFocus() {
            // check if an input has focus or not
            return this._native.hasFocus();
        }
        /**
         * @private
         */

    }, {
        key: "checkHasValue",
        value: function checkHasValue(inputValue) {
            if (this._item) {
                this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
            }
        }
        /**
         * @private
         */

    }, {
        key: "focusChange",
        value: function focusChange(inputHasFocus) {
            if (this._item) {
                this._item.setCssClass('input-has-focus', inputHasFocus);
            }
            if (!inputHasFocus) {
                this.deregScrollMove();
            }
        }
    }, {
        key: "pointerStart",
        value: function pointerStart(ev) {
            // input cover touchstart
            console.debug('scroll assist pointerStart', ev.type);
            if (ev.type === 'touchstart') {
                this._isTouch = true;
            }
            if ((this._isTouch || !this._isTouch && ev.type === 'mousedown') && this._app.isEnabled()) {
                // remember where the touchstart/mousedown started
                this._coord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["pointerCoord"])(ev);
            }
        }
    }, {
        key: "pointerEnd",
        value: function pointerEnd(ev) {
            // input cover touchend/mouseup
            console.debug('scroll assist pointerEnd', ev.type);
            if (this._isTouch && ev.type === 'mouseup' || !this._app.isEnabled()) {
                // the app is actively doing something right now
                // don't try to scroll in the input
                ev.preventDefault();
                ev.stopPropagation();
            } else if (this._coord) {
                // get where the touchend/mouseup ended
                var endCoord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["pointerCoord"])(ev);
                // focus this input if the pointer hasn't moved XX pixels
                // and the input doesn't already have focus
                if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["hasPointerMoved"])(8, this._coord, endCoord) && !this.hasFocus()) {
                    ev.preventDefault();
                    ev.stopPropagation();
                    // begin the input focus process
                    console.debug('initFocus', ev.type);
                    this.initFocus();
                }
            }
            this._coord = null;
        }
        /**
         * @private
         */

    }, {
        key: "initFocus",
        value: function initFocus() {
            var _this = this;

            // begin the process of setting focus to the inner input element
            var scrollView = this._scrollView;
            if (scrollView) {
                // this input is inside of a scroll view
                // find out if text input should be manually scrolled into view
                // get container of this input, probably an ion-item a few nodes up
                var ele = this._elementRef.nativeElement;
                ele = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["closest"])(ele, 'ion-item,[ion-item]') || ele;
                var scrollData = InputBase.getScrollData(ele.offsetTop, ele.offsetHeight, scrollView.getContentDimensions(), this._keyboardHeight, this._platform.height());
                if (scrollData.scrollAmount > -3 && scrollData.scrollAmount < 3) {
                    // the text input is in a safe position that doesn't
                    // require it to be scrolled into view, just set focus now
                    this.setFocus();
                    this.regScrollMove();
                    return;
                }
                if (this._usePadding) {
                    // add padding to the bottom of the scroll view (if needed)
                    scrollView.addScrollPadding(scrollData.scrollPadding);
                }
                // manually scroll the text input to the top
                // do not allow any clicks while it's scrolling
                var scrollDuration = getScrollAssistDuration(scrollData.scrollAmount);
                this._app.setEnabled(false, scrollDuration);
                this._nav && this._nav.setTransitioning(true, scrollDuration);
                // temporarily move the focus to the focus holder so the browser
                // doesn't freak out while it's trying to get the input in place
                // at this point the native text input still does not have focus
                this._native.beginFocus(true, scrollData.inputSafeY);
                // scroll the input into place
                scrollView.scrollTo(0, scrollData.scrollTo, scrollDuration).then(function () {
                    // the scroll view is in the correct position now
                    // give the native text input focus
                    _this._native.beginFocus(false, 0);
                    // ensure this is the focused input
                    _this.setFocus();
                    // all good, allow clicks again
                    _this._app.setEnabled(true);
                    _this._nav && _this._nav.setTransitioning(false);
                    _this.regScrollMove();
                    if (_this._usePadding) {
                        _this._scrollView.clearScrollPaddingFocusOut();
                    }
                });
            } else {
                // not inside of a scroll view, just focus it
                this.setFocus();
                this.regScrollMove();
            }
        }
        /**
         * @private
         */

    }, {
        key: "setFocus",
        value: function setFocus() {
            // immediately set focus
            this._form.setAsFocused(this);
            // set focus on the actual input element
            console.debug("input-base, setFocus " + this._native.element().value);
            this._native.setFocus();
            // ensure the body hasn't scrolled down
            document.body.scrollTop = 0;
        }
        /**
         * @private
         * Angular2 Forms API method called by the view (NgControl) to register the
         * onChange event handler that updates the model (Control).
         * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
         * @param {Function} fn  the onChange event handler.
         */

    }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
            this.onChange = fn;
        }
        /**
         * @private
         * Angular2 Forms API method called by the view (NgControl) to register
         * the onTouched event handler that marks model (Control) as touched.
         * @param {Function} fn  onTouched event handler.
         */

    }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
            this.onTouched = fn;
        }
        /**
         * @private
         */

    }, {
        key: "regScrollMove",
        value: function regScrollMove() {
            var _this2 = this;

            // register scroll move listener
            if (this._useAssist && this._scrollView) {
                setTimeout(function () {
                    _this2.deregScrollMove();
                    _this2._deregScroll = _this2._scrollView.addScrollListener(_this2._scrollMove);
                }, 80);
            }
        }
        /**
         * @private
         */

    }, {
        key: "deregScrollMove",
        value: function deregScrollMove() {
            // deregister the scroll move listener
            this._deregScroll && this._deregScroll();
        }
    }, {
        key: "focusNext",
        value: function focusNext() {
            this._form.tabFocus(this);
        }
        /**
         * @private
         */

    }, {
        key: "value",
        get: function get() {
            return this._value;
        },
        set: function set(val) {
            this._value = val;
        }
    }, {
        key: "type",
        get: function get() {
            return this._type;
        },
        set: function set(val) {
            this._type = 'text';
            if (val) {
                val = val.toLowerCase();
                if (/password|email|number|search|tel|url|date|month|time|week/.test(val)) {
                    this._type = val;
                }
            }
        }
    }, {
        key: "disabled",
        get: function get() {
            return this._disabled;
        },
        set: function set(val) {
            this._disabled = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["isTrueProperty"])(val);
            this._item && this._item.setCssClass('item-input-disabled', this._disabled);
            this._native && this._native.isDisabled(this._disabled);
        }
        /**
         * @private
         */

    }, {
        key: "_nativeInput",
        set: function set(nativeInput) {
            var _this3 = this;

            this._native = nativeInput;
            if (this._item && this._item.labelId !== null) {
                nativeInput.labelledBy(this._item.labelId);
            }
            nativeInput.valueChange.subscribe(function (inputValue) {
                _this3.onChange(inputValue);
            });
            this.focusChange(this.hasFocus());
            nativeInput.focusChange.subscribe(function (textInputHasFocus) {
                _this3.focusChange(textInputHasFocus);
                _this3.checkHasValue(nativeInput.getValue());
                if (!textInputHasFocus) {
                    _this3.onTouched(textInputHasFocus);
                }
            });
            this.checkHasValue(nativeInput.getValue());
            this.disabled = this._disabled;
            var ionInputEle = this._elementRef.nativeElement;
            var nativeInputEle = nativeInput.element();
            // copy ion-input attributes to the native input element
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util_dom__["copyInputAttributes"])(ionInputEle, nativeInputEle);
            if (ionInputEle.hasAttribute('autofocus')) {
                // the ion-input element has the autofocus attributes
                ionInputEle.removeAttribute('autofocus');
                if (this._autoFocusAssist === 'immediate') {
                    // config says to immediate focus on the input
                    // works best on android devices
                    nativeInputEle.focus();
                } else if (this._autoFocusAssist === 'delay') {
                    // config says to chill out a bit and focus on the input after transitions
                    // works best on desktop
                    setTimeout(function () {
                        nativeInputEle.focus();
                    }, 650);
                }
            }
            // by default set autocomplete="off" unless specified by the input
            if (ionInputEle.hasAttribute('autocomplete')) {
                this._autoComplete = ionInputEle.getAttribute('autocomplete');
            }
            nativeInputEle.setAttribute('autocomplete', this._autoComplete);
            // by default set autocorrect="off" unless specified by the input
            if (ionInputEle.hasAttribute('autocorrect')) {
                this._autoCorrect = ionInputEle.getAttribute('autocorrect');
            }
            nativeInputEle.setAttribute('autocorrect', this._autoCorrect);
        }
        /**
         * @private
         */

    }, {
        key: "_nextInput",
        set: function set(nextInput) {
            var _this4 = this;

            if (nextInput) {
                nextInput.focused.subscribe(function () {
                    _this4._form.tabFocus(_this4);
                });
            }
        }
    }], [{
        key: "getScrollData",
        value: function getScrollData(inputOffsetTop, inputOffsetHeight, scrollViewDimensions, keyboardHeight, plaformHeight) {
            // compute input's Y values relative to the body
            var inputTop = inputOffsetTop + scrollViewDimensions.contentTop - scrollViewDimensions.scrollTop;
            var inputBottom = inputTop + inputOffsetHeight;
            // compute the safe area which is the viewable content area when the soft keyboard is up
            var safeAreaTop = scrollViewDimensions.contentTop;
            var safeAreaHeight = plaformHeight - keyboardHeight - safeAreaTop;
            safeAreaHeight /= 2;
            var safeAreaBottom = safeAreaTop + safeAreaHeight;
            var inputTopWithinSafeArea = inputTop >= safeAreaTop && inputTop <= safeAreaBottom;
            var inputTopAboveSafeArea = inputTop < safeAreaTop;
            var inputTopBelowSafeArea = inputTop > safeAreaBottom;
            var inputBottomWithinSafeArea = inputBottom >= safeAreaTop && inputBottom <= safeAreaBottom;
            var inputBottomBelowSafeArea = inputBottom > safeAreaBottom;
            /*
            Text Input Scroll To Scenarios
            ---------------------------------------
            1) Input top within safe area, bottom within safe area
            2) Input top within safe area, bottom below safe area, room to scroll
            3) Input top above safe area, bottom within safe area, room to scroll
            4) Input top below safe area, no room to scroll, input smaller than safe area
            5) Input top within safe area, bottom below safe area, no room to scroll, input smaller than safe area
            6) Input top within safe area, bottom below safe area, no room to scroll, input larger than safe area
            7) Input top below safe area, no room to scroll, input larger than safe area
            */
            var scrollData = {
                scrollAmount: 0,
                scrollTo: 0,
                scrollPadding: 0,
                inputSafeY: 0
            };
            if (inputTopWithinSafeArea && inputBottomWithinSafeArea) {
                // Input top within safe area, bottom within safe area
                // no need to scroll to a position, it's good as-is
                return scrollData;
            }
            // looks like we'll have to do some auto-scrolling
            if (inputTopBelowSafeArea || inputBottomBelowSafeArea) {
                // Input top and bottom below safe area
                // auto scroll the input up so at least the top of it shows
                if (safeAreaHeight > inputOffsetHeight) {
                    // safe area height is taller than the input height, so we
                    // can bring it up the input just enough to show the input bottom
                    scrollData.scrollAmount = Math.round(safeAreaBottom - inputBottom);
                } else {
                    // safe area height is smaller than the input height, so we can
                    // only scroll it up so the input top is at the top of the safe area
                    // however the input bottom will be below the safe area
                    scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
                }
                scrollData.inputSafeY = -(inputTop - safeAreaTop) + 4;
            } else if (inputTopAboveSafeArea) {
                // Input top above safe area
                // auto scroll the input down so at least the top of it shows
                scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
                scrollData.inputSafeY = safeAreaTop - inputTop + 4;
            }
            // figure out where it should scroll to for the best position to the input
            scrollData.scrollTo = scrollViewDimensions.scrollTop - scrollData.scrollAmount;
            if (scrollData.scrollAmount < 0) {
                // when auto-scrolling up, there also needs to be enough
                // content padding at the bottom of the scroll view
                // manually add it if there isn't enough scrollable area
                // figure out how many scrollable area is left to scroll up
                var availablePadding = scrollViewDimensions.scrollHeight - scrollViewDimensions.scrollTop - scrollViewDimensions.contentHeight;
                var paddingSpace = availablePadding + scrollData.scrollAmount;
                if (paddingSpace < 0) {
                    // there's not enough scrollable area at the bottom, so manually add more
                    scrollData.scrollPadding = scrollViewDimensions.contentHeight - safeAreaHeight;
                }
            }
            // if (!window.safeAreaEle) {
            //   window.safeAreaEle = document.createElement('div');
            //   window.safeAreaEle.style.position = 'absolute';
            //   window.safeAreaEle.style.background = 'rgba(0, 128, 0, 0.7)';
            //   window.safeAreaEle.style.padding = '2px 5px';
            //   window.safeAreaEle.style.textShadow = '1px 1px white';
            //   window.safeAreaEle.style.left = '0px';
            //   window.safeAreaEle.style.right = '0px';
            //   window.safeAreaEle.style.fontWeight = 'bold';
            //   window.safeAreaEle.style.pointerEvents = 'none';
            //   document.body.appendChild(window.safeAreaEle);
            // }
            // window.safeAreaEle.style.top = safeAreaTop + 'px';
            // window.safeAreaEle.style.height = safeAreaHeight + 'px';
            // window.safeAreaEle.innerHTML = `
            //   <div>scrollTo: ${scrollData.scrollTo}</div>
            //   <div>scrollAmount: ${scrollData.scrollAmount}</div>
            //   <div>scrollPadding: ${scrollData.scrollPadding}</div>
            //   <div>inputSafeY: ${scrollData.inputSafeY}</div>
            //   <div>scrollHeight: ${scrollViewDimensions.scrollHeight}</div>
            //   <div>scrollTop: ${scrollViewDimensions.scrollTop}</div>
            //   <div>contentHeight: ${scrollViewDimensions.contentHeight}</div>
            // `;
            return scrollData;
        }
    }]);

    return InputBase;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], InputBase.prototype, "clearInput", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', String)], InputBase.prototype, "placeholder", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */]), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */]) === 'function' && _a || Object)], InputBase.prototype, "_native", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], InputBase.prototype, "blur", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _c || Object)], InputBase.prototype, "focus", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], InputBase.prototype, "value", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], InputBase.prototype, "type", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', Object)], InputBase.prototype, "disabled", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */]), __metadata('design:type', typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */]) === 'function' && _d || Object), __metadata('design:paramtypes', [typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__native_input__["a" /* NativeInput */]) === 'function' && _e || Object])], InputBase.prototype, "_nativeInput", null);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_3__native_input__["b" /* NextInput */]), __metadata('design:type', typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_3__native_input__["b" /* NextInput */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__native_input__["b" /* NextInput */]) === 'function' && _f || Object), __metadata('design:paramtypes', [typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_3__native_input__["b" /* NextInput */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__native_input__["b" /* NextInput */]) === 'function' && _g || Object])], InputBase.prototype, "_nextInput", null);
var SCROLL_ASSIST_SPEED = 0.3;
function getScrollAssistDuration(distanceToScroll) {
    distanceToScroll = Math.abs(distanceToScroll);
    var duration = distanceToScroll / SCROLL_ASSIST_SPEED;
    return Math.min(400, Math.max(150, duration));
}
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 896 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_ui_event_manager__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ItemReorderGesture; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}



var AUTO_SCROLL_MARGIN = 60;
var SCROLL_JUMP = 10;
var ITEM_REORDER_ACTIVE = 'reorder-active';
/**
 * @private
 */
var ItemReorderGesture = function () {
    function ItemReorderGesture(list) {
        _classCallCheck(this, ItemReorderGesture);

        this.list = list;
        this.selectedItem = null;
        this.selectedItemEle = null;
        this.events = new __WEBPACK_IMPORTED_MODULE_0__util_ui_event_manager__["a" /* UIEventManager */](false);
        var element = this.list.getNativeElement();
        this.events.pointerEvents(element, this.onDragStart.bind(this), this.onDragMove.bind(this), this.onDragEnd.bind(this));
    }

    _createClass(ItemReorderGesture, [{
        key: 'onDragStart',
        value: function onDragStart(ev) {
            var itemEle = ev.target;
            if (itemEle.nodeName !== 'ION-REORDER') {
                return false;
            }
            var item = itemEle['$ionComponent'];
            if (!item) {
                console.error('item does not contain ion component');
                return false;
            }
            ev.preventDefault();
            // Preparing state
            this.selectedItem = item;
            this.selectedItemEle = item.getNativeElement();
            this.selectedItemHeight = item.height();
            this.lastToIndex = item.index;
            this.lastYcoord = -100;
            this.windowHeight = window.innerHeight - AUTO_SCROLL_MARGIN;
            this.lastScrollPosition = this.list.scrollContent(0);
            this.offset = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["pointerCoord"])(ev);
            this.offset.y += this.lastScrollPosition;
            item.setCssClass(ITEM_REORDER_ACTIVE, true);
            this.list.reorderStart();
            return true;
        }
    }, {
        key: 'onDragMove',
        value: function onDragMove(ev) {
            var selectedItem = this.selectedItemEle;
            if (!selectedItem) {
                return;
            }
            ev.preventDefault();
            // Get coordinate
            var coord = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["pointerCoord"])(ev);
            var posY = coord.y;
            // Scroll if we reach the scroll margins
            var scrollPosition = this.scroll(posY);
            // Only perform hit test if we moved at least 30px from previous position
            if (Math.abs(posY - this.lastYcoord) > 30) {
                var overItem = this.itemForCoord(coord);
                if (overItem) {
                    var toIndex = overItem.index;
                    if (toIndex !== this.lastToIndex || this.emptyZone) {
                        var fromIndex = this.selectedItem.index;
                        this.lastToIndex = toIndex;
                        this.lastYcoord = posY;
                        this.emptyZone = false;
                        this.list.reorderMove(fromIndex, toIndex, this.selectedItemHeight);
                    }
                } else {
                    this.emptyZone = true;
                }
            }
            // Update selected item position  
            var ydiff = Math.round(posY - this.offset.y + scrollPosition);
            selectedItem.style[__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transform] = 'translateY(' + ydiff + 'px)';
        }
    }, {
        key: 'onDragEnd',
        value: function onDragEnd() {
            var _this = this;

            if (!this.selectedItemEle) {
                return;
            }
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["nativeRaf"])(function () {
                var toIndex = _this.lastToIndex;
                var fromIndex = _this.selectedItem.index;
                _this.selectedItem.setCssClass(ITEM_REORDER_ACTIVE, false);
                _this.selectedItem = null;
                _this.selectedItemEle = null;
                _this.list.reorderEmit(fromIndex, toIndex);
            });
        }
    }, {
        key: 'itemForCoord',
        value: function itemForCoord(coord) {
            var element = document.elementFromPoint(this.offset.x - 100, coord.y);
            if (!element) {
                return null;
            }
            if (element.nodeName !== 'ION-ITEM') {
                return null;
            }
            var item = element['$ionComponent'];
            if (!item) {
                console.error('item does not have $ionComponent');
                return null;
            }
            return item;
        }
    }, {
        key: 'scroll',
        value: function scroll(posY) {
            if (posY < AUTO_SCROLL_MARGIN) {
                this.lastScrollPosition = this.list.scrollContent(-SCROLL_JUMP);
            } else if (posY > this.windowHeight) {
                this.lastScrollPosition = this.list.scrollContent(SCROLL_JUMP);
            }
            return this.lastScrollPosition;
        }
        /**
         * @private
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.onDragEnd();
            this.events.unlistenAll();
            this.events = null;
            this.list = null;
        }
    }]);

    return ItemReorderGesture;
}();

/***/ },
/* 897 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gestures_drag_gesture__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ItemSlidingGesture; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var DRAG_THRESHOLD = 20;
var MAX_ATTACK_ANGLE = 20;
var ItemSlidingGesture = function (_DragGesture) {
    _inherits(ItemSlidingGesture, _DragGesture);

    function ItemSlidingGesture(list) {
        _classCallCheck(this, ItemSlidingGesture);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ItemSlidingGesture).call(this, list.getNativeElement(), {
            direction: 'x',
            threshold: DRAG_THRESHOLD
        }));

        _this.list = list;
        _this.selectedContainer = null;
        _this.openContainer = null;
        _this.listen();
        return _this;
    }

    _createClass(ItemSlidingGesture, [{
        key: 'onTapCallback',
        value: function onTapCallback(ev) {
            if (isFromOptionButtons(ev.target)) {
                return;
            }
            var didClose = this.closeOpened();
            if (didClose) {
                console.debug('tap close sliding item, preventDefault');
                ev.preventDefault();
            }
        }
    }, {
        key: 'onDragStart',
        value: function onDragStart(ev) {
            var angle = Math.abs(ev.angle);
            if (angle > MAX_ATTACK_ANGLE && Math.abs(angle - 180) > MAX_ATTACK_ANGLE) {
                this.closeOpened();
                return false;
            }
            if (this.selectedContainer) {
                console.debug('onDragStart, another container is already selected');
                return false;
            }
            var container = getContainer(ev);
            if (!container) {
                console.debug('onDragStart, no itemContainerEle');
                return false;
            }
            // Close open container if it is not the selected one.
            if (container !== this.openContainer) {
                this.closeOpened();
            }
            this.selectedContainer = container;
            this.openContainer = container;
            container.startSliding(ev.center.x);
            return true;
        }
    }, {
        key: 'onDrag',
        value: function onDrag(ev) {
            if (this.selectedContainer) {
                this.selectedContainer.moveSliding(ev.center.x);
                ev.preventDefault();
            }
            return;
        }
    }, {
        key: 'onDragEnd',
        value: function onDragEnd(ev) {
            var _this2 = this;

            if (this.selectedContainer) {
                ev.preventDefault();
                var openAmount = this.selectedContainer.endSliding(ev.velocityX);
                this.selectedContainer = null;
                // TODO: I am not sure listening for a tap event is the best idea
                // we should try mousedown/touchstart
                if (openAmount === 0) {
                    this.openContainer = null;
                    this.off('tap', this.onTap);
                    this.onTap = null;
                } else if (!this.onTap) {
                    this.onTap = function (event) {
                        return _this2.onTapCallback(event);
                    };
                    this.on('tap', this.onTap);
                }
            }
        }
    }, {
        key: 'closeOpened',
        value: function closeOpened() {
            if (this.openContainer) {
                this.openContainer.close();
                this.openContainer = null;
                this.selectedContainer = null;
                this.off('tap', this.onTap);
                this.onTap = null;
                return true;
            }
            return false;
        }
    }, {
        key: 'unlisten',
        value: function unlisten() {
            _get(Object.getPrototypeOf(ItemSlidingGesture.prototype), 'unlisten', this).call(this);
        }
    }]);

    return ItemSlidingGesture;
}(__WEBPACK_IMPORTED_MODULE_0__gestures_drag_gesture__["DragGesture"]);
function getContainer(ev) {
    var ele = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["closest"])(ev.target, 'ion-item-sliding', true);
    if (ele) {
        return ele['$ionComponent'];
    }
    return null;
}
function isFromOptionButtons(ele) {
    return !!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["closest"])(ele, 'ion-item-options', true);
}

/***/ },
/* 898 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "b", function() { return Loading; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * @name Loading
 * @description
 * An overlay that can be used to indicate activity while blocking user
 * interaction. The loading indicator appears on top of the app's content,
 * and can be dismissed by the app to resume user interaction with
 * the app. It includes an optional backdrop, which can be disabled
 * by setting `showBackdrop: false` upon creation.
 *
 * ### Creating
 * You can pass all of the loading options in the first argument of
 * the create method: `Loading.create(opts)`. The spinner name should be
 * passed in the `spinner` property, and any optional HTML can be passed
 * in the `content` property. If you do not pass a value to `spinner`
 * the loading indicator will use the spinner specified by the mode. To
 * set the spinner name across the app, set the value of `loadingSpinner`
 * in your app's config. To hide the spinner, set `loadingSpinner: 'hide'`
 * in the app's config or pass `spinner: 'hide'` in the loading
 * options. See the [create](#create) method below for all available options.
 *
 * ### Dismissing
 * The loading indicator can be dismissed automatically after a specific
 * amount of time by passing the number of milliseconds to display it in
 * the `duration` of the loading options. By default the loading indicator
 * will show even during page changes, but this can be disabled by setting
 * `dismissOnPageChange` to `true`. To dismiss the loading indicator after
 * creation, call the `dismiss()` method on the Loading instance. The
 * `onDismiss` function can be called to perform an action after the loading
 * indicator is dismissed.
 *
 * >Note that after the component is dismissed, it will not be usable anymore
 * and another one must be created. This can be avoided by wrapping the
 * creation and presentation of the component in a reusable function as shown
 * in the `usage` section below.
 *
 * ### Limitations
 * The element is styled to appear on top of other content by setting its
 * `z-index` property. You must ensure no element has a stacking context with
 * a higher `z-index` than this element.
 *
 * @usage
 * ```ts
 * constructor(nav: NavController) {
 *   this.nav = nav;
 * }
 *
 * presentLoadingDefault() {
 *   let loading = Loading.create({
 *     content: 'Please wait...'
 *   });
 *
 *   this.nav.present(loading);
 *
 *   setTimeout(() => {
 *     loading.dismiss();
 *   }, 5000);
 * }
 *
 * presentLoadingCustom() {
 *   let loading = Loading.create({
 *     spinner: 'hide',
 *     content: `
 *       <div class="custom-spinner-container">
 *         <div class="custom-spinner-box"></div>
 *       </div>`,
 *     duration: 5000
 *   });
 *
 *   loading.onDismiss(() => {
 *     console.log('Dismissed loading');
 *   });
 *
 *   this.nav.present(loading);
 * }
 *
 * presentLoadingText() {
 *   let loading = Loading.create({
 *     spinner: 'hide',
 *     content: 'Loading Please Wait...'
 *   });
 *
 *   this.nav.present(loading);
 *
 *   setTimeout(() => {
 *     this.nav.push(Page2);
 *   }, 1000);
 *
 *   setTimeout(() => {
 *     loading.dismiss();
 *   }, 5000);
 * }
 * ```
 *
 * @demo /docs/v2/demos/loading/
 * @see {@link /docs/v2/api/components/spinner/Spinner Spinner API Docs}
 */
var Loading = function (_ViewController) {
    _inherits(Loading, _ViewController);

    function Loading() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, Loading);

        opts.showBackdrop = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isPresent"])(opts.showBackdrop) ? !!opts.showBackdrop : true;
        opts.dismissOnPageChange = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isPresent"])(opts.dismissOnPageChange) ? !!opts.dismissOnPageChange : false;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Loading).call(this, LoadingCmp, opts));

        _this.isOverlay = true;
        _this.usePortal = true;
        // by default, loading indicators should not fire lifecycle events of other views
        // for example, when an loading indicators enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        _this.fireOtherLifecycles = false;
        return _this;
    }
    /**
    * @private
    */

    _createClass(Loading, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = direction === 'back' ? 'loadingLeave' : 'loadingEnter';
            return this._nav && this._nav.config.get(key);
        }
        /**
         * Create a loading indicator with the following options
         *
         * | Option                | Type       | Description                                                                                                      |
         * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
         * | spinner               |`string`    | The name of the SVG spinner for the loading indicator.                                                           |
         * | content               |`string`    | The html content for the loading indicator.                                                                      |
         * | cssClass              |`string`    | An additional class for custom styles.                                                                           |
         * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
         * | dismissOnPageChange   |`boolean`   | Whether to dismiss the indicator when navigating to a new page. Default false.                                   |
         * | duration              |`number`    | How many milliseconds to wait before hiding the indicator. By default, it will show until `dismiss()` is called. |
         *
         *
         * @param {object} opts Loading options
         */

    }], [{
        key: "create",
        value: function create() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            return new Loading(opts);
        }
    }]);

    return Loading;
}(__WEBPACK_IMPORTED_MODULE_6__nav_view_controller__["a" /* ViewController */]);
/**
* @private
*/
var LoadingCmp = function () {
    function LoadingCmp(_viewCtrl, _config, _elementRef, params, renderer) {
        _classCallCheck(this, LoadingCmp);

        this._viewCtrl = _viewCtrl;
        this._config = _config;
        this._elementRef = _elementRef;
        this.d = params.data;
        if (this.d.cssClass) {
            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
        }
        this.id = ++loadingIds;
    }

    _createClass(LoadingCmp, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            // If no spinner was passed in loading options we need to fall back
            // to the loadingSpinner in the app's config, then the mode spinner
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isUndefined"])(this.d.spinner)) {
                this.d.spinner = this._config.get('loadingSpinner', this._config.get('spinner', 'ios'));
            }
            // If the user passed hide to the spinner we don't want to show it
            this.showSpinner = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isDefined"])(this.d.spinner) && this.d.spinner !== 'hide';
        }
    }, {
        key: "ionViewDidEnter",
        value: function ionViewDidEnter() {
            var _this2 = this;

            var activeElement = document.activeElement;
            if (document.activeElement) {
                activeElement.blur();
            }
            // If there is a duration, dismiss after that amount of time
            this.d.duration ? setTimeout(function () {
                return _this2.dismiss('backdrop');
            }, this.d.duration) : null;
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(null, role);
        }
    }]);

    return LoadingCmp;
}();
LoadingCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-loading',
    template: '<ion-backdrop [class.hide-backdrop]="!d.showBackdrop"></ion-backdrop>' + '<div class="loading-wrapper">' + '<div *ngIf="showSpinner" class="loading-spinner">' + '<ion-spinner [name]="d.spinner"></ion-spinner>' + '</div>' + '<div *ngIf="d.content" [innerHTML]="d.content" class="loading-content"></div>' + '</div>',
    host: {
        'role': 'dialog'
    },
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_6__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__nav_view_controller__["a" /* ViewController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__nav_nav_params__["a" /* NavParams */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _e || Object])], LoadingCmp);
/**
 * Animations for loading
 */

var LoadingPopIn = function (_Transition) {
    _inherits(LoadingPopIn, _Transition);

    function LoadingPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, LoadingPopIn);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('.loading-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
        backdrop.fromTo('opacity', 0.01, 0.3);
        _this3.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this3;
    }

    return LoadingPopIn;
}(__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"].register('loading-pop-in', LoadingPopIn);

var LoadingPopOut = function (_Transition2) {
    _inherits(LoadingPopOut, _Transition2);

    function LoadingPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, LoadingPopOut);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('.loading-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
        backdrop.fromTo('opacity', 0.3, 0);
        _this4.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this4;
    }

    return LoadingPopOut;
}(__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"].register('loading-pop-out', LoadingPopOut);

var LoadingMdPopIn = function (_Transition3) {
    _inherits(LoadingMdPopIn, _Transition3);

    function LoadingMdPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, LoadingMdPopIn);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingMdPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('.loading-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
        backdrop.fromTo('opacity', 0.01, 0.5);
        _this5.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this5;
    }

    return LoadingMdPopIn;
}(__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"].register('loading-md-pop-in', LoadingMdPopIn);

var LoadingMdPopOut = function (_Transition4) {
    _inherits(LoadingMdPopOut, _Transition4);

    function LoadingMdPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, LoadingMdPopOut);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingMdPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('.loading-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
        backdrop.fromTo('opacity', 0.5, 0);
        _this6.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
        return _this6;
    }

    return LoadingMdPopOut;
}(__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"].register('loading-md-pop-out', LoadingMdPopOut);

var LoadingWpPopIn = function (_Transition5) {
    _inherits(LoadingWpPopIn, _Transition5);

    function LoadingWpPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, LoadingWpPopIn);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingWpPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('.loading-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
        backdrop.fromTo('opacity', 0.01, 0.16);
        _this7.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(backdrop).add(wrapper);
        return _this7;
    }

    return LoadingWpPopIn;
}(__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"].register('loading-wp-pop-in', LoadingWpPopIn);

var LoadingWpPopOut = function (_Transition6) {
    _inherits(LoadingWpPopOut, _Transition6);

    function LoadingWpPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, LoadingWpPopOut);

        var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingWpPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_1__animations_animation__["Animation"](ele.querySelector('.loading-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
        backdrop.fromTo('opacity', 0.16, 0);
        _this8.easing('ease-out').duration(150).add(backdrop).add(wrapper);
        return _this8;
    }

    return LoadingWpPopOut;
}(__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_5__transitions_transition__["Transition"].register('loading-wp-pop-out', LoadingWpPopOut);
var loadingIds = -1;
var _a, _b, _c, _d, _e;

/***/ },
/* 899 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gestures_slide_edge_gesture__ = __webpack_require__(323);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return MenuContentGesture; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return MenuTargetGesture; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



/**
 * Gesture attached to the content which the menu is assigned to
 */
var MenuContentGesture = function (_SlideEdgeGesture) {
    _inherits(MenuContentGesture, _SlideEdgeGesture);

    function MenuContentGesture(menu, contentEle) {
        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        _classCallCheck(this, MenuContentGesture);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuContentGesture).call(this, contentEle, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["assign"])({
            direction: 'x',
            edge: menu.side,
            threshold: 0,
            maxEdgeStart: menu.maxEdgeStart || 75
        }, options)));

        _this.menu = menu;
        return _this;
    }

    _createClass(MenuContentGesture, [{
        key: 'canStart',
        value: function canStart(ev) {
            var menu = this.menu;
            if (!menu.enabled || !menu.swipeEnabled) {
                console.debug('menu can not start, isEnabled:', menu.enabled, 'isSwipeEnabled:', menu.swipeEnabled, 'side:', menu.side);
                return false;
            }
            if (ev.distance > 50) {
                // the distance is longer than you'd expect a side menu swipe to be
                console.debug('menu can not start, distance too far:', ev.distance, 'side:', menu.side);
                return false;
            }
            console.debug('menu canStart,', menu.side, 'isOpen', menu.isOpen, 'angle', ev.angle, 'distance', ev.distance);
            if (menu.side === 'right') {
                // right side
                if (menu.isOpen) {
                    // right side, opened
                    return true;
                } else {
                    // right side, closed
                    if (ev.angle > 140 && ev.angle <= 180 || ev.angle > -140 && ev.angle <= -180) {
                        return _get(Object.getPrototypeOf(MenuContentGesture.prototype), 'canStart', this).call(this, ev);
                    }
                }
            } else {
                // left side
                if (menu.isOpen) {
                    // left side, opened
                    return true;
                } else {
                    // left side, closed
                    if (ev.angle > -40 && ev.angle < 40) {
                        return _get(Object.getPrototypeOf(MenuContentGesture.prototype), 'canStart', this).call(this, ev);
                    }
                }
            }
            // didn't pass the test, don't open this menu
            return false;
        }
        // Set CSS, then wait one frame for it to apply before sliding starts

    }, {
        key: 'onSlideBeforeStart',
        value: function onSlideBeforeStart(slide, ev) {
            console.debug('menu gesture, onSlideBeforeStart', this.menu.side);
            this.menu.swipeStart();
        }
    }, {
        key: 'onSlide',
        value: function onSlide(slide, ev) {
            var z = this.menu.side === 'right' ? slide.min : slide.max;
            var stepValue = slide.distance / z;
            console.debug('menu gesture, onSlide', this.menu.side, 'distance', slide.distance, 'min', slide.min, 'max', slide.max, 'z', z, 'stepValue', stepValue);
            ev.srcEvent.preventDefault();
            ev.preventDefault();
            this.menu.swipeProgress(stepValue);
        }
    }, {
        key: 'onSlideEnd',
        value: function onSlideEnd(slide, ev) {
            var z = this.menu.side === 'right' ? slide.min : slide.max;
            var currentStepValue = slide.distance / z;
            z = Math.abs(z * 0.5);
            var shouldCompleteRight = ev.velocityX >= 0 && (ev.velocityX > 0.2 || slide.delta > z);
            var shouldCompleteLeft = ev.velocityX <= 0 && (ev.velocityX < -0.2 || slide.delta < -z);
            console.debug('menu gesture, onSlide', this.menu.side, 'distance', slide.distance, 'delta', slide.delta, 'velocityX', ev.velocityX, 'min', slide.min, 'max', slide.max, 'shouldCompleteLeft', shouldCompleteLeft, 'shouldCompleteRight', shouldCompleteRight, 'currentStepValue', currentStepValue);
            this.menu.swipeEnd(shouldCompleteLeft, shouldCompleteRight, currentStepValue);
        }
    }, {
        key: 'getElementStartPos',
        value: function getElementStartPos(slide, ev) {
            if (this.menu.side === 'right') {
                // right menu
                return this.menu.isOpen ? slide.min : slide.max;
            }
            // left menu
            return this.menu.isOpen ? slide.max : slide.min;
        }
    }, {
        key: 'getSlideBoundaries',
        value: function getSlideBoundaries() {
            if (this.menu.side === 'right') {
                // right menu
                return {
                    min: -this.menu.width(),
                    max: 0
                };
            }
            // left menu
            return {
                min: 0,
                max: this.menu.width()
            };
        }
    }]);

    return MenuContentGesture;
}(__WEBPACK_IMPORTED_MODULE_0__gestures_slide_edge_gesture__["SlideEdgeGesture"]);
/**
 * Gesture attached to the actual menu itself
 */
var MenuTargetGesture = function (_MenuContentGesture) {
    _inherits(MenuTargetGesture, _MenuContentGesture);

    function MenuTargetGesture(menu, menuEle) {
        _classCallCheck(this, MenuTargetGesture);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(MenuTargetGesture).call(this, menu, menuEle, {
            maxEdgeStart: 0
        }));
    }

    return MenuTargetGesture;
}(MenuContentGesture);

/***/ },
/* 900 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__menu_controller__ = __webpack_require__(112);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return MenuType; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}



/**
 * @private
 * Menu Type
 * Base class which is extended by the various types. Each
 * type will provide their own animations for open and close
 * and registers itself with Menu.
 */
var MenuType = function () {
    function MenuType() {
        _classCallCheck(this, MenuType);

        this.ani = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"]();
    }

    _createClass(MenuType, [{
        key: 'setOpen',
        value: function setOpen(shouldOpen, done) {
            this.ani.onFinish(done, true).reverse(!shouldOpen).play();
        }
    }, {
        key: 'setProgressStart',
        value: function setProgressStart(isOpen) {
            this.isOpening = !isOpen;
            // the cloned animation should not use an easing curve during seek
            this.ani.reverse(isOpen).progressStart();
        }
    }, {
        key: 'setProgessStep',
        value: function setProgessStep(stepValue) {
            // adjust progress value depending if it opening or closing
            this.ani.progressStep(stepValue);
        }
    }, {
        key: 'setProgressEnd',
        value: function setProgressEnd(shouldComplete, currentStepValue, done) {
            var _this = this;

            var isOpen = this.isOpening && shouldComplete;
            if (!this.isOpening && !shouldComplete) {
                isOpen = true;
            }
            this.ani.onFinish(function () {
                _this.isOpening = false;
                done(isOpen);
            }, true);
            this.ani.progressEnd(shouldComplete, currentStepValue);
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.ani && this.ani.destroy();
        }
    }]);

    return MenuType;
}();
/**
 * @private
 * Menu Reveal Type
 * The content slides over to reveal the menu underneath.
 * The menu itself, which is under the content, does not move.
 */

var MenuRevealType = function (_MenuType) {
    _inherits(MenuRevealType, _MenuType);

    function MenuRevealType(menu, platform) {
        _classCallCheck(this, MenuRevealType);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuRevealType).call(this));

        var openedX = menu.width() * (menu.side === 'right' ? -1 : 1) + 'px';
        _this2.ani.easing('ease').duration(250);
        var contentOpen = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](menu.getContentElement());
        contentOpen.fromTo('translateX', '0px', openedX);
        _this2.ani.add(contentOpen);
        return _this2;
    }

    return MenuRevealType;
}(MenuType);

__WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */].registerType('reveal', MenuRevealType);
/**
 * @private
 * Menu Push Type
 * The content slides over to reveal the menu underneath.
 * The menu itself also slides over to reveal its bad self.
 */

var MenuPushType = function (_MenuType2) {
    _inherits(MenuPushType, _MenuType2);

    function MenuPushType(menu, platform) {
        _classCallCheck(this, MenuPushType);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuPushType).call(this));

        _this3.ani.easing('ease').duration(250);
        var contentOpenedX = void 0,
            menuClosedX = void 0,
            menuOpenedX = void 0;
        if (menu.side === 'right') {
            // right side
            contentOpenedX = -menu.width() + 'px';
            menuClosedX = menu.width() + 'px';
            menuOpenedX = '0px';
        } else {
            contentOpenedX = menu.width() + 'px';
            menuOpenedX = '0px';
            menuClosedX = -menu.width() + 'px';
        }
        var menuAni = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](menu.getMenuElement());
        menuAni.fromTo('translateX', menuClosedX, menuOpenedX);
        _this3.ani.add(menuAni);
        var contentApi = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](menu.getContentElement());
        contentApi.fromTo('translateX', '0px', contentOpenedX);
        _this3.ani.add(contentApi);
        return _this3;
    }

    return MenuPushType;
}(MenuType);

__WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */].registerType('push', MenuPushType);
/**
 * @private
 * Menu Overlay Type
 * The menu slides over the content. The content
 * itself, which is under the menu, does not move.
 */

var MenuOverlayType = function (_MenuType3) {
    _inherits(MenuOverlayType, _MenuType3);

    function MenuOverlayType(menu, platform) {
        _classCallCheck(this, MenuOverlayType);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuOverlayType).call(this));

        _this4.ani.easing('ease').duration(250);
        var closedX = void 0,
            openedX = void 0;
        if (menu.side === 'right') {
            // right side
            closedX = 8 + menu.width() + 'px';
            openedX = '0px';
        } else {
            // left side
            closedX = -(8 + menu.width()) + 'px';
            openedX = '0px';
        }
        var menuAni = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](menu.getMenuElement());
        menuAni.fromTo('translateX', closedX, openedX);
        _this4.ani.add(menuAni);
        var backdropApi = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](menu.getBackdropElement());
        backdropApi.fromTo('opacity', 0.01, 0.35);
        _this4.ani.add(backdropApi);
        return _this4;
    }

    return MenuOverlayType;
}(MenuType);

__WEBPACK_IMPORTED_MODULE_1__menu_controller__["a" /* MenuController */].registerType('overlay', MenuOverlayType);

/***/ },
/* 901 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_bootstrap__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_key__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_view_controller__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Modal; });/* unused harmony export ModalCmp */var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @name Modal
 * @description
 * A Modal is a content pane that goes over the user's current page.
 * Usually it is used for making a choice or editing an item. A modal uses the
 * `NavController` to
 * {@link /docs/v2/api/components/nav/NavController/#present present}
 * itself in the root nav stack. It is added to the stack similar to how
 * {@link /docs/v2/api/components/nav/NavController/#push NavController.push}
 * works.
 *
 * When a modal (or any other overlay such as an alert or actionsheet) is
 * "presented" to a nav controller, the overlay is added to the app's root nav.
 * After the modal has been presented, from within the component instance The
 * modal can later be closed or "dismissed" by using the ViewController's
 * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`
 * on the root nav controller.
 *
 * Data can be passed to a new modal through `Modal.create()` as the second
 * argument. The data can then be accessed from the opened page by injecting
 * `NavParams`. Note that the page, which opened as a modal, has no special
 * "modal" logic within it, but uses `NavParams` no differently than a
 * standard page.
 *
 * @usage
 * ```ts
 * import { Page, Modal, NavController, NavParams } from 'ionic-angular';
 *
 * @Component(...)
 * class HomePage {
 *
 *  constructor(nav: NavController) {
 *    this.nav = nav;
 *  }
 *
 *  presentProfileModal() {
 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
 *    this.nav.present(profileModal);
 *  }
 *
 * }
 *
 * @Component(...)
 * class Profile {
 *
 *  constructor(params: NavParams) {
 *    console.log('UserId', params.get('userId'));
 *  }
 *
 * }
 * ```
 *
 * A modal can also emit data, which is useful when it is used to add or edit
 * data. For example, a profile page could slide up in a modal, and on submit,
 * the submit button could pass the updated profile data, then dismiss the
 * modal.
 *
 * ```ts
 * import { Component } from '@angular/core';
 * import { Modal, NavController, ViewController } from 'ionic-angular';
 *
 * @Component(...)
 * class HomePage {
 *
 *  constructor(nav: NavController) {
 *    this.nav = nav;
 *  }
 *
 *  presentContactModal() {
 *    let contactModal = Modal.create(ContactUs);
 *    this.nav.present(contactModal);
 *  }
 *
 *  presentProfileModal() {
 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
 *    profileModal.onDismiss(data => {
 *      console.log(data);
 *    });
 *    this.nav.present(profileModal);
 *  }
 *
 * }
 *
 * @Component(...)
 * class Profile {
 *
 *  constructor(viewCtrl: ViewController) {
 *    this.viewCtrl = viewCtrl;
 *  }
 *
 *  dismiss() {
 *    let data = { 'foo': 'bar' };
 *    this.viewCtrl.dismiss(data);
 *  }
 *
 * }
 * ```
 * @demo /docs/v2/demos/modal/
 * @see {@link /docs/v2/components#modals Modal Component Docs}
 */
var Modal = function (_ViewController) {
    _inherits(Modal, _ViewController);

    function Modal(componentType) {
        var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        _classCallCheck(this, Modal);

        data.componentType = componentType;
        opts.showBackdrop = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isPresent"])(opts.showBackdrop) ? !!opts.showBackdrop : true;
        opts.enableBackdropDismiss = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["isPresent"])(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
        data.opts = opts;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Modal).call(this, ModalCmp, data));

        _this.isOverlay = true;
        _this.usePortal = true;
        return _this;
    }
    /**
     * @private
     */

    _createClass(Modal, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = direction === 'back' ? 'modalLeave' : 'modalEnter';
            return this._nav && this._nav.config.get(key);
        }
        /**
         * Create a modal with the following options
         *
         * | Option                | Type       | Description                                                                                                      |
         * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
         * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
         * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
         *
         *
         * @param {object} componentType The Modal view
         * @param {object} data Any data to pass to the Modal view
         * @param {object} opts Modal options
         */

    }, {
        key: "loaded",

        // Override the load method and load our child component
        value: function loaded(done) {
            var _this2 = this;

            // grab the instance, and proxy the ngAfterViewInit method
            var originalNgAfterViewInit = this.instance.ngAfterViewInit;
            this.instance.ngAfterViewInit = function () {
                if (originalNgAfterViewInit) {
                    originalNgAfterViewInit();
                }
                _this2.instance.loadComponent(done);
            };
        }
    }], [{
        key: "create",
        value: function create(componentType) {
            var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            return new Modal(componentType, data, opts);
        }
    }]);

    return Modal;
}(__WEBPACK_IMPORTED_MODULE_7__nav_view_controller__["a" /* ViewController */]);
var ModalCmp = function () {
    function ModalCmp(_compiler, _renderer, _navParams, _viewCtrl) {
        _classCallCheck(this, ModalCmp);

        this._compiler = _compiler;
        this._renderer = _renderer;
        this._navParams = _navParams;
        this._viewCtrl = _viewCtrl;
        this.d = _navParams.data.opts;
    }

    _createClass(ModalCmp, [{
        key: "loadComponent",
        value: function loadComponent(done) {
            var _this3 = this;

            var componentType = this._navParams.data.componentType;
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__config_bootstrap__["addSelector"])(componentType, 'ion-page');
            this._compiler.resolveComponent(componentType).then(function (componentFactory) {
                var componentRef = _this3.viewport.createComponent(componentFactory, _this3.viewport.length, _this3.viewport.parentInjector);
                _this3._renderer.setElementClass(componentRef.location.nativeElement, 'show-page', true);
                // auto-add page css className created from component JS class name
                var cssClassName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__util_util__["pascalCaseToDashCase"])(componentType.name);
                _this3._renderer.setElementClass(componentRef.location.nativeElement, cssClassName, true);
                _this3._viewCtrl.setInstance(componentRef.instance);
                _this3.enabled = true;
                done();
            });
        }
    }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            // intentionally kept empty
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(null, role);
        }
    }, {
        key: "bdClick",
        value: function bdClick() {
            if (this.enabled && this.d.enableBackdropDismiss) {
                this.dismiss('backdrop');
            }
        }
    }, {
        key: "_keyUp",
        value: function _keyUp(ev) {
            if (this.enabled && this._viewCtrl.isLast() && ev.keyCode === __WEBPACK_IMPORTED_MODULE_4__util_key__["a" /* Key */].ESCAPE) {
                this.bdClick();
            }
        }
    }]);

    return ModalCmp;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('viewport', { read: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _a || Object)], ModalCmp.prototype, "viewport", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], ModalCmp.prototype, "_keyUp", null);
ModalCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-modal',
    template: '<ion-backdrop disableScroll="false" (click)="bdClick($event)"></ion-backdrop>' + '<div class="modal-wrapper">' + '<div #viewport nav-viewport></div>' + '</div>'
}), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__nav_nav_params__["a" /* NavParams */]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_7__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_view_controller__["a" /* ViewController */]) === 'function' && _e || Object])], ModalCmp);
/**
 * Animations for modals
 */

var ModalSlideIn = function (_PageTransition) {
    _inherits(ModalSlideIn, _PageTransition);

    function ModalSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalSlideIn);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdropEle = ele.querySelector('ion-backdrop');
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](backdropEle);
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.modal-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.4);
        wrapper.fromTo('translateY', '100%', '0%');
        _this4.element(enteringView.pageRef()).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(400).add(backdrop).add(wrapper);
        if (enteringView.hasNavbar()) {
            // entering page has a navbar
            var enteringNavBar = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this4.add(enteringNavBar);
        }
        return _this4;
    }

    return ModalSlideIn;
}(__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"].register('modal-slide-in', ModalSlideIn);

var ModalSlideOut = function (_PageTransition2) {
    _inherits(ModalSlideOut, _PageTransition2);

    function ModalSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalSlideOut);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapperEle = ele.querySelector('.modal-wrapper');
        var wrapperEleRect = wrapperEle.getBoundingClientRect();
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        // height of the screen - top of the container tells us how much to scoot it down
        // so it's off-screen
        var screenDimensions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__util_dom__["windowDimensions"])();
        wrapper.fromTo('translateY', '0px', screenDimensions.height - wrapperEleRect.top + "px");
        backdrop.fromTo('opacity', 0.4, 0.0);
        _this5.element(leavingView.pageRef()).easing('ease-out').duration(250).add(backdrop).add(wrapper);
        return _this5;
    }

    return ModalSlideOut;
}(__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"].register('modal-slide-out', ModalSlideOut);

var ModalMDSlideIn = function (_PageTransition3) {
    _inherits(ModalMDSlideIn, _PageTransition3);

    function ModalMDSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalMDSlideIn);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalMDSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.modal-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.4);
        wrapper.fromTo('translateY', '40px', '0px');
        wrapper.fromTo('opacity', 0.01, 1);
        var DURATION = 280;
        var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
        _this6.element(enteringView.pageRef()).easing(EASING).duration(DURATION).add(backdrop).add(wrapper);
        if (enteringView.hasNavbar()) {
            // entering page has a navbar
            var enteringNavBar = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this6.add(enteringNavBar);
        }
        return _this6;
    }

    return ModalMDSlideIn;
}(__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"].register('modal-md-slide-in', ModalMDSlideIn);

var ModalMDSlideOut = function (_PageTransition4) {
    _inherits(ModalMDSlideOut, _PageTransition4);

    function ModalMDSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalMDSlideOut);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalMDSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.modal-wrapper'));
        backdrop.fromTo('opacity', 0.4, 0.0);
        wrapper.fromTo('translateY', '0px', '40px');
        wrapper.fromTo('opacity', 0.99, 0);
        _this7.element(leavingView.pageRef()).duration(200).easing('cubic-bezier(0.47,0,0.745,0.715)').add(wrapper).add(backdrop);
        return _this7;
    }

    return ModalMDSlideOut;
}(__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_6__transitions_page_transition__["PageTransition"].register('modal-md-slide-out', ModalMDSlideOut);
var _a, _b, _c, _d, _e;

/***/ },
/* 902 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_app__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_keyboard__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NavPortal; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};






/**
 * @private
 */
var NavPortal = function (_NavController) {
    _inherits(NavPortal, _NavController);

    function NavPortal(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler, viewPort) {
        _classCallCheck(this, NavPortal);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NavPortal).call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler));

        _this.isPortal = true;
        _this.setViewport(viewPort);
        return _this;
    }

    return NavPortal;
}(__WEBPACK_IMPORTED_MODULE_4__nav_controller__["a" /* NavController */]);
NavPortal = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '[nav-portal]'
}), __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__view_controller__["a" /* ViewController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__nav_controller__["a" /* NavController */]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__app_app__["a" /* App */]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__config_config__["Config"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__util_keyboard__["Keyboard"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__util_keyboard__["Keyboard"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === 'function' && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"]) === 'function' && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _k || Object])], NavPortal);
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

/***/ },
/* 903 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return NavRouter; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

/**
 * @private
 */
var NavRouter = function NavRouter() {
    _classCallCheck(this, NavRouter);
};
NavRouter = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-nav'
}), __metadata('design:paramtypes', [])], NavRouter);

/***/ },
/* 904 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__gestures_slide_edge_gesture__ = __webpack_require__(323);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return SwipeBackGesture; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var SwipeBackGesture = function (_SlideEdgeGesture) {
    _inherits(SwipeBackGesture, _SlideEdgeGesture);

    function SwipeBackGesture(element, options, _nav, _menuCtrl) {
        _classCallCheck(this, SwipeBackGesture);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SwipeBackGesture).call(this, element, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])({
            direction: 'x',
            maxEdgeStart: 75
        }, options)));

        _this._nav = _nav;
        _this._menuCtrl = _menuCtrl;
        return _this;
    }

    _createClass(SwipeBackGesture, [{
        key: 'canStart',
        value: function canStart(ev) {
            // the gesture swipe angle must be mainly horizontal and the
            // gesture distance would be relatively short for a swipe back
            // and swipe back must be possible on this nav controller
            if (ev.angle > -40 && ev.angle < 40 && ev.distance < 50 && this._nav.canSwipeBack()) {
                // passed the tests, now see if the super says it's cool or not
                return _get(Object.getPrototypeOf(SwipeBackGesture.prototype), 'canStart', this).call(this, ev);
            }
            // nerp, not today
            return false;
        }
    }, {
        key: 'onSlideBeforeStart',
        value: function onSlideBeforeStart(slideData, ev) {
            console.debug('swipeBack, onSlideBeforeStart', ev.srcEvent.type);
            this._nav.swipeBackStart();
            this._menuCtrl.tempDisable(true);
        }
    }, {
        key: 'onSlide',
        value: function onSlide(slide) {
            var stepValue = slide.distance / slide.max;
            console.debug('swipeBack, onSlide, distance', slide.distance, 'max', slide.max, 'stepValue', stepValue);
            this._nav.swipeBackProgress(stepValue);
        }
    }, {
        key: 'onSlideEnd',
        value: function onSlideEnd(slide, ev) {
            var shouldComplete = Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5;
            var currentStepValue = slide.distance / slide.max;
            console.debug('swipeBack, onSlideEnd, shouldComplete', shouldComplete, 'currentStepValue', currentStepValue);
            this._nav.swipeBackEnd(shouldComplete, currentStepValue);
            this._menuCtrl.tempDisable(false);
        }
    }]);

    return SwipeBackGesture;
}(__WEBPACK_IMPORTED_MODULE_1__gestures_slide_edge_gesture__["SlideEdgeGesture"]);

/***/ },
/* 905 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_bootstrap__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_dom__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_key__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__transitions_page_transition__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Popover; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var POPOVER_IOS_BODY_PADDING = 2;
var POPOVER_MD_BODY_PADDING = 12;
/**
 * @name Popover
 * @description
 * A Popover is a dialog that appears on top of the current page.
 * It can be used for anything, but generally it is used for overflow
 * actions that don't fit in the navigation bar.
 *
 * ### Creating
 * A popover can be created by calling the `create` method. The view
 * to display in the popover should be passed as the first argument.
 * Any data to pass to the popover view can optionally be passed in
 * the second argument. Options for the popover can optionally be
 * passed in the third argument. See the [create](#create) method
 * below for all available options.
 *
 * ### Presenting
 * To present a popover, call the `present` method on the [NavController](../../nav/NavController).
 * The first argument passed to the `present` should be the popover. In order
 * to position the popover relative to the element clicked, the event needs to be
 * passed as the second argument. If the event is not passed, the popover will be
 * positioned in the center of the current view. See the [usage](#usage) section for
 * an example of passing this event.
 *
 * ### Dismissing
 * To dismiss the popover after creation, call the `dismiss()` method on the
 * `Popover` instance. The popover can also be dismissed from within the popover's
 * view by calling the `dismiss()` method on the [ViewController](../../nav/ViewController).
 * The `onDismiss` function can be called to perform an action after the popover
 * is dismissed. The popover will dismiss when the backdrop is clicked, but this
 * can be disabled by setting `enableBackdropDismiss` to `false` in the popover
 * options.
 *
 * > Note that after the component is dismissed, it will not be usable anymore and
 * another one must be created. This can be avoided by wrapping the creation and
 * presentation of the component in a reusable function as shown in the [usage](#usage)
 * section below.
 *
 * @usage
 *
 * To open a popover on the click of a button, pass `$event` to the method
 * which creates and presents the popover:
 *
 * ```html
 * <button (click)="presentPopover($event)">
 *   <ion-icon name="more"></ion-icon>
 * </button>
 * ```
 *
 * ```ts
 * @Component({})
 * class MyPage {
 *   constructor(private nav: NavController) {}
 *
 *   presentPopover(myEvent) {
 *     let popover = Popover.create(PopoverPage);
 *     this.nav.present(popover, {
 *       ev: myEvent
 *     });
 *   }
 * }
 * ```
 *
 * The `PopoverPage` will display inside of the popover, and
 * can be anything. Below is an example of a page with items
 * that close the popover on click.
 *
 * ```ts
 * @Component({
 *   template: `
 *     <ion-list>
 *       <ion-list-header>Ionic</ion-list-header>
 *       <button ion-item (click)="close()">Learn Ionic</button>
 *       <button ion-item (click)="close()">Documentation</button>
 *       <button ion-item (click)="close()">Showcase</button>
 *       <button ion-item (click)="close()">GitHub Repo</button>
 *     </ion-list>
 *   `
 * })
 * class PopoverPage {
 *   constructor(private viewCtrl: ViewController) {}
 *
 *   close() {
 *     this.viewCtrl.dismiss();
 *   }
 * }
 * ```
 *
 *
 * @demo /docs/v2/demos/popover/
 */
var Popover = function (_ViewController) {
    _inherits(Popover, _ViewController);

    function Popover(componentType) {
        var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        _classCallCheck(this, Popover);

        opts.showBackdrop = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(opts.showBackdrop) ? !!opts.showBackdrop : true;
        opts.enableBackdropDismiss = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_util__["isPresent"])(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
        data.componentType = componentType;
        data.opts = opts;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Popover).call(this, PopoverCmp, data));

        _this.isOverlay = true;
        // by default, popovers should not fire lifecycle events of other views
        // for example, when a popover enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        _this.fireOtherLifecycles = false;
        return _this;
    }
    /**
     * @private
     */

    _createClass(Popover, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = direction === 'back' ? 'popoverLeave' : 'popoverEnter';
            return this._nav && this._nav.config.get(key);
        }
        /**
         * Create a popover with the following options
         *
         * | Option                | Type       | Description                                                                                                      |
         * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
         * | cssClass              |`string`    | An additional class for custom styles.                                                                           |
         * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
         * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
         *
         *
         * @param {object} componentType The Popover
         * @param {object} data Any data to pass to the Popover view
         * @param {object} opts Popover options
         */

    }], [{
        key: "create",
        value: function create(componentType) {
            var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            return new Popover(componentType, data, opts);
        }
    }]);

    return Popover;
}(__WEBPACK_IMPORTED_MODULE_9__nav_view_controller__["a" /* ViewController */]);
/**
* @private
*/
var PopoverCmp = function () {
    function PopoverCmp(_compiler, _elementRef, _renderer, _config, _navParams, _viewCtrl) {
        _classCallCheck(this, PopoverCmp);

        this._compiler = _compiler;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._config = _config;
        this._navParams = _navParams;
        this._viewCtrl = _viewCtrl;
        this.d = _navParams.data.opts;
        if (this.d.cssClass) {
            _renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
        }
        this.id = ++popoverIds;
    }

    _createClass(PopoverCmp, [{
        key: "ionViewWillEnter",
        value: function ionViewWillEnter() {
            var _this2 = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__config_bootstrap__["addSelector"])(this._navParams.data.componentType, 'ion-popover-inner');
            this._compiler.resolveComponent(this._navParams.data.componentType).then(function (componentFactory) {
                var componentRef = _this2.viewport.createComponent(componentFactory, _this2.viewport.length, _this2.viewport.parentInjector);
                _this2._viewCtrl.setInstance(componentRef.instance);
                // manually fire ionViewWillEnter() since PopoverCmp's ionViewWillEnter already happened
                _this2._viewCtrl.fireWillEnter();
            });
        }
    }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            var activeElement = document.activeElement;
            if (document.activeElement) {
                activeElement.blur();
            }
            this.enabled = true;
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(null, role);
        }
    }, {
        key: "bdTouch",
        value: function bdTouch(ev) {
            ev.preventDefault();
            ev.stopPropagation();
        }
    }, {
        key: "bdClick",
        value: function bdClick() {
            if (this.enabled && this.d.enableBackdropDismiss) {
                this.dismiss('backdrop');
            }
        }
    }, {
        key: "_keyUp",
        value: function _keyUp(ev) {
            if (this.enabled && ev.keyCode === __WEBPACK_IMPORTED_MODULE_6__util_key__["a" /* Key */].ESCAPE && this._viewCtrl.isLast()) {
                this.bdClick();
            }
        }
    }]);

    return PopoverCmp;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('viewport', { read: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _a || Object)], PopoverCmp.prototype, "viewport", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], PopoverCmp.prototype, "_keyUp", null);
PopoverCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-popover',
    template: '<ion-backdrop (click)="bdClick($event)" [class.hide-backdrop]="!d.showBackdrop"></ion-backdrop>' + '<div class="popover-wrapper">' + '<div class="popover-arrow"></div>' + '<div class="popover-content">' + '<div class="popover-viewport">' + '<div #viewport nav-viewport></div>' + '</div>' + '</div>' + '</div>'
}), __metadata('design:paramtypes', [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentResolver"]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_7__nav_nav_params__["a" /* NavParams */]) === 'function' && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_9__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_9__nav_view_controller__["a" /* ViewController */]) === 'function' && _g || Object])], PopoverCmp);
/**
 * Animations for popover
 */

var PopoverTransition = function (_PageTransition) {
    _inherits(PopoverTransition, _PageTransition);

    function PopoverTransition(enteringView, leavingView, opts) {
        _classCallCheck(this, PopoverTransition);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverTransition).call(this, enteringView, leavingView, opts));
    }

    _createClass(PopoverTransition, [{
        key: "mdPositionView",
        value: function mdPositionView(nativeEle, ev) {
            var originY = 'top';
            var originX = 'left';
            var popoverWrapperEle = nativeEle.querySelector('.popover-wrapper');
            // Popover content width and height
            var popoverEle = nativeEle.querySelector('.popover-content');
            var popoverDim = popoverEle.getBoundingClientRect();
            var popoverWidth = popoverDim.width;
            var popoverHeight = popoverDim.height;
            // Window body width and height
            var bodyWidth = window.innerWidth;
            var bodyHeight = window.innerHeight;
            // If ev was passed, use that for target element
            var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
            var targetTop = targetDim && 'top' in targetDim ? targetDim.top : bodyHeight / 2 - popoverHeight / 2;
            var targetLeft = targetDim && 'left' in targetDim ? targetDim.left : bodyWidth / 2 - popoverWidth / 2;
            var targetWidth = targetDim && targetDim.width || 0;
            var targetHeight = targetDim && targetDim.height || 0;
            var popoverCSS = {
                top: targetTop,
                left: targetLeft
            };
            // If the popover left is less than the padding it is off screen
            // to the left so adjust it, else if the width of the popover
            // exceeds the body width it is off screen to the right so adjust
            if (popoverCSS.left < POPOVER_MD_BODY_PADDING) {
                popoverCSS.left = POPOVER_MD_BODY_PADDING;
            } else if (popoverWidth + POPOVER_MD_BODY_PADDING + popoverCSS.left > bodyWidth) {
                popoverCSS.left = bodyWidth - popoverWidth - POPOVER_MD_BODY_PADDING;
                originX = 'right';
            }
            // If the popover when popped down stretches past bottom of screen,
            // make it pop up if there's room above
            if (targetTop + targetHeight + popoverHeight > bodyHeight && targetTop - popoverHeight > 0) {
                popoverCSS.top = targetTop - popoverHeight;
                nativeEle.className = nativeEle.className + ' popover-bottom';
                originY = 'bottom';
            } else if (targetTop + targetHeight + popoverHeight > bodyHeight) {
                popoverEle.style.bottom = POPOVER_MD_BODY_PADDING + 'px';
            }
            popoverEle.style.top = popoverCSS.top + 'px';
            popoverEle.style.left = popoverCSS.left + 'px';
            popoverEle.style[__WEBPACK_IMPORTED_MODULE_4__util_dom__["CSS"].transformOrigin] = originY + ' ' + originX;
            // Since the transition starts before styling is done we
            // want to wait for the styles to apply before showing the wrapper
            popoverWrapperEle.style.opacity = '1';
        }
    }, {
        key: "iosPositionView",
        value: function iosPositionView(nativeEle, ev) {
            var originY = 'top';
            var originX = 'left';
            var popoverWrapperEle = nativeEle.querySelector('.popover-wrapper');
            // Popover content width and height
            var popoverEle = nativeEle.querySelector('.popover-content');
            var popoverDim = popoverEle.getBoundingClientRect();
            var popoverWidth = popoverDim.width;
            var popoverHeight = popoverDim.height;
            // Window body width and height
            var bodyWidth = window.innerWidth;
            var bodyHeight = window.innerHeight;
            // If ev was passed, use that for target element
            var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
            var targetTop = targetDim && 'top' in targetDim ? targetDim.top : bodyHeight / 2 - popoverHeight / 2;
            var targetLeft = targetDim && 'left' in targetDim ? targetDim.left : bodyWidth / 2;
            var targetWidth = targetDim && targetDim.width || 0;
            var targetHeight = targetDim && targetDim.height || 0;
            // The arrow that shows above the popover on iOS
            var arrowEle = nativeEle.querySelector('.popover-arrow');
            var arrowDim = arrowEle.getBoundingClientRect();
            var arrowWidth = arrowDim.width;
            var arrowHeight = arrowDim.height;
            // If no ev was passed, hide the arrow
            if (!targetDim) {
                arrowEle.style.display = 'none';
            }
            var arrowCSS = {
                top: targetTop + targetHeight,
                left: targetLeft + targetWidth / 2 - arrowWidth / 2
            };
            var popoverCSS = {
                top: targetTop + targetHeight + (arrowHeight - 1),
                left: targetLeft + targetWidth / 2 - popoverWidth / 2
            };
            // If the popover left is less than the padding it is off screen
            // to the left so adjust it, else if the width of the popover
            // exceeds the body width it is off screen to the right so adjust
            if (popoverCSS.left < POPOVER_IOS_BODY_PADDING) {
                popoverCSS.left = POPOVER_IOS_BODY_PADDING;
            } else if (popoverWidth + POPOVER_IOS_BODY_PADDING + popoverCSS.left > bodyWidth) {
                popoverCSS.left = bodyWidth - popoverWidth - POPOVER_IOS_BODY_PADDING;
                originX = 'right';
            }
            // If the popover when popped down stretches past bottom of screen,
            // make it pop up if there's room above
            if (targetTop + targetHeight + popoverHeight > bodyHeight && targetTop - popoverHeight > 0) {
                arrowCSS.top = targetTop - (arrowHeight + 1);
                popoverCSS.top = targetTop - popoverHeight - (arrowHeight - 1);
                nativeEle.className = nativeEle.className + ' popover-bottom';
                originY = 'bottom';
            } else if (targetTop + targetHeight + popoverHeight > bodyHeight) {
                popoverEle.style.bottom = POPOVER_IOS_BODY_PADDING + '%';
            }
            arrowEle.style.top = arrowCSS.top + 'px';
            arrowEle.style.left = arrowCSS.left + 'px';
            popoverEle.style.top = popoverCSS.top + 'px';
            popoverEle.style.left = popoverCSS.left + 'px';
            popoverEle.style[__WEBPACK_IMPORTED_MODULE_4__util_dom__["CSS"].transformOrigin] = originY + ' ' + originX;
            // Since the transition starts before styling is done we
            // want to wait for the styles to apply before showing the wrapper
            popoverWrapperEle.style.opacity = '1';
        }
    }]);

    return PopoverTransition;
}(__WEBPACK_IMPORTED_MODULE_8__transitions_page_transition__["PageTransition"]);

var PopoverPopIn = function (_PopoverTransition) {
    _inherits(PopoverPopIn, _PopoverTransition);

    function PopoverPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, PopoverPopIn);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverPopIn).call(this, enteringView, leavingView, opts));

        _this4.opts = opts;
        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.popover-wrapper'));
        wrapper.fromTo('opacity', 0.01, 1);
        backdrop.fromTo('opacity', 0.01, 0.08);
        _this4.easing('ease').duration(100).add(backdrop).add(wrapper);
        return _this4;
    }

    _createClass(PopoverPopIn, [{
        key: "play",
        value: function play() {
            var _this5 = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["nativeRaf"])(function () {
                _this5.iosPositionView(_this5.enteringView.pageRef().nativeElement, _this5.opts.ev);
                _get(Object.getPrototypeOf(PopoverPopIn.prototype), "play", _this5).call(_this5);
            });
        }
    }]);

    return PopoverPopIn;
}(PopoverTransition);

__WEBPACK_IMPORTED_MODULE_8__transitions_page_transition__["PageTransition"].register('popover-pop-in', PopoverPopIn);

var PopoverPopOut = function (_PopoverTransition2) {
    _inherits(PopoverPopOut, _PopoverTransition2);

    function PopoverPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, PopoverPopOut);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverPopOut).call(this, enteringView, leavingView, opts));

        _this6.opts = opts;
        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('ion-backdrop'));
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.popover-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0);
        backdrop.fromTo('opacity', 0.08, 0);
        _this6.easing('ease').duration(500).add(backdrop).add(wrapper);
        return _this6;
    }

    return PopoverPopOut;
}(PopoverTransition);

__WEBPACK_IMPORTED_MODULE_8__transitions_page_transition__["PageTransition"].register('popover-pop-out', PopoverPopOut);

var PopoverMdPopIn = function (_PopoverTransition3) {
    _inherits(PopoverMdPopIn, _PopoverTransition3);

    function PopoverMdPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, PopoverMdPopIn);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverMdPopIn).call(this, enteringView, leavingView, opts));

        _this7.opts = opts;
        var ele = enteringView.pageRef().nativeElement;
        var content = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.popover-content'));
        var viewport = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.popover-viewport'));
        content.fromTo('scale', 0.001, 1);
        viewport.fromTo('opacity', 0.01, 1);
        _this7.easing('cubic-bezier(0.36,0.66,0.04,1)').duration(300).add(content).add(viewport);
        return _this7;
    }

    _createClass(PopoverMdPopIn, [{
        key: "play",
        value: function play() {
            var _this8 = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_dom__["nativeRaf"])(function () {
                _this8.mdPositionView(_this8.enteringView.pageRef().nativeElement, _this8.opts.ev);
                _get(Object.getPrototypeOf(PopoverMdPopIn.prototype), "play", _this8).call(_this8);
            });
        }
    }]);

    return PopoverMdPopIn;
}(PopoverTransition);

__WEBPACK_IMPORTED_MODULE_8__transitions_page_transition__["PageTransition"].register('popover-md-pop-in', PopoverMdPopIn);

var PopoverMdPopOut = function (_PopoverTransition4) {
    _inherits(PopoverMdPopOut, _PopoverTransition4);

    function PopoverMdPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, PopoverMdPopOut);

        var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverMdPopOut).call(this, enteringView, leavingView, opts));

        _this9.opts = opts;
        var ele = leavingView.pageRef().nativeElement;
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](ele.querySelector('.popover-wrapper'));
        wrapper.fromTo('opacity', 0.99, 0);
        _this9.easing('ease').duration(500).fromTo('opacity', 0.01, 1).add(wrapper);
        return _this9;
    }

    return PopoverMdPopOut;
}(PopoverTransition);

__WEBPACK_IMPORTED_MODULE_8__transitions_page_transition__["PageTransition"].register('popover-md-pop-out', PopoverMdPopOut);
var popoverIds = -1;
var _a, _b, _c, _d, _e, _f, _g;

/***/ },
/* 906 */
/***/ function(module, exports) {

"use strict";
/**
 * Swiper 3.1.2
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 *
 * http://www.idangero.us/swiper/
 *
 * Copyright 2015, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: August 22, 2015
 */'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};var $;/*===========================
  Swiper
  ===========================*/module.exports.Swiper=Swiper;function Swiper(container,params){if(!(this instanceof Swiper))return new Swiper(container,params);var defaults={direction:'horizontal',touchEventsTarget:'container',initialSlide:0,speed:300,// autoplay
autoplay:false,autoplayDisableOnInteraction:true,// To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
iOSEdgeSwipeDetection:false,iOSEdgeSwipeThreshold:20,// Free mode
freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeSticky:false,// Set wrapper width
setWrapperSize:false,// Virtual Translate
virtualTranslate:false,// Effects
effect:'slide',// 'slide' or 'fade' or 'cube' or 'coverflow'
coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},cube:{slideShadows:true,shadow:true,shadowOffset:20,shadowScale:0.94},fade:{crossFade:false},// Parallax
parallax:false,// Scrollbar
scrollbar:null,scrollbarHide:true,// Keyboard Mousewheel
keyboardControl:false,mousewheelControl:false,mousewheelReleaseOnEdges:false,mousewheelInvert:false,mousewheelForceToAxis:false,mousewheelSensitivity:1,// Hash Navigation
hashnav:false,// Slides grid
spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:'column',slidesPerGroup:1,centeredSlides:false,slidesOffsetBefore:0,// in px
slidesOffsetAfter:0,// in px
// Round length
roundLengths:false,// Touches
touchRatio:1,touchAngle:45,simulateTouch:true,shortSwipes:true,longSwipes:true,longSwipesRatio:0.5,longSwipesMs:300,followFinger:true,onlyExternal:false,threshold:0,touchMoveStopPropagation:true,// Pagination
pagination:null,paginationElement:'span',paginationClickable:false,paginationHide:false,paginationBulletRender:null,// Resistance
resistance:true,resistanceRatio:0.85,// Next/prev buttons
nextButton:null,prevButton:null,// Progress
watchSlidesProgress:false,watchSlidesVisibility:false,// Cursor
grabCursor:false,// Clicks
preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false,// Lazy Loading
lazyLoading:false,lazyLoadingInPrevNext:false,lazyLoadingOnTransitionStart:false,// Images
preloadImages:true,updateOnImagesReady:true,// loop
loop:false,loopAdditionalSlides:0,loopedSlides:null,// Control
control:undefined,controlInverse:false,controlBy:'slide',//or 'container'
// Swiping/no swiping
allowSwipeToPrev:true,allowSwipeToNext:true,swipeHandler:null,//'.swipe-handler',
noSwiping:true,noSwipingClass:'swiper-no-swiping',// NS
slideClass:'swiper-slide',slideActiveClass:'swiper-slide-active',slideVisibleClass:'swiper-slide-visible',slideDuplicateClass:'swiper-slide-duplicate',slideNextClass:'swiper-slide-next',slidePrevClass:'swiper-slide-prev',wrapperClass:'swiper-wrapper',bulletClass:'swiper-pagination-bullet',bulletActiveClass:'swiper-pagination-bullet-active',buttonDisabledClass:'swiper-button-disabled',paginationHiddenClass:'swiper-pagination-hidden',// Observer
observer:false,observeParents:false,// Accessibility
a11y:false,prevSlideMessage:'Previous slide',nextSlideMessage:'Next slide',firstSlideMessage:'This is the first slide',lastSlideMessage:'This is the last slide',paginationBulletMessage:'Go to slide {{index}}',// Callbacks
runCallbacksOnInit:true/*
          Callbacks:
          onInit: function (swiper)
          onDestroy: function (swiper)
          onClick: function (swiper, e)
          onTap: function (swiper, e)
          onDoubleTap: function (swiper, e)
          onSliderMove: function (swiper, e)
          onSlideChangeStart: function (swiper)
          onSlideChangeEnd: function (swiper)
          onTransitionStart: function (swiper)
          onTransitionEnd: function (swiper)
          onImagesReady: function (swiper)
          onProgress: function (swiper, progress)
          onTouchStart: function (swiper, e)
          onTouchMove: function (swiper, e)
          onTouchMoveOpposite: function (swiper, e)
          onTouchEnd: function (swiper, e)
          onReachBeginning: function (swiper)
          onReachEnd: function (swiper)
          onSetTransition: function (swiper, duration)
          onSetTranslate: function (swiper, translate)
          onAutoplayStart: function (swiper)
          onAutoplayStop: function (swiper),
          onLazyImageLoad: function (swiper, slide, image)
          onLazyImageReady: function (swiper, slide, image)
          */};var initialVirtualTranslate=params&&params.virtualTranslate;params=params||{};for(var def in defaults){if(typeof params[def]==='undefined'){params[def]=defaults[def];}else if(_typeof(params[def])==='object'){for(var deepDef in defaults[def]){if(typeof params[def][deepDef]==='undefined'){params[def][deepDef]=defaults[def][deepDef];}}}}// Swiper
var s=this;// Version
s.version='3.1.0';// Params
s.params=params;// Classname
s.classNames=[];/*=========================
        Dom Library and plugins
        ===========================*/if(typeof $!=='undefined'&&typeof Dom7!=='undefined'){$=Dom7;}if(typeof $==='undefined'){if(typeof Dom7==='undefined'){$=window.Dom7||window.Zepto||window.jQuery;}else{$=Dom7;}if(!$)return;}// Export it to Swiper instance
s.$=$;/*=========================
        Preparation - Define Container, Wrapper and Pagination
        ===========================*/s.container=$(container);if(s.container.length===0)return;if(s.container.length>1){s.container.each(function(){new Swiper(this,params);});return;}// Save instance in container HTML Element and in data
s.container[0].swiper=s;s.container.data('swiper',s);s.classNames.push('swiper-container-'+s.params.direction);if(s.params.freeMode){s.classNames.push('swiper-container-free-mode');}if(!s.support.flexbox){s.classNames.push('swiper-container-no-flexbox');s.params.slidesPerColumn=1;}// Enable slides progress when required
if(s.params.parallax||s.params.watchSlidesVisibility){s.params.watchSlidesProgress=true;}// Coverflow / 3D
if(['cube','coverflow'].indexOf(s.params.effect)>=0){if(s.support.transforms3d){s.params.watchSlidesProgress=true;s.classNames.push('swiper-container-3d');}else{s.params.effect='slide';}}if(s.params.effect!=='slide'){s.classNames.push('swiper-container-'+s.params.effect);}if(s.params.effect==='cube'){s.params.resistanceRatio=0;s.params.slidesPerView=1;s.params.slidesPerColumn=1;s.params.slidesPerGroup=1;s.params.centeredSlides=false;s.params.spaceBetween=0;s.params.virtualTranslate=true;s.params.setWrapperSize=false;}if(s.params.effect==='fade'){s.params.slidesPerView=1;s.params.slidesPerColumn=1;s.params.slidesPerGroup=1;s.params.watchSlidesProgress=true;s.params.spaceBetween=0;if(typeof initialVirtualTranslate==='undefined'){s.params.virtualTranslate=true;}}// Grab Cursor
if(s.params.grabCursor&&s.support.touch){s.params.grabCursor=false;}// Wrapper
s.wrapper=s.container.children('.'+s.params.wrapperClass);// Pagination
if(s.params.pagination){s.paginationContainer=$(s.params.pagination);if(s.params.paginationClickable){s.paginationContainer.addClass('swiper-pagination-clickable');}}// Is Horizontal
function isH(){return s.params.direction==='horizontal';}// RTL
s.rtl=isH()&&(s.container[0].dir.toLowerCase()==='rtl'||s.container.css('direction')==='rtl');if(s.rtl){s.classNames.push('swiper-container-rtl');}// Wrong RTL support
if(s.rtl){s.wrongRTL=s.wrapper.css('display')==='-webkit-box';}// Columns
if(s.params.slidesPerColumn>1){s.classNames.push('swiper-container-multirow');}// Check for Android
if(s.device.android){s.classNames.push('swiper-container-android');}// Add classes
s.container.addClass(s.classNames.join(' '));// Translate
s.translate=0;// Progress
s.progress=0;// Velocity
s.velocity=0;/*=========================
        Locks, unlocks
        ===========================*/s.lockSwipeToNext=function(){s.params.allowSwipeToNext=false;};s.lockSwipeToPrev=function(){s.params.allowSwipeToPrev=false;};s.lockSwipes=function(){s.params.allowSwipeToNext=s.params.allowSwipeToPrev=false;};s.unlockSwipeToNext=function(){s.params.allowSwipeToNext=true;};s.unlockSwipeToPrev=function(){s.params.allowSwipeToPrev=true;};s.unlockSwipes=function(){s.params.allowSwipeToNext=s.params.allowSwipeToPrev=true;};/*=========================
        Round helper
        ===========================*/function round(a){return Math.floor(a);}/*=========================
        Set grab cursor
        ===========================*/if(s.params.grabCursor){s.container[0].style.cursor='move';s.container[0].style.cursor='-webkit-grab';s.container[0].style.cursor='-moz-grab';s.container[0].style.cursor='grab';}/*=========================
        Update on Images Ready
        ===========================*/s.imagesToLoad=[];s.imagesLoaded=0;s.loadImage=function(imgElement,src,checkForComplete,callback){var image;function onReady(){if(callback)callback();}if(!imgElement.complete||!checkForComplete){if(src){image=new window.Image();image.onload=onReady;image.onerror=onReady;image.src=src;}else{onReady();}}else{//image already loaded...
onReady();}};s.preloadImages=function(){s.imagesToLoad=s.container.find('img');function _onReady(){if(typeof s==='undefined'||s===null)return;if(s.imagesLoaded!==undefined)s.imagesLoaded++;if(s.imagesLoaded===s.imagesToLoad.length){if(s.params.updateOnImagesReady)s.update();s.emit('onImagesReady',s);}}for(var i=0;i<s.imagesToLoad.length;i++){s.loadImage(s.imagesToLoad[i],s.imagesToLoad[i].currentSrc||s.imagesToLoad[i].getAttribute('src'),true,_onReady);}};/*=========================
        Autoplay
        ===========================*/s.autoplayTimeoutId=undefined;s.autoplaying=false;s.autoplayPaused=false;function autoplay(){s.autoplayTimeoutId=setTimeout(function(){if(s.params.loop){s.fixLoop();s._slideNext();}else{if(!s.isEnd){s._slideNext();}else{if(!params.autoplayStopOnLast){s._slideTo(0);}else{s.stopAutoplay();}}}},s.params.autoplay);}s.startAutoplay=function(){if(typeof s.autoplayTimeoutId!=='undefined')return false;if(!s.params.autoplay)return false;if(s.autoplaying)return false;s.autoplaying=true;s.emit('onAutoplayStart',s);autoplay();};s.stopAutoplay=function(internal){if(!s.autoplayTimeoutId)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplaying=false;s.autoplayTimeoutId=undefined;s.emit('onAutoplayStop',s);};s.pauseAutoplay=function(speed){if(s.autoplayPaused)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplayPaused=true;if(speed===0){s.autoplayPaused=false;autoplay();}else{s.wrapper.transitionEnd(function(){if(!s)return;s.autoplayPaused=false;if(!s.autoplaying){s.stopAutoplay();}else{autoplay();}});}};/*=========================
        Min/Max Translate
        ===========================*/s.minTranslate=function(){return-s.snapGrid[0];};s.maxTranslate=function(){return-s.snapGrid[s.snapGrid.length-1];};/*=========================
        Slider/slides sizes
        ===========================*/s.updateContainerSize=function(){var width,height;if(typeof s.params.width!=='undefined'){width=s.params.width;}else{width=s.container[0].clientWidth;}if(typeof s.params.height!=='undefined'){height=s.params.height;}else{height=s.container[0].clientHeight;}if(width===0&&isH()||height===0&&!isH()){return;}//Subtract paddings
width=width-parseInt(s.container.css('padding-left'),10)-parseInt(s.container.css('padding-right'),10);height=height-parseInt(s.container.css('padding-top'),10)-parseInt(s.container.css('padding-bottom'),10);// Store values
s.width=width;s.height=height;s.size=isH()?s.width:s.height;};s.updateSlidesSize=function(){s.slides=s.wrapper.children('.'+s.params.slideClass);s.snapGrid=[];s.slidesGrid=[];s.slidesSizesGrid=[];var spaceBetween=s.params.spaceBetween,slidePosition=-s.params.slidesOffsetBefore,i,prevSlideSize=0,index=0;if(typeof spaceBetween==='string'&&spaceBetween.indexOf('%')>=0){spaceBetween=parseFloat(spaceBetween.replace('%',''))/100*s.size;}s.virtualSize=-spaceBetween;// reset margins
if(s.rtl)s.slides.css({marginLeft:'',marginTop:''});else s.slides.css({marginRight:'',marginBottom:''});var slidesNumberEvenToRows;if(s.params.slidesPerColumn>1){if(Math.floor(s.slides.length/s.params.slidesPerColumn)===s.slides.length/s.params.slidesPerColumn){slidesNumberEvenToRows=s.slides.length;}else{slidesNumberEvenToRows=Math.ceil(s.slides.length/s.params.slidesPerColumn)*s.params.slidesPerColumn;}}// Calc slides
var slideSize;var slidesPerColumn=s.params.slidesPerColumn;var slidesPerRow=slidesNumberEvenToRows/slidesPerColumn;var numFullColumns=slidesPerRow-(s.params.slidesPerColumn*slidesPerRow-s.slides.length);for(i=0;i<s.slides.length;i++){slideSize=0;var slide=s.slides.eq(i);if(s.params.slidesPerColumn>1){// Set slides order
var newSlideOrderIndex;var column,row;if(s.params.slidesPerColumnFill==='column'){column=Math.floor(i/slidesPerColumn);row=i-column*slidesPerColumn;if(column>numFullColumns||column===numFullColumns&&row===slidesPerColumn-1){if(++row>=slidesPerColumn){row=0;column++;}}newSlideOrderIndex=column+row*slidesNumberEvenToRows/slidesPerColumn;slide.css({'-webkit-box-ordinal-group':newSlideOrderIndex,'-moz-box-ordinal-group':newSlideOrderIndex,'-ms-flex-order':newSlideOrderIndex,'-webkit-order':newSlideOrderIndex,'order':newSlideOrderIndex});}else{row=Math.floor(i/slidesPerRow);column=i-row*slidesPerRow;}slide.css({'margin-top':row!==0&&s.params.spaceBetween&&s.params.spaceBetween+'px'}).attr('data-swiper-column',column).attr('data-swiper-row',row);}if(slide.css('display')==='none')continue;if(s.params.slidesPerView==='auto'){slideSize=isH()?slide.outerWidth(true):slide.outerHeight(true);if(s.params.roundLengths)slideSize=round(slideSize);}else{slideSize=(s.size-(s.params.slidesPerView-1)*spaceBetween)/s.params.slidesPerView;if(s.params.roundLengths)slideSize=round(slideSize);if(isH()){s.slides[i].style.width=slideSize+'px';}else{s.slides[i].style.height=slideSize+'px';}}s.slides[i].swiperSlideSize=slideSize;s.slidesSizesGrid.push(slideSize);if(s.params.centeredSlides){slidePosition=slidePosition+slideSize/2+prevSlideSize/2+spaceBetween;if(i===0)slidePosition=slidePosition-s.size/2-spaceBetween;if(Math.abs(slidePosition)<1/1000)slidePosition=0;if(index%s.params.slidesPerGroup===0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);}else{if(index%s.params.slidesPerGroup===0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);slidePosition=slidePosition+slideSize+spaceBetween;}s.virtualSize+=slideSize+spaceBetween;prevSlideSize=slideSize;index++;}s.virtualSize=Math.max(s.virtualSize,s.size)+s.params.slidesOffsetAfter;var newSlidesGrid;if(s.rtl&&s.wrongRTL&&(s.params.effect==='slide'||s.params.effect==='coverflow')){s.wrapper.css({width:s.virtualSize+s.params.spaceBetween+'px'});}if(!s.support.flexbox||s.params.setWrapperSize){if(isH())s.wrapper.css({width:s.virtualSize+s.params.spaceBetween+'px'});else s.wrapper.css({height:s.virtualSize+s.params.spaceBetween+'px'});}if(s.params.slidesPerColumn>1){s.virtualSize=(slideSize+s.params.spaceBetween)*slidesNumberEvenToRows;s.virtualSize=Math.ceil(s.virtualSize/s.params.slidesPerColumn)-s.params.spaceBetween;s.wrapper.css({width:s.virtualSize+s.params.spaceBetween+'px'});if(s.params.centeredSlides){newSlidesGrid=[];for(i=0;i<s.snapGrid.length;i++){if(s.snapGrid[i]<s.virtualSize+s.snapGrid[0])newSlidesGrid.push(s.snapGrid[i]);}s.snapGrid=newSlidesGrid;}}// Remove last grid elements depending on width
if(!s.params.centeredSlides){newSlidesGrid=[];for(i=0;i<s.snapGrid.length;i++){if(s.snapGrid[i]<=s.virtualSize-s.size){newSlidesGrid.push(s.snapGrid[i]);}}s.snapGrid=newSlidesGrid;if(Math.floor(s.virtualSize-s.size)>Math.floor(s.snapGrid[s.snapGrid.length-1])){s.snapGrid.push(s.virtualSize-s.size);}}if(s.snapGrid.length===0)s.snapGrid=[0];if(s.params.spaceBetween!==0){if(isH()){if(s.rtl)s.slides.css({marginLeft:spaceBetween+'px'});else s.slides.css({marginRight:spaceBetween+'px'});}else s.slides.css({marginBottom:spaceBetween+'px'});}if(s.params.watchSlidesProgress){s.updateSlidesOffset();}};s.updateSlidesOffset=function(){for(var i=0;i<s.slides.length;i++){s.slides[i].swiperSlideOffset=isH()?s.slides[i].offsetLeft:s.slides[i].offsetTop;}};/*=========================
        Slider/slides progress
        ===========================*/s.updateSlidesProgress=function(translate){if(typeof translate==='undefined'){translate=s.translate||0;}if(s.slides.length===0)return;if(typeof s.slides[0].swiperSlideOffset==='undefined')s.updateSlidesOffset();var offsetCenter=-translate;if(s.rtl)offsetCenter=translate;// Visible Slides
var containerBox=s.container[0].getBoundingClientRect();var sideBefore=isH()?'left':'top';var sideAfter=isH()?'right':'bottom';s.slides.removeClass(s.params.slideVisibleClass);for(var i=0;i<s.slides.length;i++){var slide=s.slides[i];var slideProgress=(offsetCenter-slide.swiperSlideOffset)/(slide.swiperSlideSize+s.params.spaceBetween);if(s.params.watchSlidesVisibility){var slideBefore=-(offsetCenter-slide.swiperSlideOffset);var slideAfter=slideBefore+s.slidesSizesGrid[i];var isVisible=slideBefore>=0&&slideBefore<s.size||slideAfter>0&&slideAfter<=s.size||slideBefore<=0&&slideAfter>=s.size;if(isVisible){s.slides.eq(i).addClass(s.params.slideVisibleClass);}}slide.progress=s.rtl?-slideProgress:slideProgress;}};s.updateProgress=function(translate){if(typeof translate==='undefined'){translate=s.translate||0;}var translatesDiff=s.maxTranslate()-s.minTranslate();if(translatesDiff===0){s.progress=0;s.isBeginning=s.isEnd=true;}else{s.progress=(translate-s.minTranslate())/translatesDiff;s.isBeginning=s.progress<=0;s.isEnd=s.progress>=1;}if(s.isBeginning)s.emit('onReachBeginning',s);if(s.isEnd)s.emit('onReachEnd',s);if(s.params.watchSlidesProgress)s.updateSlidesProgress(translate);s.emit('onProgress',s,s.progress);};s.updateActiveIndex=function(){var translate=s.rtl?s.translate:-s.translate;var newActiveIndex,i,snapIndex;for(i=0;i<s.slidesGrid.length;i++){if(typeof s.slidesGrid[i+1]!=='undefined'){if(translate>=s.slidesGrid[i]&&translate<s.slidesGrid[i+1]-(s.slidesGrid[i+1]-s.slidesGrid[i])/2){newActiveIndex=i;}else if(translate>=s.slidesGrid[i]&&translate<s.slidesGrid[i+1]){newActiveIndex=i+1;}}else{if(translate>=s.slidesGrid[i]){newActiveIndex=i;}}}// Normalize slideIndex
if(newActiveIndex<0||typeof newActiveIndex==='undefined')newActiveIndex=0;// for (i = 0; i < s.slidesGrid.length; i++) {
// if (- translate >= s.slidesGrid[i]) {
// newActiveIndex = i;
// }
// }
snapIndex=Math.floor(newActiveIndex/s.params.slidesPerGroup);if(snapIndex>=s.snapGrid.length)snapIndex=s.snapGrid.length-1;if(newActiveIndex===s.activeIndex){return;}s.snapIndex=snapIndex;s.previousIndex=s.activeIndex;s.activeIndex=newActiveIndex;s.updateClasses();};/*=========================
        Classes
        ===========================*/s.updateClasses=function(){s.slides.removeClass(s.params.slideActiveClass+' '+s.params.slideNextClass+' '+s.params.slidePrevClass);var activeSlide=s.slides.eq(s.activeIndex);// Active classes
activeSlide.addClass(s.params.slideActiveClass);activeSlide.next('.'+s.params.slideClass).addClass(s.params.slideNextClass);activeSlide.prev('.'+s.params.slideClass).addClass(s.params.slidePrevClass);// Pagination
if(s.bullets&&s.bullets.length>0){s.bullets.removeClass(s.params.bulletActiveClass);var bulletIndex;if(s.params.loop){bulletIndex=Math.ceil(s.activeIndex-s.loopedSlides)/s.params.slidesPerGroup;if(bulletIndex>s.slides.length-1-s.loopedSlides*2){bulletIndex=bulletIndex-(s.slides.length-s.loopedSlides*2);}if(bulletIndex>s.bullets.length-1)bulletIndex=bulletIndex-s.bullets.length;}else{if(typeof s.snapIndex!=='undefined'){bulletIndex=s.snapIndex;}else{bulletIndex=s.activeIndex||0;}}if(s.paginationContainer.length>1){s.bullets.each(function(){if($(this).index()===bulletIndex)$(this).addClass(s.params.bulletActiveClass);});}else{s.bullets.eq(bulletIndex).addClass(s.params.bulletActiveClass);}}// Next/active buttons
if(!s.params.loop){if(s.params.prevButton){if(s.isBeginning){$(s.params.prevButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.disable($(s.params.prevButton));}else{$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.enable($(s.params.prevButton));}}if(s.params.nextButton){if(s.isEnd){$(s.params.nextButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.disable($(s.params.nextButton));}else{$(s.params.nextButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y&&s.a11y)s.a11y.enable($(s.params.nextButton));}}}};/*=========================
        Pagination
        ===========================*/s.updatePagination=function(){if(!s.params.pagination)return;if(s.paginationContainer&&s.paginationContainer.length>0){var bulletsHTML='';var numberOfBullets=s.params.loop?Math.ceil((s.slides.length-s.loopedSlides*2)/s.params.slidesPerGroup):s.snapGrid.length;for(var i=0;i<numberOfBullets;i++){if(s.params.paginationBulletRender){bulletsHTML+=s.params.paginationBulletRender(i,s.params.bulletClass);}else{bulletsHTML+='<'+s.params.paginationElement+' class="'+s.params.bulletClass+'"></'+s.params.paginationElement+'>';}}s.paginationContainer.html(bulletsHTML);s.bullets=s.paginationContainer.find('.'+s.params.bulletClass);if(s.params.paginationClickable&&s.params.a11y&&s.a11y){s.a11y.initPagination();}}};/*=========================
        Common update method
        ===========================*/s.update=function(updateTranslate){s.updateContainerSize();s.updateSlidesSize();s.updateProgress();s.updatePagination();s.updateClasses();if(s.params.scrollbar&&s.scrollbar){s.scrollbar.set();}function forceSetTranslate(){newTranslate=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}if(updateTranslate){var translated,newTranslate;if(s.controller&&s.controller.spline){s.controller.spline=undefined;}if(s.params.freeMode){forceSetTranslate();}else{if((s.params.slidesPerView==='auto'||s.params.slidesPerView>1)&&s.isEnd&&!s.params.centeredSlides){translated=s.slideTo(s.slides.length-1,0,false,true);}else{translated=s.slideTo(s.activeIndex,0,false,true);}if(!translated){forceSetTranslate();}}}};/*=========================
        Resize Handler
        ===========================*/s.onResize=function(forceUpdatePagination){// Disable locks on resize
var allowSwipeToPrev=s.params.allowSwipeToPrev;var allowSwipeToNext=s.params.allowSwipeToNext;s.params.allowSwipeToPrev=s.params.allowSwipeToNext=true;s.updateContainerSize();s.updateSlidesSize();if(s.params.slidesPerView==='auto'||s.params.freeMode||forceUpdatePagination)s.updatePagination();if(s.params.scrollbar&&s.scrollbar){s.scrollbar.set();}if(s.controller&&s.controller.spline){s.controller.spline=undefined;}if(s.params.freeMode){var newTranslate=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}else{s.updateClasses();if((s.params.slidesPerView==='auto'||s.params.slidesPerView>1)&&s.isEnd&&!s.params.centeredSlides){s.slideTo(s.slides.length-1,0,false,true);}else{s.slideTo(s.activeIndex,0,false,true);}}// Return locks after resize
s.params.allowSwipeToPrev=allowSwipeToPrev;s.params.allowSwipeToNext=allowSwipeToNext;};/*=========================
        Events
        ===========================*///Define Touch Events
var desktopEvents=['mousedown','mousemove','mouseup'];if(window.navigator.pointerEnabled)desktopEvents=['pointerdown','pointermove','pointerup'];else if(window.navigator.msPointerEnabled)desktopEvents=['MSPointerDown','MSPointerMove','MSPointerUp'];s.touchEvents={start:s.support.touch||!s.params.simulateTouch?'touchstart':desktopEvents[0],move:s.support.touch||!s.params.simulateTouch?'touchmove':desktopEvents[1],end:s.support.touch||!s.params.simulateTouch?'touchend':desktopEvents[2]};// WP8 Touch Events Fix
if(window.navigator.pointerEnabled||window.navigator.msPointerEnabled){(s.params.touchEventsTarget==='container'?s.container:s.wrapper).addClass('swiper-wp8-'+s.params.direction);}// Attach/detach events
s.initEvents=function(detach){console.debug('swiper initEvents',detach?'detach':'attach');var actionDom=detach?'off':'on';var action=detach?'removeEventListener':'addEventListener';var touchEventsTarget=s.params.touchEventsTarget==='container'?s.container[0]:s.wrapper[0];var target=s.support.touch?touchEventsTarget:document;var moveCapture=s.params.nested?true:false;//Touch Events
if(s.browser.ie){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);target[action](s.touchEvents.move,s.onTouchMove,moveCapture);target[action](s.touchEvents.end,s.onTouchEnd,false);}else{if(s.support.touch){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);touchEventsTarget[action](s.touchEvents.move,s.onTouchMove,moveCapture);touchEventsTarget[action](s.touchEvents.end,s.onTouchEnd,false);}if(params.simulateTouch&&!s.device.ios&&!s.device.android){touchEventsTarget[action]('mousedown',s.onTouchStart,false);document[action]('mousemove',s.onTouchMove,moveCapture);document[action]('mouseup',s.onTouchEnd,false);}}window[action]('resize',s.onResize);// Next, Prev, Index
if(s.params.nextButton){$(s.params.nextButton)[actionDom]('click',s.onClickNext);if(s.params.a11y&&s.a11y)$(s.params.nextButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.prevButton){$(s.params.prevButton)[actionDom]('click',s.onClickPrev);if(s.params.a11y&&s.a11y)$(s.params.prevButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.pagination&&s.params.paginationClickable){$(s.paginationContainer)[actionDom]('click','.'+s.params.bulletClass,s.onClickIndex);if(s.params.a11y&&s.a11y)$(s.paginationContainer)[actionDom]('keydown','.'+s.params.bulletClass,s.a11y.onEnterKey);}// Prevent Links Clicks
if(s.params.preventClicks||s.params.preventClicksPropagation)touchEventsTarget[action]('click',s.preventClicks,true);};s.attachEvents=function(detach){s.initEvents();};s.detachEvents=function(){s.initEvents(true);};/*=========================
        Handle Clicks
        ===========================*/// Prevent Clicks
s.allowClick=true;s.preventClicks=function(e){if(!s.allowClick){if(s.params.preventClicks)e.preventDefault();if(s.params.preventClicksPropagation&&s.animating){e.stopPropagation();e.stopImmediatePropagation();}}};// Clicks
s.onClickNext=function(e){e.preventDefault();if(s.isEnd&&!s.params.loop)return;s.slideNext();};s.onClickPrev=function(e){e.preventDefault();if(s.isBeginning&&!s.params.loop)return;s.slidePrev();};s.onClickIndex=function(e){e.preventDefault();var index=$(this).index()*s.params.slidesPerGroup;if(s.params.loop)index=index+s.loopedSlides;s.slideTo(index);};/*=========================
        Handle Touches
        ===========================*/function findElementInEvent(e,selector){var el=$(e.target);if(!el.is(selector)){if(typeof selector==='string'){el=el.parents(selector);}else if(selector.nodeType){var found;el.parents().each(function(index,_el){if(_el===selector)found=selector;});if(!found)return undefined;else return selector;}}if(el.length===0){return undefined;}return el[0];}s.updateClickedSlide=function(e){var slide=findElementInEvent(e,'.'+s.params.slideClass);var slideFound=false;if(slide){for(var i=0;i<s.slides.length;i++){if(s.slides[i]===slide)slideFound=true;}}if(slide&&slideFound){s.clickedSlide=slide;s.clickedIndex=$(slide).index();}else{s.clickedSlide=undefined;s.clickedIndex=undefined;return;}if(s.params.slideToClickedSlide&&s.clickedIndex!==undefined&&s.clickedIndex!==s.activeIndex){var slideToIndex=s.clickedIndex,realIndex;if(s.params.loop){realIndex=$(s.clickedSlide).attr('data-swiper-slide-index');if(slideToIndex>s.slides.length-s.params.slidesPerView){s.fixLoop();slideToIndex=s.wrapper.children('.'+s.params.slideClass+'[data-swiper-slide-index="'+realIndex+'"]').eq(0).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else if(slideToIndex<s.params.slidesPerView-1){s.fixLoop();var duplicatedSlides=s.wrapper.children('.'+s.params.slideClass+'[data-swiper-slide-index="'+realIndex+'"]');slideToIndex=duplicatedSlides.eq(duplicatedSlides.length-1).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else{s.slideTo(slideToIndex);}}else{s.slideTo(slideToIndex);}}};var isTouched,isMoved,touchStartTime,isScrolling,currentTranslate,startTranslate,allowThresholdMove,// Form elements to match
formElements='input, select, textarea, button',// Last click time
lastClickTime=Date.now(),clickTimeout,//Velocities
velocities=[],allowMomentumBounce;// Animating Flag
s.animating=false;// Touches information
s.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};// Touch handlers
var isTouchEvent,startMoving;s.onTouchStart=function(e){if(e.originalEvent)e=e.originalEvent;isTouchEvent=e.type==='touchstart';if(!isTouchEvent&&'which'in e&&e.which===3)return;if(s.params.noSwiping&&findElementInEvent(e,'.'+s.params.noSwipingClass)){s.allowClick=true;return;}if(s.params.swipeHandler){if(!findElementInEvent(e,s.params.swipeHandler))return;}var startX=s.touches.currentX=e.type==='touchstart'?e.targetTouches[0].pageX:e.pageX;var startY=s.touches.currentY=e.type==='touchstart'?e.targetTouches[0].pageY:e.pageY;// Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
if(s.device.ios&&s.params.iOSEdgeSwipeDetection&&startX<=s.params.iOSEdgeSwipeThreshold){return;}isTouched=true;isMoved=false;isScrolling=undefined;startMoving=undefined;s.touches.startX=startX;s.touches.startY=startY;touchStartTime=Date.now();s.allowClick=true;s.updateContainerSize();s.swipeDirection=undefined;if(s.params.threshold>0)allowThresholdMove=false;if(e.type!=='touchstart'){var preventDefault=true;if($(e.target).is(formElements))preventDefault=false;if(document.activeElement&&$(document.activeElement).is(formElements)){document.activeElement.blur();}if(preventDefault){e.preventDefault();}}s.emit('onTouchStart',s,e);};s.onTouchMove=function(e){if(e.originalEvent)e=e.originalEvent;if(isTouchEvent&&e.type==='mousemove')return;if(e.preventedByNestedSwiper)return;if(s.params.onlyExternal){// isMoved = true;
s.allowClick=false;if(isTouched){s.touches.startX=s.touches.currentX=e.type==='touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.startY=s.touches.currentY=e.type==='touchmove'?e.targetTouches[0].pageY:e.pageY;touchStartTime=Date.now();}return;}if(isTouchEvent&&document.activeElement){if(e.target===document.activeElement&&$(e.target).is(formElements)){isMoved=true;s.allowClick=false;return;}}s.emit('onTouchMove',s,e);if(e.targetTouches&&e.targetTouches.length>1)return;s.touches.currentX=e.type==='touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.currentY=e.type==='touchmove'?e.targetTouches[0].pageY:e.pageY;if(typeof isScrolling==='undefined'){var touchAngle=Math.atan2(Math.abs(s.touches.currentY-s.touches.startY),Math.abs(s.touches.currentX-s.touches.startX))*180/Math.PI;isScrolling=isH()?touchAngle>s.params.touchAngle:90-touchAngle>s.params.touchAngle;}if(isScrolling){s.emit('onTouchMoveOpposite',s,e);}if(typeof startMoving==='undefined'&&s.browser.ieTouch){if(s.touches.currentX!==s.touches.startX||s.touches.currentY!==s.touches.startY){startMoving=true;}}if(!isTouched)return;if(isScrolling){isTouched=false;return;}if(!startMoving&&s.browser.ieTouch){return;}s.allowClick=false;s.emit('onSliderMove',s,e);e.preventDefault();if(s.params.touchMoveStopPropagation&&!s.params.nested){e.stopPropagation();}if(!isMoved){if(params.loop){s.fixLoop();}startTranslate=s.getWrapperTranslate();s.setWrapperTransition(0);if(s.animating){s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');}if(s.params.autoplay&&s.autoplaying){if(s.params.autoplayDisableOnInteraction){s.stopAutoplay();}else{s.pauseAutoplay();}}allowMomentumBounce=false;//Grab Cursor
if(s.params.grabCursor){s.container[0].style.cursor='move';s.container[0].style.cursor='-webkit-grabbing';s.container[0].style.cursor='-moz-grabbin';s.container[0].style.cursor='grabbing';}}isMoved=true;var diff=s.touches.diff=isH()?s.touches.currentX-s.touches.startX:s.touches.currentY-s.touches.startY;diff=diff*s.params.touchRatio;if(s.rtl)diff=-diff;s.swipeDirection=diff>0?'prev':'next';currentTranslate=diff+startTranslate;var disableParentSwiper=true;if(diff>0&&currentTranslate>s.minTranslate()){disableParentSwiper=false;if(s.params.resistance)currentTranslate=s.minTranslate()-1+Math.pow(-s.minTranslate()+startTranslate+diff,s.params.resistanceRatio);}else if(diff<0&&currentTranslate<s.maxTranslate()){disableParentSwiper=false;if(s.params.resistance)currentTranslate=s.maxTranslate()+1-Math.pow(s.maxTranslate()-startTranslate-diff,s.params.resistanceRatio);}if(disableParentSwiper){e.preventedByNestedSwiper=true;}// Directions locks
if(!s.params.allowSwipeToNext&&s.swipeDirection==='next'&&currentTranslate<startTranslate){currentTranslate=startTranslate;}if(!s.params.allowSwipeToPrev&&s.swipeDirection==='prev'&&currentTranslate>startTranslate){currentTranslate=startTranslate;}if(!s.params.followFinger)return;// Threshold
if(s.params.threshold>0){if(Math.abs(diff)>s.params.threshold||allowThresholdMove){if(!allowThresholdMove){allowThresholdMove=true;s.touches.startX=s.touches.currentX;s.touches.startY=s.touches.currentY;currentTranslate=startTranslate;s.touches.diff=isH()?s.touches.currentX-s.touches.startX:s.touches.currentY-s.touches.startY;return;}}else{currentTranslate=startTranslate;return;}}// Update active index in free mode
if(s.params.freeMode||s.params.watchSlidesProgress){s.updateActiveIndex();}if(s.params.freeMode){//Velocity
if(velocities.length===0){velocities.push({position:s.touches[isH()?'startX':'startY'],time:touchStartTime});}velocities.push({position:s.touches[isH()?'currentX':'currentY'],time:new window.Date().getTime()});}// Update progress
s.updateProgress(currentTranslate);// Update translate
s.setWrapperTranslate(currentTranslate);};s.onTouchEnd=function(e){if(e.originalEvent)e=e.originalEvent;s.emit('onTouchEnd',s,e);if(!isTouched)return;//Return Grab Cursor
if(s.params.grabCursor&&isMoved&&isTouched){s.container[0].style.cursor='move';s.container[0].style.cursor='-webkit-grab';s.container[0].style.cursor='-moz-grab';s.container[0].style.cursor='grab';}// Time diff
var touchEndTime=Date.now();var timeDiff=touchEndTime-touchStartTime;// Tap, doubleTap, Click
if(s.allowClick){s.updateClickedSlide(e);s.emit('onTap',s,e);if(timeDiff<300&&touchEndTime-lastClickTime>300){if(clickTimeout)clearTimeout(clickTimeout);clickTimeout=setTimeout(function(){if(!s)return;if(s.params.paginationHide&&s.paginationContainer.length>0&&!$(e.target).hasClass(s.params.bulletClass)){s.paginationContainer.toggleClass(s.params.paginationHiddenClass);}s.emit('onClick',s,e);},300);}if(timeDiff<300&&touchEndTime-lastClickTime<300){if(clickTimeout)clearTimeout(clickTimeout);s.emit('onDoubleTap',s,e);}}lastClickTime=Date.now();setTimeout(function(){if(s)s.allowClick=true;},0);if(!isTouched||!isMoved||!s.swipeDirection||s.touches.diff===0||currentTranslate===startTranslate){isTouched=isMoved=false;return;}isTouched=isMoved=false;var currentPos;if(s.params.followFinger){currentPos=s.rtl?s.translate:-s.translate;}else{currentPos=-currentTranslate;}if(s.params.freeMode){if(currentPos<-s.minTranslate()){s.slideTo(s.activeIndex);return;}else if(currentPos>-s.maxTranslate()){if(s.slides.length<s.snapGrid.length){s.slideTo(s.snapGrid.length-1);}else{s.slideTo(s.slides.length-1);}return;}if(s.params.freeModeMomentum){if(velocities.length>1){var lastMoveEvent=velocities.pop(),velocityEvent=velocities.pop();var distance=lastMoveEvent.position-velocityEvent.position;var time=lastMoveEvent.time-velocityEvent.time;s.velocity=distance/time;s.velocity=s.velocity/2;if(Math.abs(s.velocity)<0.02){s.velocity=0;}// this implies that the user stopped moving a finger then released.
// There would be no events with distance zero, so the last event is stale.
if(time>150||new window.Date().getTime()-lastMoveEvent.time>300){s.velocity=0;}}else{s.velocity=0;}velocities.length=0;var momentumDuration=1000*s.params.freeModeMomentumRatio;var momentumDistance=s.velocity*momentumDuration;var newPosition=s.translate+momentumDistance;if(s.rtl)newPosition=-newPosition;var doBounce=false;var afterBouncePosition;var bounceAmount=Math.abs(s.velocity)*20*s.params.freeModeMomentumBounceRatio;if(newPosition<s.maxTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition+s.maxTranslate()<-bounceAmount){newPosition=s.maxTranslate()-bounceAmount;}afterBouncePosition=s.maxTranslate();doBounce=true;allowMomentumBounce=true;}else{newPosition=s.maxTranslate();}}else if(newPosition>s.minTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition-s.minTranslate()>bounceAmount){newPosition=s.minTranslate()+bounceAmount;}afterBouncePosition=s.minTranslate();doBounce=true;allowMomentumBounce=true;}else{newPosition=s.minTranslate();}}else if(s.params.freeModeSticky){var j=0,nextSlide;for(j=0;j<s.snapGrid.length;j+=1){if(s.snapGrid[j]>-newPosition){nextSlide=j;break;}}if(Math.abs(s.snapGrid[nextSlide]-newPosition)<Math.abs(s.snapGrid[nextSlide-1]-newPosition)||s.swipeDirection==='next'){newPosition=s.snapGrid[nextSlide];}else{newPosition=s.snapGrid[nextSlide-1];}if(!s.rtl)newPosition=-newPosition;}//Fix duration
if(s.velocity!==0){if(s.rtl){momentumDuration=Math.abs((-newPosition-s.translate)/s.velocity);}else{momentumDuration=Math.abs((newPosition-s.translate)/s.velocity);}}else if(s.params.freeModeSticky){s.slideReset();return;}if(s.params.freeModeMomentumBounce&&doBounce){s.updateProgress(afterBouncePosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();s.animating=true;s.wrapper.transitionEnd(function(){if(!s||!allowMomentumBounce)return;s.emit('onMomentumBounce',s);s.setWrapperTransition(s.params.speed);s.setWrapperTranslate(afterBouncePosition);s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});});}else if(s.velocity){s.updateProgress(newPosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();if(!s.animating){s.animating=true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});}}else{s.updateProgress(newPosition);}s.updateActiveIndex();}if(!s.params.freeModeMomentum||timeDiff>=s.params.longSwipesMs){s.updateProgress();s.updateActiveIndex();}return;}// Find current slide
var i,stopIndex=0,groupSize=s.slidesSizesGrid[0];for(i=0;i<s.slidesGrid.length;i+=s.params.slidesPerGroup){if(typeof s.slidesGrid[i+s.params.slidesPerGroup]!=='undefined'){if(currentPos>=s.slidesGrid[i]&&currentPos<s.slidesGrid[i+s.params.slidesPerGroup]){stopIndex=i;groupSize=s.slidesGrid[i+s.params.slidesPerGroup]-s.slidesGrid[i];}}else{if(currentPos>=s.slidesGrid[i]){stopIndex=i;groupSize=s.slidesGrid[s.slidesGrid.length-1]-s.slidesGrid[s.slidesGrid.length-2];}}}// Find current slide size
var ratio=(currentPos-s.slidesGrid[stopIndex])/groupSize;if(timeDiff>s.params.longSwipesMs){// Long touches
if(!s.params.longSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection==='next'){if(ratio>=s.params.longSwipesRatio)s.slideTo(stopIndex+s.params.slidesPerGroup);else s.slideTo(stopIndex);}if(s.swipeDirection==='prev'){if(ratio>1-s.params.longSwipesRatio)s.slideTo(stopIndex+s.params.slidesPerGroup);else s.slideTo(stopIndex);}}else{// Short swipes
if(!s.params.shortSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection==='next'){s.slideTo(stopIndex+s.params.slidesPerGroup);}if(s.swipeDirection==='prev'){s.slideTo(stopIndex);}}};/*=========================
        Transitions
        ===========================*/s._slideTo=function(slideIndex,speed){return s.slideTo(slideIndex,speed,true,true);};s.slideTo=function(slideIndex,speed,runCallbacks,internal){if(typeof runCallbacks==='undefined')runCallbacks=true;if(typeof slideIndex==='undefined')slideIndex=0;if(slideIndex<0)slideIndex=0;s.snapIndex=Math.floor(slideIndex/s.params.slidesPerGroup);if(s.snapIndex>=s.snapGrid.length)s.snapIndex=s.snapGrid.length-1;var translate=-s.snapGrid[s.snapIndex];// Stop autoplay
if(s.params.autoplay&&s.autoplaying){if(internal||!s.params.autoplayDisableOnInteraction){s.pauseAutoplay(speed);}else{s.stopAutoplay();}}// Update progress
s.updateProgress(translate);// Normalize slideIndex
for(var i=0;i<s.slidesGrid.length;i++){if(-Math.floor(translate*100)>=Math.floor(s.slidesGrid[i]*100)){slideIndex=i;}}// Directions locks
if(!s.params.allowSwipeToNext&&translate<s.translate&&translate<s.minTranslate()){return false;}if(!s.params.allowSwipeToPrev&&translate>s.translate&&translate>s.maxTranslate()){if((s.activeIndex||0)!==slideIndex)return false;}// Update Index
if(typeof speed==='undefined')speed=s.params.speed;s.previousIndex=s.activeIndex||0;s.activeIndex=slideIndex;if(translate===s.translate){s.updateClasses();return false;}s.updateClasses();s.onTransitionStart(runCallbacks);var translateX=isH()?translate:0,translateY=isH()?0:translate;if(speed===0){s.setWrapperTransition(0);s.setWrapperTranslate(translate);s.onTransitionEnd(runCallbacks);}else{s.setWrapperTransition(speed);s.setWrapperTranslate(translate);if(!s.animating){s.animating=true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd(runCallbacks);});}}return true;};s.onTransitionStart=function(runCallbacks){if(typeof runCallbacks==='undefined')runCallbacks=true;if(s.lazy)s.lazy.onTransitionStart();if(runCallbacks){s.emit('onTransitionStart',s);if(s.activeIndex!==s.previousIndex){s.emit('onSlideChangeStart',s);}}};s.onTransitionEnd=function(runCallbacks){s.animating=false;s.setWrapperTransition(0);if(typeof runCallbacks==='undefined')runCallbacks=true;if(s.lazy)s.lazy.onTransitionEnd();if(runCallbacks){s.emit('onTransitionEnd',s);if(s.activeIndex!==s.previousIndex){s.emit('onSlideChangeEnd',s);}}if(s.params.hashnav&&s.hashnav){s.hashnav.setHash();}};s.slideNext=function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex+s.params.slidesPerGroup,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex+s.params.slidesPerGroup,speed,runCallbacks,internal);};s._slideNext=function(speed){return s.slideNext(true,speed,true);};s.slidePrev=function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex-1,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex-1,speed,runCallbacks,internal);};s._slidePrev=function(speed){return s.slidePrev(true,speed,true);};s.slideReset=function(runCallbacks,speed,internal){return s.slideTo(s.activeIndex,speed,runCallbacks);};/*=========================
        Translate/transition helpers
        ===========================*/s.setWrapperTransition=function(duration,byController){s.wrapper.transition(duration);if(s.params.effect!=='slide'&&s.effects[s.params.effect]){s.effects[s.params.effect].setTransition(duration);}if(s.params.parallax&&s.parallax){s.parallax.setTransition(duration);}if(s.params.scrollbar&&s.scrollbar){s.scrollbar.setTransition(duration);}if(s.params.control&&s.controller){s.controller.setTransition(duration,byController);}s.emit('onSetTransition',s,duration);};s.setWrapperTranslate=function(translate,updateActiveIndex,byController){var x=0,y=0,z=0;if(isH()){x=s.rtl?-translate:translate;}else{y=translate;}if(!s.params.virtualTranslate){if(s.support.transforms3d)s.wrapper.transform('translate3d('+x+'px, '+y+'px, '+z+'px)');else s.wrapper.transform('translate('+x+'px, '+y+'px)');}s.translate=isH()?x:y;if(updateActiveIndex)s.updateActiveIndex();if(s.params.effect!=='slide'&&s.effects[s.params.effect]){s.effects[s.params.effect].setTranslate(s.translate);}if(s.params.parallax&&s.parallax){s.parallax.setTranslate(s.translate);}if(s.params.scrollbar&&s.scrollbar){s.scrollbar.setTranslate(s.translate);}if(s.params.control&&s.controller){s.controller.setTranslate(s.translate,byController);}s.emit('onSetTranslate',s,s.translate);};s.getTranslate=function(el,axis){var matrix,curTransform,curStyle,transformMatrix;// automatic axis detection
if(typeof axis==='undefined'){axis='x';}if(s.params.virtualTranslate){return s.rtl?-s.translate:s.translate;}curStyle=window.getComputedStyle(el,null);if(window.WebKitCSSMatrix){// Some old versions of Webkit choke when 'none' is passed; pass
// empty string instead in this case
transformMatrix=new window.WebKitCSSMatrix(curStyle.webkitTransform==='none'?'':curStyle.webkitTransform);}else{transformMatrix=curStyle.MozTransform||curStyle.OTransform||curStyle.MsTransform||curStyle.msTransform||curStyle.transform||curStyle.getPropertyValue('transform').replace('translate(','matrix(1, 0, 0, 1,');matrix=transformMatrix.toString().split(',');}if(axis==='x'){//Latest Chrome and webkits Fix
if(window.WebKitCSSMatrix)curTransform=transformMatrix.m41;//Crazy IE10 Matrix
else if(matrix.length===16)curTransform=parseFloat(matrix[12]);//Normal Browsers
else curTransform=parseFloat(matrix[4]);}if(axis==='y'){//Latest Chrome and webkits Fix
if(window.WebKitCSSMatrix)curTransform=transformMatrix.m42;//Crazy IE10 Matrix
else if(matrix.length===16)curTransform=parseFloat(matrix[13]);//Normal Browsers
else curTransform=parseFloat(matrix[5]);}if(s.rtl&&curTransform)curTransform=-curTransform;return curTransform||0;};s.getWrapperTranslate=function(axis){if(typeof axis==='undefined'){axis=isH()?'x':'y';}return s.getTranslate(s.wrapper[0],axis);};/*=========================
        Observer
        ===========================*/s.observers=[];function initObserver(target,options){options=options||{};// create an observer instance
var ObserverFunc=window.MutationObserver||window.WebkitMutationObserver;var observer=new ObserverFunc(function(mutations){mutations.forEach(function(mutation){s.onResize(true);s.emit('onObserverUpdate',s,mutation);});});observer.observe(target,{attributes:typeof options.attributes==='undefined'?true:options.attributes,childList:typeof options.childList==='undefined'?true:options.childList,characterData:typeof options.characterData==='undefined'?true:options.characterData});s.observers.push(observer);}s.initObservers=function(){if(s.params.observeParents){var containerParents=s.container.parents();for(var i=0;i<containerParents.length;i++){initObserver(containerParents[i]);}}// Observe container
initObserver(s.container[0],{childList:false});// Observe wrapper
initObserver(s.wrapper[0],{attributes:false});};s.disconnectObservers=function(){for(var i=0;i<s.observers.length;i++){s.observers[i].disconnect();}s.observers=[];};/*=========================
        Loop
        ===========================*/// Create looped slides
s.createLoop=function(){// Remove duplicated slides
s.wrapper.children('.'+s.params.slideClass+'.'+s.params.slideDuplicateClass).remove();var slides=s.wrapper.children('.'+s.params.slideClass);if(s.params.slidesPerView==='auto'&&!s.params.loopedSlides)s.params.loopedSlides=slides.length;s.loopedSlides=parseInt(s.params.loopedSlides||s.params.slidesPerView,10);s.loopedSlides=s.loopedSlides+s.params.loopAdditionalSlides;if(s.loopedSlides>slides.length){s.loopedSlides=slides.length;}var prependSlides=[],appendSlides=[],i;slides.each(function(index,el){var slide=$(this);if(index<s.loopedSlides)appendSlides.push(el);if(index<slides.length&&index>=slides.length-s.loopedSlides)prependSlides.push(el);slide.attr('data-swiper-slide-index',index);});for(i=0;i<appendSlides.length;i++){s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}for(i=prependSlides.length-1;i>=0;i--){s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}};s.destroyLoop=function(){s.wrapper.children('.'+s.params.slideClass+'.'+s.params.slideDuplicateClass).remove();s.slides.removeAttr('data-swiper-slide-index');};s.fixLoop=function(){var newIndex;//Fix For Negative Oversliding
if(s.activeIndex<s.loopedSlides){newIndex=s.slides.length-s.loopedSlides*3+s.activeIndex;newIndex=newIndex+s.loopedSlides;s.slideTo(newIndex,0,false,true);}//Fix For Positive Oversliding
else if(s.params.slidesPerView==='auto'&&s.activeIndex>=s.loopedSlides*2||s.activeIndex>s.slides.length-s.params.slidesPerView*2){newIndex=-s.slides.length+s.activeIndex+s.loopedSlides;newIndex=newIndex+s.loopedSlides;s.slideTo(newIndex,0,false,true);}};/*=========================
        Append/Prepend/Remove Slides
        ===========================*/s.appendSlide=function(slides){if(s.params.loop){s.destroyLoop();}if((typeof slides==='undefined'?'undefined':_typeof(slides))==='object'&&slides.length){for(var i=0;i<slides.length;i++){if(slides[i])s.wrapper.append(slides[i]);}}else{s.wrapper.append(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer&&s.support.observer)){s.update(true);}};s.prependSlide=function(slides){if(s.params.loop){s.destroyLoop();}var newActiveIndex=s.activeIndex+1;if((typeof slides==='undefined'?'undefined':_typeof(slides))==='object'&&slides.length){for(var i=0;i<slides.length;i++){if(slides[i])s.wrapper.prepend(slides[i]);}newActiveIndex=s.activeIndex+slides.length;}else{s.wrapper.prepend(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer&&s.support.observer)){s.update(true);}s.slideTo(newActiveIndex,0,false);};s.removeSlide=function(slidesIndexes){if(s.params.loop){s.destroyLoop();s.slides=s.wrapper.children('.'+s.params.slideClass);}var newActiveIndex=s.activeIndex,indexToRemove;if((typeof slidesIndexes==='undefined'?'undefined':_typeof(slidesIndexes))==='object'&&slidesIndexes.length){for(var i=0;i<slidesIndexes.length;i++){indexToRemove=slidesIndexes[i];if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove<newActiveIndex)newActiveIndex--;}newActiveIndex=Math.max(newActiveIndex,0);}else{indexToRemove=slidesIndexes;if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove<newActiveIndex)newActiveIndex--;newActiveIndex=Math.max(newActiveIndex,0);}if(s.params.loop){s.createLoop();}if(!(s.params.observer&&s.support.observer)){s.update(true);}if(s.params.loop){s.slideTo(newActiveIndex+s.loopedSlides,0,false);}else{s.slideTo(newActiveIndex,0,false);}};s.removeAllSlides=function(){var slidesIndexes=[];for(var i=0;i<s.slides.length;i++){slidesIndexes.push(i);}s.removeSlide(slidesIndexes);};/*=========================
        Effects
        ===========================*/s.effects={fade:{setTranslate:function setTranslate(){for(var i=0;i<s.slides.length;i++){var slide=s.slides.eq(i);var offset=slide[0].swiperSlideOffset;var tx=-offset;if(!s.params.virtualTranslate)tx=tx-s.translate;var ty=0;if(!isH()){ty=tx;tx=0;}var slideOpacity=s.params.fade.crossFade?Math.max(1-Math.abs(slide[0].progress),0):1+Math.min(Math.max(slide[0].progress,-1),0);slide.css({opacity:slideOpacity}).transform('translate3d('+tx+'px, '+ty+'px, 0px)');}},setTransition:function setTransition(duration){s.slides.transition(duration);if(s.params.virtualTranslate&&duration!==0){var eventTriggered=false;s.slides.transitionEnd(function(){if(eventTriggered)return;if(!s)return;eventTriggered=true;s.animating=false;var triggerEvents=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'];for(var i=0;i<triggerEvents.length;i++){s.wrapper.trigger(triggerEvents[i]);}});}}},cube:{setTranslate:function setTranslate(){var wrapperRotate=0,cubeShadow;if(s.params.cube.shadow){if(isH()){cubeShadow=s.wrapper.find('.swiper-cube-shadow');if(cubeShadow.length===0){cubeShadow=$('<div class="swiper-cube-shadow"></div>');s.wrapper.append(cubeShadow);}cubeShadow.css({height:s.width+'px'});}else{cubeShadow=s.container.find('.swiper-cube-shadow');if(cubeShadow.length===0){cubeShadow=$('<div class="swiper-cube-shadow"></div>');s.container.append(cubeShadow);}}}for(var i=0;i<s.slides.length;i++){var slide=s.slides.eq(i);var slideAngle=i*90;var round=Math.floor(slideAngle/360);if(s.rtl){slideAngle=-slideAngle;round=Math.floor(-slideAngle/360);}var progress=Math.max(Math.min(slide[0].progress,1),-1);var tx=0,ty=0,tz=0;if(i%4===0){tx=-round*4*s.size;tz=0;}else if((i-1)%4===0){tx=0;tz=-round*4*s.size;}else if((i-2)%4===0){tx=s.size+round*4*s.size;tz=s.size;}else if((i-3)%4===0){tx=-s.size;tz=3*s.size+s.size*4*round;}if(s.rtl){tx=-tx;}if(!isH()){ty=tx;tx=0;}var transform='rotateX('+(isH()?0:-slideAngle)+'deg) rotateY('+(isH()?slideAngle:0)+'deg) translate3d('+tx+'px, '+ty+'px, '+tz+'px)';if(progress<=1&&progress>-1){wrapperRotate=i*90+progress*90;if(s.rtl)wrapperRotate=-i*90-progress*90;}slide.transform(transform);if(s.params.cube.slideShadows){//Set shadows
var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length===0){shadowBefore=$('<div class="swiper-slide-shadow-'+(isH()?'left':'top')+'"></div>');slide.append(shadowBefore);}if(shadowAfter.length===0){shadowAfter=$('<div class="swiper-slide-shadow-'+(isH()?'right':'bottom')+'"></div>');slide.append(shadowAfter);}var shadowOpacity=slide[0].progress;if(shadowBefore.length)shadowBefore[0].style.opacity=-slide[0].progress;if(shadowAfter.length)shadowAfter[0].style.opacity=slide[0].progress;}}s.wrapper.css({'-webkit-transform-origin':'50% 50% -'+s.size/2+'px','-moz-transform-origin':'50% 50% -'+s.size/2+'px','-ms-transform-origin':'50% 50% -'+s.size/2+'px','transform-origin':'50% 50% -'+s.size/2+'px'});if(s.params.cube.shadow){if(isH()){cubeShadow.transform('translate3d(0px, '+(s.width/2+s.params.cube.shadowOffset)+'px, '+-s.width/2+'px) rotateX(90deg) rotateZ(0deg) scale('+s.params.cube.shadowScale+')');}else{var shadowAngle=Math.abs(wrapperRotate)-Math.floor(Math.abs(wrapperRotate)/90)*90;var multiplier=1.5-(Math.sin(shadowAngle*2*Math.PI/360)/2+Math.cos(shadowAngle*2*Math.PI/360)/2);var scale1=s.params.cube.shadowScale,scale2=s.params.cube.shadowScale/multiplier,offset=s.params.cube.shadowOffset;cubeShadow.transform('scale3d('+scale1+', 1, '+scale2+') translate3d(0px, '+(s.height/2+offset)+'px, '+-s.height/2/scale2+'px) rotateX(-90deg)');}}var zFactor=s.isSafari||s.isUiWebView?-s.size/2:0;s.wrapper.transform('translate3d(0px,0,'+zFactor+'px) rotateX('+(isH()?0:wrapperRotate)+'deg) rotateY('+(isH()?-wrapperRotate:0)+'deg)');},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);if(s.params.cube.shadow&&!isH()){s.container.find('.swiper-cube-shadow').transition(duration);}}},coverflow:{setTranslate:function setTranslate(){var transform=s.translate;var center=isH()?-transform+s.width/2:-transform+s.height/2;var rotate=isH()?s.params.coverflow.rotate:-s.params.coverflow.rotate;var translate=s.params.coverflow.depth;//Each slide offset from center
for(var i=0,length=s.slides.length;i<length;i++){var slide=s.slides.eq(i);var slideSize=s.slidesSizesGrid[i];var slideOffset=slide[0].swiperSlideOffset;var offsetMultiplier=(center-slideOffset-slideSize/2)/slideSize*s.params.coverflow.modifier;var rotateY=isH()?rotate*offsetMultiplier:0;var rotateX=isH()?0:rotate*offsetMultiplier;// var rotateZ = 0
var translateZ=-translate*Math.abs(offsetMultiplier);var translateY=isH()?0:s.params.coverflow.stretch*offsetMultiplier;var translateX=isH()?s.params.coverflow.stretch*offsetMultiplier:0;//Fix for ultra small values
if(Math.abs(translateX)<0.001)translateX=0;if(Math.abs(translateY)<0.001)translateY=0;if(Math.abs(translateZ)<0.001)translateZ=0;if(Math.abs(rotateY)<0.001)rotateY=0;if(Math.abs(rotateX)<0.001)rotateX=0;var slideTransform='translate3d('+translateX+'px,'+translateY+'px,'+translateZ+'px)  rotateX('+rotateX+'deg) rotateY('+rotateY+'deg)';slide.transform(slideTransform);slide[0].style.zIndex=-Math.abs(Math.round(offsetMultiplier))+1;if(s.params.coverflow.slideShadows){//Set shadows
var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length===0){shadowBefore=$('<div class="swiper-slide-shadow-'+(isH()?'left':'top')+'"></div>');slide.append(shadowBefore);}if(shadowAfter.length===0){shadowAfter=$('<div class="swiper-slide-shadow-'+(isH()?'right':'bottom')+'"></div>');slide.append(shadowAfter);}if(shadowBefore.length)shadowBefore[0].style.opacity=offsetMultiplier>0?offsetMultiplier:0;if(shadowAfter.length)shadowAfter[0].style.opacity=-offsetMultiplier>0?-offsetMultiplier:0;}}//Set correct perspective for IE10
if(s.browser.ie){var ws=s.wrapper[0].style;ws.perspectiveOrigin=center+'px 50%';}},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);}}};/*=========================
        Images Lazy Loading
        ===========================*/s.lazy={initialImageLoaded:false,loadImageInSlide:function loadImageInSlide(index,loadInDuplicate){if(typeof index==='undefined')return;if(typeof loadInDuplicate==='undefined')loadInDuplicate=true;if(s.slides.length===0)return;var slide=s.slides.eq(index);var img=slide.find('.swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)');if(slide.hasClass('swiper-lazy')&&!slide.hasClass('swiper-lazy-loaded')&&!slide.hasClass('swiper-lazy-loading')){img.add(slide[0]);}if(img.length===0)return;img.each(function(){var _img=$(this);_img.addClass('swiper-lazy-loading');var background=_img.attr('data-background');var src=_img.attr('data-src');s.loadImage(_img[0],src||background,false,function(){if(background){_img.css('background-image','url('+background+')');_img.removeAttr('data-background');}else{_img.attr('src',src);_img.removeAttr('data-src');}_img.addClass('swiper-lazy-loaded').removeClass('swiper-lazy-loading');slide.find('.swiper-lazy-preloader, .preloader').remove();if(s.params.loop&&loadInDuplicate){var slideOriginalIndex=slide.attr('data-swiper-slide-index');if(slide.hasClass(s.params.slideDuplicateClass)){var originalSlide=s.wrapper.children('[data-swiper-slide-index="'+slideOriginalIndex+'"]:not(.'+s.params.slideDuplicateClass+')');s.lazy.loadImageInSlide(originalSlide.index(),false);}else{var duplicatedSlide=s.wrapper.children('.'+s.params.slideDuplicateClass+'[data-swiper-slide-index="'+slideOriginalIndex+'"]');s.lazy.loadImageInSlide(duplicatedSlide.index(),false);}}s.emit('onLazyImageReady',s,slide[0],_img[0]);});s.emit('onLazyImageLoad',s,slide[0],_img[0]);});},load:function load(){var i;if(s.params.watchSlidesVisibility){s.wrapper.children('.'+s.params.slideVisibleClass).each(function(){s.lazy.loadImageInSlide($(this).index());});}else{if(s.params.slidesPerView>1){for(i=s.activeIndex;i<s.activeIndex+s.params.slidesPerView;i++){if(s.slides[i])s.lazy.loadImageInSlide(i);}}else{s.lazy.loadImageInSlide(s.activeIndex);}}if(s.params.lazyLoadingInPrevNext){if(s.params.slidesPerView>1){// Next Slides
for(i=s.activeIndex+s.params.slidesPerView;i<s.activeIndex+s.params.slidesPerView+s.params.slidesPerView;i++){if(s.slides[i])s.lazy.loadImageInSlide(i);}// Prev Slides
for(i=s.activeIndex-s.params.slidesPerView;i<s.activeIndex;i++){if(s.slides[i])s.lazy.loadImageInSlide(i);}}else{var nextSlide=s.wrapper.children('.'+s.params.slideNextClass);if(nextSlide.length>0)s.lazy.loadImageInSlide(nextSlide.index());var prevSlide=s.wrapper.children('.'+s.params.slidePrevClass);if(prevSlide.length>0)s.lazy.loadImageInSlide(prevSlide.index());}}},onTransitionStart:function onTransitionStart(){if(s.params.lazyLoading){if(s.params.lazyLoadingOnTransitionStart||!s.params.lazyLoadingOnTransitionStart&&!s.lazy.initialImageLoaded){s.lazy.load();}}},onTransitionEnd:function onTransitionEnd(){if(s.params.lazyLoading&&!s.params.lazyLoadingOnTransitionStart){s.lazy.load();}}};/*=========================
        Scrollbar
        ===========================*/s.scrollbar={set:function set(){if(!s.params.scrollbar)return;var sb=s.scrollbar;sb.track=$(s.params.scrollbar);sb.drag=sb.track.find('.swiper-scrollbar-drag');if(sb.drag.length===0){sb.drag=$('<div class="swiper-scrollbar-drag"></div>');sb.track.append(sb.drag);}sb.drag[0].style.width='';sb.drag[0].style.height='';sb.trackSize=isH()?sb.track[0].offsetWidth:sb.track[0].offsetHeight;sb.divider=s.size/s.virtualSize;sb.moveDivider=sb.divider*(sb.trackSize/s.size);sb.dragSize=sb.trackSize*sb.divider;if(isH()){sb.drag[0].style.width=sb.dragSize+'px';}else{sb.drag[0].style.height=sb.dragSize+'px';}if(sb.divider>=1){sb.track[0].style.display='none';}else{sb.track[0].style.display='';}if(s.params.scrollbarHide){sb.track[0].style.opacity=0;}},setTranslate:function setTranslate(){if(!s.params.scrollbar)return;var diff;var sb=s.scrollbar;var translate=s.translate||0;var newPos;var newSize=sb.dragSize;newPos=(sb.trackSize-sb.dragSize)*s.progress;if(s.rtl&&isH()){newPos=-newPos;if(newPos>0){newSize=sb.dragSize-newPos;newPos=0;}else if(-newPos+sb.dragSize>sb.trackSize){newSize=sb.trackSize+newPos;}}else{if(newPos<0){newSize=sb.dragSize+newPos;newPos=0;}else if(newPos+sb.dragSize>sb.trackSize){newSize=sb.trackSize-newPos;}}if(isH()){if(s.support.transforms3d){sb.drag.transform('translate3d('+newPos+'px, 0, 0)');}else{sb.drag.transform('translateX('+newPos+'px)');}sb.drag[0].style.width=newSize+'px';}else{if(s.support.transforms3d){sb.drag.transform('translate3d(0px, '+newPos+'px, 0)');}else{sb.drag.transform('translateY('+newPos+'px)');}sb.drag[0].style.height=newSize+'px';}if(s.params.scrollbarHide){clearTimeout(sb.timeout);sb.track[0].style.opacity=1;sb.timeout=setTimeout(function(){sb.track[0].style.opacity=0;sb.track.transition(400);},1000);}},setTransition:function setTransition(duration){if(!s.params.scrollbar)return;s.scrollbar.drag.transition(duration);}};/*=========================
        Controller
        ===========================*/s.controller={LinearSpline:function LinearSpline(x,y){this.x=x;this.y=y;this.lastIndex=x.length-1;// Given an x value (x2), return the expected y2 value:
// (x1,y1) is the known point before given value,
// (x3,y3) is the known point after given value.
var i1,i3;var l=this.x.length;this.interpolate=function(x2){if(!x2)return 0;// Get the indexes of x1 and x3 (the array indexes before and after given x2):
i3=binarySearch(this.x,x2);i1=i3-1;// We have our indexes i1 & i3, so we can calculate already:
// y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
return(x2-this.x[i1])*(this.y[i3]-this.y[i1])/(this.x[i3]-this.x[i1])+this.y[i1];};var binarySearch=function(){var maxIndex,minIndex,guess;return function(array,val){minIndex=-1;maxIndex=array.length;while(maxIndex-minIndex>1){if(array[guess=maxIndex+minIndex>>1]<=val){minIndex=guess;}else{maxIndex=guess;}}return maxIndex;};}();},//xxx: for now i will just save one spline function to to
getInterpolateFunction:function getInterpolateFunction(c){if(!s.controller.spline)s.controller.spline=s.params.loop?new s.controller.LinearSpline(s.slidesGrid,c.slidesGrid):new s.controller.LinearSpline(s.snapGrid,c.snapGrid);},setTranslate:function setTranslate(translate,byController){var controlled=s.params.control;var multiplier,controlledTranslate;function setControlledTranslate(c){// this will create an Interpolate function based on the snapGrids
// x is the Grid of the scrolled scroller and y will be the controlled scroller
// it makes sense to create this only once and recall it for the interpolation
// the function does a lot of value caching for performance
translate=c.rtl&&c.params.direction==='horizontal'?-s.translate:s.translate;if(s.params.controlBy==='slide'){s.controller.getInterpolateFunction(c);// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
// but it did not work out
controlledTranslate=-s.controller.spline.interpolate(-translate);}if(!controlledTranslate||s.params.controlBy==='container'){multiplier=(c.maxTranslate()-c.minTranslate())/(s.maxTranslate()-s.minTranslate());controlledTranslate=(translate-s.minTranslate())*multiplier+c.minTranslate();}if(s.params.controlInverse){controlledTranslate=c.maxTranslate()-controlledTranslate;}c.updateProgress(controlledTranslate);c.setWrapperTranslate(controlledTranslate,false,s);c.updateActiveIndex();}if(s.isArray(controlled)){for(var i=0;i<controlled.length;i++){if(controlled[i]!==byController&&controlled[i]instanceof Swiper){setControlledTranslate(controlled[i]);}}}else if(controlled instanceof Swiper&&byController!==controlled){setControlledTranslate(controlled);}},setTransition:function setTransition(duration,byController){var controlled=s.params.control;var i;function setControlledTransition(c){c.setWrapperTransition(duration,s);if(duration!==0){c.onTransitionStart();c.wrapper.transitionEnd(function(){if(!controlled)return;if(c.params.loop&&s.params.controlBy==='slide'){c.fixLoop();}c.onTransitionEnd();});}}if(s.isArray(controlled)){for(i=0;i<controlled.length;i++){if(controlled[i]!==byController&&controlled[i]instanceof Swiper){setControlledTransition(controlled[i]);}}}else if(controlled instanceof Swiper&&byController!==controlled){setControlledTransition(controlled);}}};/*=========================
        Hash Navigation
        ===========================*/s.hashnav={init:function init(){if(!s.params.hashnav)return;s.hashnav.initialized=true;var hash=document.location.hash.replace('#','');if(!hash)return;var speed=0;for(var i=0,length=s.slides.length;i<length;i++){var slide=s.slides.eq(i);var slideHash=slide.attr('data-hash');if(slideHash===hash&&!slide.hasClass(s.params.slideDuplicateClass)){var index=slide.index();s.slideTo(index,speed,s.params.runCallbacksOnInit,true);}}},setHash:function setHash(){if(!s.hashnav.initialized||!s.params.hashnav)return;document.location.hash=s.slides.eq(s.activeIndex).attr('data-hash')||'';}};/*=========================
        Keyboard Control
        ===========================*/function handleKeyboard(e){if(e.originalEvent)e=e.originalEvent;//jquery fix
var kc=e.keyCode||e.charCode;// Directions locks
if(!s.params.allowSwipeToNext&&(isH()&&kc===39||!isH()&&kc===40)){return false;}if(!s.params.allowSwipeToPrev&&(isH()&&kc===37||!isH()&&kc===38)){return false;}if(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey){return;}if(document.activeElement&&document.activeElement.nodeName&&(document.activeElement.nodeName.toLowerCase()==='input'||document.activeElement.nodeName.toLowerCase()==='textarea')){return;}if(kc===37||kc===39||kc===38||kc===40){var inView=false;//Check that swiper should be inside of visible area of window
if(s.container.parents('.swiper-slide').length>0&&s.container.parents('.swiper-slide-active').length===0){return;}var windowScroll={left:window.pageXOffset,top:window.pageYOffset};var windowWidth=window.innerWidth;var windowHeight=window.innerHeight;var swiperOffset=s.container.offset();if(s.rtl)swiperOffset.left=swiperOffset.left-s.container[0].scrollLeft;var swiperCoord=[[swiperOffset.left,swiperOffset.top],[swiperOffset.left+s.width,swiperOffset.top],[swiperOffset.left,swiperOffset.top+s.height],[swiperOffset.left+s.width,swiperOffset.top+s.height]];for(var i=0;i<swiperCoord.length;i++){var point=swiperCoord[i];if(point[0]>=windowScroll.left&&point[0]<=windowScroll.left+windowWidth&&point[1]>=windowScroll.top&&point[1]<=windowScroll.top+windowHeight){inView=true;}}if(!inView)return;}if(isH()){if(kc===37||kc===39){if(e.preventDefault)e.preventDefault();else e.returnValue=false;}if(kc===39&&!s.rtl||kc===37&&s.rtl)s.slideNext();if(kc===37&&!s.rtl||kc===39&&s.rtl)s.slidePrev();}else{if(kc===38||kc===40){if(e.preventDefault)e.preventDefault();else e.returnValue=false;}if(kc===40)s.slideNext();if(kc===38)s.slidePrev();}}s.disableKeyboardControl=function(){$(document).off('keydown',handleKeyboard);};s.enableKeyboardControl=function(){$(document).on('keydown',handleKeyboard);};/*=========================
        Mousewheel Control
        ===========================*/s.mousewheel={event:false,lastScrollTime:new window.Date().getTime()};if(s.params.mousewheelControl){try{new window.WheelEvent('wheel');s.mousewheel.event='wheel';}catch(e){}if(!s.mousewheel.event&&document.onmousewheel!==undefined){s.mousewheel.event='mousewheel';}if(!s.mousewheel.event){s.mousewheel.event='DOMMouseScroll';}}function handleMousewheel(e){if(e.originalEvent)e=e.originalEvent;//jquery fix
var we=s.mousewheel.event;var delta=0;//Opera & IE
if(e.detail)delta=-e.detail;//WebKits
else if(we==='mousewheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.wheelDeltaX)>Math.abs(e.wheelDeltaY))delta=e.wheelDeltaX;else return;}else{if(Math.abs(e.wheelDeltaY)>Math.abs(e.wheelDeltaX))delta=e.wheelDeltaY;else return;}}else{delta=e.wheelDelta;}}//Old FireFox
else if(we==='DOMMouseScroll')delta=-e.detail;//New FireFox
else if(we==='wheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.deltaX)>Math.abs(e.deltaY))delta=-e.deltaX;else return;}else{if(Math.abs(e.deltaY)>Math.abs(e.deltaX))delta=-e.deltaY;else return;}}else{delta=Math.abs(e.deltaX)>Math.abs(e.deltaY)?-e.deltaX:-e.deltaY;}}if(s.params.mousewheelInvert)delta=-delta;if(!s.params.freeMode){if(new window.Date().getTime()-s.mousewheel.lastScrollTime>60){if(delta<0){if((!s.isEnd||s.params.loop)&&!s.animating)s.slideNext();else if(s.params.mousewheelReleaseOnEdges)return true;}else{if((!s.isBeginning||s.params.loop)&&!s.animating)s.slidePrev();else if(s.params.mousewheelReleaseOnEdges)return true;}}s.mousewheel.lastScrollTime=new window.Date().getTime();}else{//Freemode or scrollContainer:
var position=s.getWrapperTranslate()+delta*s.params.mousewheelSensitivity;if(position>0)position=0;if(position<s.maxTranslate())position=s.maxTranslate();s.setWrapperTransition(0);s.setWrapperTranslate(position);s.updateProgress();s.updateActiveIndex();if(s.params.freeModeSticky){clearTimeout(s.mousewheel.timeout);s.mousewheel.timeout=setTimeout(function(){s.slideReset();},300);}// Return page scroll on edge positions
if(position===0||position===s.maxTranslate())return;}if(s.params.autoplay)s.stopAutoplay();if(e.preventDefault)e.preventDefault();else e.returnValue=false;return false;}s.disableMousewheelControl=function(){if(!s.mousewheel.event)return false;s.container.off(s.mousewheel.event,handleMousewheel);return true;};s.enableMousewheelControl=function(){if(!s.mousewheel.event)return false;s.container.on(s.mousewheel.event,handleMousewheel);return true;};/*=========================
        Parallax
        ===========================*/function setParallaxTransform(el,progress){el=$(el);var p,pX,pY;p=el.attr('data-swiper-parallax')||'0';pX=el.attr('data-swiper-parallax-x');pY=el.attr('data-swiper-parallax-y');if(pX||pY){pX=pX||'0';pY=pY||'0';}else{if(isH()){pX=p;pY='0';}else{pY=p;pX='0';}}if(pX.indexOf('%')>=0){pX=parseInt(pX,10)*progress+'%';}else{pX=pX*progress+'px';}if(pY.indexOf('%')>=0){pY=parseInt(pY,10)*progress+'%';}else{pY=pY*progress+'px';}el.transform('translate3d('+pX+', '+pY+',0px)');}s.parallax={setTranslate:function setTranslate(){s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){setParallaxTransform(this,s.progress);});s.slides.each(function(){var slide=$(this);slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var progress=Math.min(Math.max(slide[0].progress,-1),1);setParallaxTransform(this,progress);});});},setTransition:function setTransition(duration){if(typeof duration==='undefined')duration=s.params.speed;s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var el=$(this);var parallaxDuration=parseInt(el.attr('data-swiper-parallax-duration'),10)||duration;if(duration===0)parallaxDuration=0;el.transition(parallaxDuration);});}};/*=========================
        Plugins API. Collect all and init all plugins
        ===========================*/s._plugins=[];for(var plugin in s.plugins){var p=s.plugins[plugin](s,s.params[plugin]);if(p)s._plugins.push(p);}// Method to call all plugins event/method
s.callPlugins=function(eventName){for(var i=0;i<s._plugins.length;i++){if(eventName in s._plugins[i]){s._plugins[i][eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}}};/*=========================
        Events/Callbacks/Plugins Emitter
        ===========================*/function normalizeEventName(eventName){if(eventName.indexOf('on')!==0){if(eventName[0]!==eventName[0].toUpperCase()){eventName='on'+eventName[0].toUpperCase()+eventName.substring(1);}else{eventName='on'+eventName;}}return eventName;}s.emitterEventListeners={};s.emit=function(eventName){// Trigger callbacks
if(s.params[eventName]){s.params[eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}var i;// Trigger events
if(s.emitterEventListeners[eventName]){for(i=0;i<s.emitterEventListeners[eventName].length;i++){s.emitterEventListeners[eventName][i](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}}// Trigger plugins
if(s.callPlugins)s.callPlugins(eventName,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);};s.on=function(eventName,handler){eventName=normalizeEventName(eventName);if(!s.emitterEventListeners[eventName])s.emitterEventListeners[eventName]=[];s.emitterEventListeners[eventName].push(handler);return s;};s.off=function(eventName,handler){var i;eventName=normalizeEventName(eventName);if(typeof handler==='undefined'){// Remove all handlers for such event
s.emitterEventListeners[eventName]=[];return s;}if(!s.emitterEventListeners[eventName]||s.emitterEventListeners[eventName].length===0)return;for(i=0;i<s.emitterEventListeners[eventName].length;i++){if(s.emitterEventListeners[eventName][i]===handler)s.emitterEventListeners[eventName].splice(i,1);}return s;};s.once=function(eventName,handler){eventName=normalizeEventName(eventName);var _handler=function _handler(){handler(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);s.off(eventName,_handler);};s.on(eventName,_handler);return s;};// Accessibility tools
s.a11y={makeFocusable:function makeFocusable($el){$el.attr('tabIndex','0');return $el;},addRole:function addRole($el,role){$el.attr('role',role);return $el;},addLabel:function addLabel($el,label){$el.attr('aria-label',label);return $el;},disable:function disable($el){$el.attr('aria-disabled',true);return $el;},enable:function enable($el){$el.attr('aria-disabled',false);return $el;},onEnterKey:function onEnterKey(event){if(event.keyCode!==13)return;if($(event.target).is(s.params.nextButton)){s.onClickNext(event);if(s.isEnd){s.a11y.notify(s.params.lastSlideMessage);}else{s.a11y.notify(s.params.nextSlideMessage);}}else if($(event.target).is(s.params.prevButton)){s.onClickPrev(event);if(s.isBeginning){s.a11y.notify(s.params.firstSlideMessage);}else{s.a11y.notify(s.params.prevSlideMessage);}}if($(event.target).is('.'+s.params.bulletClass)){$(event.target)[0].click();}},liveRegion:$('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),notify:function notify(message){var notification=s.a11y.liveRegion;if(notification.length===0)return;notification.html('');notification.html(message);},init:function init(){// Setup accessibility
if(s.params.nextButton){var nextButton=$(s.params.nextButton);s.a11y.makeFocusable(nextButton);s.a11y.addRole(nextButton,'button');s.a11y.addLabel(nextButton,s.params.nextSlideMessage);}if(s.params.prevButton){var prevButton=$(s.params.prevButton);s.a11y.makeFocusable(prevButton);s.a11y.addRole(prevButton,'button');s.a11y.addLabel(prevButton,s.params.prevSlideMessage);}$(s.container).append(s.a11y.liveRegion);},initPagination:function initPagination(){if(s.params.pagination&&s.params.paginationClickable&&s.bullets&&s.bullets.length){s.bullets.each(function(){var bullet=$(this);s.a11y.makeFocusable(bullet);s.a11y.addRole(bullet,'button');s.a11y.addLabel(bullet,s.params.paginationBulletMessage.replace(/{{index}}/,bullet.index()+1));});}},destroy:function destroy(){if(s.a11y.liveRegion&&s.a11y.liveRegion.length>0)s.a11y.liveRegion.remove();}};/*=========================
        Init/Destroy
        ===========================*/s.init=function(){if(s.params.loop)s.createLoop();s.updateContainerSize();s.updateSlidesSize();s.updatePagination();if(s.params.scrollbar&&s.scrollbar){s.scrollbar.set();}if(s.params.effect!=='slide'&&s.effects[s.params.effect]){if(!s.params.loop)s.updateProgress();s.effects[s.params.effect].setTranslate();}if(s.params.loop){s.slideTo(s.params.initialSlide+s.loopedSlides,0,s.params.runCallbacksOnInit);}else{s.slideTo(s.params.initialSlide,0,s.params.runCallbacksOnInit);if(s.params.initialSlide===0){if(s.parallax&&s.params.parallax)s.parallax.setTranslate();if(s.lazy&&s.params.lazyLoading){s.lazy.load();s.lazy.initialImageLoaded=true;}}}s.attachEvents();if(s.params.observer&&s.support.observer){s.initObservers();}if(s.params.preloadImages&&!s.params.lazyLoading){s.preloadImages();}if(s.params.autoplay){s.startAutoplay();}if(s.params.keyboardControl){if(s.enableKeyboardControl)s.enableKeyboardControl();}if(s.params.mousewheelControl){if(s.enableMousewheelControl)s.enableMousewheelControl();}if(s.params.hashnav){if(s.hashnav)s.hashnav.init();}if(s.params.a11y&&s.a11y)s.a11y.init();s.emit('onInit',s);};// Cleanup dynamic styles
s.cleanupStyles=function(){// Container
s.container.removeClass(s.classNames.join(' ')).removeAttr('style');// Wrapper
s.wrapper.removeAttr('style');// Slides
if(s.slides&&s.slides.length){s.slides.removeClass([s.params.slideVisibleClass,s.params.slideActiveClass,s.params.slideNextClass,s.params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-column').removeAttr('data-swiper-row');}// Pagination/Bullets
if(s.paginationContainer&&s.paginationContainer.length){s.paginationContainer.removeClass(s.params.paginationHiddenClass);}if(s.bullets&&s.bullets.length){s.bullets.removeClass(s.params.bulletActiveClass);}// Buttons
if(s.params.prevButton)$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.nextButton)$(s.params.nextButton).removeClass(s.params.buttonDisabledClass);// Scrollbar
if(s.params.scrollbar&&s.scrollbar){if(s.scrollbar.track&&s.scrollbar.track.length)s.scrollbar.track.removeAttr('style');if(s.scrollbar.drag&&s.scrollbar.drag.length)s.scrollbar.drag.removeAttr('style');}};// Destroy
s.destroy=function(deleteInstance,cleanupStyles){// Detach evebts
s.detachEvents();// Stop autoplay
s.stopAutoplay();// Destroy loop
if(s.params.loop){s.destroyLoop();}// Cleanup styles
if(cleanupStyles){s.cleanupStyles();}// Disconnect observer
s.disconnectObservers();// Disable keyboard/mousewheel
if(s.params.keyboardControl){if(s.disableKeyboardControl)s.disableKeyboardControl();}if(s.params.mousewheelControl){if(s.disableMousewheelControl)s.disableMousewheelControl();}// Disable a11y
if(s.params.a11y&&s.a11y)s.a11y.destroy();// Destroy callback
s.emit('onDestroy');// Delete instance
if(deleteInstance!==false)s=null;};s.init();// Return swiper instance
return s;};/*==================================================
      Prototype
  ====================================================*/Swiper.prototype={isSafari:function(){var ua=navigator.userAgent.toLowerCase();return ua.indexOf('safari')>=0&&ua.indexOf('chrome')<0&&ua.indexOf('android')<0;}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),isArray:function isArray(arr){return Object.prototype.toString.apply(arr)==='[object Array]';},/*==================================================
      Browser
      ====================================================*/browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1},/*==================================================
      Devices
      ====================================================*/device:function(){var ua=navigator.userAgent;var android=ua.match(/(Android);?[\s\/]+([\d.]+)?/);var ipad=ua.match(/(iPad).*OS\s([\d_]+)/);var ipod=ua.match(/(iPod)(.*OS\s([\d_]+))?/);var iphone=!ipad&&ua.match(/(iPhone\sOS)\s([\d_]+)/);return{ios:ipad||iphone||ipod,android:android};}(),/*==================================================
      Feature Detection
      ====================================================*/support:{touch:window.Modernizr&&Modernizr.touch===true||function(){return!!('ontouchstart'in window||window.DocumentTouch&&document instanceof DocumentTouch);}(),transforms3d:window.Modernizr&&Modernizr.csstransforms3d===true||function(){var div=document.createElement('div').style;return'webkitPerspective'in div||'MozPerspective'in div||'OPerspective'in div||'MsPerspective'in div||'perspective'in div;}(),flexbox:function(){var div=document.createElement('div').style;var styles='alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient'.split(' ');for(var i=0;i<styles.length;i++){if(styles[i]in div)return true;}}(),observer:function(){return'MutationObserver'in window||'WebkitMutationObserver'in window;}()},/*==================================================
      Plugins
      ====================================================*/plugins:{}};/*===========================
  Dom7 Library
  ===========================*/var Dom7=function(){var Dom7=function Dom7(arr){var _this=this,i=0;// Create array-like object
for(i=0;i<arr.length;i++){_this[i]=arr[i];}_this.length=arr.length;// Return collection with methods
return this;};var $=function $(selector,context){var arr=[],i=0;if(selector&&!context){if(selector instanceof Dom7){return selector;}}if(selector){// String
if(typeof selector==='string'){var els,tempParent,html=selector.trim();if(html.indexOf('<')>=0&&html.indexOf('>')>=0){var toCreate='div';if(html.indexOf('<li')===0)toCreate='ul';if(html.indexOf('<tr')===0)toCreate='tbody';if(html.indexOf('<td')===0||html.indexOf('<th')===0)toCreate='tr';if(html.indexOf('<tbody')===0)toCreate='table';if(html.indexOf('<option')===0)toCreate='select';tempParent=document.createElement(toCreate);tempParent.innerHTML=selector;for(i=0;i<tempParent.childNodes.length;i++){arr.push(tempParent.childNodes[i]);}}else{if(!context&&selector[0]==='#'&&!selector.match(/[ .<>:~]/)){// Pure ID selector
els=[document.getElementById(selector.split('#')[1])];}else{// Other selectors
els=(context||document).querySelectorAll(selector);}for(i=0;i<els.length;i++){if(els[i])arr.push(els[i]);}}}// Node/element
else if(selector.nodeType||selector===window||selector===document){arr.push(selector);}//Array of elements or instance of Dom
else if(selector.length>0&&selector[0].nodeType){for(i=0;i<selector.length;i++){arr.push(selector[i]);}}}return new Dom7(arr);};Dom7.prototype={// Classes and attriutes
addClass:function addClass(className){if(typeof className==='undefined'){return this;}var classes=className.split(' ');for(var i=0;i<classes.length;i++){for(var j=0;j<this.length;j++){this[j].classList.add(classes[i]);}}return this;},removeClass:function removeClass(className){var classes=className.split(' ');for(var i=0;i<classes.length;i++){for(var j=0;j<this.length;j++){this[j].classList.remove(classes[i]);}}return this;},hasClass:function hasClass(className){if(!this[0])return false;else return this[0].classList.contains(className);},toggleClass:function toggleClass(className){var classes=className.split(' ');for(var i=0;i<classes.length;i++){for(var j=0;j<this.length;j++){this[j].classList.toggle(classes[i]);}}return this;},attr:function attr(attrs,value){if(arguments.length===1&&typeof attrs==='string'){// Get attr
if(this[0])return this[0].getAttribute(attrs);else return undefined;}else{// Set attrs
for(var i=0;i<this.length;i++){if(arguments.length===2){// String
this[i].setAttribute(attrs,value);}else{// Object
for(var attrName in attrs){this[i][attrName]=attrs[attrName];this[i].setAttribute(attrName,attrs[attrName]);}}}return this;}},removeAttr:function removeAttr(attr){for(var i=0;i<this.length;i++){this[i].removeAttribute(attr);}return this;},data:function data(key,value){if(typeof value==='undefined'){// Get value
if(this[0]){var dataKey=this[0].getAttribute('data-'+key);if(dataKey)return dataKey;else if(this[0].dom7ElementDataStorage&&key in this[0].dom7ElementDataStorage)return this[0].dom7ElementDataStorage[key];else return undefined;}else return undefined;}else{// Set value
for(var i=0;i<this.length;i++){var el=this[i];if(!el.dom7ElementDataStorage)el.dom7ElementDataStorage={};el.dom7ElementDataStorage[key]=value;}return this;}},// Transforms
transform:function transform(_transform){for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransform=elStyle.MsTransform=elStyle.msTransform=elStyle.MozTransform=elStyle.OTransform=elStyle.transform=_transform;}return this;},transition:function transition(duration){if(typeof duration!=='string'){duration=duration+'ms';}for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransitionDuration=elStyle.MsTransitionDuration=elStyle.msTransitionDuration=elStyle.MozTransitionDuration=elStyle.OTransitionDuration=elStyle.transitionDuration=duration;}return this;},//Events
on:function on(eventName,targetSelector,listener,capture){function handleLiveEvent(e){var target=e.target;if($(target).is(targetSelector))listener.call(target,e);else{var parents=$(target).parents();for(var k=0;k<parents.length;k++){if($(parents[k]).is(targetSelector))listener.call(parents[k],e);}}}var events=eventName.split(' ');var i,j;for(i=0;i<this.length;i++){if(typeof targetSelector==='function'||targetSelector===false){// Usual events
if(typeof targetSelector==='function'){listener=arguments[1];capture=arguments[2]||false;}for(j=0;j<events.length;j++){this[i].addEventListener(events[j],listener,capture);}}else{//Live events
for(j=0;j<events.length;j++){if(!this[i].dom7LiveListeners)this[i].dom7LiveListeners=[];this[i].dom7LiveListeners.push({listener:listener,liveListener:handleLiveEvent});this[i].addEventListener(events[j],handleLiveEvent,capture);}}}return this;},off:function off(eventName,targetSelector,listener,capture){var events=eventName.split(' ');for(var i=0;i<events.length;i++){for(var j=0;j<this.length;j++){if(typeof targetSelector==='function'||targetSelector===false){// Usual events
if(typeof targetSelector==='function'){listener=arguments[1];capture=arguments[2]||false;}this[j].removeEventListener(events[i],listener,capture);}else{// Live event
if(this[j].dom7LiveListeners){for(var k=0;k<this[j].dom7LiveListeners.length;k++){if(this[j].dom7LiveListeners[k].listener===listener){this[j].removeEventListener(events[i],this[j].dom7LiveListeners[k].liveListener,capture);}}}}}}return this;},once:function once(eventName,targetSelector,listener,capture){var dom=this;if(typeof targetSelector==='function'){targetSelector=false;listener=arguments[1];capture=arguments[2];}function proxy(e){listener(e);dom.off(eventName,targetSelector,proxy,capture);}dom.on(eventName,targetSelector,proxy,capture);},trigger:function trigger(eventName,eventData){for(var i=0;i<this.length;i++){var evt;try{evt=new window.CustomEvent(eventName,{detail:eventData,bubbles:true,cancelable:true});}catch(e){evt=document.createEvent('Event');evt.initEvent(eventName,true,true);evt.detail=eventData;}this[i].dispatchEvent(evt);}return this;},transitionEnd:function transitionEnd(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){/*jshint validthis:true */if(e.target!==this)return;callback.call(this,e);for(i=0;i<events.length;i++){dom.off(events[i],fireCallBack);}}if(callback){for(i=0;i<events.length;i++){dom.on(events[i],fireCallBack);}}return this;},// Sizing/Styles
width:function width(){if(this[0]===window){return window.innerWidth;}else{if(this.length>0){return parseFloat(this.css('width'));}else{return null;}}},outerWidth:function outerWidth(includeMargins){if(this.length>0){if(includeMargins)return this[0].offsetWidth+parseFloat(this.css('margin-right'))+parseFloat(this.css('margin-left'));else return this[0].offsetWidth;}else return null;},height:function height(){if(this[0]===window){return window.innerHeight;}else{if(this.length>0){return parseFloat(this.css('height'));}else{return null;}}},outerHeight:function outerHeight(includeMargins){if(this.length>0){if(includeMargins)return this[0].offsetHeight+parseFloat(this.css('margin-top'))+parseFloat(this.css('margin-bottom'));else return this[0].offsetHeight;}else return null;},offset:function offset(){if(this.length>0){var el=this[0];var box=el.getBoundingClientRect();var body=document.body;var clientTop=el.clientTop||body.clientTop||0;var clientLeft=el.clientLeft||body.clientLeft||0;var scrollTop=window.pageYOffset||el.scrollTop;var scrollLeft=window.pageXOffset||el.scrollLeft;return{top:box.top+scrollTop-clientTop,left:box.left+scrollLeft-clientLeft};}else{return null;}},css:function css(props,value){var i;if(arguments.length===1){if(typeof props==='string'){if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(props);}else{for(i=0;i<this.length;i++){for(var prop in props){this[i].style[prop]=props[prop];}}return this;}}if(arguments.length===2&&typeof props==='string'){for(i=0;i<this.length;i++){this[i].style[props]=value;}return this;}return this;},//Dom manipulation
each:function each(callback){for(var i=0;i<this.length;i++){callback.call(this[i],i,this[i]);}return this;},html:function html(_html){if(typeof _html==='undefined'){return this[0]?this[0].innerHTML:undefined;}else{for(var i=0;i<this.length;i++){this[i].innerHTML=_html;}return this;}},is:function is(selector){if(!this[0])return false;var compareWith,i;if(typeof selector==='string'){var el=this[0];if(el===document)return selector===document;if(el===window)return selector===window;if(el.matches)return el.matches(selector);else if(el.webkitMatchesSelector)return el.webkitMatchesSelector(selector);else if(el.mozMatchesSelector)return el.mozMatchesSelector(selector);else if(el.msMatchesSelector)return el.msMatchesSelector(selector);else{compareWith=$(selector);for(i=0;i<compareWith.length;i++){if(compareWith[i]===this[0])return true;}return false;}}else if(selector===document)return this[0]===document;else if(selector===window)return this[0]===window;else{if(selector.nodeType||selector instanceof Dom7){compareWith=selector.nodeType?[selector]:selector;for(i=0;i<compareWith.length;i++){if(compareWith[i]===this[0])return true;}return false;}return false;}},index:function index(){if(this[0]){var child=this[0];var i=0;while((child=child.previousSibling)!==null){if(child.nodeType===1)i++;}return i;}else return undefined;},eq:function eq(index){if(typeof index==='undefined')return this;var length=this.length;var returnIndex;if(index>length-1){return new Dom7([]);}if(index<0){returnIndex=length+index;if(returnIndex<0)return new Dom7([]);else return new Dom7([this[returnIndex]]);}return new Dom7([this[index]]);},append:function append(newChild){var i,j;for(i=0;i<this.length;i++){if(typeof newChild==='string'){var tempDiv=document.createElement('div');tempDiv.innerHTML=newChild;while(tempDiv.firstChild){this[i].appendChild(tempDiv.firstChild);}}else if(newChild instanceof Dom7){for(j=0;j<newChild.length;j++){this[i].appendChild(newChild[j]);}}else{this[i].appendChild(newChild);}}return this;},prepend:function prepend(newChild){var i,j;for(i=0;i<this.length;i++){if(typeof newChild==='string'){var tempDiv=document.createElement('div');tempDiv.innerHTML=newChild;for(j=tempDiv.childNodes.length-1;j>=0;j--){this[i].insertBefore(tempDiv.childNodes[j],this[i].childNodes[0]);}// this[i].insertAdjacentHTML('afterbegin', newChild);
}else if(newChild instanceof Dom7){for(j=0;j<newChild.length;j++){this[i].insertBefore(newChild[j],this[i].childNodes[0]);}}else{this[i].insertBefore(newChild,this[i].childNodes[0]);}}return this;},insertBefore:function insertBefore(selector){var before=$(selector);for(var i=0;i<this.length;i++){if(before.length===1){before[0].parentNode.insertBefore(this[i],before[0]);}else if(before.length>1){for(var j=0;j<before.length;j++){before[j].parentNode.insertBefore(this[i].cloneNode(true),before[j]);}}}},insertAfter:function insertAfter(selector){var after=$(selector);for(var i=0;i<this.length;i++){if(after.length===1){after[0].parentNode.insertBefore(this[i],after[0].nextSibling);}else if(after.length>1){for(var j=0;j<after.length;j++){after[j].parentNode.insertBefore(this[i].cloneNode(true),after[j].nextSibling);}}}},next:function next(selector){if(this.length>0){if(selector){if(this[0].nextElementSibling&&$(this[0].nextElementSibling).is(selector))return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}else{if(this[0].nextElementSibling)return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},nextAll:function nextAll(selector){var nextEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.nextElementSibling){var next=el.nextElementSibling;if(selector){if($(next).is(selector))nextEls.push(next);}else nextEls.push(next);el=next;}return new Dom7(nextEls);},prev:function prev(selector){if(this.length>0){if(selector){if(this[0].previousElementSibling&&$(this[0].previousElementSibling).is(selector))return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}else{if(this[0].previousElementSibling)return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},prevAll:function prevAll(selector){var prevEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.previousElementSibling){var prev=el.previousElementSibling;if(selector){if($(prev).is(selector))prevEls.push(prev);}else prevEls.push(prev);el=prev;}return new Dom7(prevEls);},parent:function parent(selector){var parents=[];for(var i=0;i<this.length;i++){if(selector){if($(this[i].parentNode).is(selector))parents.push(this[i].parentNode);}else{parents.push(this[i].parentNode);}}return $($.unique(parents));},parents:function parents(selector){var parents=[];for(var i=0;i<this.length;i++){var parent=this[i].parentNode;while(parent){if(selector){if($(parent).is(selector))parents.push(parent);}else{parents.push(parent);}parent=parent.parentNode;}}return $($.unique(parents));},find:function find(selector){var foundElements=[];for(var i=0;i<this.length;i++){var found=this[i].querySelectorAll(selector);for(var j=0;j<found.length;j++){foundElements.push(found[j]);}}return new Dom7(foundElements);},children:function children(selector){var children=[];for(var i=0;i<this.length;i++){var childNodes=this[i].childNodes;for(var j=0;j<childNodes.length;j++){if(!selector){if(childNodes[j].nodeType===1)children.push(childNodes[j]);}else{if(childNodes[j].nodeType===1&&$(childNodes[j]).is(selector))children.push(childNodes[j]);}}}return new Dom7($.unique(children));},remove:function remove(){for(var i=0;i<this.length;i++){if(this[i].parentNode)this[i].parentNode.removeChild(this[i]);}return this;},add:function add(){var dom=this;var i,j;for(i=0;i<arguments.length;i++){var toAdd=$(arguments[i]);for(j=0;j<toAdd.length;j++){dom[dom.length]=toAdd[j];dom.length++;}}return dom;}};$.fn=Dom7.prototype;$.unique=function(arr){var unique=[];for(var i=0;i<arr.length;i++){if(unique.indexOf(arr[i])===-1)unique.push(arr[i]);}return unique;};return $;}();/*===========================
   Get Dom libraries
   ===========================*/var swiperDomPlugins=['jQuery','Zepto','Dom7'];for(var i=0;i<swiperDomPlugins.length;i++){if(window[swiperDomPlugins[i]]){addLibraryPlugin(window[swiperDomPlugins[i]]);}}// Required DOM Plugins
var domLib;if(typeof Dom7==='undefined'){domLib=window.Dom7||window.Zepto||window.jQuery;}else{domLib=Dom7;}/*===========================
  Add .swiper plugin from Dom libraries
  ===========================*/function addLibraryPlugin(lib){lib.fn.swiper=function(params){var firstInstance;lib(this).each(function(){var s=new Swiper(this,params);if(!firstInstance)firstInstance=s;});return firstInstance;};}if(domLib){if(!('transitionEnd'in domLib.fn)){domLib.fn.transitionEnd=function(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){/*jshint validthis:true */if(e.target!==this)return;callback.call(this,e);for(i=0;i<events.length;i++){dom.off(events[i],fireCallBack);}}if(callback){for(i=0;i<events.length;i++){dom.on(events[i],fireCallBack);}}return this;};}if(!('transform'in domLib.fn)){domLib.fn.transform=function(transform){for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransform=elStyle.MsTransform=elStyle.msTransform=elStyle.MozTransform=elStyle.OTransform=elStyle.transform=transform;}return this;};}if(!('transition'in domLib.fn)){domLib.fn.transition=function(duration){if(typeof duration!=='string'){duration=duration+'ms';}for(var i=0;i<this.length;i++){var elStyle=this[i].style;elStyle.webkitTransitionDuration=elStyle.MsTransitionDuration=elStyle.msTransitionDuration=elStyle.MozTransitionDuration=elStyle.OTransitionDuration=elStyle.transitionDuration=duration;}return this;};}}

/***/ },
/* 907 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tab__ = __webpack_require__(320);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return TabButton; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




/**
 * @private
 */
var TabButton = function (_Ion) {
    _inherits(TabButton, _Ion);

    function TabButton(config, elementRef) {
        _classCallCheck(this, TabButton);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabButton).call(this, elementRef));

        _this.ionSelect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        _this.disHover = config.get('hoverCSS') === false;
        _this.layout = config.get('tabbarLayout');
        return _this;
    }

    _createClass(TabButton, [{
        key: "ngOnInit",
        value: function ngOnInit() {
            this.tab.btn = this;
            this.layout = this.tab.parent.tabbarLayout || this.layout;
            this.hasTitle = !!this.tab.tabTitle;
            this.hasIcon = !!this.tab.tabIcon && this.layout !== 'icon-hide';
            this.hasTitleOnly = this.hasTitle && !this.hasIcon;
            this.hasIconOnly = this.hasIcon && !this.hasTitle;
            this.hasBadge = !!this.tab.tabBadge;
        }
    }, {
        key: "onClick",
        value: function onClick(ev) {
            this.ionSelect.emit(this.tab);
            ev.preventDefault();
        }
    }]);

    return TabButton;
}(__WEBPACK_IMPORTED_MODULE_2__ion__["a" /* Ion */]);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), __metadata('design:type', typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__tab__["a" /* Tab */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__tab__["a" /* Tab */]) === 'function' && _a || Object)], TabButton.prototype, "tab", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), __metadata('design:type', typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === 'function' && _b || Object)], TabButton.prototype, "ionSelect", void 0);
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], TabButton.prototype, "onClick", null);
TabButton = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: '.tab-button',
    host: {
        '[attr.id]': 'tab._btnId',
        '[attr.aria-controls]': 'tab._panelId',
        '[attr.aria-selected]': 'tab.isSelected',
        '[class.has-title]': 'hasTitle',
        '[class.has-icon]': 'hasIcon',
        '[class.has-title-only]': 'hasTitleOnly',
        '[class.icon-only]': 'hasIconOnly',
        '[class.has-badge]': 'hasBadge',
        '[class.disable-hover]': 'disHover'
    }
}), __metadata('design:paramtypes', [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__config_config__["Config"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _d || Object])], TabButton);
var _a, _b, _c, _d;

/***/ },
/* 908 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return TabHighlight; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @private
 */
var TabHighlight = function () {
    function TabHighlight(_elementRef) {
        _classCallCheck(this, TabHighlight);

        this._elementRef = _elementRef;
    }

    _createClass(TabHighlight, [{
        key: "select",
        value: function select(tab) {
            var _this = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["rafFrames"])(3, function () {
                var d = tab.btn.getDimensions();
                var ele = _this._elementRef.nativeElement;
                ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
                if (!_this._init) {
                    _this._init = true;
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["rafFrames"])(6, function () {
                        ele.classList.add('animate');
                    });
                }
            });
        }
    }]);

    return TabHighlight;
}();
TabHighlight = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'tab-highlight'
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object])], TabHighlight);
var _a;

/***/ },
/* 909 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__activator__ = __webpack_require__(496);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return RippleActivator; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



/**
 * @private
 */
var RippleActivator = function (_Activator) {
    _inherits(RippleActivator, _Activator);

    function RippleActivator(app, config) {
        _classCallCheck(this, RippleActivator);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(RippleActivator).call(this, app, config));
    }

    _createClass(RippleActivator, [{
        key: 'downAction',
        value: function downAction(ev, activatableEle, startCoord) {
            var self = this;
            if (self.disableActivated(ev)) {
                return;
            }
            // queue to have this element activated
            self._queue.push(activatableEle);
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["nativeRaf"])(function () {
                for (var i = 0; i < self._queue.length; i++) {
                    var queuedEle = self._queue[i];
                    if (queuedEle && queuedEle.parentNode) {
                        self._active.push(queuedEle);
                        // DOM WRITE
                        queuedEle.classList.add(self._css);
                        var j = queuedEle.childElementCount;
                        while (j--) {
                            var rippleEle = queuedEle.children[j];
                            if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
                                // DOM WRITE
                                rippleEle.style.left = '-9999px';
                                rippleEle.style.opacity = '';
                                rippleEle.style[__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transform] = 'scale(0.001) translateZ(0px)';
                                rippleEle.style[__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transition] = '';
                                // DOM READ
                                var clientRect = activatableEle.getBoundingClientRect();
                                rippleEle.$top = clientRect.top;
                                rippleEle.$left = clientRect.left;
                                rippleEle.$width = clientRect.width;
                                rippleEle.$height = clientRect.height;
                                break;
                            }
                        }
                    }
                }
                self._queue = [];
            });
        }
    }, {
        key: 'upAction',
        value: function upAction(ev, activatableEle, startCoord) {
            var self = this;
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["hasPointerMoved"])(6, startCoord, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["pointerCoord"])(ev))) {
                var i = activatableEle.childElementCount;
                while (i--) {
                    var rippleEle = activatableEle.children[i];
                    if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
                        var clientPointerX = startCoord.x - rippleEle.$left;
                        var clientPointerY = startCoord.y - rippleEle.$top;
                        var x = Math.max(Math.abs(rippleEle.$width - clientPointerX), clientPointerX) * 2;
                        var y = Math.max(Math.abs(rippleEle.$height - clientPointerY), clientPointerY) * 2;
                        var diameter = Math.min(Math.max(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), 64), 240);
                        if (activatableEle.hasAttribute('ion-item')) {
                            diameter = Math.min(diameter, 140);
                        }
                        var radius = Math.sqrt(rippleEle.$width + rippleEle.$height);
                        var scaleTransitionDuration = Math.max(1600 * Math.sqrt(radius / TOUCH_DOWN_ACCEL) + 0.5, 260);
                        var opacityTransitionDuration = scaleTransitionDuration * 0.7;
                        var opacityTransitionDelay = scaleTransitionDuration - opacityTransitionDuration;
                        // DOM WRITE
                        rippleEle.style.width = rippleEle.style.height = diameter + 'px';
                        rippleEle.style.marginTop = rippleEle.style.marginLeft = -(diameter / 2) + 'px';
                        rippleEle.style.left = clientPointerX + 'px';
                        rippleEle.style.top = clientPointerY + 'px';
                        rippleEle.style.opacity = '0';
                        rippleEle.style[__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transform] = 'scale(1) translateZ(0px)';
                        rippleEle.style[__WEBPACK_IMPORTED_MODULE_1__util_dom__["CSS"].transition] = 'transform ' + scaleTransitionDuration + 'ms,opacity ' + opacityTransitionDuration + 'ms ' + opacityTransitionDelay + 'ms';
                    }
                }
            }
            _get(Object.getPrototypeOf(RippleActivator.prototype), 'upAction', this).call(this, ev, activatableEle, startCoord);
        }
    }, {
        key: 'deactivate',
        value: function deactivate() {
            // remove the active class from all active elements
            var self = this;
            self._queue = [];
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["rafFrames"])(2, function () {
                for (var i = 0; i < self._active.length; i++) {
                    self._active[i].classList.remove(self._css);
                }
                self._active = [];
            });
        }
    }]);

    return RippleActivator;
}(__WEBPACK_IMPORTED_MODULE_0__activator__["a" /* Activator */]);
var TOUCH_DOWN_ACCEL = 300;

/***/ },
/* 910 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config_config__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__nav_nav_controller__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__nav_nav_params__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__transitions_transition__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__ = __webpack_require__(33);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return Toast; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @name Toast
 * @description
 * A Toast is a subtle notification commonly used in modern applications.
 * It can be used to provide feedback about an operation or to
 * display a system message. The toast appears on top of the app's content,
 * and can be dismissed by the app to resume user interaction with
 * the app.
 *
 * ### Creating
 * All of the toast options should be passed in the first argument of
 * the create method: `Toast.create(opts)`. The message to display should be
 * passed in the `message` property. The `showCloseButton` option can be set to
 * true in order to display a close button on the toast. See the [create](#create)
 * method below for all available options.
 *
 * ### Positioning
 * Toasts can be positioned at the top, bottom or middle of the
 * view port. The position can be passed to the `Toast.create(opts)` method.
 * The position option is a string, and the values accepted are `top`, `bottom` and `middle`.
 * If the position is not specified, the toast will be displayed at the bottom of the view port.
 *
 * ### Dismissing
 * The toast can be dismissed automatically after a specific amount of time
 * by passing the number of milliseconds to display it in the `duration` of
 * the toast options. If `showCloseButton` is set to true, then the close button
 * will dismiss the toast. To dismiss the toast after creation, call the `dismiss()`
 * method on the Toast instance. The `onDismiss` function can be called to perform an action after the toast
 * is dismissed.
 *
 * @usage
 * ```ts
 * constructor(nav: NavController) {
 *   this.nav = nav;
 * }
 *
 * presentToast() {
 *   let toast = Toast.create({
 *     message: 'User was added successfully',
 *     duration: 3000,
 *     position: 'top'
 *   });
 *
 *   toast.onDismiss(() => {
 *     console.log('Dismissed toast');
 *   });
 *
 *   this.nav.present(toast);
 * }
 * ```
 *
 * @demo /docs/v2/demos/toast/
 */
var Toast = function (_ViewController) {
    _inherits(Toast, _ViewController);

    function Toast() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, Toast);

        opts.dismissOnPageChange = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__["isPresent"])(opts.dismissOnPageChange) ? !!opts.dismissOnPageChange : false;

        // set the position to the bottom if not provided

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Toast).call(this, ToastCmp, opts));

        if (!opts.position || !_this.isValidPosition(opts.position)) {
            opts.position = TOAST_POSITION_BOTTOM;
        }
        _this.isOverlay = true;
        _this.usePortal = true;
        // by default, toasts should not fire lifecycle events of other views
        // for example, when an toast enters, the current active view should
        // not fire its lifecycle events because it's not conceptually leaving
        _this.fireOtherLifecycles = false;
        return _this;
    }
    /**
    * @private
    */

    _createClass(Toast, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = 'toast' + (direction === 'back' ? 'Leave' : 'Enter');
            return this._nav && this._nav.config.get(key);
        }
        /**
        * @private
        */

    }, {
        key: "isValidPosition",
        value: function isValidPosition(position) {
            return position === TOAST_POSITION_TOP || position === TOAST_POSITION_MIDDLE || position === TOAST_POSITION_BOTTOM;
        }
        /**
         * @param {string} message  Toast message content
         */

    }, {
        key: "setMessage",
        value: function setMessage(message) {
            this.data.message = message;
        }
        /**
         *
         *  Toast options
         *
         *  | Property              | Type      | Default         | Description                                                                                                   |
         *  |-----------------------|-----------|-----------------|---------------------------------------------------------------------------------------------------------------|
         *  | message               | `string`  | -               | The message for the toast. Long strings will wrap and the toast container will expand.                        |
         *  | duration              | `number`  | -               | How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.  |
         *  | position              | `string`  | "bottom"        | The position of the toast on the screen. Accepted values: "top", "middle", "bottom".                          |
         *  | cssClass              | `string`  | -               | Any additional class for custom styles.                                                                       |
         *  | showCloseButton       | `boolean` | false           | Whether or not to show a button to close the toast.                                                           |
         *  | closeButtonText       | `string`  | "Close"         | Text to display in the close button.                                                                          |
         *  | dismissOnPageChange   | `boolean` | false           | Whether to dismiss the toast when navigating to a new page.                                                   |
         *
         * @param {object} opts Toast options. See the above table for available options.
         */

    }], [{
        key: "create",
        value: function create() {
            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            return new Toast(opts);
        }
    }]);

    return Toast;
}(__WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]);
/* Don't expose these for now - let's move to an enum or something long term */
var TOAST_POSITION_TOP = 'top';
var TOAST_POSITION_MIDDLE = 'middle';
var TOAST_POSITION_BOTTOM = 'bottom';
/**
* @private
*/
var ToastCmp = function () {
    function ToastCmp(_nav, _viewCtrl, _config, _elementRef, params, renderer) {
        _classCallCheck(this, ToastCmp);

        this._nav = _nav;
        this._viewCtrl = _viewCtrl;
        this._config = _config;
        this._elementRef = _elementRef;
        this.dismissTimeout = undefined;
        this.d = params.data;
        if (this.d.cssClass) {
            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
        }
        this.id = ++toastIds;
        if (this.d.message) {
            this.hdrId = 'toast-hdr-' + this.id;
        }
    }

    _createClass(ToastCmp, [{
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            var _this2 = this;

            // if there's a `duration` set, automatically dismiss.
            if (this.d.duration) {
                this.dismissTimeout = setTimeout(function () {
                    _this2.dismiss('backdrop');
                }, this.d.duration);
            }
            this.enabled = true;
        }
    }, {
        key: "ionViewDidEnter",
        value: function ionViewDidEnter() {
            var _document = document;
            var activeElement = _document.activeElement;

            if (activeElement) {
                activeElement.blur();
            }
            var focusableEle = this._elementRef.nativeElement.querySelector('button');
            if (focusableEle) {
                focusableEle.focus();
            }
        }
    }, {
        key: "cbClick",
        value: function cbClick() {
            if (this.enabled) {
                this.dismiss('close');
            }
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            clearTimeout(this.dismissTimeout);
            this.dismissTimeout = undefined;
            return this._viewCtrl.dismiss(null, role);
        }
    }]);

    return ToastCmp;
}();
ToastCmp = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-toast',
    template: "\n    <div class=\"toast-wrapper\"\n      [class.toast-bottom]=\"d.position === 'bottom'\"\n      [class.toast-middle]=\"d.position === 'middle'\"\n      [class.toast-top]=\"d.position === 'top'\"\n      >\n      <div class=\"toast-container\">\n        <div class=\"toast-message\" id=\"{{hdrId}}\" *ngIf=\"d.message\">{{d.message}}</div>\n        <button clear class=\"toast-button\" *ngIf=\"d.showCloseButton\" (click)=\"cbClick()\">\n          {{ d.closeButtonText || 'Close' }}\n         </button>\n      </div>\n    </div>\n  ",
    host: {
        'role': 'dialog',
        '[attr.aria-labelledby]': 'hdrId',
        '[attr.aria-describedby]': 'descId'
    },
    directives: [__WEBPACK_IMPORTED_MODULE_1__angular_common__["NgIf"]]
}), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__nav_nav_controller__["a" /* NavController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__nav_nav_controller__["a" /* NavController */]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_8__nav_view_controller__["a" /* ViewController */]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__config_config__["Config"]) === 'function' && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_6__nav_nav_params__["a" /* NavParams */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_6__nav_nav_params__["a" /* NavParams */]) === 'function' && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"]) === 'function' && _f || Object])], ToastCmp);

var ToastSlideIn = function (_Transition) {
    _inherits(ToastSlideIn, _Transition);

    function ToastSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ToastSlideIn);

        // DOM READS

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var wrapperEle = ele.querySelector('.toast-wrapper');
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
            // top
            // by default, it is -100% hidden (above the screen)
            // so move from that to 10px below top: 0px;
            wrapper.fromTo('translateY', '-100%', 10 + "px");
        } else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
            // Middle
            // just center it and fade it in
            var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
            // DOM WRITE
            wrapperEle.style.top = topPosition + "px";
            wrapper.fromTo('opacity', 0.01, 1);
        } else {
            // bottom
            // by default, it is 100% hidden (below the screen),
            // so move from that to 10 px above bottom: 0px
            wrapper.fromTo('translateY', '100%', 0 - 10 + "px");
        }
        _this3.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(wrapper);
        return _this3;
    }

    return ToastSlideIn;
}(__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"]);

var ToastSlideOut = function (_Transition2) {
    _inherits(ToastSlideOut, _Transition2);

    function ToastSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ToastSlideOut);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var wrapperEle = ele.querySelector('.toast-wrapper');
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
            // top
            // reverse arguments from enter transition
            wrapper.fromTo('translateY', 10 + "px", '-100%');
        } else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
            // Middle
            // just fade it out
            wrapper.fromTo('opacity', 0.99, 0);
        } else {
            // bottom
            // reverse arguments from enter transition
            wrapper.fromTo('translateY', 0 - 10 + "px", '100%');
        }
        _this4.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(wrapper);
        return _this4;
    }

    return ToastSlideOut;
}(__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"]);

var ToastMdSlideIn = function (_Transition3) {
    _inherits(ToastMdSlideIn, _Transition3);

    function ToastMdSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ToastMdSlideIn);

        // DOM reads

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastMdSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var wrapperEle = ele.querySelector('.toast-wrapper');
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
            // top
            // by default, it is -100% hidden (above the screen)
            // so move from that to top: 0px;
            wrapper.fromTo('translateY', '-100%', "0%");
        } else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
            // Middle
            // just center it and fade it in
            var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
            // DOM WRITE
            wrapperEle.style.top = topPosition + "px";
            wrapper.fromTo('opacity', 0.01, 1);
        } else {
            // bottom
            // by default, it is 100% hidden (below the screen),
            // so move from that to bottom: 0px
            wrapper.fromTo('translateY', '100%', "0%");
        }
        _this5.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(wrapper);
        return _this5;
    }

    return ToastMdSlideIn;
}(__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"]);

var ToastMdSlideOut = function (_Transition4) {
    _inherits(ToastMdSlideOut, _Transition4);

    function ToastMdSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ToastMdSlideOut);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastMdSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var wrapperEle = ele.querySelector('.toast-wrapper');
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
            // top
            // reverse arguments from enter transition
            wrapper.fromTo('translateY', 0 + "%", '-100%');
        } else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
            // Middle
            // just fade it out
            wrapper.fromTo('opacity', 0.99, 0);
        } else {
            // bottom
            // reverse arguments from enter transition
            wrapper.fromTo('translateY', 0 + "%", '100%');
        }
        _this6.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(wrapper);
        return _this6;
    }

    return ToastMdSlideOut;
}(__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"]);

var ToastWpPopIn = function (_Transition5) {
    _inherits(ToastWpPopIn, _Transition5);

    function ToastWpPopIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ToastWpPopIn);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastWpPopIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var wrapperEle = ele.querySelector('.toast-wrapper');
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
            // top
            wrapper.fromTo('opacity', 0.01, 1);
            wrapper.fromTo('scale', 1.3, 1);
        } else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
            // Middle
            // just center it and fade it in
            var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
            // DOM WRITE
            wrapperEle.style.top = topPosition + "px";
            wrapper.fromTo('opacity', 0.01, 1);
            wrapper.fromTo('scale', 1.3, 1);
        } else {
            // bottom
            wrapper.fromTo('opacity', 0.01, 1);
            wrapper.fromTo('scale', 1.3, 1);
        }
        _this7.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(wrapper);
        return _this7;
    }

    return ToastWpPopIn;
}(__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"]);

var ToastWpPopOut = function (_Transition6) {
    _inherits(ToastWpPopOut, _Transition6);

    function ToastWpPopOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ToastWpPopOut);

        // DOM reads

        var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastWpPopOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var wrapperEle = ele.querySelector('.toast-wrapper');
        var wrapper = new __WEBPACK_IMPORTED_MODULE_2__animations_animation__["Animation"](wrapperEle);
        if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
            // top
            // reverse arguments from enter transition
            wrapper.fromTo('opacity', 0.99, 0);
            wrapper.fromTo('scale', 1, 1.3);
        } else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
            // Middle
            // just fade it out
            wrapper.fromTo('opacity', 0.99, 0);
            wrapper.fromTo('scale', 1, 1.3);
        } else {
            // bottom
            // reverse arguments from enter transition
            wrapper.fromTo('opacity', 0.99, 0);
            wrapper.fromTo('scale', 1, 1.3);
        }
        // DOM writes
        var EASE = 'ease-out';
        var DURATION = 150;
        _this8.easing(EASE).duration(DURATION).add(wrapper);
        return _this8;
    }

    return ToastWpPopOut;
}(__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"]);

__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].register('toast-slide-in', ToastSlideIn);
__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].register('toast-slide-out', ToastSlideOut);
__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].register('toast-md-slide-in', ToastMdSlideIn);
__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].register('toast-md-slide-out', ToastMdSlideOut);
__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].register('toast-wp-slide-out', ToastWpPopOut);
__WEBPACK_IMPORTED_MODULE_7__transitions_transition__["Transition"].register('toast-wp-slide-in', ToastWpPopIn);
var toastIds = -1;
var _a, _b, _c, _d, _e, _f;

/***/ },
/* 911 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__button_button__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__toolbar__ = __webpack_require__(151);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ToolbarItem; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};




/**
 * @private
 */
var ToolbarItem = function () {
    function ToolbarItem(elementRef, toolbar, navbar) {
        _classCallCheck(this, ToolbarItem);

        toolbar && toolbar.addItemRef(elementRef);
        navbar && navbar.addItemRef(elementRef);
        this.inToolbar = !!(toolbar || navbar);
    }

    _createClass(ToolbarItem, [{
        key: "_buttons",
        set: function set(buttons) {
            if (this.inToolbar) {
                __WEBPACK_IMPORTED_MODULE_1__button_button__["a" /* Button */].setRoles(buttons, 'bar-button');
            }
        }
    }]);

    return ToolbarItem;
}();
__decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"])(__WEBPACK_IMPORTED_MODULE_1__button_button__["a" /* Button */]), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], ToolbarItem.prototype, "_buttons", null);
ToolbarItem = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
    selector: 'ion-buttons,[menuToggle]'
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */];
}))), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__toolbar__["b" /* Toolbar */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__toolbar__["b" /* Toolbar */]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */]) === 'function' && _c || Object])], ToolbarItem);
var _a, _b, _c;

/***/ },
/* 912 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ion__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__toolbar__ = __webpack_require__(151);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ToolbarTitle; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};




/**
 * @name Title
 * @description
 * `ion-title` is a component that sets the title of the `Toolbar` or `Navbar`
 *
 * @usage
 *
 * ```html
 * <ion-header>
 *
 *   <ion-navbar>
 *     <ion-title>Settings</ion-title>
 *   </ion-navbar>
 *
 * </ion-header>
 * ```
 *
 * Or to create a navbar with a toolbar as a subheader:
 *
 * ```html
 * <ion-header>
 *
 *   <ion-navbar>
 *     <ion-title>Main Heder</ion-title>
 *   </ion-navbar>
 *
 *   <ion-toolbar>
 *     <ion-title>Subheader</ion-title>
 *   </ion-toolbar>
 *
 * </ion-header>
 * ```
 *
 * @demo /docs/v2/demos/title/
 */
var ToolbarTitle = function (_Ion) {
    _inherits(ToolbarTitle, _Ion);

    function ToolbarTitle(_elementRef, toolbar, navbar) {
        _classCallCheck(this, ToolbarTitle);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarTitle).call(this, _elementRef));

        _this._elementRef = _elementRef;
        toolbar && toolbar.setTitleCmp(_this);
        navbar && navbar.setTitleCmp(_this);
        return _this;
    }
    /**
     * @private
     */

    _createClass(ToolbarTitle, [{
        key: "getTitleText",
        value: function getTitleText() {
            return this._elementRef.nativeElement.textContent;
        }
    }]);

    return ToolbarTitle;
}(__WEBPACK_IMPORTED_MODULE_1__ion__["a" /* Ion */]);
ToolbarTitle = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
    selector: 'ion-title',
    template: '<div class="toolbar-title">' + '<ng-content></ng-content>' + '</div>',
    changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush,
    encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
}), __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"])()), __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () {
    return __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */];
}))), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__toolbar__["b" /* Toolbar */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__toolbar__["b" /* Toolbar */]) === 'function' && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__navbar_navbar__["a" /* Navbar */]) === 'function' && _c || Object])], ToolbarTitle);
var _a, _b, _c;

/***/ },
/* 913 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_dom__ = __webpack_require__(13);
/* harmony export */ exports["b"] = processRecords;/* harmony export */ exports["c"] = populateNodeData;/* harmony export */ exports["d"] = initReadNodes;/* harmony export */ exports["g"] = updateDimensions;/* harmony export */ exports["e"] = writeToNodes;/* harmony export */ exports["h"] = adjustRendered;/* unused harmony export getVirtualHeight *//* harmony export */ exports["f"] = estimateHeight;/* harmony export */ exports["a"] = calcDimensions;/* unused harmony export VirtualContext */var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}


/**
 * NO DOM
 */
function processRecords(stopAtHeight, records, cells, headerFn, footerFn, data) {
    var record = void 0;
    var startRecordIndex = void 0;
    var previousCell = void 0;
    var tmpData = void 0;
    var lastRecordIndex = records.length - 1;
    if (cells.length) {
        // we already have cells
        previousCell = cells[cells.length - 1];
        if (previousCell.top + previousCell.height > stopAtHeight) {
            return;
        }
        startRecordIndex = previousCell.record + 1;
    } else {
        // no cells have been created yet
        previousCell = {
            row: 0,
            width: 0,
            height: 0,
            top: 0,
            left: 0,
            tmpl: -1
        };
        startRecordIndex = 0;
    }
    var processedTotal = 0;
    for (var recordIndex = startRecordIndex; recordIndex <= lastRecordIndex; recordIndex++) {
        record = records[recordIndex];
        if (headerFn) {
            tmpData = headerFn(record, recordIndex, records);
            if (tmpData !== null) {
                // add header data
                previousCell = addCell(previousCell, recordIndex, TEMPLATE_HEADER, tmpData, data.hdrWidth, data.hdrHeight, data.viewWidth);
                cells.push(previousCell);
            }
        }
        // add item data
        previousCell = addCell(previousCell, recordIndex, TEMPLATE_ITEM, null, data.itmWidth, data.itmHeight, data.viewWidth);
        cells.push(previousCell);
        if (footerFn) {
            tmpData = footerFn(record, recordIndex, records);
            if (tmpData !== null) {
                // add footer data
                previousCell = addCell(previousCell, recordIndex, TEMPLATE_FOOTER, tmpData, data.ftrWidth, data.ftrHeight, data.viewWidth);
                cells.push(previousCell);
            }
        }
        if (previousCell.record === lastRecordIndex) {
            previousCell.isLast = true;
        }
        // should always process at least 3 records
        processedTotal++;
        if (previousCell.top + previousCell.height + data.itmHeight > stopAtHeight && processedTotal > 3) {
            return;
        }
    }
}
function addCell(previousCell, recordIndex, tmpl, tmplData, cellWidth, cellHeight, viewportWidth) {
    var newCell = void 0;
    if (previousCell.left + previousCell.width + cellWidth > viewportWidth) {
        // add a new cell in a new row
        newCell = {
            record: recordIndex,
            tmpl: tmpl,
            row: previousCell.row + 1,
            width: cellWidth,
            height: cellHeight,
            top: previousCell.top + previousCell.height,
            left: 0,
            reads: 0
        };
    } else {
        // add a new cell in the same row
        newCell = {
            record: recordIndex,
            tmpl: tmpl,
            row: previousCell.row,
            width: cellWidth,
            height: cellHeight,
            top: previousCell.top,
            left: previousCell.left + previousCell.width,
            reads: 0
        };
    }
    if (tmplData) {
        newCell.data = tmplData;
    }
    return newCell;
}
/**
 * NO DOM
 */
function populateNodeData(startCellIndex, endCellIndex, viewportWidth, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp, initialLoad) {
    var madeChanges = false;
    var node = void 0;
    var availableNode = void 0;
    var cell = void 0;
    var previousCell = void 0;
    var isAlreadyRendered = void 0;
    var lastRecordIndex = records.length - 1;
    var viewInsertIndex = null;
    var totalNodes = nodes.length;
    var templateRef = void 0;
    startCellIndex = Math.max(startCellIndex, 0);
    endCellIndex = Math.min(endCellIndex, cells.length - 1);
    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {
        cell = cells[cellIndex];
        availableNode = null;
        isAlreadyRendered = false;
        // find the first one that's available
        if (!initialLoad) {
            for (var i = 0; i < totalNodes; i++) {
                node = nodes[i];
                if (cell.tmpl !== node.tmpl || i === 0 && cellIndex !== 0) {
                    // the cell must use the correct template
                    // first node can only be used by the first cell (css :first-child reasons)
                    // this node is never available to be reused
                    continue;
                } else if (node.isLastRecord) {
                    // very last record, but could be a header/item/footer
                    if (cell.record === lastRecordIndex) {
                        availableNode = nodes[i];
                        availableNode.hidden = false;
                        break;
                    }
                    // this node is for the last record, but not actually the last
                    continue;
                }
                if (node.cell === cellIndex) {
                    isAlreadyRendered = true;
                    break;
                }
                if (node.cell < startCellIndex || node.cell > endCellIndex) {
                    if (!availableNode) {
                        // havent gotten an available node yet
                        availableNode = nodes[i];
                    } else if (scrollingDown) {
                        // scrolling down
                        if (node.cell < availableNode.cell) {
                            availableNode = nodes[i];
                        }
                    } else {
                        // scrolling up
                        if (node.cell > availableNode.cell) {
                            availableNode = nodes[i];
                        }
                    }
                }
            }
            if (isAlreadyRendered) {
                continue;
            }
        }
        if (!availableNode) {
            // did not find an available node to put the cell data into
            // insert a new node before the last record nodes
            if (viewInsertIndex === null) {
                viewInsertIndex = -1;
                for (var j = totalNodes - 1; j >= 0; j--) {
                    node = nodes[j];
                    if (node && !node.isLastRecord) {
                        viewInsertIndex = viewContainer.indexOf(node.view);
                        break;
                    }
                }
            }
            // select which templateRef should be used for this cell
            templateRef = cell.tmpl === TEMPLATE_HEADER ? hdrTmp : cell.tmpl === TEMPLATE_FOOTER ? ftrTmp : itmTmp;
            if (!templateRef) {
                console.error('virtual' + (cell.tmpl === TEMPLATE_HEADER ? 'Header' : cell.tmpl === TEMPLATE_FOOTER ? 'Footer' : 'Item') + ' template required');
                continue;
            }
            availableNode = {
                tmpl: cell.tmpl,
                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)
            };
            totalNodes = nodes.push(availableNode);
        }
        // console.debug(`node was cell ${availableNode.cell} but is now ${cellIndex}, was top: ${cell.top}`);
        // assign who's the new cell index for this node
        availableNode.cell = cellIndex;
        // apply the cell's data to this node
        availableNode.view.context.$implicit = cell.data || records[cell.record];
        availableNode.view.context.index = cellIndex;
        availableNode.hasChanges = true;
        availableNode.lastTransform = null;
        madeChanges = true;
    }
    if (initialLoad) {
        // add nodes that go at the very end, and only represent the last record
        var lastNodeTempData = records[lastRecordIndex] || {};
        addLastNodes(nodes, viewContainer, TEMPLATE_HEADER, hdrTmp, lastNodeTempData);
        addLastNodes(nodes, viewContainer, TEMPLATE_ITEM, itmTmp, lastNodeTempData);
        addLastNodes(nodes, viewContainer, TEMPLATE_FOOTER, ftrTmp, lastNodeTempData);
    }
    return madeChanges;
}
function addLastNodes(nodes, viewContainer, templateType, templateRef, temporaryData) {
    if (templateRef) {
        var node = {
            tmpl: templateType,
            view: viewContainer.createEmbeddedView(templateRef),
            isLastRecord: true,
            hidden: true
        };
        node.view.context.$implicit = temporaryData;
        nodes.push(node);
    }
}
/**
 * DOM READ THEN DOM WRITE
 */
function initReadNodes(nodes, cells, data) {
    if (nodes.length && cells.length) {
        // first node
        // ******** DOM READ ****************
        cells[0].top = getElement(nodes[0]).offsetTop;
        cells[0].row = 0;
        // ******** DOM READ ****************
        updateDimensions(nodes, cells, data, true);
        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].hidden) {
                // ******** DOM WRITE ****************
                getElement(nodes[i]).classList.add('virtual-hidden');
            }
        }
    }
}
/**
 * DOM READ
 */
function updateDimensions(nodes, cells, data, initialUpdate) {
    var node = void 0;
    var element = void 0;
    var totalCells = cells.length;
    var cell = void 0;
    var previousCell = void 0;
    for (var i = 0; i < nodes.length; i++) {
        node = nodes[i];
        cell = cells[node.cell];
        // read element dimensions if they haven't been checked enough times
        if (cell && cell.reads < REQUIRED_DOM_READS && !node.hidden) {
            element = getElement(node);
            // ******** DOM READ ****************
            readElements(cell, element);
            if (initialUpdate) {
                // update estimated dimensions with more accurate dimensions
                if (cell.tmpl === TEMPLATE_HEADER) {
                    data.hdrHeight = cell.height;
                    if (cell.left === 0) {
                        data.hdrWidth = cell.width;
                    }
                } else if (cell.tmpl === TEMPLATE_FOOTER) {
                    data.ftrHeight = cell.height;
                    if (cell.left === 0) {
                        data.ftrWidth = cell.width;
                    }
                } else {
                    data.itmHeight = cell.height;
                    if (cell.left === 0) {
                        data.itmWidth = cell.width;
                    }
                }
            }
            cell.reads++;
        }
    }
    // figure out which cells are currently viewable within the viewport
    var viewableBottom = data.scrollTop + data.viewHeight;
    data.topViewCell = totalCells;
    data.bottomViewCell = 0;
    // completely realign position to ensure they're all accurately placed
    for (var i = 1; i < totalCells; i++) {
        cell = cells[i];
        previousCell = cells[i - 1];
        if (previousCell.left + previousCell.width + cell.width > data.viewWidth) {
            // new row
            cell.row++;
            cell.top = previousCell.top + previousCell.height;
            cell.left = 0;
        } else {
            // same row
            cell.row = previousCell.row;
            cell.top = previousCell.top;
            cell.left = previousCell.left + previousCell.width;
        }
        // figure out which cells are viewable within the viewport
        if (cell.top + cell.height > data.scrollTop && i < data.topViewCell) {
            data.topViewCell = i;
        } else if (cell.top < viewableBottom && i > data.bottomViewCell) {
            data.bottomViewCell = i;
        }
    }
}
/**
 * DOM READ
 */
function readElements(cell, element) {
    // ******** DOM READ ****************
    var styles = window.getComputedStyle(element);
    // ******** DOM READ ****************
    cell.left = element.offsetLeft - parseFloat(styles.marginLeft);
    // ******** DOM READ ****************
    cell.width = element.offsetWidth + parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
    // ******** DOM READ ****************
    cell.height = element.offsetHeight + parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
}
/**
 * DOM WRITE
 */
function writeToNodes(nodes, cells, totalRecords) {
    var node = void 0;
    var element = void 0;
    var cell = void 0;
    var totalCells = Math.max(totalRecords, cells.length).toString();
    var transform = void 0;
    for (var i = 0, ilen = nodes.length; i < ilen; i++) {
        node = nodes[i];
        if (!node.hidden) {
            cell = cells[node.cell];
            transform = 'translate3d(' + cell.left + 'px,' + cell.top + 'px,0px)';
            if (node.lastTransform !== transform) {
                element = getElement(node);
                if (element) {
                    // ******** DOM WRITE ****************
                    element.style[__WEBPACK_IMPORTED_MODULE_0__util_dom__["CSS"].transform] = node.lastTransform = transform;
                    // ******** DOM WRITE ****************
                    element.classList.add('virtual-position');
                    if (node.isLastRecord) {
                        // its the last record, now with data and safe to show
                        // ******** DOM WRITE ****************
                        element.classList.remove('virtual-hidden');
                    }
                    // https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
                    // ******** DOM WRITE ****************
                    element.setAttribute('aria-posinset', (node.cell + 1).toString());
                    // https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
                    // ******** DOM WRITE ****************
                    element.setAttribute('aria-setsize', totalCells);
                }
            }
        }
    }
}
/**
 * NO DOM
 */
function adjustRendered(cells, data) {
    // figure out which cells should be rendered
    var cell = void 0;
    var lastRow = -1;
    var cellsRenderHeight = 0;
    var maxRenderHeight = data.renderHeight - data.itmHeight;
    var totalCells = cells.length;
    var viewableRenderedPadding = data.itmHeight < 90 ? VIEWABLE_RENDERED_PADDING : 0;
    if (data.scrollDiff > 0) {
        // scrolling down
        data.topCell = Math.max(data.topViewCell - viewableRenderedPadding, 0);
        data.bottomCell = Math.min(data.topCell + 2, totalCells - 1);
        for (var i = data.topCell; i < totalCells; i++) {
            cell = cells[i];
            if (cell.row !== lastRow) {
                cellsRenderHeight += cell.height;
                lastRow = cell.row;
            }
            if (i > data.bottomCell) {
                data.bottomCell = i;
            }
            if (cellsRenderHeight >= maxRenderHeight) {
                break;
            }
        }
    } else {
        // scroll up
        data.bottomCell = Math.min(data.bottomViewCell + viewableRenderedPadding, totalCells - 1);
        data.topCell = Math.max(data.bottomCell - 2, 0);
        for (var i = data.bottomCell; i >= 0; i--) {
            cell = cells[i];
            if (cell.row !== lastRow) {
                cellsRenderHeight += cell.height;
                lastRow = cell.row;
            }
            if (i < data.topCell) {
                data.topCell = i;
            }
            if (cellsRenderHeight >= maxRenderHeight) {
                break;
            }
        }
    }
    // console.log(`adjustRendered topCell: ${data.topCell}, bottomCell: ${data.bottomCell}, cellsRenderHeight: ${cellsRenderHeight}, data.renderHeight: ${data.renderHeight}`);
}
/**
 * NO DOM
 */
function getVirtualHeight(totalRecords, lastCell) {
    if (lastCell.record >= totalRecords - 1) {
        return lastCell.top + lastCell.height;
    }
    var unknownRecords = totalRecords - lastCell.record - 1;
    var knownHeight = lastCell.top + lastCell.height;
    return Math.ceil(knownHeight + knownHeight / (totalRecords - unknownRecords) * unknownRecords);
}
/**
 * NO DOM
 */
function estimateHeight(totalRecords, lastCell, existingHeight, difference) {
    var newHeight = getVirtualHeight(totalRecords, lastCell);
    var percentToBottom = lastCell.record / (totalRecords - 1);
    var diff = Math.abs(existingHeight - newHeight);
    if (diff > newHeight * difference || percentToBottom > .995) {
        return newHeight;
    }
    return existingHeight;
}
/**
 * DOM READ
 */
function calcDimensions(data, viewportElement, approxItemWidth, approxItemHeight, appoxHeaderWidth, approxHeaderHeight, approxFooterWidth, approxFooterHeight, bufferRatio) {
    // get the parent container's viewport height
    // ******** DOM READ ****************
    data.viewWidth = viewportElement.offsetWidth;
    // ******** DOM READ ****************
    data.viewHeight = viewportElement.offsetHeight;
    // the height we'd like to render, which is larger than viewable
    data.renderHeight = data.viewHeight * bufferRatio;
    if (data.viewWidth > 0 && data.viewHeight > 0) {
        data.itmWidth = calcWidth(data.viewWidth, approxItemWidth);
        data.itmHeight = calcHeight(data.viewHeight, approxItemHeight);
        data.hdrWidth = calcWidth(data.viewWidth, appoxHeaderWidth);
        data.hdrHeight = calcHeight(data.viewHeight, approxHeaderHeight);
        data.ftrWidth = calcWidth(data.viewWidth, approxFooterWidth);
        data.ftrHeight = calcHeight(data.viewHeight, approxFooterHeight);
        data.valid = true;
    }
}
/**
 * NO DOM
 */
function calcWidth(viewportWidth, approxWidth) {
    if (approxWidth.indexOf('%') > 0) {
        return viewportWidth * (parseFloat(approxWidth) / 100);
    } else if (approxWidth.indexOf('px') > 0) {
        return parseFloat(approxWidth);
    }
    throw 'virtual scroll width can only use "%" or "px" units';
}
/**
 * NO DOM
 */
function calcHeight(viewportHeight, approxHeight) {
    if (approxHeight.indexOf('px') > 0) {
        return parseFloat(approxHeight);
    }
    throw 'virtual scroll height must use "px" units';
}
/**
 * NO DOM
 */
function getElement(node) {
    var rootNodes = node.view.rootNodes;
    for (var i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
}
var VirtualContext = function () {
    function VirtualContext($implicit, index, count) {
        _classCallCheck(this, VirtualContext);

        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }

    _createClass(VirtualContext, [{
        key: 'first',
        get: function get() {
            return this.index === 0;
        }
    }, {
        key: 'last',
        get: function get() {
            return this.index === this.count - 1;
        }
    }, {
        key: 'even',
        get: function get() {
            return this.index % 2 === 0;
        }
    }, {
        key: 'odd',
        get: function get() {
            return !this.even;
        }
    }]);

    return VirtualContext;
}();
var TEMPLATE_ITEM = 0;
var TEMPLATE_HEADER = 1;
var TEMPLATE_FOOTER = 2;
var VIEWABLE_RENDERED_PADDING = 3;
var REQUIRED_DOM_READS = 2;

/***/ },
/* 914 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(12);

// iOS Mode Settings
__WEBPACK_IMPORTED_MODULE_0__config__["Config"].setModeConfig('ios', {
    activator: 'highlight',
    actionSheetEnter: 'action-sheet-slide-in',
    actionSheetLeave: 'action-sheet-slide-out',
    alertEnter: 'alert-pop-in',
    alertLeave: 'alert-pop-out',
    backButtonText: 'Back',
    backButtonIcon: 'ios-arrow-back',
    iconMode: 'ios',
    loadingEnter: 'loading-pop-in',
    loadingLeave: 'loading-pop-out',
    menuType: 'reveal',
    modalEnter: 'modal-slide-in',
    modalLeave: 'modal-slide-out',
    pageTransition: 'ios-transition',
    pageTransitionDelay: 16,
    pickerEnter: 'picker-slide-in',
    pickerLeave: 'picker-slide-out',
    pickerRotateFactor: -0.46,
    popoverEnter: 'popover-pop-in',
    popoverLeave: 'popover-pop-out',
    spinner: 'ios',
    tabbarHighlight: false,
    tabbarPlacement: 'bottom',
    tabSubPages: false,
    toastEnter: 'toast-slide-in',
    toastLeave: 'toast-slide-out'
});
// Material Design Mode Settings
__WEBPACK_IMPORTED_MODULE_0__config__["Config"].setModeConfig('md', {
    activator: 'ripple',
    actionSheetEnter: 'action-sheet-md-slide-in',
    actionSheetLeave: 'action-sheet-md-slide-out',
    alertEnter: 'alert-md-pop-in',
    alertLeave: 'alert-md-pop-out',
    backButtonText: '',
    backButtonIcon: 'md-arrow-back',
    iconMode: 'md',
    loadingEnter: 'loading-md-pop-in',
    loadingLeave: 'loading-md-pop-out',
    menuType: 'overlay',
    modalEnter: 'modal-md-slide-in',
    modalLeave: 'modal-md-slide-out',
    pageTransition: 'md-transition',
    pageTransitionDelay: 64,
    pickerEnter: 'picker-slide-in',
    pickerLeave: 'picker-slide-out',
    pickerRotateFactor: 0,
    popoverEnter: 'popover-md-pop-in',
    popoverLeave: 'popover-md-pop-out',
    spinner: 'crescent',
    tabbarHighlight: true,
    tabbarPlacement: 'top',
    tabSubPages: true,
    toastEnter: 'toast-md-slide-in',
    toastLeave: 'toast-md-slide-out'
});
// Windows Mode Settings
__WEBPACK_IMPORTED_MODULE_0__config__["Config"].setModeConfig('wp', {
    activator: 'highlight',
    actionSheetEnter: 'action-sheet-wp-slide-in',
    actionSheetLeave: 'action-sheet-wp-slide-out',
    alertEnter: 'alert-wp-pop-in',
    alertLeave: 'alert-wp-pop-out',
    backButtonText: '',
    backButtonIcon: 'ios-arrow-back',
    iconMode: 'ios',
    loadingEnter: 'loading-wp-pop-in',
    loadingLeave: 'loading-wp-pop-out',
    menuType: 'overlay',
    modalEnter: 'modal-md-slide-in',
    modalLeave: 'modal-md-slide-out',
    pageTransition: 'wp-transition',
    pageTransitionDelay: 96,
    pickerEnter: 'picker-slide-in',
    pickerLeave: 'picker-slide-out',
    pickerRotateFactor: 0,
    popoverEnter: 'popover-md-pop-in',
    popoverLeave: 'popover-md-pop-out',
    spinner: 'circles',
    tabbarPlacement: 'top',
    tabSubPages: true,
    toastEnter: 'toast-wp-slide-in',
    toastLeave: 'toast-wp-slide-out'
});

/***/ },
/* 915 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export */ exports["Page"] = Page;
var _reflect = Reflect;
/**
 * @private
 */
function Page(config) {
    return function (cls) {
        // deprecated warning: added beta.8 2016-05-27
        console.warn('@Page decorator has been deprecated. Please use Angular\'s @Component instead.\nimport {Component} from \'@angular/core\';');
        config.selector = 'ion-page';
        config.host = config.host || {};
        config.host['[hidden]'] = '_hidden';
        config.host['[class.tab-subpage]'] = '_tabSubPage';
        var annotations = _reflect.getMetadata('annotations', cls) || [];
        annotations.push(new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"](config));
        _reflect.defineMetadata('annotations', annotations, cls);
        return cls;
    };
}

/***/ },
/* 916 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(6);
/* unused harmony export DIRECTION_LEFT *//* unused harmony export DIRECTION_RIGHT */
/* harmony export */ __webpack_require__.d(exports, "a", function() { return DIRECTION_HORIZONTAL; });
/* harmony export */ __webpack_require__.d(exports, "b", function() { return DIRECTION_VERTICAL; });
/* harmony export */ __webpack_require__.d(exports, "c", function() { return Hammer; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};


var win = window;
var doc = document;
/*! Hammer.JS - v2.0.6 - 2015-12-23
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2015 Jorik Tangelder;
 * Licensed under the  license */
var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = doc.createElement('div');
var TYPE_FUNCTION = 'function';
var round = Math.round;
var abs = Math.abs;
var now = Date.now;
/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}
/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}
/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;
    if (!obj) {
        return;
    }
    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}
/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;
    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;
    if (properties) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])(childP, properties);
    }
}
/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}
/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}
/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return val1 === undefined ? val2 : val1;
}
/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
        target.addEventListener(type, handler, false);
    });
}
/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
        target.removeEventListener(type, handler, false);
    });
}
/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}
/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}
/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}
/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                return i;
            }
            i++;
        }
        return -1;
    }
}
/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}
/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;
    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }
    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key] ? 1 : 0;
            });
        }
    }
    return results;
}
/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);
    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = prefix ? prefix + camelProp : property;
        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}
/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}
/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return doc.defaultView || doc.parentWindow || window;
}
var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH = 'ontouchstart' in window;
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';
var COMPUTE_INTERVAL = 25;
var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;
var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;
var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];
/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function (ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };
    this.init();
}
Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function handler() {},
    /**
     * bind the events
     */
    init: function init() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },
    /**
     * unbind the events
     */
    destroy: function destroy() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};
/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;
    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new Type(manager, inputHandler);
}
/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;
    if (isFirst) {
        manager.session = {};
    }
    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;
    // compute scale, rotation etc
    computeInputData(manager, input);
    // emit secret event
    manager.emit('hammer.input', input);
    manager.recognize(input);
    manager.session.prevInput = input;
}
/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;
    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }
    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }
    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);
    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
    computeIntervalInputData(session, input);
    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}
function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};
    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };
        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }
    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}
/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity,
        velocityX,
        velocityY,
        direction;
    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;
        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);
        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }
    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}
/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }
    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}
/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;
    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }
    var x = 0,
        y = 0,
        i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }
    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}
/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}
/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }
    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}
/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.sqrt(x * x + y * y);
}
/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}
/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}
/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}
var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};
var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput(manager, handler) {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;
    this.allow = true; // used by Input.TouchMouse to disable mouse events
    this.pressed = false; // mousedown state
    Input.apply(this, arguments);
}
inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];
        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }
        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }
        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
        if (!this.pressed || !this.allow) {
            return;
        }
        if (eventType & INPUT_END) {
            this.pressed = false;
        }
        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});
var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};
// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};
var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
// IE10 has prefixed support, and case-sensitive
if (win.MSPointerEvent && !win.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}
/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;
    Input.apply(this, arguments);
    this.store = this.manager.session.pointerEvents = [];
}
inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;
        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
        var isTouch = pointerType == INPUT_TYPE_TOUCH;
        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');
        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }
        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }
        // update the event in the store
        store[storeIndex] = ev;
        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });
        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});
var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};
var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;
    Input.apply(this, arguments);
}
inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }
        if (!this.started) {
            return;
        }
        var touches = normalizeSingleTouches.call(this, ev, type);
        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }
        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});
/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);
    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }
    return [all, changed];
}
var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};
var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput(manager, handler) {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};
    Input.apply(this, arguments);
}
inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }
        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});
/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;
    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }
    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;
    // get target touches from touches
    targetTouches = allTouches.filter(function (touch) {
        return hasParent(touch.target, target);
    });
    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }
    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }
        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }
    if (!changedTargetTouches.length) {
        return;
    }
    return [
    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
}
/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */
function TouchMouseInput() {
    Input.apply(this, arguments);
    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);
}
inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
            isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
        // when we're in a touch event, so  block all upcoming mouse events
        // most mobile browser also emit mouseevents, right after touchstart
        if (isTouch) {
            this.mouse.allow = false;
        } else if (isMouse && !this.mouse.allow) {
            return;
        }
        // reset the allowMouse when we're done
        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
            this.mouse.allow = true;
        }
        this.callback(manager, inputEvent, inputData);
    },
    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});
var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}
TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function set(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }
        if (NATIVE_TOUCH_ACTION && this.manager.element.style) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },
    /**
     * just re-set the touchAction value
     */
    update: function update() {
        this.set(this.manager.options.touchAction);
    },
    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function compute() {
        var actions = [];
        each(this.manager.recognizers, function (recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },
    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function preventDefaults(input) {
        // not needed with native support for the touchAction property
        if (NATIVE_TOUCH_ACTION) {
            return;
        }
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;
        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }
        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        if (hasNone) {
            //do not prevent defaults if this is a tap gesture
            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;
            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }
        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }
        if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
            return this.preventSrc(srcEvent);
        }
    },
    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function preventSrc(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};
/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }
    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }
    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }
    return TOUCH_ACTION_AUTO;
}
/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;
/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])({}, this.defaults, options || {});
    this.id = uniqueId();
    this.manager = null;
    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);
    this.state = STATE_POSSIBLE;
    this.simultaneous = {};
    this.requireFail = [];
}
Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},
    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function set(options) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])(this.options, options);
        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },
    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function recognizeWith(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }
        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },
    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },
    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function requireFailure(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }
        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },
    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function dropRequireFailure(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },
    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function hasRequireFailures() {
        return this.requireFail.length > 0;
    },
    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function canRecognizeWith(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },
    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function emit(input) {
        var self = this;
        var state = this.state;
        function emit(event) {
            self.manager.emit(event, input);
        }
        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
        emit(self.options.event); // simple 'eventName' events
        if (input.additionalEvent) {
            emit(input.additionalEvent);
        }
        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },
    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function tryEmit(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },
    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function canEmit() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },
    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function recognize(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])({}, inputData);
        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }
        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }
        this.state = this.process(inputDataClone);
        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },
    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function process(inputData) {},
    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function getTouchAction() {},
    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function reset() {}
};
/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}
/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}
/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}
/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}
inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },
    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function attrTest(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },
    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function process(input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);
        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});
/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);
    this.pX = null;
    this.pY = null;
}
inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },
    getTouchAction: function getTouchAction() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },
    directionTest: function directionTest(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;
        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },
    attrTest: function attrTest(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
    },
    emit: function emit(input) {
        this.pX = input.deltaX;
        this.pY = input.deltaY;
        var direction = directionStr(input.direction);
        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});
/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}
inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_NONE];
    },
    attrTest: function attrTest(input) {
        return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },
    emit: function emit(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});
/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);
    this._timer = null;
    this._input = null;
}
inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251,
        threshold: 9 // a minimal movement is ok, but keep it low
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_AUTO];
    },
    process: function process(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;
        this._input = input;
        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function () {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },
    reset: function reset() {
        clearTimeout(this._timer);
    },
    emit: function emit(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }
        if (input && input.eventType & INPUT_END) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});
/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}
inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_NONE];
    },
    attrTest: function attrTest(input) {
        return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});
/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}
inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },
    getTouchAction: function getTouchAction() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },
    attrTest: function attrTest(input) {
        var direction = this.options.direction;
        var velocity;
        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }
        return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },
    emit: function emit(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }
        this.manager.emit(this.options.event, input);
    }
});
/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);
    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;
    this._timer = null;
    this._input = null;
    this.count = 0;
}
inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300,
        time: 250,
        threshold: 9,
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_MANIPULATION];
    },
    process: function process(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;
        this.reset();
        if (input.eventType & INPUT_START && this.count === 0) {
            return this.failTimeout();
        }
        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }
            var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
            this.pTime = input.timeStamp;
            this.pCenter = input.center;
            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }
            this._input = input;
            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function () {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },
    failTimeout: function failTimeout() {
        this._timer = setTimeoutContext(function () {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },
    reset: function reset() {
        clearTimeout(this._timer);
    },
    emit: function emit() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});
/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, _defaults.preset);
    return new Manager(element, options);
}
/**
 * @const {string}
 */
var VERSION = '2.0.6';
/**
 * default settings
 * @namespace
 */
var _defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,
    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,
    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,
    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,
    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,
    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
    // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
    [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],
    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',
        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',
        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',
        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',
        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',
        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};
var STOP = 1;
var FORCED_STOP = 2;
/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])({}, _defaults, options || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    toggleCssProps(this, true);
    each(this.options.recognizers, function (item) {
        var recognizer = this.add(new item[0](item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}
Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function set(options) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])(this.options, options);
        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },
    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function stop(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },
    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function recognize(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }
        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);
        var recognizer;
        var recognizers = this.recognizers;
        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;
        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
            curRecognizer = session.curRecognizer = null;
        }
        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];
            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }
            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },
    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function get(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }
        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },
    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function add(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }
        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }
        this.recognizers.push(recognizer);
        recognizer.manager = this;
        this.touchAction.update();
        return recognizer;
    },
    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function remove(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }
        recognizer = this.get(recognizer);
        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);
            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }
        return this;
    },
    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function on(events, handler) {
        var handlers = this.handlers;
        each(splitStr(events), function (event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },
    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function off(events, handler) {
        var handlers = this.handlers;
        each(splitStr(events), function (event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },
    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function emit(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }
        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }
        data.type = event;
        data.preventDefault = function () {
            data.srcEvent.preventDefault();
        };
        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },
    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function destroy() {
        this.element && toggleCssProps(this, false);
        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};
/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    each(manager.options.cssProps, function (value, name) {
        element.style[prefixed(element.style, name)] = add ? value : '';
    });
}
/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = doc.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__["assign"])(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,
    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,
    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,
    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,
    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,
    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,
    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});
win.Hammer = Hammer;


/***/ },
/* 917 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__platform__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_dom__ = __webpack_require__(13);


var win = window;
var doc = document;
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'core',
    settings: {
        mode: 'md',
        keyboardHeight: 290
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].setDefault('core');
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'mobile'
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'phablet',
    isMatch: function isMatch(p) {
        var smallest = Math.min(p.width(), p.height());
        var largest = Math.max(p.width(), p.height());
        return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'tablet',
    isMatch: function isMatch(p) {
        var smallest = Math.min(p.width(), p.height());
        var largest = Math.max(p.width(), p.height());
        return smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'android',
    superset: 'mobile',
    subsets: ['phablet', 'tablet'],
    settings: {
        activator: function activator(p) {
            // md mode defaults to use ripple activator
            // however, under-powered devices shouldn't use ripple
            // if this a linux device, and is using Android Chrome v36 (Android 5.0)
            // or above then use ripple, otherwise do not use a ripple effect
            if (p.testNavigatorPlatform('linux')) {
                var chromeVersion = p.matchUserAgentVersion(/Chrome\/(\d+).(\d+)?/);
                if (chromeVersion) {
                    // linux android device using modern android chrome browser gets ripple
                    return parseInt(chromeVersion.major, 10) < 36 ? 'none' : 'ripple';
                }
                // linux android device not using chrome browser checks just android's version
                if (p.version().major < 5) {
                    return 'none';
                }
            }
            // fallback to always use ripple
            return 'ripple';
        },
        autoFocusAssist: 'immediate',
        hoverCSS: false,
        keyboardHeight: 300,
        mode: 'md'
    },
    isMatch: function isMatch(p) {
        return p.isPlatformMatch('android', ['android', 'silk'], ['windows phone']);
    },
    versionParser: function versionParser(p) {
        return p.matchUserAgentVersion(/Android (\d+).(\d+)?/);
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'ios',
    superset: 'mobile',
    subsets: ['ipad', 'iphone'],
    settings: {
        autoFocusAssist: 'delay',
        hoverCSS: false,
        inputBlurring: isIOSDevice,
        inputCloning: isIOSDevice,
        keyboardHeight: 300,
        mode: 'ios',
        scrollAssist: isIOSDevice,
        statusbarPadding: !!win.cordova,
        swipeBackEnabled: isIOSDevice,
        swipeBackThreshold: 40,
        tapPolyfill: isIOSDevice,
        virtualScrollEventAssist: !win.indexedDB
    },
    isMatch: function isMatch(p) {
        return p.isPlatformMatch('ios', ['iphone', 'ipad', 'ipod'], ['windows phone']);
    },
    versionParser: function versionParser(p) {
        return p.matchUserAgentVersion(/OS (\d+)_(\d+)?/);
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'ipad',
    superset: 'tablet',
    settings: {
        keyboardHeight: 500
    },
    isMatch: function isMatch(p) {
        return p.isPlatformMatch('ipad');
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'iphone',
    subsets: ['phablet'],
    isMatch: function isMatch(p) {
        return p.isPlatformMatch('iphone');
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'windows',
    superset: 'mobile',
    subsets: ['phablet', 'tablet'],
    settings: {
        mode: 'wp',
        autoFocusAssist: 'immediate',
        hoverCSS: false
    },
    isMatch: function isMatch(p) {
        return p.isPlatformMatch('windows', ['windows phone']);
    },
    versionParser: function versionParser(p) {
        return p.matchUserAgentVersion(/Windows Phone (\d+).(\d+)?/);
    }
});
__WEBPACK_IMPORTED_MODULE_0__platform__["Platform"].register({
    name: 'cordova',
    isEngine: true,
    initialize: function initialize(p, config) {
        // prepare a custom "ready" for cordova "deviceready"
        p.prepareReady = function () {
            // 1) ionic bootstrapped
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_dom__["windowLoad"])(function () {
                // 2) window onload triggered or completed
                doc.addEventListener('deviceready', function () {
                    // 3) cordova deviceready event triggered
                    // add cordova listeners to emit platform events
                    doc.addEventListener('backbutton', function (ev) {
                        p.zone.run(function () {
                            p.backButton.emit(ev);
                        });
                    });
                    doc.addEventListener('pause', function (ev) {
                        p.zone.run(function () {
                            p.pause.emit(ev);
                        });
                    });
                    doc.addEventListener('resume', function (ev) {
                        p.zone.run(function () {
                            p.resume.emit(ev);
                        });
                    });
                    // cordova has its own exitApp method
                    p.exitApp = function () {
                        win.navigator.app.exitApp();
                    };
                    // cordova has fully loaded and we've added listeners
                    p.triggerReady('cordova');
                });
            });
        };
    },
    isMatch: function isMatch() {
        return !!(win.cordova || win.PhoneGap || win.phonegap);
    }
});
function isIOSDevice(p) {
    // shortcut function to be reused internally
    // checks navigator.platform to see if it's an actual iOS device
    // this does not use the user-agent string because it is often spoofed
    // an actual iPad will return true, a chrome dev tools iPad will return false
    return p.testNavigatorPlatform('iphone|ipad|ipod');
}

/***/ },
/* 918 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__storage_storage__ = __webpack_require__(324);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__storage_local_storage__ = __webpack_require__(919);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__storage_sql__ = __webpack_require__(920);
/* harmony namespace reexport */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_0__storage_storage__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(exports, key, function() { return __WEBPACK_IMPORTED_MODULE_0__storage_storage__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony namespace reexport */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_1__storage_local_storage__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(exports, key, function() { return __WEBPACK_IMPORTED_MODULE_1__storage_local_storage__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony namespace reexport */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_2__storage_sql__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(exports, key, function() { return __WEBPACK_IMPORTED_MODULE_2__storage_sql__[key]; }) }(__WEBPACK_IMPORT_KEY__));




/***/ },
/* 919 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__storage__ = __webpack_require__(324);

/* harmony export */ __webpack_require__.d(exports, "LocalStorage", function() { return LocalStorage; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}


/**
 * @name LocalStorage
 * @description
 * The LocalStorage storage engine uses the browser's local storage system for
 * storing key/value pairs.
 *
 * Note: LocalStorage should ONLY be used for temporary data that you can afford to lose.
 * Given disk space constraints on a mobile device, local storage might be "cleaned up"
 * by the operating system (iOS).
 *
 * For guaranteed, long-term storage, use the SqlStorage engine which stores data in a file.
 *
 * @usage
 * ```ts
 * import {Component} from '@angular/core';
 * import {Storage, LocalStorage} from 'ionic-angular';
 * @Component({
 *   template: `<ion-content></ion-content>`
 * });
 * export class MyClass{
 *  constructor(){
 *    this.local = new Storage(LocalStorage);
 *    this.local.set('didTutorial', 'true');
 *  }
 *}
 *```
 * @demo /docs/v2/demos/local-storage/
 * @see {@link /docs/v2/platform/storage/ Storage Platform Docs}
 */
var LocalStorage = function (_StorageEngine) {
    _inherits(LocalStorage, _StorageEngine);

    function LocalStorage() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, LocalStorage);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(LocalStorage).call(this));
    }
    /**
     * Get the value of a key in LocalStorage
     * @param {string} key the key you want to lookup in LocalStorage
     * @returns {Promise} Returns a promise which is resolved when the value has been retrieved
     */

    _createClass(LocalStorage, [{
        key: 'get',
        value: function get(key) {
            return new Promise(function (resolve, reject) {
                try {
                    var value = window.localStorage.getItem(key);
                    resolve(value);
                } catch (e) {
                    reject(e);
                }
            });
        }
        /**
         * Set a key value pair and save it to LocalStorage
         * @param {string} key the key you want to save to LocalStorage
         * @param {string} value the value of the key you're saving
         * @returns {Promise} Returns a promise which is resolved when the key value pair have been set
         */

    }, {
        key: 'set',
        value: function set(key, value) {
            return new Promise(function (resolve, reject) {
                try {
                    window.localStorage.setItem(key, value);
                    resolve();
                } catch (e) {
                    reject(e);
                }
            });
        }
        /**
         * Remove a key from LocalStorage
         * @param {string} key the key you want to remove from LocalStorage
         * @returns {Promise} Returns a promise which is resolved when the key has been removed
         */

    }, {
        key: 'remove',
        value: function remove(key) {
            return new Promise(function (resolve, reject) {
                try {
                    window.localStorage.removeItem(key);
                    resolve();
                } catch (e) {
                    reject(e);
                }
            });
        }
        /**
         * Clear data stored in LocalStorage
         * @returns {Promise} Returns a promise which is resolved when the data have been cleared
         */

    }, {
        key: 'clear',
        value: function clear() {
            return new Promise(function (resolve, reject) {
                try {
                    window.localStorage.clear();
                    resolve();
                } catch (e) {
                    reject(e);
                }
            });
        }
    }]);

    return LocalStorage;
}(__WEBPACK_IMPORTED_MODULE_0__storage__["StorageEngine"]);

/***/ },
/* 920 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__storage__ = __webpack_require__(324);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(6);

/* harmony export */ __webpack_require__.d(exports, "SqlStorage", function() { return SqlStorage; });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var DB_NAME = '__ionicstorage';
var win = window;
/**
 * SqlStorage uses SQLite or WebSQL (development only!) to store data in a
 * persistent SQL store on the filesystem.
 *
 * This is the preferred storage engine, as data will be stored in appropriate
 * app storage, unlike Local Storage which is treated differently by the OS.
 *
 * For convenience, the engine supports key/value storage for simple get/set and blob
 * storage. The full SQL engine is exposed underneath through the `query` method.
 *
 * @usage
 ```js
 * let storage = new Storage(SqlStorage, options);
 * storage.set('name', 'Max');
 * storage.get('name').then((name) => {
 * });
 *
 * // Sql storage also exposes the full engine underneath
 * storage.query('insert into projects(name, data) values("Cool Project", "blah")');
 * storage.query('select * from projects').then((resp) => {})
 * ```
 *
 * The `SqlStorage` service supports these options:
 * {
 *   name: the name of the database (__ionicstorage by default)
 *   backupFlag: // where to store the file, default is BACKUP_LOCAL which DOES NOT store to iCloud. Other options: BACKUP_LIBRARY, BACKUP_DOCUMENTS
 *   existingDatabase: whether to load this as an existing database (default is false)
 * }
 *
 */

var SqlStorage = function (_StorageEngine) {
    _inherits(SqlStorage, _StorageEngine);

    function SqlStorage() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, SqlStorage);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SqlStorage).call(this));

        var dbOptions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["defaults"])(options, {
            name: DB_NAME,
            backupFlag: SqlStorage.BACKUP_LOCAL,
            existingDatabase: false
        });
        if (win.sqlitePlugin) {
            var location = _this._getBackupLocation(dbOptions.backupFlag);
            _this._db = win.sqlitePlugin.openDatabase(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util__["assign"])({
                name: dbOptions.name,
                location: location,
                createFromLocation: dbOptions.existingDatabase ? 1 : 0
            }, dbOptions));
        } else {
            console.warn('Storage: SQLite plugin not installed, falling back to WebSQL. Make sure to install cordova-sqlite-storage in production!');
            _this._db = win.openDatabase(dbOptions.name, '1.0', 'database', 5 * 1024 * 1024);
        }
        _this._tryInit();
        return _this;
    }

    _createClass(SqlStorage, [{
        key: '_getBackupLocation',
        value: function _getBackupLocation(dbFlag) {
            switch (dbFlag) {
                case SqlStorage.BACKUP_LOCAL:
                    return 2;
                case SqlStorage.BACKUP_LIBRARY:
                    return 1;
                case SqlStorage.BACKUP_DOCUMENTS:
                    return 0;
                default:
                    throw Error('Invalid backup flag: ' + dbFlag);
            }
        }
        // Initialize the DB with our required tables

    }, {
        key: '_tryInit',
        value: function _tryInit() {
            this.query('CREATE TABLE IF NOT EXISTS kv (key text primary key, value text)').catch(function (err) {
                console.error('Storage: Unable to create initial storage tables', err.tx, err.err);
            });
        }
        /**
         * Perform an arbitrary SQL operation on the database. Use this method
         * to have full control over the underlying database through SQL operations
         * like SELECT, INSERT, and UPDATE.
         *
         * @param {string} query the query to run
         * @param {array} params the additional params to use for query placeholders
         * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
         */

    }, {
        key: 'query',
        value: function query(_query) {
            var _this2 = this;

            var params = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

            return new Promise(function (resolve, reject) {
                try {
                    _this2._db.transaction(function (tx) {
                        tx.executeSql(_query, params, function (tx, res) {
                            return resolve({ tx: tx, res: res });
                        }, function (tx, err) {
                            return reject({ tx: tx, err: err });
                        });
                    }, function (err) {
                        return reject({ err: err });
                    });
                } catch (err) {
                    reject({ err: err });
                }
            });
        }
        /**
         * Get the value in the database identified by the given key.
         * @param {string} key the key
         * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
         */

    }, {
        key: 'get',
        value: function get(key) {
            return this.query('select key, value from kv where key = ? limit 1', [key]).then(function (data) {
                if (data.res.rows.length > 0) {
                    return data.res.rows.item(0).value;
                }
            });
        }
        /**
        * Set the value in the database for the given key. Existing values will be overwritten.
        * @param {string} key the key
        * @param {string} value The value (as a string)
        * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
        */

    }, {
        key: 'set',
        value: function set(key, value) {
            return this.query('insert or replace into kv(key, value) values (?, ?)', [key, value]);
        }
        /**
        * Remove the value in the database for the given key.
        * @param {string} key the key
        * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
        */

    }, {
        key: 'remove',
        value: function remove(key) {
            return this.query('delete from kv where key = ?', [key]);
        }
        /**
        * Clear all keys/values of your database.
        * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
        */

    }, {
        key: 'clear',
        value: function clear() {
            return this.query('delete from kv');
        }
    }]);

    return SqlStorage;
}(__WEBPACK_IMPORTED_MODULE_0__storage__["StorageEngine"]);



SqlStorage.BACKUP_LOCAL = 2;
SqlStorage.BACKUP_LIBRARY = 1;
SqlStorage.BACKUP_DOCUMENTS = 0;

/***/ },
/* 921 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__page_transition__ = __webpack_require__(127);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var DURATION = 500;
var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
var OPACITY = 'opacity';
var TRANSLATEX = 'translateX';
var OFF_RIGHT = '99.5%';
var OFF_LEFT = '-33%';
var CENTER = '0%';
var OFF_OPACITY = 0.8;
var SHOW_BACK_BTN_CSS = 'show-back-button';

var IOSTransition = function (_PageTransition) {
    _inherits(IOSTransition, _PageTransition);

    function IOSTransition(enteringView, leavingView, opts) {
        _classCallCheck(this, IOSTransition);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(IOSTransition).call(this, enteringView, leavingView, opts));

        _this.duration(opts.duration || DURATION);
        _this.easing(opts.easing || EASING);
        // what direction is the transition going
        var backDirection = opts.direction === 'back';
        // do they have navbars?
        var enteringHasNavbar = enteringView.hasNavbar();
        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
        // entering content
        var enteringContent = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.contentRef());
        enteringContent.element(enteringView.toolbarRefs());
        _this.add(enteringContent);
        if (backDirection) {
            // entering content, back direction
            enteringContent.fromTo(TRANSLATEX, OFF_LEFT, CENTER, true).fromTo(OPACITY, OFF_OPACITY, 1, true);
        } else {
            // entering content, forward direction
            enteringContent.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
        }
        if (enteringHasNavbar) {
            // entering page has a navbar
            var enteringNavBar = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this.add(enteringNavBar);
            var enteringTitle = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.titleRef());
            var enteringNavbarItems = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.navbarItemRefs());
            var enteringNavbarBg = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.navbarBgRef());
            var enteringBackButton = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.backBtnRef());
            enteringNavBar.add(enteringTitle).add(enteringNavbarItems).add(enteringNavbarBg).add(enteringBackButton);
            enteringTitle.fromTo(OPACITY, 0.01, 1, true);
            enteringNavbarItems.fromTo(OPACITY, 0.01, 1, true);
            // set properties depending on direction
            if (backDirection) {
                // entering navbar, back direction
                enteringTitle.fromTo(TRANSLATEX, OFF_LEFT, CENTER, true);
                if (enteringView.enableBack()) {
                    // back direction, entering page has a back button
                    enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS).fromTo(OPACITY, 0.01, 1, true);
                }
            } else {
                // entering navbar, forward direction
                enteringTitle.fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
                if (leavingHasNavbar) {
                    // entering navbar, forward direction, and there's a leaving navbar
                    // should just fade in, no sliding
                    enteringNavbarBg.before.clearStyles([TRANSLATEX]).fromTo(OPACITY, 0.01, 1, true);
                } else {
                    // entering navbar, forward direction, and there's no leaving navbar
                    // should just slide in, no fading in
                    enteringNavbarBg.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
                }
                if (enteringView.enableBack()) {
                    // forward direction, entering page has a back button
                    enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS).fromTo(OPACITY, 0.01, 1, true);
                    var enteringBackBtnText = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.backBtnTextRef());
                    enteringBackBtnText.fromTo(TRANSLATEX, '100px', '0px');
                    enteringNavBar.add(enteringBackBtnText);
                } else {
                    enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
                }
            }
        }
        // setup leaving view
        if (leavingView) {
            // leaving content
            var leavingContent = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.contentRef());
            leavingContent.element(leavingView.toolbarRefs());
            _this.add(leavingContent);
            if (backDirection) {
                // leaving content, back direction
                leavingContent.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, CENTER, '100%');
            } else {
                // leaving content, forward direction
                leavingContent.fromTo(TRANSLATEX, CENTER, OFF_LEFT).fromTo(OPACITY, 1, OFF_OPACITY);
            }
            if (leavingHasNavbar) {
                // leaving page has a navbar
                var leavingNavBar = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.navbarRef());
                var leavingBackButton = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.backBtnRef());
                var leavingTitle = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.titleRef());
                var leavingNavbarItems = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.navbarItemRefs());
                var leavingNavbarBg = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.navbarBgRef());
                leavingNavBar.add(leavingBackButton).add(leavingTitle).add(leavingNavbarItems).add(leavingNavbarBg);
                _this.add(leavingNavBar);
                // fade out leaving navbar items
                leavingBackButton.fromTo(OPACITY, 0.99, 0);
                leavingTitle.fromTo(OPACITY, 0.99, 0);
                leavingNavbarItems.fromTo(OPACITY, 0.99, 0);
                if (backDirection) {
                    // leaving navbar, back direction
                    leavingTitle.fromTo(TRANSLATEX, CENTER, '100%');
                    if (enteringHasNavbar) {
                        // leaving navbar, back direction, and there's an entering navbar
                        // should just fade out, no sliding
                        leavingNavbarBg.before.clearStyles([TRANSLATEX]).fromTo('opacity', 0.99, 0);
                    } else {
                        // leaving navbar, back direction, and there's no entering navbar
                        // should just slide out, no fading out
                        leavingNavbarBg.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, CENTER, '100%');
                    }
                    var leavingBackBtnText = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.backBtnTextRef());
                    leavingBackBtnText.fromTo(TRANSLATEX, CENTER, 300 + 'px');
                    leavingNavBar.add(leavingBackBtnText);
                } else {
                    // leaving navbar, forward direction
                    leavingTitle.fromTo(TRANSLATEX, CENTER, OFF_LEFT);
                }
            }
        }
        return _this;
    }

    return IOSTransition;
}(__WEBPACK_IMPORTED_MODULE_1__page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_1__page_transition__["PageTransition"].register('ios-transition', IOSTransition);

/***/ },
/* 922 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__page_transition__ = __webpack_require__(127);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var TRANSLATEY = 'translateY';
var OFF_BOTTOM = '40px';
var CENTER = '0px';
var SHOW_BACK_BTN_CSS = 'show-back-button';

var MDTransition = function (_PageTransition) {
    _inherits(MDTransition, _PageTransition);

    function MDTransition(enteringView, leavingView, opts) {
        _classCallCheck(this, MDTransition);

        // what direction is the transition going

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MDTransition).call(this, enteringView, leavingView, opts));

        var backDirection = opts.direction === 'back';
        // do they have navbars?
        var enteringHasNavbar = enteringView.hasNavbar();
        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
        if (backDirection) {
            _this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
            _this.enteringPage.before.clearStyles([TRANSLATEY]);
        } else {
            _this.duration(opts.duration || 280).easing('cubic-bezier(0.36,0.66,0.04,1)');
            _this.enteringPage.fromTo(TRANSLATEY, OFF_BOTTOM, CENTER, true).fromTo('opacity', 0.01, 1, true);
        }
        if (enteringHasNavbar) {
            var enteringNavBar = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this.add(enteringNavBar);
            var enteringBackButton = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.backBtnRef());
            _this.add(enteringBackButton);
            if (enteringView.enableBack()) {
                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
            } else {
                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
            }
        }
        // setup leaving view
        if (leavingView && backDirection) {
            // leaving content
            _this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
            var leavingPage = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.pageRef());
            _this.add(leavingPage.fromTo(TRANSLATEY, CENTER, OFF_BOTTOM).fromTo('opacity', 0.99, 0));
        }
        return _this;
    }

    return MDTransition;
}(__WEBPACK_IMPORTED_MODULE_1__page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_1__page_transition__["PageTransition"].register('md-transition', MDTransition);

/***/ },
/* 923 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animations_animation__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__page_transition__ = __webpack_require__(127);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}



var SHOW_BACK_BTN_CSS = 'show-back-button';
var SCALE_SMALL = .95;

var WPTransition = function (_PageTransition) {
    _inherits(WPTransition, _PageTransition);

    function WPTransition(enteringView, leavingView, opts) {
        _classCallCheck(this, WPTransition);

        // what direction is the transition going

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WPTransition).call(this, enteringView, leavingView, opts));

        var backDirection = opts.direction === 'back';
        // do they have navbars?
        var enteringHasNavbar = enteringView.hasNavbar();
        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
        if (backDirection) {
            _this.duration(opts.duration || 120).easing('cubic-bezier(0.47,0,0.745,0.715)');
            _this.enteringPage.before.clearStyles(['scale']);
        } else {
            _this.duration(opts.duration || 280).easing('cubic-bezier(0,0 0.05,1)');
            _this.enteringPage.fromTo('scale', SCALE_SMALL, 1, true).fromTo('opacity', 0.01, 1, true);
        }
        if (enteringHasNavbar) {
            var enteringNavBar = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this.add(enteringNavBar);
            var enteringBackButton = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](enteringView.backBtnRef());
            _this.add(enteringBackButton);
            if (enteringView.enableBack()) {
                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
            } else {
                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
            }
        }
        // setup leaving view
        if (leavingView && backDirection) {
            // leaving content
            _this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
            var leavingPage = new __WEBPACK_IMPORTED_MODULE_0__animations_animation__["Animation"](leavingView.pageRef());
            _this.add(leavingPage.fromTo('scale', 1, SCALE_SMALL).fromTo('opacity', 0.99, 0));
        }
        return _this;
    }

    return WPTransition;
}(__WEBPACK_IMPORTED_MODULE_1__page_transition__["PageTransition"]);

__WEBPACK_IMPORTED_MODULE_1__page_transition__["PageTransition"].register('wp-transition', WPTransition);

/***/ },
/* 924 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__translate__ = __webpack_require__(325);

/* harmony export */ __webpack_require__.d(exports, "TranslatePipe", function() { return TranslatePipe; });var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @private
 * The Translate pipe makes it easy to translate strings.
 *
 * @usage
 * Translate using the current language or language set through Translate.setLanguage
 * {{ 'Please enter your location' | translate }}
 *
 * Translate using a specific language
 * {{ 'Please enter your location' | translate:"de" }}
 */
var TranslatePipe = function () {
    function TranslatePipe(translate) {
        _classCallCheck(this, TranslatePipe);

        this.translate = {};
        this.translate = translate;
    }

    _createClass(TranslatePipe, [{
        key: "transform",
        value: function transform(value, args) {
            var lang = void 0;
            if (args.length > 0) {
                lang = args[0];
            }
            return this.translate.translate(value, lang);
        }
    }, {
        key: "supports",
        value: function supports(obj) {
            return true;
        }
    }]);

    return TranslatePipe;
}();
TranslatePipe = __decorate([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'translate' }), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), __metadata('design:paramtypes', [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__translate__["Translate"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__translate__["Translate"]) === 'function' && _a || Object])], TranslatePipe);
var _a;

/***/ },
/* 925 */
/***/ function(module, exports, __webpack_require__) {

"use strict";

/* harmony export */ __webpack_require__.d(exports, "a", function() { return FeatureDetect; });var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var FeatureDetect = function () {
    function FeatureDetect() {
        _classCallCheck(this, FeatureDetect);

        this._results = {};
    }

    _createClass(FeatureDetect, [{
        key: 'run',
        value: function run(window, document) {
            for (var name in featureDetects) {
                this._results[name] = featureDetects[name](window, document, document.body);
            }
        }
    }, {
        key: 'has',
        value: function has(featureName) {
            return !!this._results[featureName];
        }
    }], [{
        key: 'add',
        value: function add(name, fn) {
            featureDetects[name] = fn;
        }
    }]);

    return FeatureDetect;
}();
var featureDetects = {};
FeatureDetect.add('hairlines', function (window, document, body) {
    /**
    * Hairline Shim
    * Add the "hairline" CSS class name to the body tag
    * if the browser supports subpixels.
    */
    var canDo = false;
    if (window.devicePixelRatio >= 2) {
        var hairlineEle = document.createElement('div');
        hairlineEle.style.border = '.5px solid transparent';
        body.appendChild(hairlineEle);
        if (hairlineEle.offsetHeight === 1) {
            body.classList.add('hairlines');
            canDo = true;
        }
        body.removeChild(hairlineEle);
    }
    return canDo;
});

/***/ },
/* 926 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
/* tslint:disable */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var util_1 = __webpack_require__(7);
var win = window;
var doc = document;
/*! Hammer.JS - v2.0.6 - 2015-12-23
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2015 Jorik Tangelder;
 * Licensed under the  license */
var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = doc.createElement('div');
var TYPE_FUNCTION = 'function';
var round = Math.round;
var abs = Math.abs;
var now = Date.now;
/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}
/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}
/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;
    if (!obj) {
        return;
    }
    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}
/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;
    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;
    if (properties) {
        util_1.assign(childP, properties);
    }
}
/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}
/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}
/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return val1 === undefined ? val2 : val1;
}
/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
        target.addEventListener(type, handler, false);
    });
}
/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
        target.removeEventListener(type, handler, false);
    });
}
/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}
/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}
/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}
/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                return i;
            }
            i++;
        }
        return -1;
    }
}
/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}
/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;
    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }
    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key] ? 1 : 0;
            });
        }
    }
    return results;
}
/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);
    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = prefix ? prefix + camelProp : property;
        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}
/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}
/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return doc.defaultView || doc.parentWindow || window;
}
var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH = 'ontouchstart' in window;
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';
var COMPUTE_INTERVAL = 25;
var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;
var DIRECTION_NONE = 1;
exports.DIRECTION_LEFT = 2;
exports.DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;
exports.DIRECTION_HORIZONTAL = exports.DIRECTION_LEFT | exports.DIRECTION_RIGHT;
exports.DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL;
var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];
/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function (ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };
    this.init();
}
Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function handler() {},
    /**
     * bind the events
     */
    init: function init() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },
    /**
     * unbind the events
     */
    destroy: function destroy() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};
/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;
    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new Type(manager, inputHandler);
}
/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;
    if (isFirst) {
        manager.session = {};
    }
    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;
    // compute scale, rotation etc
    computeInputData(manager, input);
    // emit secret event
    manager.emit('hammer.input', input);
    manager.recognize(input);
    manager.session.prevInput = input;
}
/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;
    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }
    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }
    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);
    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
    computeIntervalInputData(session, input);
    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}
function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};
    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };
        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }
    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}
/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity,
        velocityX,
        velocityY,
        direction;
    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;
        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);
        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }
    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}
/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }
    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}
/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;
    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }
    var x = 0,
        y = 0,
        i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }
    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}
/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}
/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }
    if (abs(x) >= abs(y)) {
        return x < 0 ? exports.DIRECTION_LEFT : exports.DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}
/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.sqrt(x * x + y * y);
}
/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}
/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}
/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}
var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};
var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput(manager, handler) {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;
    this.allow = true; // used by Input.TouchMouse to disable mouse events
    this.pressed = false; // mousedown state
    Input.apply(this, arguments);
}
inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];
        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }
        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }
        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
        if (!this.pressed || !this.allow) {
            return;
        }
        if (eventType & INPUT_END) {
            this.pressed = false;
        }
        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});
var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};
// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};
var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
// IE10 has prefixed support, and case-sensitive
if (win.MSPointerEvent && !win.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}
/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;
    Input.apply(this, arguments);
    this.store = this.manager.session.pointerEvents = [];
}
inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;
        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
        var isTouch = pointerType == INPUT_TYPE_TOUCH;
        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');
        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }
        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }
        // update the event in the store
        store[storeIndex] = ev;
        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });
        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});
var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};
var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;
    Input.apply(this, arguments);
}
inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }
        if (!this.started) {
            return;
        }
        var touches = normalizeSingleTouches.call(this, ev, type);
        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }
        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});
/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);
    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }
    return [all, changed];
}
var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};
var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput(manager, handler) {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};
    Input.apply(this, arguments);
}
inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }
        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});
/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;
    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }
    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;
    // get target touches from touches
    targetTouches = allTouches.filter(function (touch) {
        return hasParent(touch.target, target);
    });
    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }
    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }
        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }
    if (!changedTargetTouches.length) {
        return;
    }
    return [
    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
}
/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */
function TouchMouseInput() {
    Input.apply(this, arguments);
    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);
}
inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
            isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
        // when we're in a touch event, so  block all upcoming mouse events
        // most mobile browser also emit mouseevents, right after touchstart
        if (isTouch) {
            this.mouse.allow = false;
        } else if (isMouse && !this.mouse.allow) {
            return;
        }
        // reset the allowMouse when we're done
        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
            this.mouse.allow = true;
        }
        this.callback(manager, inputEvent, inputData);
    },
    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});
var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}
TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function set(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }
        if (NATIVE_TOUCH_ACTION && this.manager.element.style) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },
    /**
     * just re-set the touchAction value
     */
    update: function update() {
        this.set(this.manager.options.touchAction);
    },
    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function compute() {
        var actions = [];
        each(this.manager.recognizers, function (recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },
    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function preventDefaults(input) {
        // not needed with native support for the touchAction property
        if (NATIVE_TOUCH_ACTION) {
            return;
        }
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;
        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }
        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        if (hasNone) {
            //do not prevent defaults if this is a tap gesture
            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;
            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }
        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }
        if (hasNone || hasPanY && direction & exports.DIRECTION_HORIZONTAL || hasPanX && direction & exports.DIRECTION_VERTICAL) {
            return this.preventSrc(srcEvent);
        }
    },
    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function preventSrc(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};
/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }
    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }
    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }
    return TOUCH_ACTION_AUTO;
}
/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;
/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = util_1.assign({}, this.defaults, options || {});
    this.id = uniqueId();
    this.manager = null;
    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);
    this.state = STATE_POSSIBLE;
    this.simultaneous = {};
    this.requireFail = [];
}
Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},
    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function set(options) {
        util_1.assign(this.options, options);
        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },
    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function recognizeWith(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }
        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },
    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },
    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function requireFailure(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }
        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },
    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function dropRequireFailure(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },
    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function hasRequireFailures() {
        return this.requireFail.length > 0;
    },
    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function canRecognizeWith(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },
    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function emit(input) {
        var self = this;
        var state = this.state;
        function emit(event) {
            self.manager.emit(event, input);
        }
        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
        emit(self.options.event); // simple 'eventName' events
        if (input.additionalEvent) {
            emit(input.additionalEvent);
        }
        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },
    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function tryEmit(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },
    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function canEmit() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },
    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function recognize(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = util_1.assign({}, inputData);
        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }
        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }
        this.state = this.process(inputDataClone);
        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },
    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function process(inputData) {},
    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function getTouchAction() {},
    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function reset() {}
};
/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}
/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == exports.DIRECTION_LEFT) {
        return 'left';
    } else if (direction == exports.DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}
/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}
/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}
inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },
    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function attrTest(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },
    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function process(input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);
        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});
/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);
    this.pX = null;
    this.pY = null;
}
inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },
    getTouchAction: function getTouchAction() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & exports.DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & exports.DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },
    directionTest: function directionTest(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;
        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & exports.DIRECTION_HORIZONTAL) {
                direction = x === 0 ? DIRECTION_NONE : x < 0 ? exports.DIRECTION_LEFT : exports.DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },
    attrTest: function attrTest(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
    },
    emit: function emit(input) {
        this.pX = input.deltaX;
        this.pY = input.deltaY;
        var direction = directionStr(input.direction);
        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});
/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}
inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_NONE];
    },
    attrTest: function attrTest(input) {
        return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },
    emit: function emit(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});
/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);
    this._timer = null;
    this._input = null;
}
inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251,
        threshold: 9 // a minimal movement is ok, but keep it low
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_AUTO];
    },
    process: function process(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;
        this._input = input;
        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function () {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },
    reset: function reset() {
        clearTimeout(this._timer);
    },
    emit: function emit(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }
        if (input && input.eventType & INPUT_END) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});
/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}
inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_NONE];
    },
    attrTest: function attrTest(input) {
        return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});
/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}
inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL,
        pointers: 1
    },
    getTouchAction: function getTouchAction() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },
    attrTest: function attrTest(input) {
        var direction = this.options.direction;
        var velocity;
        if (direction & (exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & exports.DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & exports.DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }
        return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },
    emit: function emit(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }
        this.manager.emit(this.options.event, input);
    }
});
/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);
    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;
    this._timer = null;
    this._input = null;
    this.count = 0;
}
inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300,
        time: 250,
        threshold: 9,
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },
    getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_MANIPULATION];
    },
    process: function process(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;
        this.reset();
        if (input.eventType & INPUT_START && this.count === 0) {
            return this.failTimeout();
        }
        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }
            var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
            this.pTime = input.timeStamp;
            this.pCenter = input.center;
            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }
            this._input = input;
            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function () {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },
    failTimeout: function failTimeout() {
        this._timer = setTimeoutContext(function () {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },
    reset: function reset() {
        clearTimeout(this._timer);
    },
    emit: function emit() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});
/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, _defaults.preset);
    return new Manager(element, options);
}
exports.Hammer = Hammer;
/**
 * @const {string}
 */
var VERSION = '2.0.6';
/**
 * default settings
 * @namespace
 */
var _defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,
    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,
    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,
    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,
    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,
    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
    // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
    [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: exports.DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: exports.DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],
    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',
        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',
        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',
        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',
        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',
        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};
var STOP = 1;
var FORCED_STOP = 2;
/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = util_1.assign({}, _defaults, options || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    toggleCssProps(this, true);
    each(this.options.recognizers, function (item) {
        var recognizer = this.add(new item[0](item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}
Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function set(options) {
        util_1.assign(this.options, options);
        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },
    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function stop(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },
    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function recognize(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }
        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);
        var recognizer;
        var recognizers = this.recognizers;
        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;
        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
            curRecognizer = session.curRecognizer = null;
        }
        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];
            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }
            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },
    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function get(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }
        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },
    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function add(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }
        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }
        this.recognizers.push(recognizer);
        recognizer.manager = this;
        this.touchAction.update();
        return recognizer;
    },
    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function remove(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }
        recognizer = this.get(recognizer);
        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);
            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }
        return this;
    },
    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function on(events, handler) {
        var handlers = this.handlers;
        each(splitStr(events), function (event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },
    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function off(events, handler) {
        var handlers = this.handlers;
        each(splitStr(events), function (event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },
    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function emit(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }
        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }
        data.type = event;
        data.preventDefault = function () {
            data.srcEvent.preventDefault();
        };
        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },
    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function destroy() {
        this.element && toggleCssProps(this, false);
        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};
/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    each(manager.options.cssProps, function (value, name) {
        element.style[prefixed(element.style, name)] = add ? value : '';
    });
}
/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = doc.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}
util_1.assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,
    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,
    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: exports.DIRECTION_LEFT,
    DIRECTION_RIGHT: exports.DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: exports.DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: exports.DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,
    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,
    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,
    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,
    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});
win.Hammer = Hammer;

/***/ },
/* 927 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var __extends = this && this.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var drag_gesture_1 = __webpack_require__(507);
var util_1 = __webpack_require__(209);
var SlideGesture = function (_super) {
    __extends(SlideGesture, _super);
    function SlideGesture(element, opts) {
        if (opts === void 0) {
            opts = {};
        }
        _super.call(this, element, opts);
        this.slide = null;
        this.element = element;
    }
    /*
     * Get the min and max for the slide. pageX/pageY.
     * Only called on dragstart.
     */
    SlideGesture.prototype.getSlideBoundaries = function (slide, ev) {
        return {
            min: 0,
            max: this.element.offsetWidth
        };
    };
    /*
     * Get the element's pos when the drag starts.
     * For example, an open side menu starts at 100% and a closed
     * sidemenu starts at 0%.
     */
    SlideGesture.prototype.getElementStartPos = function (slide, ev) {
        return 0;
    };
    SlideGesture.prototype.canStart = function (ev) {
        return true;
    };
    SlideGesture.prototype.onDragStart = function (ev) {
        if (!this.canStart(ev)) {
            return false;
        }
        this.slide = {};
        this.onSlideBeforeStart(this.slide, ev);
        var _a = this.getSlideBoundaries(this.slide, ev),
            min = _a.min,
            max = _a.max;
        this.slide.min = min;
        this.slide.max = max;
        this.slide.elementStartPos = this.getElementStartPos(this.slide, ev);
        this.slide.pointerStartPos = ev.center[this.direction];
        this.slide.started = true;
        this.onSlideStart(this.slide, ev);
        return true;
    };
    SlideGesture.prototype.onDrag = function (ev) {
        if (!this.slide || !this.slide.started) {
            return false;
        }
        this.slide.pos = ev.center[this.direction];
        this.slide.distance = util_1.clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
        this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
        this.onSlide(this.slide, ev);
        return true;
    };
    SlideGesture.prototype.onDragEnd = function (ev) {
        if (!this.slide || !this.slide.started) return;
        this.onSlideEnd(this.slide, ev);
        this.slide = null;
    };
    SlideGesture.prototype.onSlideBeforeStart = function (slide, ev) {};
    SlideGesture.prototype.onSlideStart = function (slide, ev) {};
    SlideGesture.prototype.onSlide = function (slide, ev) {};
    SlideGesture.prototype.onSlideEnd = function (slide, ev) {};
    return SlideGesture;
}(drag_gesture_1.DragGesture);
exports.SlideGesture = SlideGesture;

/***/ },
/* 928 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * @private
 * Provide multi-language and i18n support in your app. Translate works by
 * mapping full strings to language translated ones. That means that you don't
 * need to provide strings for your default language, just new languages.
 *
 * Note: The Angular team will be building an
 * [Localization/Internationalization](https://docs.google.com/document/d/1mwyOFsAD-bPoXTk3Hthq0CAcGXCUw-BtTJMR4nGTY-0/view#heading=h.ixg45w3363q)
 * provider, so this Translation provider may not be further developed.
 *
 * @usage
 * ```js
 * Translate.translations({
 *   'de': {
 *     'Welcome to MyApp': 'Willkommen auf'
 *   }
 * })
 *
 * Changing the default language:
 *
 * Translate.setLanguage('de');
 * ```
 *
 * Usage in a template:
 *
 * ```js
 * <span>{{ 'Welcome to MyApp' | translate }}
 * ```
 */

var Translate = function () {
    function Translate() {
        this._transMap = {};
        this._language = {};
    }
    Translate.prototype.translations = function (lang, map) {
        this._transMap[lang] = map;
    };
    Translate.prototype.setLanguage = function (lang) {
        this._language = lang;
    };
    Translate.prototype.getTranslations = function (lang) {
        return this._transMap[lang];
    };
    Translate.prototype.translate = function (key, lang) {
        // If the language isn't specified and we have no overridden one, return the string passed.
        if (!lang && !this._language) {
            return key;
        }
        var setLanguage = lang || this._language;
        var map = this.getTranslations(setLanguage);
        if (!map) {
            console.warn('I18N: No translation for key', key, 'using language', setLanguage);
            return '';
        }
        return this._getTranslation(map, key);
    };
    Translate.prototype._getTranslation = function (map, key) {
        return map && map[key] || '';
    };
    return Translate;
}();
exports.Translate = Translate;

/***/ },
/* 929 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * @name Events
 * @description
 * Events is a publish-subscribe style event system for sending and responding to application-level
 * events across your app.
 *
 * @usage
 * ```ts
 * import {Events} from 'ionic-angular';
 *
 * constructor(public events: Events) {}
 *
 * // first page (publish an event when a user is created)
 * function createUser(user) {
 *   console.log('User created!')
 *   events.publish('user:created', user);
 * }
 *
 * // second page (listen for the user created event)
 * events.subscribe('user:created', (userEventData) => {
 *   // userEventData is an array of parameters, so grab our first and only arg
 *   console.log('Welcome', userEventData[0]);
 * });
 *
 * ```
 * @demo /docs/v2/demos/events/
 */

var Events = function () {
    function Events() {
        this._channels = [];
    }
    /**
     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
     *
     * @param {string} topic the topic to subscribe to
     * @param {function} handler the event handler
     */
    Events.prototype.subscribe = function (topic) {
        var _this = this;
        var handlers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            handlers[_i - 1] = arguments[_i];
        }
        if (!this._channels[topic]) {
            this._channels[topic] = [];
        }
        handlers.forEach(function (handler) {
            _this._channels[topic].push(handler);
        });
    };
    /**
     * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
     *
     * @param {string} topic the topic to unsubscribe from
     * @param {function} handler the event handler
     *
     * @return true if a handler was removed
     */
    Events.prototype.unsubscribe = function (topic, handler) {
        var t = this._channels[topic];
        if (!t) {
            // Wasn't found, wasn't removed
            return false;
        }
        if (!handler) {
            // Remove all handlers for this topic
            delete this._channels[topic];
            return true;
        }
        // We need to find and remove a specific handler
        var i = t.indexOf(handler);
        if (i < 0) {
            // Wasn't found, wasn't removed
            return false;
        }
        t.splice(i, 1);
        // If the channel is empty now, remove it from the channel map
        if (!t.length) {
            delete this._channels[topic];
        }
        return true;
    };
    /**
     * Publish an event to the given topic.
     *
     * @param {string} topic the topic to publish to
     * @param {any} eventData the data to send as the event
     */
    Events.prototype.publish = function (topic) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var t = this._channels[topic];
        if (!t) {
            return null;
        }
        var responses = [];
        t.forEach(function (handler) {
            responses.push(handler(args));
        });
        return responses;
    };
    return Events;
}();
exports.Events = Events;

/***/ },
/* 930 */
/***/ function(module, exports) {

"use strict";
"use strict";

var FeatureDetect = function () {
    function FeatureDetect() {
        this._results = {};
    }
    FeatureDetect.prototype.run = function (window, document) {
        for (var name_1 in featureDetects) {
            this._results[name_1] = featureDetects[name_1](window, document, document.body);
        }
    };
    FeatureDetect.prototype.has = function (featureName) {
        return !!this._results[featureName];
    };
    FeatureDetect.add = function (name, fn) {
        featureDetects[name] = fn;
    };
    return FeatureDetect;
}();
exports.FeatureDetect = FeatureDetect;
var featureDetects = {};
FeatureDetect.add('hairlines', function (window, document, body) {
    /**
    * Hairline Shim
    * Add the "hairline" CSS class name to the body tag
    * if the browser supports subpixels.
    */
    var canDo = false;
    if (window.devicePixelRatio >= 2) {
        var hairlineEle = document.createElement('div');
        hairlineEle.style.border = '.5px solid transparent';
        body.appendChild(hairlineEle);
        if (hairlineEle.offsetHeight === 1) {
            body.classList.add('hairlines');
            canDo = true;
        }
        body.removeChild(hairlineEle);
    }
    return canDo;
});

/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
var ng1_1 = __webpack_require__(932);
var DEVICE_READY_TIMEOUT = 2000;
var actionsheet_1 = __webpack_require__(933);
exports.ActionSheet = actionsheet_1.ActionSheet;
var admob_1 = __webpack_require__(934);
exports.AdMob = admob_1.AdMob;
var appavailability_1 = __webpack_require__(935);
exports.AppAvailability = appavailability_1.AppAvailability;
var apprate_1 = __webpack_require__(936);
exports.AppRate = apprate_1.AppRate;
var appversion_1 = __webpack_require__(937);
exports.AppVersion = appversion_1.AppVersion;
var badge_1 = __webpack_require__(939);
exports.Badge = badge_1.Badge;
var background_geolocation_1 = __webpack_require__(515);
var barcodescanner_1 = __webpack_require__(940);
exports.BarcodeScanner = barcodescanner_1.BarcodeScanner;
var base64togallery_1 = __webpack_require__(941);
exports.Base64ToGallery = base64togallery_1.Base64ToGallery;
var batterystatus_1 = __webpack_require__(516);
exports.BatteryStatus = batterystatus_1.BatteryStatus;
var brightness_1 = __webpack_require__(944);
exports.Brightness = brightness_1.Brightness;
var ble_1 = __webpack_require__(942);
exports.BLE = ble_1.BLE;
var bluetoothserial_1 = __webpack_require__(943);
exports.BluetoothSerial = bluetoothserial_1.BluetoothSerial;
var calendar_1 = __webpack_require__(517);
var camera_1 = __webpack_require__(518);
var card_io_1 = __webpack_require__(519);
var clipboard_1 = __webpack_require__(945);
exports.Clipboard = clipboard_1.Clipboard;
var contacts_1 = __webpack_require__(520);
var datepicker_1 = __webpack_require__(521);
var dbmeter_1 = __webpack_require__(946);
exports.DBMeter = dbmeter_1.DBMeter;
var deeplinks_1 = __webpack_require__(947);
exports.Deeplinks = deeplinks_1.Deeplinks;
var device_1 = __webpack_require__(522);
var deviceaccounts_1 = __webpack_require__(948);
exports.DeviceAccounts = deviceaccounts_1.DeviceAccounts;
var devicemotion_1 = __webpack_require__(523);
var deviceorientation_1 = __webpack_require__(524);
var diagnostic_1 = __webpack_require__(949);
exports.Diagnostic = diagnostic_1.Diagnostic;
var dialogs_1 = __webpack_require__(950);
exports.Dialogs = dialogs_1.Dialogs;
var emailcomposer_1 = __webpack_require__(951);
exports.EmailComposer = emailcomposer_1.EmailComposer;
var facebook_1 = __webpack_require__(952);
exports.Facebook = facebook_1.Facebook;
var file_1 = __webpack_require__(953);
exports.File = file_1.File;
var filetransfer_1 = __webpack_require__(954);
exports.Transfer = filetransfer_1.Transfer;
var flashlight_1 = __webpack_require__(955);
exports.Flashlight = flashlight_1.Flashlight;
var geolocation_1 = __webpack_require__(956);
exports.Geolocation = geolocation_1.Geolocation;
var globalization_1 = __webpack_require__(957);
exports.Globalization = globalization_1.Globalization;
var google_plus_1 = __webpack_require__(958);
exports.GooglePlus = google_plus_1.GooglePlus;
var googlemaps_1 = __webpack_require__(525);
var googleanalytics_1 = __webpack_require__(959);
exports.GoogleAnalytics = googleanalytics_1.GoogleAnalytics;
var hotspot_1 = __webpack_require__(960);
exports.Hotspot = hotspot_1.Hotspot;
var httpd_1 = __webpack_require__(526);
var imagepicker_1 = __webpack_require__(527);
var inappbrowser_1 = __webpack_require__(528);
var insomnia_1 = __webpack_require__(961);
exports.Insomnia = insomnia_1.Insomnia;
var keyboard_1 = __webpack_require__(962);
exports.Keyboard = keyboard_1.Keyboard;
var launchnavigator_1 = __webpack_require__(529);
var localnotifications_1 = __webpack_require__(530);
var media_1 = __webpack_require__(531);
var network_1 = __webpack_require__(963);
exports.Network = network_1.Network;
exports.Connection = network_1.Connection;
var push_1 = __webpack_require__(532);
var safari_view_controller_1 = __webpack_require__(533);
var screenshot_1 = __webpack_require__(964);
exports.Screenshot = screenshot_1.Screenshot;
var sms_1 = __webpack_require__(534);
var socialsharing_1 = __webpack_require__(965);
exports.SocialSharing = socialsharing_1.SocialSharing;
var spinnerdialog_1 = __webpack_require__(535);
var splashscreen_1 = __webpack_require__(966);
exports.Splashscreen = splashscreen_1.Splashscreen;
var sqlite_1 = __webpack_require__(967);
exports.SQLite = sqlite_1.SQLite;
var statusbar_1 = __webpack_require__(968);
exports.StatusBar = statusbar_1.StatusBar;
var _3dtouch_1 = __webpack_require__(514);
var toast_1 = __webpack_require__(536);
var touchid_1 = __webpack_require__(969);
exports.TouchID = touchid_1.TouchID;
var vibration_1 = __webpack_require__(970);
exports.Vibration = vibration_1.Vibration;
var webintent_1 = __webpack_require__(971);
exports.WebIntent = webintent_1.WebIntent;
__export(__webpack_require__(514));
__export(__webpack_require__(515));
__export(__webpack_require__(938));
__export(__webpack_require__(516));
__export(__webpack_require__(517));
__export(__webpack_require__(518));
__export(__webpack_require__(519));
__export(__webpack_require__(520));
__export(__webpack_require__(521));
__export(__webpack_require__(522));
__export(__webpack_require__(523));
__export(__webpack_require__(524));
__export(__webpack_require__(525));
__export(__webpack_require__(526));
__export(__webpack_require__(527));
__export(__webpack_require__(528));
__export(__webpack_require__(529));
__export(__webpack_require__(530));
__export(__webpack_require__(531));
__export(__webpack_require__(532));
__export(__webpack_require__(533));
__export(__webpack_require__(534));
__export(__webpack_require__(535));
__export(__webpack_require__(536));
__export(__webpack_require__(2));
// Window export to use outside of a module loading system
window['IonicNative'] = {
    ActionSheet: actionsheet_1.ActionSheet,
    AdMob: admob_1.AdMob,
    AppAvailability: appavailability_1.AppAvailability,
    AppRate: apprate_1.AppRate,
    AppVersion: appversion_1.AppVersion,
    Badge: badge_1.Badge,
    BackgroundGeolocation: background_geolocation_1.BackgroundGeolocation,
    BarcodeScanner: barcodescanner_1.BarcodeScanner,
    Base64ToGallery: base64togallery_1.Base64ToGallery,
    BatteryStatus: batterystatus_1.BatteryStatus,
    Brightness: brightness_1.Brightness,
    BLE: ble_1.BLE,
    BluetoothSerial: bluetoothserial_1.BluetoothSerial,
    Calendar: calendar_1.Calendar,
    Camera: camera_1.Camera,
    CardIO: card_io_1.CardIO,
    Clipboard: clipboard_1.Clipboard,
    Connection: network_1.Connection,
    Contacts: contacts_1.Contacts,
    DatePicker: datepicker_1.DatePicker,
    DBMeter: dbmeter_1.DBMeter,
    Deeplinks: deeplinks_1.Deeplinks,
    Device: device_1.Device,
    DeviceAccounts: deviceaccounts_1.DeviceAccounts,
    DeviceMotion: devicemotion_1.DeviceMotion,
    DeviceOrientation: deviceorientation_1.DeviceOrientation,
    Dialogs: dialogs_1.Dialogs,
    Diagnostic: diagnostic_1.Diagnostic,
    EmailComposer: emailcomposer_1.EmailComposer,
    Facebook: facebook_1.Facebook,
    File: file_1.File,
    Flashlight: flashlight_1.Flashlight,
    Geolocation: geolocation_1.Geolocation,
    Globalization: globalization_1.Globalization,
    GooglePlus: google_plus_1.GooglePlus,
    GoogleMap: googlemaps_1.GoogleMap,
    GoogleAnalytics: googleanalytics_1.GoogleAnalytics,
    Hotspot: hotspot_1.Hotspot,
    Httpd: httpd_1.Httpd,
    ImagePicker: imagepicker_1.ImagePicker,
    InAppBrowser: inappbrowser_1.InAppBrowser,
    Keyboard: keyboard_1.Keyboard,
    LaunchNavigator: launchnavigator_1.LaunchNavigator,
    LocalNotifications: localnotifications_1.LocalNotifications,
    MediaPlugin: media_1.MediaPlugin,
    Network: network_1.Network,
    Push: push_1.Push,
    SafariViewController: safari_view_controller_1.SafariViewController,
    Screenshot: screenshot_1.Screenshot,
    SMS: sms_1.SMS,
    SocialSharing: socialsharing_1.SocialSharing,
    SpinnerDialog: spinnerdialog_1.SpinnerDialog,
    Splashscreen: splashscreen_1.Splashscreen,
    SQLite: sqlite_1.SQLite,
    StatusBar: statusbar_1.StatusBar,
    ThreeDeeTouch: _3dtouch_1.ThreeDeeTouch,
    Toast: toast_1.Toast,
    TouchID: touchid_1.TouchID,
    Transfer: filetransfer_1.Transfer,
    Vibration: vibration_1.Vibration,
    WebIntent: webintent_1.WebIntent
};
ng1_1.initAngular1(window['IonicNative']);
// To help developers using cordova, we listen for the device ready event and
// log an error if it didn't fire in a reasonable amount of time. Generally,
// when this happens, developers should remove and reinstall plugins, since
// an inconsistent plugin is often the culprit.
var before = +new Date();
var didFireReady = false;
document.addEventListener('deviceready', function () {
    console.log('DEVICE READY FIRED AFTER', +new Date() - before, 'ms');
    didFireReady = true;
});
setTimeout(function () {
    if (!didFireReady && window.cordova) {
        console.warn('Native: deviceready did not fire within ' + DEVICE_READY_TIMEOUT + 'ms. This can happen when plugins are in an inconsistent state. Try removing plugins from plugins/ and reinstalling them.');
    }
}, DEVICE_READY_TIMEOUT);
//# sourceMappingURL=index.js.map

/***/ },
/* 932 */
/***/ function(module, exports) {

"use strict";
"use strict";
/**
 * Initialize the ionic.native Angular module if we're running in ng1.
 * This iterates through the list of registered plugins and dynamically
 * creates Angular 1 services of the form $cordovaSERVICE, ex: $cordovStatusBar.
 */

function initAngular1(plugins) {
    if (window.angular) {
        window.angular.module('ionic.native', []);
        for (var name in plugins) {
            var serviceName = '$cordova' + name;
            var cls = plugins[name];
            (function (serviceName, cls, name) {
                window.angular.module('ionic.native').service(serviceName, [function () {
                    var funcs = {};
                    for (var k in cls) {
                        funcs[k] = cls[k];
                    }
                    funcs['name'] = name;
                    return funcs;
                }]);
            })(serviceName, cls, name);
        }
    }
}
exports.initAngular1 = initAngular1;
//# sourceMappingURL=ng1.js.map

/***/ },
/* 933 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Action Sheet
 * @description
 * The ActionSheet plugin shows a native list of options the user can choose from.
 *
 * Requires Cordova plugin: `cordova-plugin-actionsheet`. For more info, please see the [ActionSheet plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-actionsheet).
 *
 * @usage
 * ```ts
 * import {ActionSheet} from 'ionic-native';
 *
 * let buttonLabels = ['Share via Facebook', 'Share via Twitter'];
 * ActionSheet.show({
 *   'title': 'What do you want with this image?',
 *   'buttonLabels': buttonLabels,
 *   'addCancelButtonWithLabel': 'Cancel',
 *   'addDestructiveButtonWithLabel' : 'Delete'
 * }).then(buttonIndex => {
 *   console.log('Button pressed: ' + buttonLabels[buttonIndex - 1]);
 * });
 * ```
 *
 */
var ActionSheet = function () {
    function ActionSheet() {}
    /**
     * Show the ActionSheet. The ActionSheet's options is an object with the following propterties.
     *
     * | Option                        | Type      | Description                                  |
     * |-------------------------------|-----------|----------------------------------------------|
     * | title                         |`string`   | The title for the actionsheet                |
     * | buttonLabels                  |`string[]` | the labels for the buttons. Uses the index x |
     * | androidTheme                  |`number`   | Theme to be used on Android                  |
     * | androidEnableCancelButton     |`boolean`  | Enable a cancel on Android                   |
     * | winphoneEnableCancelButton    |`boolean`  | Enable a cancel on Windows Phone             |
     * | addCancelButtonWithLabel      |`string`   | Add a cancel button with text                |
     * | addDestructiveButtonWithLabel |`string`   | Add a destructive button with text           |
     * | position                      |`number[]` | On an iPad, set the X,Y position             |
     *
     * @param {options} Options See table above
     * @returns {Promise} Returns a Promise that resolves with the index of the
     *   button pressed (1 based, so 1, 2, 3, etc.)
     */
    ActionSheet.show = function (options) {
        return;
    };
    /**
     * Hide the ActionSheet.
     */
    ActionSheet.hide = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], ActionSheet, "show", null);
    __decorate([plugin_1.Cordova()], ActionSheet, "hide", null);
    ActionSheet = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-actionsheet',
        pluginRef: 'plugins.actionsheet',
        repo: 'https://github.com/EddyVerbruggen/cordova-plugin-actionsheet',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], ActionSheet);
    return ActionSheet;
}();
exports.ActionSheet = ActionSheet;
//# sourceMappingURL=actionsheet.js.map

/***/ },
/* 934 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name AdMob
 * @description Plugin for Google Ads, including AdMob / DFP (doubleclick for publisher) and mediations to other Ad networks.
 * @usage
 * Please refer the the plugin's original repository for detailed usage.
 */
var AdMob = function () {
    function AdMob() {}
    // Static Methods
    /**
     *
     * @param adIdOrOptions
     */
    AdMob.createBanner = function (adIdOrOptions) {
        return;
    };
    /**
     *
     */
    AdMob.removeBanner = function () {};
    /**
     *
     * @param position
     */
    AdMob.showBanner = function (position) {};
    /**
     *
     * @param x
     * @param y
     */
    AdMob.showBannerAtXY = function (x, y) {};
    /**
     *
     */
    AdMob.hideBanner = function () {};
    /**
     *
     * @param adIdOrOptions
     */
    AdMob.prepareInterstitial = function (adIdOrOptions) {
        return;
    };
    /**
     * Show interstitial
     */
    AdMob.showInterstitial = function () {};
    /**
     *
     */
    AdMob.isInterstitialReady = function () {
        return;
    };
    /**
     * Prepare a reward video ad
     * @param adIdOrOptions
     */
    AdMob.prepareRewardVideoAd = function (adIdOrOptions) {
        return;
    };
    /**
     * Show a reward video ad
     */
    AdMob.showRewardVideoAd = function () {};
    /**
     * Sets the values for configuration and targeting
     * @param options Returns a promise that resolves if the options are set successfully
     */
    AdMob.setOptions = function (options) {
        return;
    };
    /**
     * Get user ad settings
     * @returns {Promise<any>} Returns a promise that resolves with the ad settings
     */
    AdMob.getAdSettings = function () {
        return;
    };
    // Events
    AdMob.onBannerFailedToReceive = function () {
        return;
    };
    AdMob.onBannerReceive = function () {
        return;
    };
    AdMob.onBannerPresent = function () {
        return;
    };
    AdMob.onBannerLeaveApp = function () {
        return;
    };
    AdMob.onBannerDismiss = function () {
        return;
    };
    AdMob.onInterstitialFailedToReceive = function () {
        return;
    };
    AdMob.onInterstitialReceive = function () {
        return;
    };
    AdMob.onInterstitialPresent = function () {
        return;
    };
    AdMob.onInterstitialLeaveApp = function () {
        return;
    };
    AdMob.onInterstitialDismiss = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], AdMob, "createBanner", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], AdMob, "removeBanner", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], AdMob, "showBanner", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], AdMob, "showBannerAtXY", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], AdMob, "hideBanner", null);
    __decorate([plugin_1.Cordova()], AdMob, "prepareInterstitial", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], AdMob, "showInterstitial", null);
    __decorate([plugin_1.Cordova()], AdMob, "isInterstitialReady", null);
    __decorate([plugin_1.Cordova()], AdMob, "prepareRewardVideoAd", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], AdMob, "showRewardVideoAd", null);
    __decorate([plugin_1.Cordova()], AdMob, "setOptions", null);
    __decorate([plugin_1.Cordova()], AdMob, "getAdSettings", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onBannerFailedToReceive'
    })], AdMob, "onBannerFailedToReceive", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onBannerReceive'
    })], AdMob, "onBannerReceive", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onBannerPresent'
    })], AdMob, "onBannerPresent", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onBannerLeaveApp'
    })], AdMob, "onBannerLeaveApp", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onBannerDismiss'
    })], AdMob, "onBannerDismiss", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onInterstitialFailedToReceive'
    })], AdMob, "onInterstitialFailedToReceive", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onInterstitialReceive'
    })], AdMob, "onInterstitialReceive", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onInterstitialPresent'
    })], AdMob, "onInterstitialPresent", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onInterstitialLeaveApp'
    })], AdMob, "onInterstitialLeaveApp", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'onInterstitialDismiss'
    })], AdMob, "onInterstitialDismiss", null);
    AdMob = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-admobpro',
        pluginRef: 'AdMob',
        repo: 'https://github.com/floatinghotpot/cordova-admob-pro',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], AdMob);
    return AdMob;
}();
exports.AdMob = AdMob;
//# sourceMappingURL=admob.js.map

/***/ },
/* 935 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name App Availability
 * @description
 * This plugin allows you to check if an app is installed on the user's device. It requires an URI Scheme (e.g. twitter://) on iOS or a Package Name (e.g com.twitter.android) on Android.
 *
 * Requires Cordova plugin: cordova-plugin-appavailability. For more info, please see the [AppAvailability plugin docs](https://github.com/ohh2ahh/AppAvailability).
 *
 * @usage
 * ```js
 * import {AppAvailability} from 'ionic-native';
 *
 *
 * var app;
 *
 * if(device.platform === 'iOS') {
 *   app = 'twitter://';
 * }else if(device.platform === 'Android'){
 *   app = 'com.twitter.android';
 * }
 *
 * AppAvailability.check(app)
 *   .then(
 *     yes => console.log(app + " is available"),
 *     no => console.log(app + " is NOT available")
 *   );
 * ```
 */
var AppAvailability = function () {
    function AppAvailability() {}
    /**
     * Checks if an app is available on device
     * @param app Package name on android, or URI scheme on iOS
     * @returns {Promise<boolean>}
     */
    AppAvailability.check = function (app) {
        return;
    };
    __decorate([plugin_1.Cordova()], AppAvailability, "check", null);
    AppAvailability = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-appavailability',
        pluginRef: 'appAvailability',
        repo: 'https://github.com/ohh2ahh/AppAvailability',
        platforms: ['Android', 'iOS']
    })], AppAvailability);
    return AppAvailability;
}();
exports.AppAvailability = AppAvailability;
//# sourceMappingURL=appavailability.js.map

/***/ },
/* 936 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name App Rate
 * @description
 * The AppRate plugin makes it easy to prompt the user to rate your app, either now, later, or never.
 *
 * Requires Cordova plugin: cordova-plugin-apprate. For more info, please see the [AppRate plugin docs](https://github.com/pushandplay/cordova-plugin-apprate).
 *
 * @usage
 * ```js
 * import {AppRate} from 'ionic-native';
 *
 *
 * AppRate.preferences.storeAppURL.ios = '<my_app_id>';
 * AppRate.preferences.storeAppURL.android = 'market://details?id=<package_name>';
 * AppRate.preferences.storeAppURL.blackberry = 'appworld://content/[App Id]/';
 * AppRate.preferences.storeAppURL.windows8 = 'ms-windows-store:Review?name=<the Package Family Name of the application>';
 * AppRate.promptForRating();
 * ```
 */
var AppRate = function () {
    function AppRate() {}
    Object.defineProperty(AppRate, "preferences", {
        /**
         * Rating dialog preferences
         *
         * | Option                       | Type       | Default | Description                                                                            |
         * |------------------------------|------------|---------|----------------------------------------------------------------------------------------|
         * | useLanguage                  | `String`   | null    | custom BCP 47 language tag                                                             |
         * | displayAppName               | `String`   | ''      | custom application title                                                               |
         * | promptAgainForEachNewVersion | `Boolean`  | true    | show dialog again when application version will be updated                             |
         * | usesUntilPrompt              | `Integer`  | 3       | count of runs of application before dialog will be displayed                           |
         * | openStoreInApp               | `Boolean`  | false   | leave app or no when application page opened in app store (now supported only for iOS) |
         * | useCustomRateDialog          | `Boolean`  | false   | use custom view for rate dialog                                                        |
         * | callbacks.onButtonClicked    | `Function` | null    | call back function. called when user clicked on rate-dialog buttons                    |
         * | callbacks.onRateDialogShow   | `Function` | null    | call back function. called when rate-dialog showing                                    |
         * | storeAppURL.ios              | `String`   | null    | application id in AppStore                                                             |
         * | storeAppURL.android          | `String`   | null    | application URL in GooglePlay                                                          |
         * | storeAppURL.blackberry       | `String`   | null    | application URL in AppWorld                                                            |
         * | storeAppURL.windows8         | `String`   | null    | application URL in WindowsStore                                                        |
         * | customLocale                 | `Object`   | null    | custom locale object                                                                   |
         * @type {{}}
         */
        get: function get() {
            return window.AppRate.preferences;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Prompts the user for rating
     *
     * @param {boolean} immediately  Show the rating prompt immediately.
     */
    AppRate.promptForRating = function (immediately) {};
    ;
    __decorate([plugin_1.CordovaProperty], AppRate, "preferences", null);
    __decorate([plugin_1.Cordova()], AppRate, "promptForRating", null);
    AppRate = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-apprate',
        pluginRef: 'AppRate',
        repo: 'https://github.com/pushandplay/cordova-plugin-apprate',
        platforms: ['Android', 'iOS']
    })], AppRate);
    return AppRate;
}();
exports.AppRate = AppRate;
//# sourceMappingURL=apprate.js.map

/***/ },
/* 937 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name App Version
 * @description
 * Reads the version of your app from the target build settings.
 *
 * Requires Cordova plugin: `cordova-plugin-app-version`. For more info, please see the [Cordova App Version docs](https://github.com/whiteoctober/cordova-plugin-app-version).
 *
 * @usage
 * ```js
 * import {AppVersion} from 'ionic-native';
 *
 *
 *  AppVersion.getAppName();
 *  AppVersion.getPackageName();
 *  AppVersion.getVersionCode();
 *  AppVersion.getVersionNumber();
 * ```
 */
var AppVersion = function () {
    function AppVersion() {}
    /**
     * Returns the name of the app
     * @returns {Promise}
     */
    AppVersion.getAppName = function () {
        return;
    };
    /**
     * Returns the package name of the app
     * @returns {Promise}
     */
    AppVersion.getPackageName = function () {
        return;
    };
    /**
     * Returns the build identifier of the app
     * @returns {Promise}
     */
    AppVersion.getVersionCode = function () {
        return;
    };
    /**
     * Returns the version of the app
     * @returns {Promise}
     */
    AppVersion.getVersionNumber = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], AppVersion, "getAppName", null);
    __decorate([plugin_1.Cordova()], AppVersion, "getPackageName", null);
    __decorate([plugin_1.Cordova()], AppVersion, "getVersionCode", null);
    __decorate([plugin_1.Cordova()], AppVersion, "getVersionNumber", null);
    AppVersion = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-app-version',
        pluginRef: 'cordova.getAppVersion',
        repo: 'https://github.com/whiteoctober/cordova-plugin-app-version',
        platforms: ['Android', 'iOS']
    })], AppVersion);
    return AppVersion;
}();
exports.AppVersion = AppVersion;
//# sourceMappingURL=appversion.js.map

/***/ },
/* 938 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
* @name Background Mode
* @description
* Cordova plugin to prevent the app from going to sleep while in background.
*  Requires Cordova plugin: cordova-plugin-background-mode. For more info about plugin, vist: https://github.com/katzer/cordova-plugin-background-mode#android-customization
*@usage
* ```js
* import {BackgroundMode} from 'ionic-native';
*
* BackgroundMode.enable();
*/
var BackgroundMode = function () {
    function BackgroundMode() {}
    /**
    * Enable the background mode.
    * Once called, prevents the app from being paused while in background.
    */
    BackgroundMode.enable = function () {};
    /**
    * Disable the background mode.
    * Once the background mode has been disabled, the app will be paused when in background.
    */
    BackgroundMode.disable = function () {};
    /**
    * Checks if background mode is enabled or not.
    */
    BackgroundMode.isEnabled = function () {
        return;
    };
    /**
    * Can be used to get the information if the background mode is active.
    */
    BackgroundMode.isActive = function () {
        return;
    };
    /**
    * Override the default title, ticker and text.
    * Available only for Android platform.
    */
    BackgroundMode.setDefaults = function (options) {};
    /**
    * Modify the displayed information.
    * Available only for Android platform.
    */
    BackgroundMode.update = function (options) {};
    /**
    * Sets a callback for a specific event
    * Can be used to get notified or run function when the background mode has been activated, deactivated or failed.
    * @param eventName The name of the event. Available events: activate, deactivate, failure
    */
    BackgroundMode.on = function (eventName, callback) {};
    __decorate([plugin_1.Cordova({
        sync: true
    })], BackgroundMode, "enable", null);
    __decorate([plugin_1.Cordova()], BackgroundMode, "disable", null);
    __decorate([plugin_1.Cordova()], BackgroundMode, "isEnabled", null);
    __decorate([plugin_1.Cordova()], BackgroundMode, "isActive", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android']
    })], BackgroundMode, "setDefaults", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android']
    })], BackgroundMode, "update", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], BackgroundMode, "on", null);
    BackgroundMode = __decorate([plugin_1.Plugin({
        plugin: 'de.appplant.cordova.plugin.background-mode',
        pluginRef: 'cordova.plugins.backgroundMode',
        repo: 'https://github.com/katzer/cordova-plugin-background-mode',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], BackgroundMode);
    return BackgroundMode;
}();
exports.BackgroundMode = BackgroundMode;
//# sourceMappingURL=backgroundmode.js.map

/***/ },
/* 939 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Badge
 * @description
 * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.
 *
 * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).
 *
 * @usage
 * ```js
 * import {Badge} from 'ionic-native';
 *
 *
 * Badge.set(10);
 * Badge.increase();
 * Badge.clear();
 * ```
 */
var Badge = function () {
    function Badge() {}
    /**
     * Clear the badge of the app icon.
     */
    Badge.clear = function () {
        return;
    };
    /**
     * Set the badge of the app icon.
     * @param {number} badgeNumber  The new badge number.
     * @returns {Promise}
     */
    Badge.set = function (badgeNumber) {
        return;
    };
    /**
     * Get the badge of the app icon.
     * @returns {Promise}
     */
    Badge.get = function () {
        return;
    };
    /**
     * Increase the badge number.
     * @param {number} increaseBy  Count to add to the current badge number
     * @returns {Promise}
     */
    Badge.increase = function (increaseBy) {
        return;
    };
    /**
     * Decrease the badge number.
     * @param {number} decreaseBy  Count to subtract from the current badge number
     * @returns {Promise}
     */
    Badge.decrease = function (decreaseBy) {
        return;
    };
    /**
     * Determine if the app has permission to show badges.
     */
    Badge.hasPermission = function () {
        return;
    };
    /**
     * Register permission to set badge notifications
     * @returns {Promise}
     */
    Badge.registerPermission = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], Badge, "clear", null);
    __decorate([plugin_1.Cordova()], Badge, "set", null);
    __decorate([plugin_1.Cordova()], Badge, "get", null);
    __decorate([plugin_1.Cordova()], Badge, "increase", null);
    __decorate([plugin_1.Cordova()], Badge, "decrease", null);
    __decorate([plugin_1.Cordova()], Badge, "hasPermission", null);
    __decorate([plugin_1.Cordova()], Badge, "registerPermission", null);
    Badge = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-badge',
        pluginRef: 'cordova.plugins.notification.badge',
        repo: 'https://github.com/katzer/cordova-plugin-badge',
        platforms: ['Android', 'iOS', 'Browser', 'Windows', 'Amazon FireOS', 'Windows Phone 8']
    })], Badge);
    return Badge;
}();
exports.Badge = Badge;
//# sourceMappingURL=badge.js.map

/***/ },
/* 940 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Barcode Scanner
 * @description
 * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.
 *
 * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).
 *
 * @usage
 * ```js
 * import {BarcodeScanner} from 'ionic-native';
 *
 *
 * BarcodeScanner.scan().then((barcodeData) => {
 *  // Success! Barcode data is here
 * }, (err) => {
 * 	// An error occurred
 * });
 * ```
 */
var BarcodeScanner = function () {
    function BarcodeScanner() {}
    /**
     * Open the barcode scanner.
     * @return Returns a Promise that resolves with scanner data, or rejects with an error.
     */
    BarcodeScanner.scan = function (options) {
        return;
    };
    /**
     * Encodes data into a barcode.
     * NOTE: not well supported on Android
     * @param type
     * @param data
     */
    BarcodeScanner.encode = function (type, data) {
        return;
    };
    BarcodeScanner.Encode = {
        TEXT_TYPE: 'TEXT_TYPE',
        EMAIL_TYPE: 'EMAIL_TYPE',
        PHONE_TYPE: 'PHONE_TYPE',
        SMS_TYPE: 'SMS_TYPE'
    };
    __decorate([plugin_1.Cordova()], BarcodeScanner, "scan", null);
    __decorate([plugin_1.Cordova()], BarcodeScanner, "encode", null);
    BarcodeScanner = __decorate([plugin_1.Plugin({
        plugin: 'phonegap-plugin-barcodescanner',
        pluginRef: 'cordova.plugins.barcodeScanner',
        repo: 'https://github.com/phonegap/phonegap-plugin-barcodescanner',
        platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows 10', 'Windows 8', 'BlackBerry 10', 'Browser']
    })], BarcodeScanner);
    return BarcodeScanner;
}();
exports.BarcodeScanner = BarcodeScanner;
//# sourceMappingURL=barcodescanner.js.map

/***/ },
/* 941 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Base64 To Gallery
 * @description This plugin allows you to save base64 data as a png image into the device
 * @usage
 * ```ts
 * import {Base64ToGallery} from 'ionic-native';
 *
 *
 * Base64ToGallery.base64ToGallery(base64Data, 'img_').then(
 *   res => console.log("Saved image to gallery ", res),
 *   err => console.log("Error saving image to gallery ", err)
 * );
 * ```
 */
var Base64ToGallery = function () {
    function Base64ToGallery() {}
    /**
     * Converts a base64 string to an image file in the device gallery
     * @param data
     * @param prefix
     */
    Base64ToGallery.base64ToGallery = function (data, prefix) {
        return;
    };
    __decorate([plugin_1.Cordova()], Base64ToGallery, "base64ToGallery", null);
    Base64ToGallery = __decorate([plugin_1.Plugin({
        plugin: 'cordova-base64-to-gallery',
        pluginRef: 'cordova',
        repo: 'https://github.com/Nexxa/cordova-base64-to-gallery',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], Base64ToGallery);
    return Base64ToGallery;
}();
exports.Base64ToGallery = Base64ToGallery;
//# sourceMappingURL=base64togallery.js.map

/***/ },
/* 942 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name BLE
 * @description
 * This plugin enables communication between a phone and Bluetooth Low Energy (BLE) peripherals.
 *
 * The plugin provides a simple JavaScript API for iOS and Android.
 *
 * - Scan for peripherals
 * - Connect to a peripheral
 * - Read the value of a characteristic
 * - Write new value to a characteristic
 * - Get notified when characteristic's value changes
 *
 * Advertising information is returned when scanning for peripherals. Service, characteristic, and property info is returned when connecting to a peripheral. All access is via service and characteristic UUIDs. The plugin manages handles internally.
 *
 * Simultaneous connections to multiple peripherals are supported.
 *
 * @usage
 *
 * ## Peripheral Data
 *
 * Peripheral Data is passed to the success callback when scanning and connecting. Limited data is passed when scanning.
 *
 * ```ts
 *   {
 *       "name": "Battery Demo",
 *       "id": "20:FF:D0:FF:D1:C0",
 *       "advertising": [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],
 *       "rssi": -55
 *   }
 * ```
 * After connecting, the peripheral object also includes service, characteristic and descriptor information.
 *
 * ```ts
 *   {
 *       "name": "Battery Demo",
 *       "id": "20:FF:D0:FF:D1:C0",
 *       "advertising": [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],
 *       "rssi": -55,
 *       "services": [
 *           "1800",
 *           "1801",
 *           "180f"
 *       ],
 *       "characteristics": [
 *           {
 *               "service": "1800",
 *               "characteristic": "2a00",
 *               "properties": [
 *                   "Read"
 *               ]
 *           },
 *           {
 *               "service": "1800",
 *               "characteristic": "2a01",
 *               "properties": [
 *                   "Read"
 *               ]
 *           },
 *           {
 *               "service": "1801",
 *               "characteristic": "2a05",
 *               "properties": [
 *                   "Read"
 *               ]
 *           },
 *           {
 *               "service": "180f",
 *               "characteristic": "2a19",
 *               "properties": [
 *                   "Read"
 *               ],
 *               "descriptors": [
 *                   {
 *                       "uuid": "2901"
 *                   },
 *                   {
 *                       "uuid": "2904"
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 * ```
 *
 * ## Advertising Data
 * Bluetooth advertising data is returned in when scanning for devices. The format format varies depending on your platform. On Android advertising data will be the raw advertising bytes. iOS does not allow access to raw advertising data, so a dictionary of data is returned.
 *
 * The advertising information for both Android and iOS appears to be a combination of advertising data and scan response data.
 *
 * ### Android
 *
 * ```ts
 *   {
 *       "name": "demo",
 *       "id": "00:1A:7D:DA:71:13",
 *       "advertising": ArrayBuffer,
 *      "rssi": -37
 *  }
 * ```
 *
 * Convert the advertising info to a Uint8Array for processing. `var adData = new Uint8Array(peripheral.advertising)`
 *
 * ### iOS
 *
 * Note that iOS uses the string value of the constants for the [Advertisement Data Retrieval Keys](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys). This will likely change in the future.
 *
 * ```ts
 *   {
 *       "name": "demo",
 *       "id": "D8479A4F-7517-BCD3-91B5-3302B2F81802",
 *       "advertising": {
 *           "kCBAdvDataChannel": 37,
 *           "kCBAdvDataServiceData": {
 *               "FED8": {
 *                   "byteLength": 7 // data not shown
 *               }
 *           },
 *           "kCBAdvDataLocalName": "demo",
 *           "kCBAdvDataServiceUUIDs": ["FED8"],
 *           "kCBAdvDataManufacturerData": {
 *               "byteLength": 7  // data not shown
 *           },
 *           "kCBAdvDataTxPowerLevel": 32,
 *           "kCBAdvDataIsConnectable": true
 *       },
 *       "rssi": -53
 *   }
 * ```
 *
 * ## Typed Arrays
 *
 * This plugin uses typed Arrays or ArrayBuffers for sending and receiving data.
 *
 * This means that you need convert your data to ArrayBuffers before sending and from ArrayBuffers when receiving.
 *
 * ```ts
 *   // ASCII only
 *   function stringToBytes(string) {
 *      var array = new Uint8Array(string.length);
 *      for (var i = 0, l = string.length; i < l; i++) {
 *          array[i] = string.charCodeAt(i);
 *       }
 *       return array.buffer;
 *   }
 *
 *   // ASCII only
 *   function bytesToString(buffer) {
 *       return String.fromCharCode.apply(null, new Uint8Array(buffer));
 *   }
 * ```
 * You can read more about typed arrays in these articles on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) and [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/).
 *
 * ## UUIDs
 *
 * UUIDs are always strings and not numbers. Some 16-bit UUIDs, such as '2220' look like integers, but they're not. (The integer 2220 is 0x8AC in hex.) This isn't a problem with 128 bit UUIDs since they look like strings 82b9e6e1-593a-456f-be9b-9215160ebcac. All 16-bit UUIDs should also be passed to methods as strings.
 *
 */
var BLE = function () {
    function BLE() {}
    /**
     * Scan and discover BLE peripherals for the specified amount of time.
     *
     * @usage
     * ```
     * BLE.scan([], 5).subscribe(device => {
     *   console.log(JSON.stringify(device));
     * });
     * ```
     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices
     * @param {number} seconds  Number of seconds to run discovery
     * @return Returns an Observable that notifies of each peripheral that is discovered during the specified time.
     */
    BLE.scan = function (services, seconds) {
        return;
    };
    /**
     * Scan and discover BLE peripherals until `stopScan` is called.
     *
     * @usage
     * ```
     * BLE.startScan([]).subscribe(device => {
     *   console.log(JSON.stringify(device));
     * });
     *
     * setTimeout(() => {
     *   BLE.stopScan();
     * }, 5000);
     * ```
     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices
     * @return Returns an Observable that notifies of each peripheral discovered.
     */
    BLE.startScan = function (services) {
        return;
    };
    /**
     * Stop a scan started by `startScan`.
     *
     * @usage
     * ```
     * BLE.startScan([]).subscribe(device => {
     *   console.log(JSON.stringify(device));
     * });
     * setTimeout(() => {
     *   BLE.stopScan().then(() => { console.log('scan stopped'); });
     * }, 5000);
     * ```
     * @return returns a Promise.
     */
    BLE.stopScan = function () {
        return;
    };
    /**
     * Connect to a peripheral.
     * @usage
     * ```
     *   BLE.connect('12:34:56:78:9A:BC').subscribe(peripheralData => {
     *     console.log(peripheralData);
     *   },
     *   peripheralData => {
     *     console.log('disconnected');
     *   });
     * ```
     * @param deviceId {string}  UUID or MAC address of the peripheral
     * @return Returns an Observable that notifies of connect/disconnect.
     */
    BLE.connect = function (deviceId) {
        return;
    };
    /**
     * Disconnect from a peripheral.
     * @usage
     * ```
     *   BLE.disconnect('12:34:56:78:9A:BC').then(() => {
     *     console.log('Disconnected');
     *   });
     * ```
     * @param deviceId {string}  UUID or MAC address of the peripheral
     * @return Returns a Promise
     */
    BLE.disconnect = function (deviceId) {
        return;
    };
    /**
     * Read the value of a characteristic.
     *
     * @param {string} deviceId  UUID or MAC address of the peripheral
     * @param {string} serviceUUID  UUID of the BLE service
     * @param {string} characteristicUUID  UUID of the BLE characteristic
     * @return Returns a Promise
     */
    BLE.read = function (deviceId, serviceUUID, characteristicUUID) {
        return;
    };
    ;
    /**
     * Write the value of a characteristic.
     * @usage
     * ```
     * // send 1 byte to switch a light on
     * var data = new Uint8Array(1);
     * data[0] = 1;
     * BLE.write(device_id, "FF10", "FF11", data.buffer);
     *
     * // send a 3 byte value with RGB color
     * var data = new Uint8Array(3);
     * data[0] = 0xFF;  // red
     * data[0] = 0x00; // green
     * data[0] = 0xFF; // blue
     * BLE.write(device_id, "ccc0", "ccc1", data.buffer);
     *
     * // send a 32 bit integer
     * var data = new Uint32Array(1);
     * data[0] = counterInput.value;
     * BLE.write(device_id, SERVICE, CHARACTERISTIC, data.buffer);
     *
     * ```
     * @param {string} deviceId  UUID or MAC address of the peripheral
     * @param {string} serviceUUID  UUID of the BLE service
     * @param {string} characteristicUUID  UUID of the BLE characteristic
     * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.
     * @return Returns a Promise
     */
    BLE.write = function (deviceId, serviceUUID, characteristicUUID, value) {
        return;
    };
    /**
     * Write the value of a characteristic without waiting for confirmation from the peripheral.
     *
     * @param {string} deviceId  UUID or MAC address of the peripheral
     * @param {string} serviceUUID  UUID of the BLE service
     * @param {string} characteristicUUID  UUID of the BLE characteristic
     * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.
     * @return Returns a Promise
     */
    BLE.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) {
        return;
    };
    /**
     * Register to be notified when the value of a characteristic changes.
     *
     * @usage
     * ```
     * BLE.startNotification(device_id, "FF10", "FF11").subscribe(buffer => {
     *   console.log(String.fromCharCode.apply(null, new Uint8Array(buffer));
     * });
     * ```
     *
     * @param {string} deviceId  UUID or MAC address of the peripheral
     * @param {string} serviceUUID  UUID of the BLE service
     * @param {string} characteristicUUID  UUID of the BLE characteristic
     * @return Returns an Observable that notifies of characteristic changes.
     */
    BLE.startNotification = function (deviceId, serviceUUID, characteristicUUID) {
        return;
    };
    /**
     * Stop being notified when the value of a characteristic changes.
     *
     * @param {string} deviceId  UUID or MAC address of the peripheral
     * @param {string} serviceUUID  UUID of the BLE service
     * @param {string} characteristicUUID  UUID of the BLE characteristic
     * @return Returns a Promise.
     */
    BLE.stopNotification = function (deviceId, serviceUUID, characteristicUUID) {
        return;
    };
    /**
     * Report the connection status.
     *
     * @usage
     * ```
     * BLE.isConnected('FFCA0B09-CB1D-4DC0-A1EF-31AFD3EDFB53').then(
     *   () => { console.log('connected'); },
     *   () => { console.log('not connected'); }
     * );
     * ```
     * @param {string} deviceId  UUID or MAC address of the peripheral
     * @return Returns a Promise.
     */
    BLE.isConnected = function (deviceId) {
        return;
    };
    /**
     * Report if bluetooth is enabled.
     *
     * @usage
     * ```
     * BLE.isEnabled().then(
     *   () => { console.log('enabled'); },
     *   () => { console.log('not enabled'); }
     * );
     * ```
     * @return Returns a Promise.
     */
    BLE.isEnabled = function () {
        return;
    };
    /**
     * Open System Bluetooth settings (Android only).
     *
     * @return Returns a Promise.
     */
    BLE.showBluetoothSettings = function () {
        return;
    };
    /**
     * Enable Bluetooth on the device (Android only).
     *
     * @return Returns a Promise.
     */
    BLE.enable = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        observable: true
    })], BLE, "scan", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'stopScan',
        clearWithArgs: true
    })], BLE, "startScan", null);
    __decorate([plugin_1.Cordova()], BLE, "stopScan", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'disconnect',
        clearWithArgs: true
    })], BLE, "connect", null);
    __decorate([plugin_1.Cordova()], BLE, "disconnect", null);
    __decorate([plugin_1.Cordova()], BLE, "read", null);
    __decorate([plugin_1.Cordova()], BLE, "write", null);
    __decorate([plugin_1.Cordova()], BLE, "writeWithoutResponse", null);
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'stopNotification',
        clearWithArgs: true
    })], BLE, "startNotification", null);
    __decorate([plugin_1.Cordova()], BLE, "stopNotification", null);
    __decorate([plugin_1.Cordova()], BLE, "isConnected", null);
    __decorate([plugin_1.Cordova()], BLE, "isEnabled", null);
    __decorate([plugin_1.Cordova()], BLE, "showBluetoothSettings", null);
    __decorate([plugin_1.Cordova()], BLE, "enable", null);
    BLE = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-ble-central',
        pluginRef: 'ble',
        repo: 'https://github.com/don/cordova-plugin-ble-central',
        platforms: ['iOS', 'Android']
    })], BLE);
    return BLE;
}();
exports.BLE = BLE;
//# sourceMappingURL=ble.js.map

/***/ },
/* 943 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Bluetooth Serial
 * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino.
 * @usage
 */
var BluetoothSerial = function () {
    function BluetoothSerial() {}
    /**
     * Connect to a Bluetooth device
     * Returns an Observable. Subscribe to connect, unsubscribe to disconnect.
     * @param macAddress_or_uuid Identifier of the remote device
     */
    BluetoothSerial.connect = function (macAddress_or_uuid) {
        return;
    };
    /**
     * Connect insecurely to a Bluetooth device
     * Returns an Observable. Subscribe to connect, unsubscribe to disconnect.
     * @param macAddress Identifier of the remote device
     */
    BluetoothSerial.connectInsecure = function (macAddress) {
        return;
    };
    /**
     * Writes data to the serial port
     * @param data ArrayBuffer of data
     * @usage
     * ```ts
     * // Write a string
     * Bluetooth.write("hello world").then(success, failure);
     *
     * // Array of int or bytes
     * Bluetooth.write([186, 220, 222]).then(success, failure);
     *
     * // Typed Array
     * var data = new Uint8Array(4);
     * data[0] = 0x41;
     * data[1] = 0x42;
     * data[2] = 0x43;
     * data[3] = 0x44;
     * Bluetooth.write(data).then(success, failure);
     *
     * // Array Buffer
     * Bluetooth.write(data.buffer).then(success, failure);
     * ```
     */
    BluetoothSerial.write = function (data) {
        return;
    };
    /**
     * Gets the number of bytes of data available
     */
    BluetoothSerial.available = function () {
        return;
    };
    /**
     * Reads data from the buffer
     */
    BluetoothSerial.read = function () {
        return;
    };
    /**
     * Reads data from the buffer until it reaches a delimiter
     * @param delimiter
     */
    BluetoothSerial.readUntil = function (delimiter) {
        return;
    };
    /**
     * Subscribe to be notified when data is received
     * @param delimiter
     */
    BluetoothSerial.subscribe = function (delimiter) {
        return;
    };
    /**
     * Subscribe to be notified when data is received
     */
    BluetoothSerial.subscribeRawData = function () {
        return;
    };
    /**
     * Clears data in buffer
     */
    BluetoothSerial.clear = function () {
        return;
    };
    /**
     * Lists bonded devices
     */
    BluetoothSerial.list = function () {
        return;
    };
    /**
     * Reports if bluetooth is enabled
     */
    BluetoothSerial.isEnabled = function () {
        return;
    };
    /**
     * Reports the connection status
     */
    BluetoothSerial.isConnected = function () {
        return;
    };
    /**
     * Reads the RSSI from the connected peripheral
     */
    BluetoothSerial.readRSSI = function () {
        return;
    };
    /**
     * Show the Bluetooth settings on the device
     */
    BluetoothSerial.showBluetoothSettings = function () {
        return;
    };
    /**
     * Enable Bluetooth on the device
     */
    BluetoothSerial.enable = function () {
        return;
    };
    /**
     * Discover unpaired devices
     * @usage
     * ```ts
     * [{
     *    "class": 276,
     *    "id": "10:BF:48:CB:00:00",
     *    "address": "10:BF:48:CB:00:00",
     *    "name": "Nexus 7"
     * }, {
     *    "class": 7936,
     *    "id": "00:06:66:4D:00:00",
     *    "address": "00:06:66:4D:00:00",
     *    "name": "RN42"
     * }]
     * ```
     */
    BluetoothSerial.discoverUnpaired = function () {
        return;
    };
    /**
     * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.
     */
    BluetoothSerial.setDeviceDiscoveredListener = function () {
        return;
    };
    /**
     * Sets the human readable device name that is broadcasted to other devices
     * @param newName Desired name of device
     */
    BluetoothSerial.setName = function (newName) {};
    /**
     * Makes the device discoverable by other devices
     * @param discoverableDuration Desired number of seconds device should be discoverable for
     */
    BluetoothSerial.setDiscoverable = function (discoverableDuration) {};
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone'],
        observable: true,
        clearFunction: 'disconnect'
    })], BluetoothSerial, "connect", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android'],
        observable: true,
        clearFunction: 'disconnect'
    })], BluetoothSerial, "connectInsecure", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "write", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "available", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "read", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "readUntil", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone'],
        observable: true,
        clearFunction: 'unsubscribe'
    })], BluetoothSerial, "subscribe", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone'],
        observable: true,
        clearFunction: 'unsubscribeRawData'
    })], BluetoothSerial, "subscribeRawData", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "clear", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "list", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "isEnabled", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "isConnected", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "readRSSI", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "showBluetoothSettings", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "enable", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone']
    })], BluetoothSerial, "discoverUnpaired", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android', 'iOS', 'Windows Phone'],
        observable: true,
        clearFunction: 'clearDeviceDiscoveredListener'
    })], BluetoothSerial, "setDeviceDiscoveredListener", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android'],
        sync: true
    })], BluetoothSerial, "setName", null);
    __decorate([plugin_1.Cordova({
        platforms: ['Android'],
        sync: true
    })], BluetoothSerial, "setDiscoverable", null);
    BluetoothSerial = __decorate([plugin_1.Plugin({
        repo: 'https://github.com/don/BluetoothSerial',
        plugin: 'cordova-plugin-bluetooth-serial',
        pluginRef: 'bluetoothSerial',
        platforms: ['Android', 'iOS', 'Windows Phone', 'Browser']
    })], BluetoothSerial);
    return BluetoothSerial;
}();
exports.BluetoothSerial = BluetoothSerial;
//# sourceMappingURL=bluetoothserial.js.map

/***/ },
/* 944 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Brightness
 * @description
 * The Brightness plugin let you control the display brightness of your device.
 *
 * Requires Cordova plugin: `cordova-plugin-brightness`. For more info, please see the [Brightness plugin docs](https://github.com/mgcrea/cordova-plugin-brightness).
 *
 * @usage
 * ```ts
 * import {Brightness} from 'ionic-native';
 *
 * let brightnessValue: number = 0.8;
 * Brightness.setBrightness(brightnessValue);
 * ```
 *
 */
var Brightness = function () {
    function Brightness() {}
    /**
     * Sets the brightness of the display.
     *
     * @param {value} Floating number between 0 and 1 in which case 1 means 100% brightness and 0 means 0% brightness.
     * @returns {Promise} Returns a Promise that resolves if setting brightness was successful.
     */
    Brightness.setBrightness = function (value) {
        return;
    };
    /**
     * Reads the current brightness of the device display.
     *
     * @returns {Promise} Returns a Promise that resolves with the
     * brightness value of the device display (floating number between 0 and 1).
     */
    Brightness.getBrightness = function () {
        return;
    };
    /**
    * Keeps the screen on. Prevents the device from setting the screen to sleep.
    */
    Brightness.setKeepScreenOn = function (value) {};
    __decorate([plugin_1.Cordova()], Brightness, "setBrightness", null);
    __decorate([plugin_1.Cordova()], Brightness, "getBrightness", null);
    __decorate([plugin_1.Cordova()], Brightness, "setKeepScreenOn", null);
    Brightness = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-brightness',
        pluginRef: 'plugins.brightness',
        repo: 'https://github.com/mgcrea/cordova-plugin-brightness',
        platforms: ['Android', 'iOS']
    })], Brightness);
    return Brightness;
}();
exports.Brightness = Brightness;
//# sourceMappingURL=brightness.js.map

/***/ },
/* 945 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Clipboard
 * @description
 * Clipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.
 *
 * Requires Cordova plugin: https://github.com/VersoSolutions/CordovaClipboard
 * For more info, please see the [Clipboard plugin docs](https://github.com/VersoSolutions/CordovaClipboard.git).
 *
 * @usage
 * ```js
 * import {Clipboard} from 'ionic-native';
 *
 *
 *
 * Clipboard.copy("Hello world");
 *
 * Clipboard.paste().then(
 *    (resolve : string) => {
  *     alert(resolve);
*     },
 *     (reject : string) => {
 *     alert("Error: " + reject);
 *     }
*     );
 * );
 * ```
 */
var Clipboard = function () {
    function Clipboard() {}
    /**
     * Copies the given text
     * @param text
     * @returns {Promise<T>}
     */
    Clipboard.copy = function (text) {
        return;
    };
    /**
     * Pastes the text stored in clipboard
     * @returns {Promise<T>}
     */
    Clipboard.paste = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], Clipboard, "copy", null);
    __decorate([plugin_1.Cordova()], Clipboard, "paste", null);
    Clipboard = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/VersoSolutions/CordovaClipboard.git',
        pluginRef: 'cordova.plugins.clipboard',
        repo: 'https://github.com/VersoSolutions/CordovaClipboard',
        platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser']
    })], Clipboard);
    return Clipboard;
}();
exports.Clipboard = Clipboard;
//# sourceMappingURL=clipboard.js.map

/***/ },
/* 946 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name DB Meter
 * @description This plugin defines a global DBMeter object, which permits to get the decibel values from the microphone.
 * @usage
 * ```ts
 * import {DBMeter} from 'ionic-native';
 *
 *
 *
 * // Start listening
 * let subscription = DBMeter.start().subscribe(
 *   data => console.log(data)
 * );
 *
 * // Check if we are listening
 * DBMeter.isListening().then(
 *   (isListening : boolean) => console.log(isListening)
 * );
 *
 * // Stop listening
 * subscription.unsubscribe();
 *
 * // Delete DBMeter instance from memory
 * DBMeter.delete().then(
 *   () => console.log("Deleted DB Meter instance"),
 *   error => console.log("Error occurred while deleting DB Meter instance")
 * );
 * ```
 */
var DBMeter = function () {
    function DBMeter() {}
    /**
     * Starts listening
     * @return {Observable<string>} Returns an observable. Subscribe to start listening. Unsubscribe to stop listening.
     */
    DBMeter.start = function () {
        return;
    };
    /**
     * Stops listening
     * @private
     */
    DBMeter.stop = function () {
        return;
    };
    /**
     * Check if the DB Meter is listening
     * @return {Promise<boolean>} Returns a promise that resolves with a boolean that tells us whether the DB meter is listening
     */
    DBMeter.isListening = function () {
        return;
    };
    /**
     * Delete the DB Meter instance
     * @return {Promise<any>} Returns a promise that will resolve if the instance has been deleted, and rejects if errors occur.
     */
    DBMeter.delete = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        observable: true,
        clearFunction: 'stop'
    })], DBMeter, "start", null);
    __decorate([plugin_1.Cordova()], DBMeter, "stop", null);
    __decorate([plugin_1.Cordova()], DBMeter, "isListening", null);
    __decorate([plugin_1.Cordova()], DBMeter, "delete", null);
    DBMeter = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-dbmeter',
        pluginRef: 'DBMeter',
        repo: 'https://github.com/akofman/cordova-plugin-dbmeter',
        platforms: ['iOS', 'Android']
    })], DBMeter);
    return DBMeter;
}();
exports.DBMeter = DBMeter;
//# sourceMappingURL=dbmeter.js.map

/***/ },
/* 947 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Ionic Deeplinks
 * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links
 * and Universal App Links.
 *
 * @usage
 * ```ts
 * import {IonicDeeplinks} from 'ionic-native';
 *
 * ```
 */
var Deeplinks = function () {
    function Deeplinks() {}
    /**
     * Define a set of paths to match against incoming deeplinks.
     *
     * @param {paths} Define a set of paths to match against incoming deeplinks.
     * paths takes an object of the form { 'path': data }. If a deeplink
     * matches the path, the resulting path-data pair will be returned in the
     * promise result which you can then use to navigate in the app as you see fit.
     * @returns {Promise} Returns a Promise that resolves when a deeplink comes through, and
     * is rejected if a deeplink comes through that does not match a given path.
     */
    Deeplinks.route = function (paths) {
        return;
    };
    /**
     *
     * This is a convenience version of `route` that takes a reference to a NavController
     * from Ionic 2, or a custom class that conforms to this protocol:
     *
     * NavController.push = function(View, Params){}
     *
     * This handler will automatically navigate when a route matches. If you need finer-grained
     * control over the behavior of a matching deeplink, use the plain `route` method.
     *
     * @param {paths} Define a set of paths to match against incoming deeplinks.
     * paths takes an object of the form { 'path': data }. If a deeplink
     * matches the path, the resulting path-data pair will be returned in the
     * promise result which you can then use to navigate in the app as you see fit.
     *
     * @returns {Promise} Returns a Promise that resolves when a deeplink comes through, and
     * is rejected if a deeplink comes through that does not match a given path.
     */
    Deeplinks.routeWithNavController = function (navController, paths) {
        return;
    };
    __decorate([plugin_1.Cordova({
        observable: true
    })], Deeplinks, "route", null);
    __decorate([plugin_1.Cordova({
        observable: true
    })], Deeplinks, "routeWithNavController", null);
    Deeplinks = __decorate([plugin_1.Plugin({
        plugin: 'ionic-plugin-deeplinks',
        pluginRef: 'IonicDeeplink',
        repo: 'https://github.com/driftyo/ionic-plugin-deeplinks',
        platforms: ['iOS', 'Android']
    })], Deeplinks);
    return Deeplinks;
}();
exports.Deeplinks = Deeplinks;
//# sourceMappingURL=deeplinks.js.map

/***/ },
/* 948 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var DeviceAccounts = function () {
    function DeviceAccounts() {}
    /**
     *  Gets all accounts registered on the Android Device
     */
    DeviceAccounts.get = function () {
        return;
    };
    /**
     *  Get all accounts registered on Android device for requested type
     */
    DeviceAccounts.getByType = function (type) {
        return;
    };
    /**
     *  Get all emails registered on Android device (accounts with 'com.google' type)
     */
    DeviceAccounts.getEmails = function () {
        return;
    };
    /**
     *  Get the first email registered on Android device
     */
    DeviceAccounts.getEmail = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], DeviceAccounts, "get", null);
    __decorate([plugin_1.Cordova()], DeviceAccounts, "getByType", null);
    __decorate([plugin_1.Cordova()], DeviceAccounts, "getEmails", null);
    __decorate([plugin_1.Cordova()], DeviceAccounts, "getEmail", null);
    DeviceAccounts = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/loicknuchel/cordova-device-accounts.git',
        pluginRef: 'plugins.DeviceAccounts',
        repo: 'https://github.com/loicknuchel/cordova-device-accounts',
        platforms: ['Android']
    })], DeviceAccounts);
    return DeviceAccounts;
}();
exports.DeviceAccounts = DeviceAccounts;
//# sourceMappingURL=deviceaccounts.js.map

/***/ },
/* 949 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var Diagnostic = function () {
    function Diagnostic() {}
    /**
     * Checks if app is able to access device location.
     */
    Diagnostic.isLocationEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /**
     * Checks if Wifi is connected/enabled. On iOS this returns true if the device is connected to a network by WiFi. On Android and Windows 10 Mobile this returns true if the WiFi setting is set to enabled.
     * On Android this requires permission. `<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />`
     */
    Diagnostic.isWifiEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if the device has a camera. On Android this returns true if the device has a camera. On iOS this returns true if both the device has a camera AND the application is authorized to use it. On Windows 10 Mobile this returns true if both the device has a rear-facing camera AND the
     * application is authorized to use it.
     */
    Diagnostic.isCameraEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if the device has Bluetooth capabilities and if so that Bluetooth is switched on (same on Android, iOS and Windows 10 Mobile)
     * On Android this requires permission <uses-permission android:name="android.permission.BLUETOOTH" />
     */
    Diagnostic.isBluetoothEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Returns the location authorization status for the application.
     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
     *
     * mode - (iOS-only / optional) location authorization mode: "always" or "when_in_use". If not specified, defaults to "when_in_use".
     */
    Diagnostic.requestLocationAuthorization = function (mode) {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if the application is authorized to use location.
     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
     */
    Diagnostic.isLocationAuthorized = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if camera hardware is present on device.
     */
    Diagnostic.isCameraPresent = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if the application is authorized to use the camera.
     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
     */
    Diagnostic.isCameraAuthorized = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if location mode is set to return high-accuracy locations from GPS hardware.
     *   Returns true if Location mode is enabled and is set to either:
     *   - Device only = GPS hardware only (high accuracy)
     *   - High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
     */
    Diagnostic.isGpsLocationEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /*
     * Checks if location mode is set to return low-accuracy locations from network triangulation/WiFi access points.
     * Returns true if Location mode is enabled and is set to either:
     *   - Battery saving = network triangulation and Wifi network IDs (low accuracy)
     *   - High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
     */
    Diagnostic.isNetworkLocationEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /**
     *
     * Checks if remote (push) notifications are enabled.
     * On iOS 8+, returns true if app is registered for remote notifications AND "Allow Notifications" switch is ON AND alert style is not set to "None" (i.e. "Banners" or "Alerts").
     * On iOS <=7, returns true if app is registered for remote notifications AND alert style is not set to "None" (i.e. "Banners" or "Alerts") - same as isRegisteredForRemoteNotifications().
     */
    Diagnostic.isRemoteNotificationsEnabled = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    /**
     *
     * Indicates if the app is registered for remote (push) notifications on the device.
     * On iOS 8+, returns true if the app is registered for remote notifications and received its device token, or false if registration has not occurred, has failed, or has been denied by the user. Note that user preferences for notifications in the Settings app will not affect this.
     * On iOS <=7, returns true if app is registered for remote notifications AND alert style is not set to "None" (i.e. "Banners" or "Alerts") - same as isRemoteNotificationsEnabled().
     */
    Diagnostic.isRegisteredForRemoteNotifications = function () {
        // This Promise is replaced by one from the @Cordova decorator that wraps
        // the plugin's callbacks. We provide a dummy one here so TypeScript
        // knows that the correct return type is Promise, because there's no way
        // for it to know the return type from a decorator.
        // See https://github.com/Microsoft/TypeScript/issues/4881
        return new Promise(function (res, rej) {});
    };
    __decorate([plugin_1.Cordova()], Diagnostic, "isLocationEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isWifiEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isCameraEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isBluetoothEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "requestLocationAuthorization", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isLocationAuthorized", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isCameraPresent", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isCameraAuthorized", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isGpsLocationEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isNetworkLocationEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isRemoteNotificationsEnabled", null);
    __decorate([plugin_1.Cordova()], Diagnostic, "isRegisteredForRemoteNotifications", null);
    Diagnostic = __decorate([plugin_1.Plugin({
        plugin: 'cordova.plugins.diagnostic',
        pluginRef: 'cordova.plugins.diagnostic',
        repo: 'https://github.com/floatinghotpot/cordova-plugin-admob'
    })], Diagnostic);
    return Diagnostic;
}();
exports.Diagnostic = Diagnostic;
//# sourceMappingURL=diagnostic.js.map

/***/ },
/* 950 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Dialogs
 * @description
 * This plugin gives you ability to access and customize the device native dialogs.
 *
 * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).
 *
 * @usage
 * ```js
 * import {Dialogs} from 'ionic-native';
 *
 *
 *
 *
 * ```
 */
var Dialogs = function () {
    function Dialogs() {}
    /**
     * Shows a custom alert or dialog box.
     * @param message Dialog message. (String)
     * @param title Dialog title. (String) (Optional, defaults to Alert)
     * @param buttonName Button name. (String) (Optional, defaults to OK)
     * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.
     */
    Dialogs.alert = function (message, title, buttonName) {
        if (title === void 0) {
            title = 'Alert';
        }
        if (buttonName === void 0) {
            buttonName = 'OK';
        }
        return;
    };
    /**
     * Displays a customizable confirmation dialog box.
     * @param message Dialog message. (String)
     * @param title Dialog title. (String) (Optional, defaults to Confirm)
     * @param buttonLabels Array of strings specifying button labels. (Array) (Optional, defaults to [OK,Cancel])
     * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked. Note that the index use one-based indexing.
     */
    Dialogs.confirm = function (message, title, buttonLabels) {
        if (title === void 0) {
            title = 'Confirm';
        }
        if (buttonLabels === void 0) {
            buttonLabels = ['OK', 'Cancel'];
        }
        return;
    };
    /**
     * Displays a native dialog box that is more customizable than the browser's prompt function.
     * @param message Dialog message. (String)
     * @param title Dialog title (String) (Optional, defaults to Prompt)
     * @param buttonLabels  Array of strings specifying button labels (Array) (Optional, defaults to ["OK","Cancel"])
     * @param defaultText Default textbox input value (String) (Optional, Default: empty string)
     * @returns {Promise<any>} Returns a promise that resolves an object with the button index clicked and the text entered
     */
    Dialogs.prompt = function (message, title, buttonLabels, defaultText) {
        if (title === void 0) {
            title = 'Prompt';
        }
        if (buttonLabels === void 0) {
            buttonLabels = ['OK', 'Cancel'];
        }
        if (defaultText === void 0) {
            defaultText = '';
        }
        return;
    };
    /**
     * The device plays a beep sound.
     * @param times The number of times to repeat the beep. (Number)
     */
    Dialogs.beep = function (times) {};
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 4
    })], Dialogs, "alert", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 4
    })], Dialogs, "confirm", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 5
    })], Dialogs, "prompt", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], Dialogs, "beep", null);
    Dialogs = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-dialogs',
        pluginRef: 'navigator.notification',
        repo: 'https://github.com/apache/cordova-plugin-dialogs.git'
    })], Dialogs);
    return Dialogs;
}();
exports.Dialogs = Dialogs;
//# sourceMappingURL=dialogs.js.map

/***/ },
/* 951 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Email Composer
 * @description
 *
 * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/katzer/cordova-plugin-email-composer).
 *
 * DISCLAIMER: This plugin is experiencing issues with the latest versions of Cordova. Use at your own risk. Functionality is not guaranteed. Please stay tuned for a more stable version.
 *
 * @usage
 * ```ts
 * import {EmailComposer} from 'ionic-native';
 *
 *
 * EmailComposer.isAvailable().then((available) =>{
 *  if(available) {
 *    //Now we know we can send
 *  }
 * });
 *
 * let email = {
 *   to: 'max@mustermann.de',
 *   cc: 'erika@mustermann.de',
 *   bcc: ['john@doe.com', 'jane@doe.com'],
 *   attachments: [
 *     'file://img/logo.png',
 *     'res://icon.png',
 *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',
 *     'file://README.pdf'
 *   ],
 *   subject: 'Cordova Icons',
 *   body: 'How are you? Nice greetings from Leipzig',
 *   isHtml: true
 * };
 *
 * // Send a text message using default options
 * EmailComposer.open(email);
 *
 * ```
 */
var EmailComposer = function () {
    function EmailComposer() {}
    /**
     * Verifies if sending emails is supported on the device.
     *
     * @param app {string?} An optional app id or uri scheme.
     * @returns {Promise<boolean>} Resolves if available, rejects if not available
     */
    EmailComposer.isAvailable = function (app) {
        return new Promise(function (resolve, reject) {
            if (app) cordova.plugins.email.isAvailable(app, function (isAvailable) {
                if (isAvailable) resolve();else reject();
            });else cordova.plugins.email.isAvailable(function (isAvailable) {
                if (isAvailable) resolve();else reject();
            });
        });
    };
    /**
     * Adds a new mail app alias.
     *
     * @param alias {string} The alias name
     * @param packageName {string} The package name
     */
    EmailComposer.addAlias = function (alias, packageName) {};
    /**
     * Displays the email composer pre-filled with data.
     *
     * @param email {Email} Email
     * @param scope {any?} An optional scope for the promise
     * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened
     */
    EmailComposer.open = function (email, scope) {
        return;
    };
    __decorate([plugin_1.Cordova()], EmailComposer, "addAlias", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 3
    })], EmailComposer, "open", null);
    EmailComposer = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-email-composer',
        pluginRef: 'cordova.plugins.email',
        repo: 'https://github.com/katzer/cordova-plugin-email-composer.git',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], EmailComposer);
    return EmailComposer;
}();
exports.EmailComposer = EmailComposer;
//# sourceMappingURL=emailcomposer.js.map

/***/ },
/* 952 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Facebook
 * @description
 * Use the Facebook Connect plugin to obtain access to the native FB application on iOS and Android.
 *
 * Requires Cordova plugin: `cordova-plugin-facebook4`. For more info, please see the [Facebook Connect](https://github.com/jeduan/cordova-plugin-facebook4).
 *
 * #### Installation
 *
 *  To use the FB plugin, you first have to create a new Facebook App inside of the Facebook developer portal at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
 *
 * [![fb-getstarted-1](/img/docs/native/Facebook/1.png)](https://developers.facebook.com/apps/)
 *
 * Retrieve the `App ID` and `App Name`.
 *
 * [![fb-getstarted-2](/img/docs/native/Facebook/2.png)](https://developers.facebook.com/apps/)
 *
 * Then type in the following command in your Terminal, where APP_ID and APP_NAME are the values from the Facebook Developer portal.
 *
 * ```bash
 *  ionic plugin add cordova-plugin-facebook4 --save --variable APP_ID="123456789" --variable APP_NAME="myApplication"
 * ```
 *
 * After, you'll need to add the native platforms you'll be using to your app in the Facebook Developer portal under your app's Settings:
 *
 * [![fb-getstarted-3](/img/docs/native/Facebook/3.png)](https://developers.facebook.com/apps/)
 *
 * Click `'Add Platform'`.
 *
 * [![fb-getstarted-4](/img/docs/native/Facebook/4.png)](https://developers.facebook.com/apps/)
 *
 * At this point you'll need to open your project's [`config.xml`](https://cordova.apache.org/docs/en/latest/config_ref/index.html) file, found in the root directory of your project.
 *
 * Take note of the `id` for the next step:
 * ```
 * <widget id="com.mycompany.testapp" version="0.0.1" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
 * ```
 *
 * You can also edit the `id` to whatever you'd like it to be.
 *
 * #### iOS Install
 * Under 'Bundle ID', add the `id` from your `config.xml` file:
 *
 * [![fb-getstarted-5](/img/docs/native/Facebook/5.png)](https://developers.facebook.com/apps/)
 *
 *
 * #### Android Install
 * Under 'Google Play Package Name', add the `id` from your `config.xml` file:
 *
 * [![fb-getstarted-6](/img/docs/native/Facebook/6.png)](https://developers.facebook.com/apps/)
 *
 *
 * And that's it! You can now make calls to Facebook using the plugin.
 *
 * ## Events
 *
 * App events allow you to understand the makeup of users engaging with your app, measure the performance of your Facebook mobile app ads, and reach specific sets of your users with Facebook mobile app ads.
 *
 * - [iOS] [https://developers.facebook.com/docs/ios/app-events](https://developers.facebook.com/docs/ios/app-events)
 * - [Android] [https://developers.facebook.com/docs/android/app-events](https://developers.facebook.com/docs/android/app-events)
 * - [JS] Does not have an Events API, so the plugin functions are empty and will return an automatic success
 *
 * Activation events are automatically tracked for you in the plugin.
 *
 * Events are listed on the [insights page](https://www.facebook.com/insights/).
 *
 * For tracking events, see `logEvent` and `logPurchase`.
 *
 * @usage
 * ```js
 * import {Facebook} from 'ionic-native';
 *
 *
 *
 * ```
 *
 */
var Facebook = function () {
    function Facebook() {}
    /**
     * Browser wrapper
     * @param appId
     * @param version
     */
    Facebook.browserInit = function (appId, version) {
        return;
    };
    /**
     * Login to Facebook to authenticate this app.
     *
     * ```ts
     * {
     *   status: "connected",
     *   authResponse: {
     *     session_key: true,
     *     accessToken: "kgkh3g42kh4g23kh4g2kh34g2kg4k2h4gkh3g4k2h4gk23h4gk2h34gk234gk2h34AndSoOn",
     *     expiresIn: 5183979,
     *     sig: "...",
     *     secret: "...",
     *     userID: "634565435"
     *   }
     * }
     * ```
     *
     * @param {string[]}  permissions List of [permissions](https://developers.facebook.com/docs/facebook-login/permissions) this app has upon logging in.
     * @return Returns a Promise that resolves with a status object if login succeeds, and rejects if login fails.
     */
    Facebook.login = function (permissions) {
        return;
    };
    /**
     * Logout of Facebook.
     *
     * For more info see the [Facebook docs](https://developers.facebook.com/docs/reference/javascript/FB.logout)
     * @return Returns a Promise that resolves on a successful logout, and rejects if logout fails.
     */
    Facebook.logout = function () {
        return;
    };
    /**
     * Determine if a user is logged in to Facebook and has authenticated your app.  There are three possible states for a user:
     *
     * 1) the user is logged into Facebook and has authenticated your application (connected)
     * 2) the user is logged into Facebook but has not authenticated your application (not_authorized)
     * 3) the user is either not logged into Facebook or explicitly logged out of your application so it doesn't attempt to connect to Facebook and thus, we don't know if they've authenticated your application or not (unknown)
     *
     * Resolves with a response like:
     *
     * ```
     * {
     *   authResponse: {
     *     userID: "12345678912345",
     *     accessToken: "kgkh3g42kh4g23kh4g2kh34g2kg4k2h4gkh3g4k2h4gk23h4gk2h34gk234gk2h34AndSoOn",
     *     session_Key: true,
     *     expiresIn: "5183738",
     *     sig: "..."
     *   },
     *   status: "connected"
     * }
     * ```
     *
     * For more information see the [Facebook docs](https://developers.facebook.com/docs/reference/javascript/FB.getLoginStatus)
     *
     * @return Returns a Promise that resolves with a status, or rejects with an error
     */
    Facebook.getLoginStatus = function () {
        return;
    };
    /**
     * Get a Facebook access token for using Facebook services.
     *
     * @return Returns a Promise that resolves with an access token, or rejects with an error
     */
    Facebook.getAccessToken = function () {
        return;
    };
    /**
     * Show one of various Facebook dialogs. Example of options for a Share dialog:
     *
     * ```
     * {
     *   method: "share",
     *   href: "http://example.com",
     *   caption: "Such caption, very feed.",
     *   description: "Much description",
     *   picture: 'http://example.com/image.png'
     * }
     * ```
     *
     * For more options see the [Cordova plugin docs](https://github.com/jeduan/cordova-plugin-facebook4#show-a-dialog) and the [Facebook docs](https://developers.facebook.com/docs/javascript/reference/FB.ui)
     * @options {Object}  options The dialog options
     * @return Returns a Promise that resolves with success data, or rejects with an error
     */
    Facebook.showDialog = function (options) {
        return;
    };
    /**
     * Make a call to Facebook Graph API. Can take additional permissions beyond those granted on login.
     *
     * For more information see:
     *
     *  Calling the Graph API - https://developers.facebook.com/docs/javascript/reference/FB.api
     *  Graph Explorer - https://developers.facebook.com/tools/explorer
     *  Graph API - https://developers.facebook.com/docs/graph-api
     *
     * @param {string}  requestPath Graph API endpoint you want to call
     * @param {string[]}  permissions List of [permissions](https://developers.facebook.com/docs/facebook-login/permissions) for this request.
     * @return Returns a Promise that resolves with the result of the request, or rejects with an error
     */
    Facebook.api = function (requestPath, permissions) {
        return;
    };
    /**
     * Log an event.  For more information see the Events section above.
     *
     * @param {string}  name Name of the event
     * @param {Object}  [params] An object containing extra data to log with the event
     * @param {number}  [valueToSum] any value to be added to added to a sum on each event
     * @return
     */
    Facebook.logEvent = function (name, params, valueToSum) {
        return;
    };
    /**
     * Log a purchase. For more information see the Events section above.
     *
     * @param {number}  value Value of the purchase.
     * @param {string}  currency The currency, as an [ISO 4217 currency code](http://en.wikipedia.org/wiki/ISO_4217)
     * @return Returns a Promise
     */
    Facebook.logPurchase = function (value, currency) {
        return;
    };
    /**
     * Open App Invite dialog. Does not require login.
     *
     * For more information see:
     *
     *   the App Invites Overview - https://developers.facebook.com/docs/app-invites/overview
     *   the App Links docs - https://developers.facebook.com/docs/applinks
     *
     *
     * @param {Object}  options An object containing an [App Link](https://developers.facebook.com/docs/applinks) URL to your app and an optional image URL.
     *   url: [App Link](https://developers.facebook.com/docs/applinks) to your app
     *   picture: image to be displayed in the App Invite dialog
     *
     * @return Returns a Promise that resolves with the result data, or rejects with an error
     */
    Facebook.appInvite = function (options) {
        return;
    };
    __decorate([plugin_1.Cordova()], Facebook, "browserInit", null);
    __decorate([plugin_1.Cordova()], Facebook, "login", null);
    __decorate([plugin_1.Cordova()], Facebook, "logout", null);
    __decorate([plugin_1.Cordova()], Facebook, "getLoginStatus", null);
    __decorate([plugin_1.Cordova()], Facebook, "getAccessToken", null);
    __decorate([plugin_1.Cordova()], Facebook, "showDialog", null);
    __decorate([plugin_1.Cordova()], Facebook, "api", null);
    __decorate([plugin_1.Cordova()], Facebook, "logEvent", null);
    __decorate([plugin_1.Cordova()], Facebook, "logPurchase", null);
    __decorate([plugin_1.Cordova()], Facebook, "appInvite", null);
    Facebook = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-facebook4',
        pluginRef: 'facebookConnectPlugin',
        repo: 'https://github.com/jeduan/cordova-plugin-facebook4',
        install: 'cordova plugin add cordova-plugin-facebook4 --variable APP_ID="123456789" --variable APP_NAME="myApplication"'
    })], Facebook);
    return Facebook;
}();
exports.Facebook = Facebook;
//# sourceMappingURL=facebook.js.map

/***/ },
/* 953 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name File
 * @description
 * This plugin implements a File API allowing read/write access to files residing on the device.
 *
 *  This plugin is based on several specs, including : The HTML5 File API http://www.w3.org/TR/FileAPI/
 *  The (now-defunct) Directories and System extensions Latest: http://www.w3.org/TR/2012/WD-file-system-api-20120417/
 *  Although most of the plugin code was written when an earlier spec was current: http://www.w3.org/TR/2011/WD-file-system-api-20110419/
 *  It also implements the FileWriter spec : http://dev.w3.org/2009/dap/file-system/file-writer.html
 */
var File = function () {
    function File() {}
    // @Cordova()
    // static getFreeDiskSpace(): Promise<any> { return }
    /**
     * Check if a directory exists in a certain path, directory.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} dir Name of directory to check
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.checkDir = function (path, dir) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(dir)) {
            rejectFn('directory cannot start with \/');
        }
        if (!/\/$/.test(dir)) {
            path += '/';
        }
        try {
            var directory = path + dir;
            window.resolveLocalFileSystemURL(directory, function (fileSystem) {
                if (fileSystem.isDirectory === true) {
                    resolveFn(fileSystem);
                } else {
                    rejectFn({ code: 13, message: 'input is not a directory' });
                }
            }, function (error) {
                error.message = File.cordovaFileError[error.code];
                rejectFn(error);
            });
        } catch (err) {
            err.message = File.cordovaFileError[err.code];
            rejectFn(err);
        }
        return promise;
    };
    /**
     * Creates a new directory in the specific path.
     * The replace boolean value determines whether to replace an existing directory with the same name.
     * If an existing directory exists and the replace value is false, the promise will fail and return an error.
     *
     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} dirName Name of directory to create
     * @param {boolean} replace If true, replaces file with same name. If false returns error
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.createDir = function (path, dirName, replace) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(dirName)) {
            rejectFn('directory cannot start with \/');
        }
        replace = !replace;
        var options = {
            create: true,
            exclusive: replace
        };
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getDirectory(dirName, options, function (result) {
                    resolveFn(result);
                }, function (error) {
                    error.message = File.cordovaFileError[error.code];
                    rejectFn(error);
                });
            }, function (err) {
                err.message = File.cordovaFileError[err.code];
                rejectFn(err);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Remove a directory at a given path.
     *
     * @param {string} path The path to the directory
     * @param {string} dirName The directory name
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.removeDir = function (path, dirName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(dirName)) {
            rejectFn('directory cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getDirectory(dirName, { create: false }, function (dirEntry) {
                    dirEntry.remove(function () {
                        resolveFn({ success: true, fileRemoved: dirEntry });
                    }, function (error) {
                        error.message = File.cordovaFileError[error.code];
                        rejectFn(error);
                    });
                }, function (err) {
                    err.message = File.cordovaFileError[err.code];
                    rejectFn(err);
                });
            }, function (er) {
                er.message = File.cordovaFileError[er.code];
                rejectFn(er);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Move a directory to a given path.
     *
     * @param {string} path The source path to the directory
     * @param {string} dirName The source directory name
     * @param {string} newPath The destionation path to the directory
     * @param {string} newDirName The destination directory name
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.moveDir = function (path, dirName, newPath, newDirName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        newDirName = newDirName || dirName;
        if (/^\//.test(newDirName)) {
            rejectFn('directory cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getDirectory(dirName, { create: false }, function (dirEntry) {
                    window.resolveLocalFileSystemURL(newPath, function (newDirEntry) {
                        dirEntry.moveTo(newDirEntry, newDirName, function (result) {
                            resolveFn(result);
                        }, function (error) {
                            rejectFn(error);
                        });
                    }, function (erro) {
                        rejectFn(erro);
                    });
                }, function (err) {
                    rejectFn(err);
                });
            }, function (er) {
                rejectFn(er);
            });
        } catch (e) {
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Copy a directory in various methods. If destination directory exists, will fail to copy.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} dirName Name of directory to copy
     * @param {string} newPath Base FileSystem of new location
     * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.copyDir = function (path, dirName, newPath, newDirName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        newDirName = newDirName || dirName;
        if (/^\//.test(newDirName)) {
            rejectFn('directory cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getDirectory(dirName, { create: false, exclusive: false }, function (dirEntry) {
                    window.resolveLocalFileSystemURL(newPath, function (newDirEntry) {
                        dirEntry.copyTo(newDirEntry, newDirName, function (result) {
                            resolveFn(result);
                        }, function (error) {
                            error.message = File.cordovaFileError[error.code];
                            rejectFn(error);
                        });
                    }, function (erro) {
                        erro.message = File.cordovaFileError[erro.code];
                        rejectFn(erro);
                    });
                }, function (err) {
                    err.message = File.cordovaFileError[err.code];
                    rejectFn(err);
                });
            }, function (er) {
                er.message = File.cordovaFileError[er.code];
                rejectFn(er);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    /**
     * List files and directory from a given path.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} dirName Name of directory
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.listDir = function (path, dirName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(dirName)) {
            rejectFn('directory cannot start with \/');
        }
        var options = {
            create: false,
            exclusive: false
        };
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getDirectory(dirName, options, function (parent) {
                    var reader = parent.createReader();
                    reader.readEntries(function (entries) {
                        resolveFn(entries);
                    }, function () {
                        rejectFn('DIR_READ_ERROR : ' + path + dirName);
                    });
                }, function (error) {
                    error.message = File.cordovaFileError[error.code];
                    rejectFn(error);
                });
            }, function (err) {
                err.message = File.cordovaFileError[err.code];
                rejectFn(err);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Removes all files and the directory from a desired location.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} dirName Name of directory
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.removeRecursively = function (path, dirName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(dirName)) {
            rejectFn('directory cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getDirectory(dirName, { create: false }, function (dirEntry) {
                    dirEntry.removeRecursively(function () {
                        resolveFn({ success: true, fileRemoved: dirEntry });
                    }, function (error) {
                        error.message = File.cordovaFileError[error.code];
                        rejectFn(error);
                    });
                }, function (err) {
                    err.message = File.cordovaFileError[err.code];
                    rejectFn(err);
                });
            }, function (er) {
                er.message = File.cordovaFileError[er.code];
                rejectFn(er);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Check if a file exists in a certain path, directory.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} file Name of file to check
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.checkFile = function (path, file) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(file)) {
            rejectFn('file cannot start with \/');
        }
        if (!/\/$/.test(file)) {
            path += '/';
        }
        try {
            var directory = path + file;
            window.resolveLocalFileSystemURL(directory, function (fileSystem) {
                if (fileSystem.isFile === true) {
                    resolveFn(fileSystem);
                } else {
                    rejectFn({ code: 13, message: 'input is not a file' });
                }
            }, function (error) {
                error.message = File.cordovaFileError[error.code];
                rejectFn(error);
            });
        } catch (err) {
            err.message = File.cordovaFileError[err.code];
            rejectFn(err);
        }
        return promise;
    };
    /**
     * Creates a new file in the specific path.
     * The replace boolean value determines whether to replace an existing file with the same name.
     * If an existing file exists and the replace value is false, the promise will fail and return an error.
     *
     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} fileName Name of file to create
     * @param {boolean} replace If true, replaces file with same name. If false returns error
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.createFile = function (path, fileName, replace) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(fileName)) {
            rejectFn('file-name cannot start with \/');
        }
        replace = !replace;
        var options = {
            create: true,
            exclusive: replace
        };
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getFile(fileName, options, function (result) {
                    resolveFn(result);
                }, function (error) {
                    error.message = File.cordovaFileError[error.code];
                    rejectFn(error);
                });
            }, function (err) {
                err.message = File.cordovaFileError[err.code];
                rejectFn(err);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Removes a file from a desired location.
     *
     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} fileName Name of file to remove
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.removeFile = function (path, fileName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(fileName)) {
            rejectFn('file-name cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getFile(fileName, { create: false }, function (fileEntry) {
                    fileEntry.remove(function () {
                        resolveFn({ success: true, fileRemoved: fileEntry });
                    }, function (error) {
                        error.message = File.cordovaFileError[error.code];
                        rejectFn(error);
                    });
                }, function (err) {
                    err.message = File.cordovaFileError[err.code];
                    rejectFn(err);
                });
            }, function (er) {
                er.message = File.cordovaFileError[er.code];
                rejectFn(er);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    // static writeFile(path: string, fileName: string, text: string, replace: boolean): Promise<any> { return }
    // static writeExistingFile(path: string, fileName: string, text: string): Promise<any> { return }
    /**
     * Read a file as string.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} fileName Name of file to move
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.readAsText = function (path, fileName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        if (/^\//.test(fileName)) {
            rejectFn('file-name cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getFile(fileName, { create: false }, function (fileEntry) {
                    fileEntry.file(function (file) {
                        var reader = new FileReader();
                        reader.onloadend = function (e) {
                            if (this.result !== undefined && this.result !== null) {
                                resolveFn(this.result);
                            } else if (this.error !== undefined && this.error !== null) {
                                rejectFn(this.error);
                            } else {
                                rejectFn({ code: null, message: 'READER_ONLOADEND_ERR' });
                            }
                        };
                        reader.readAsText(file);
                    }, function (error) {
                        error.message = File.cordovaFileError[error.code];
                        rejectFn(error);
                    });
                }, function (err) {
                    err.message = File.cordovaFileError[err.code];
                    rejectFn(err);
                });
            }, function (er) {
                er.message = File.cordovaFileError[er.code];
                rejectFn(er);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    // static readAsDataURL(path: string, file: string): Promise<any> { return }
    // static readAsBinaryString(path: string, file: string): Promise<any> { return }
    // static readAsArrayBuffer(path: string, file: string): Promise<any> { return }
    /**
     * Move a file to a given path.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} fileName Name of file to move
     * @param {string} newPath Base FileSystem of new location
     * @param {string} newFileName New name of file to move to (leave blank to remain the same)
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.moveFile = function (path, fileName, newPath, newFileName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        newFileName = newFileName || fileName;
        if (/^\//.test(newFileName)) {
            rejectFn('file-name cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getFile(fileName, { create: false }, function (fileEntry) {
                    window.resolveLocalFileSystemURL(newPath, function (newFileEntry) {
                        fileEntry.moveTo(newFileEntry, newFileName, function (result) {
                            resolveFn(result);
                        }, function (error) {
                            rejectFn(error);
                        });
                    }, function (err) {
                        rejectFn(err);
                    });
                }, function (err) {
                    rejectFn(err);
                });
            }, function (er) {
                rejectFn(er);
            });
        } catch (e) {
            rejectFn(e);
        }
        return promise;
    };
    /**
     * Copy a file in various methods. If file exists, will fail to copy.
     *
     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
     * @param {string} fileName Name of file to copy
     * @param {string} newPath Base FileSystem of new location
     * @param {string} newFileName New name of file to copy to (leave blank to remain the same)
     * @return Returns a Promise that resolves or rejects with an error.
     */
    File.copyFile = function (path, fileName, newPath, newFileName) {
        var resolveFn, rejectFn;
        var promise = new Promise(function (resolve, reject) {
            resolveFn = resolve;rejectFn = reject;
        });
        newFileName = newFileName || fileName;
        if (/^\//.test(newFileName)) {
            rejectFn('file-name cannot start with \/');
        }
        try {
            window.resolveLocalFileSystemURL(path, function (fileSystem) {
                fileSystem.getFile(fileName, { create: false, exclusive: false }, function (fileEntry) {
                    window.resolveLocalFileSystemURL(newPath, function (newFileEntry) {
                        fileEntry.copyTo(newFileEntry, newFileName, function (result) {
                            resolveFn(result);
                        }, function (error) {
                            error.message = File.cordovaFileError[error.code];
                            rejectFn(error);
                        });
                    }, function (erro) {
                        erro.message = File.cordovaFileError[erro.code];
                        rejectFn(erro);
                    });
                }, function (err) {
                    err.message = File.cordovaFileError[err.code];
                    rejectFn(err);
                });
            }, function (er) {
                er.message = File.cordovaFileError[er.code];
                rejectFn(er);
            });
        } catch (e) {
            e.message = File.cordovaFileError[e.code];
            rejectFn(e);
        }
        return promise;
    };
    File.cordovaFileError = {
        1: 'NOT_FOUND_ERR',
        2: 'SECURITY_ERR',
        3: 'ABORT_ERR',
        4: 'NOT_READABLE_ERR',
        5: 'ENCODING_ERR',
        6: 'NO_MODIFICATION_ALLOWED_ERR',
        7: 'INVALID_STATE_ERR',
        8: 'SYNTAX_ERR',
        9: 'INVALID_MODIFICATION_ERR',
        10: 'QUOTA_EXCEEDED_ERR',
        11: 'TYPE_MISMATCH_ERR',
        12: 'PATH_EXISTS_ERR'
    };
    File = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-file',
        pluginRef: 'cordova.file',
        repo: 'https://github.com/apache/cordova-plugin-file'
    })], File);
    return File;
}();
exports.File = File;
//# sourceMappingURL=file.js.map

/***/ },
/* 954 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Transfer
 * @description This plugin allows you to upload and download files.
 * Example:
 * Create instance:
 * const fileTransfer = new Transfer();
 *
 * Upload a file:
 * fileTransfer.upload(..).then(..).catch(..);
 *
 * Download a file:
 * fileTransfer.download(..).then(..).catch(..);
 *
 * Abort active transfer:
 * fileTransfer.abort();
 */
var Transfer = function () {
    function Transfer() {
        this._objectInstance = new FileTransfer();
    }
    /**
     * Sends a file to a server.
     *
     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.
     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().
     * @param {FileUploadOptions} options  Optional parameters.
     * @param {boolean} trustAllHosts: Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.
     * @return Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.
     */
    Transfer.prototype.upload = function (fileUrl, url, options, trustAllHosts) {
        return;
    };
    /**
     * Downloads a file from server.
     *
     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().
     * @param {stirng} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.
     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.
     * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).
     * @return Returns a Promise that resolves to a FileEntry object.
     */
    Transfer.prototype.download = function (source, target, trustAllHosts, options) {
        return;
    };
    /**
     * Registers a listener that gets called whenever a new chunk of data is transferred.
     * @param {function} Listener that takes a progress event.
     */
    Transfer.prototype.onProgress = function (listener) {
        this._objectInstance.onprogress = listener;
    };
    /**
     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError
     * object which has an error code of FileTransferError.ABORT_ERR.
     */
    Transfer.prototype.abort = function () {};
    Transfer.FILE_NOT_FOUND_ERR = 1;
    Transfer.INVALID_URL_ERR = 2;
    Transfer.CONNECTION_ERR = 3;
    Transfer.ABORT_ERR = 4;
    Transfer.NOT_MODIFIED_ERR = 4;
    __decorate([plugin_1.CordovaInstance({
        successIndex: 2,
        errorIndex: 3
    })], Transfer.prototype, "upload", null);
    __decorate([plugin_1.CordovaInstance({
        successIndex: 2,
        errorIndex: 3
    })], Transfer.prototype, "download", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], Transfer.prototype, "abort", null);
    Transfer = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-file-transfer',
        pluginRef: 'FileTransfer',
        repo: 'https://github.com/apache/cordova-plugin-file-transfer'
    })], Transfer);
    return Transfer;
}();
exports.Transfer = Transfer;
//# sourceMappingURL=filetransfer.js.map

/***/ },
/* 955 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Flashlight
 * @description This plugin allows you to switch the flashlight / torch of the device on and off.
 *
 * Requires Cordova plugin: `cordova-plugin-flashlight`. For more info, please see the [Flashlight plugin docs](https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin).
 *
 * @usage
 * ```js
 * import {Flashlight} from 'ionic-native';
 *
 *
 *
 * ```
 */
var Flashlight = function () {
    function Flashlight() {}
    /**
     * Checks if the flashlight is available
     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean stating if the flashlight is available.
     */
    Flashlight.available = function () {
        return;
    };
    /**
     * Switches the flashlight on
     * @returns {Promise<boolean>}
     */
    Flashlight.switchOn = function () {
        return;
    };
    /**
     * Switches the flashlight off
     * @returns {Promise<boolean>}
     */
    Flashlight.switchOff = function () {
        return;
    };
    /**
     * Toggles the flashlight
     * @returns {Promise<any>}
     */
    Flashlight.toggle = function () {
        return;
    };
    /**
     * Checks if the flashlight is turned on.
     * Returns a boolean
     */
    Flashlight.isSwitchedOn = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], Flashlight, "available", null);
    __decorate([plugin_1.Cordova()], Flashlight, "switchOn", null);
    __decorate([plugin_1.Cordova()], Flashlight, "switchOff", null);
    __decorate([plugin_1.Cordova()], Flashlight, "toggle", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], Flashlight, "isSwitchedOn", null);
    Flashlight = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-flashlight',
        pluginRef: 'window.plugins.flashlight',
        repo: 'https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin.git'
    })], Flashlight);
    return Flashlight;
}();
exports.Flashlight = Flashlight;
//# sourceMappingURL=flashlight.js.map

/***/ },
/* 956 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var Observable_1 = __webpack_require__(39);
/**
 * @name Geolocation
 * @description
 * This plugin provides information about the device's location, such as latitude and longitude. Common sources of location information include Global Positioning System (GPS) and location inferred from network signals such as IP address, RFID, WiFi and Bluetooth MAC addresses, and GSM/CDMA cell IDs.
 *
 *  This API is based on the W3C Geolocation API Specification, and only executes on devices that don't already provide an implementation.
 *
 * @usage
 *
 * ```ts
 * import {Geolocation} from 'ionic-native';
 *
 *
 *
 * Geolocation.getCurrentPosition().then((resp) => {
 *  //resp.coords.latitude
 *  //resp.coords.longitude
 * })
 *
 * let watch = Geolocation.watchPosition();
 * watch.subscribe((data) => {
 *  //data.coords.latitude
 *  //data.coords.longitude
 * })
 * ```
 */
var Geolocation = function () {
    function Geolocation() {}
    /**
     * Get the device's current position.
     *
     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).
     * @return Returns a Promise that resolves with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or rejects with an error.
     */
    Geolocation.getCurrentPosition = function (options) {
        return;
    };
    /**
     * Watch the current device's position.  Clear the watch by unsubscribing from
     * Observable changes.
     *
     * ```ts
     * var subscription = Geolocation.watchPosition().subscribe(position => {
     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);
     * });
     *
     * // To stop notifications
     * subscription.unsubscribe();
     * ```
     *
     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).
     * @return Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.
     */
    Geolocation.watchPosition = function (options) {
        return new Observable_1.Observable(function (observer) {
            var cb = function cb(data) {
                return observer.next(data);
            };
            var watchId = navigator.geolocation.watchPosition(cb, options);
            return function () {
                return navigator.geolocation.clearWatch(watchId);
            };
        });
    };
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], Geolocation, "getCurrentPosition", null);
    Geolocation = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-geolocation',
        pluginRef: 'navigator.geolocation',
        repo: 'https://github.com/apache/cordova-plugin-geolocation'
    })], Geolocation);
    return Geolocation;
}();
exports.Geolocation = Geolocation;
//# sourceMappingURL=geolocation.js.map

/***/ },
/* 957 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Globalization
 * @description
 * @usage
 * ```js
 * import {Globalization} from 'ionic-native';
 *
 *
 *
 * ```
 */
var Globalization = function () {
    function Globalization() {}
    /**
     * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.
     * @return {Promise<{value: string}>}
     */
    Globalization.getPreferredLanguage = function () {
        return;
    };
    /**
     * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.
     * @return {Promise<{value: string}>}
     */
    Globalization.getLocaleName = function () {
        return;
    };
    /**
     * Converts date to string
     * @param date
     * @param options
     * @return {Promise<{value: string}>}
     */
    Globalization.dateToString = function (date, options) {
        return;
    };
    /**
     *
     * @param dateString
     * @param options
     */
    Globalization.stringToDate = function (dateString, options) {
        return;
    };
    /**
     *
     * @param options
     */
    Globalization.getDatePattern = function (options) {
        return;
    };
    /**
     *
     * @param options
     */
    Globalization.getDateNames = function (options) {
        return;
    };
    /**
     * Check if day light saving is active
     * @param date
     */
    Globalization.isDayLightSavingsTime = function (date) {
        return;
    };
    /**
     * Get first day of week
     */
    Globalization.getFirstDayOfWeek = function () {
        return;
    };
    /**
     *
     * @param options
     */
    Globalization.numberToString = function (options) {
        return;
    };
    /**
     *
     * @param stringToConvert
     * @param options
     */
    Globalization.stringToNumber = function (stringToConvert, options) {
        return;
    };
    /**
     *
     * @param options
     */
    Globalization.getNumberPattern = function (options) {
        return;
    };
    /**
     *
     * @param currencyCode
     */
    Globalization.getCurrencyPattern = function (currencyCode) {
        return;
    };
    __decorate([plugin_1.Cordova()], Globalization, "getPreferredLanguage", null);
    __decorate([plugin_1.Cordova()], Globalization, "getLocaleName", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 2
    })], Globalization, "dateToString", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 2
    })], Globalization, "stringToDate", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], Globalization, "getDatePattern", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], Globalization, "getDateNames", null);
    __decorate([plugin_1.Cordova()], Globalization, "isDayLightSavingsTime", null);
    __decorate([plugin_1.Cordova()], Globalization, "getFirstDayOfWeek", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 2
    })], Globalization, "numberToString", null);
    __decorate([plugin_1.Cordova({
        successIndex: 1,
        errorIndex: 2
    })], Globalization, "stringToNumber", null);
    __decorate([plugin_1.Cordova({
        callbackOrder: 'reverse'
    })], Globalization, "getNumberPattern", null);
    __decorate([plugin_1.Cordova()], Globalization, "getCurrencyPattern", null);
    Globalization = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-globalization',
        pluginRef: 'navigator.globalization',
        repo: 'https: //github.com/apache/cordova-plugin-globalization'
    })], Globalization);
    return Globalization;
}();
exports.Globalization = Globalization;
//# sourceMappingURL=globalization.js.map

/***/ },
/* 958 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Google Plus
 * @description
 * @usage
 * ```
 *
 * ```
 */
var GooglePlus = function () {
    function GooglePlus() {}
    /**
     * The login function walks the user through the Google Auth process.
     * @param options
     */
    GooglePlus.login = function (options) {
        return;
    };
    /**
     * You can call trySilentLogin to check if they're already signed in to the app and sign them in silently if they are.
     * @param options
     */
    GooglePlus.trySilentLogin = function (options) {
        return;
    };
    /**
     * This will clear the OAuth2 token.
     */
    GooglePlus.logout = function () {
        return;
    };
    /**
     * This will clear the OAuth2 token, forget which account was used to login, and disconnect that account from the app. This will require the user to allow the app access again next time they sign in. Be aware that this effect is not always instantaneous. It can take time to completely disconnect.
     */
    GooglePlus.disconnect = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], GooglePlus, "login", null);
    __decorate([plugin_1.Cordova()], GooglePlus, "trySilentLogin", null);
    __decorate([plugin_1.Cordova()], GooglePlus, "logout", null);
    __decorate([plugin_1.Cordova()], GooglePlus, "disconnect", null);
    GooglePlus = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-googleplus',
        pluginRef: 'window.plugins.googleplus',
        repo: 'https://github.com/EddyVerbruggen/cordova-plugin-googleplus',
        platforms: ['Web', 'Android', 'iOS'],
        install: 'ionic plugin add cordova-plugin-googleplus --variable REVERSED_CLIENT_ID=myreversedclientid'
    })], GooglePlus);
    return GooglePlus;
}();
exports.GooglePlus = GooglePlus;
//# sourceMappingURL=google-plus.js.map

/***/ },
/* 959 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Google Analytics
 * @description
 * This plugin connects to Google's native Universal Analytics SDK
 * Prerequisites:
 * - A Cordova 3.0+ project for iOS and/or Android
 * - A Mobile App property through the Google Analytics Admin Console
 * - (Android) Google Play Services SDK installed via [Android SDK Manager](https://developer.android.com/sdk/installing/adding-packages.html)
 */
var GoogleAnalytics = function () {
    function GoogleAnalytics() {}
    /**
     * In your 'deviceready' handler, set up your Analytics tracker.
     * https://developers.google.com/analytics/devguides/collection/analyticsjs/
     * @param {string}  id  Your Google Analytics Mobile App property
     */
    GoogleAnalytics.startTrackerWithId = function (id) {
        return;
    };
    /**
     * Track a screen
     * https://developers.google.com/analytics/devguides/collection/analyticsjs/screens
     *
     * @param {string}  title   Screen title
     */
    GoogleAnalytics.trackView = function (title) {
        return;
    };
    /**
     * Track an event
     * https://developers.google.com/analytics/devguides/collection/analyticsjs/events
     * @param {string}  category
     * @param {string}  action
     * @param {string}  label
     * @param {number}  value
     */
    GoogleAnalytics.trackEvent = function (category, action, label, value) {
        return;
    };
    /**
     * Track an exception
     * @param {string}  description
     * @param {boolean} fatal
     */
    GoogleAnalytics.trackException = function (description, fatal) {
        return;
    };
    /**
     * Track User Timing (App Speed)
     * @param {string}  category
     * @param {number}  intervalInMilliseconds
     * @param {string}  variable
     * @param {string}  label
     */
    GoogleAnalytics.trackTiming = function (category, intervalInMilliseconds, variable, label) {
        return;
    };
    /**
     * Add a Transaction (Ecommerce)
     * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addTrans
     * @param {string}  id
     * @param {string}  affiliation
     * @param {number}  revenue
     * @param {number}  tax
     * @param {number}  shipping
     * @param {string}  currencyCode
     */
    GoogleAnalytics.addTransaction = function (id, affiliation, revenue, tax, shipping, currencyCode) {
        return;
    };
    /**
     * Add a Transaction Item (Ecommerce)
     * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addItem
     * @param {string}  id
     * @param {string}  name
     * @param {string}  sku
     * @param {string}  category
     * @param {number}  price
     * @param {number}  quantity
     * @param {string}  currencyCode
     */
    GoogleAnalytics.addTransactionItem = function (id, name, sku, category, price, quantity, currencyCode) {
        return;
    };
    /**
     * Add a Custom Dimension
     * https://developers.google.com/analytics/devguides/platform/customdimsmets
     * @param {string}  key
     * @param {string}  value
     */
    GoogleAnalytics.addCustomDimension = function (key, value) {
        return;
    };
    /**
     * Set a UserId
     * https://developers.google.com/analytics/devguides/collection/analyticsjs/user-id
     * @param {string}  id
     */
    GoogleAnalytics.setUserId = function (id) {
        return;
    };
    /**
     * Enable verbose logging
     */
    GoogleAnalytics.debugMode = function () {
        return;
    };
    /**
     * Enable/disable automatic reporting of uncaught exceptions
     * @param {boolean} shouldEnable
     */
    GoogleAnalytics.enableUncaughtExceptionReporting = function (shouldEnable) {
        return;
    };
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "startTrackerWithId", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "trackView", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "trackEvent", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "trackException", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "trackTiming", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "addTransaction", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "addTransactionItem", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "addCustomDimension", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "setUserId", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "debugMode", null);
    __decorate([plugin_1.Cordova()], GoogleAnalytics, "enableUncaughtExceptionReporting", null);
    GoogleAnalytics = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-google-analytics',
        pluginRef: 'analytics',
        repo: 'https://github.com/danwilson/google-analytics-plugin',
        platforms: ['Android', 'iOS']
    })], GoogleAnalytics);
    return GoogleAnalytics;
}();
exports.GoogleAnalytics = GoogleAnalytics;
//# sourceMappingURL=googleanalytics.js.map

/***/ },
/* 960 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Hotspot
 * @description
 * @usage
 * ```js
 * import {Hotspot, Network} from 'ionic-native';
 *
 * ...
 *     Hotspot.scanWifi().then((networks: Array<Network>) => {
 *         console.log(networks);
 *     });
 * ...
 *
 * ```
 */
var Hotspot = function () {
    function Hotspot() {}
    Hotspot.isAvailable = function () {
        return;
    };
    Hotspot.toggleWifi = function () {
        return;
    };
    /**
     * Configures and starts hotspot with SSID and Password
     *
     * @param {string}    SSID        - SSID of your new Access Point
     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)
     * @param {string}    password    - password for your new Access Point
     *
     * @return {Promise<void>}        - Promise to call once hotspot is started, or reject upon failure
     */
    Hotspot.createHotspot = function (ssid, mode, password) {
        return;
    };
    /**
     * Turns on Access Point
     *
     * @return {Promise<boolean>} - true if AP is started
     */
    Hotspot.startHotspot = function () {
        return;
    };
    /**
     * Configures hotspot with SSID and Password
     *
     * @param {string}    SSID        - SSID of your new Access Point
     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)
     * @param {string}    password    - password for your new Access Point
     *
     * @return {Promise<void>}        - Promise to call when hotspot is configured, or reject upon failure
     */
    Hotspot.configureHotspot = function (ssid, mode, password) {
        return;
    };
    /**
     * Turns off Access Point
     *
     * @return {Promise<boolean>} - Promise to turn off the hotspot, true on success, false on failure
     */
    Hotspot.stopHotspot = function () {
        return;
    };
    /**
     * Checks if hotspot is enabled
     *
     * @return {Promise<void>}    - Promise that hotspot is enabled, rejected if it is not enabled
     */
    Hotspot.isHotspotEnabled = function () {
        return;
    };
    Hotspot.getAllHotspotDevices = function () {
        return;
    };
    /**
     * Connect to a WiFi network
     *
     * @param {string}    ssid
     *      SSID to connect
     * @param {string}    password
     *      password to use
     *
     * @return {Promise<void>}
     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful
     */
    Hotspot.connectToWifi = function (ssid, password) {
        return;
    };
    /**
     * Connect to a WiFi network
     *
     * @param {string}   ssid
     *      SSID to connect
     * @param {string}   password
     *      Password to use
     * @param {string}   authentication
     *      Authentication modes to use (LEAP, SHARED, OPEN)
     * @param {string[]} encryption
     *      Encryption modes to use (CCMP, TKIP, WEP104, WEP40)
     *
     * @return {Promise<void>}
     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful
     */
    Hotspot.connectToWifiAuthEncrypt = function (ssid, password, authentication, encryption) {
        return;
    };
    /**
     * Add a WiFi network
     *
     * @param {string}    ssid
     *      SSID of network
     * @param {string}    mode
     *      Authentication mode of (Open, WEP, WPA, WPA_PSK)
     * @param {string}    password
     *      Password for network
     *
     * @return {Promise<void>}
     *      Promise that adding the WiFi network was successfull, rejected if unsuccessful
     */
    Hotspot.addWifiNetwork = function (ssid, mode, password) {
        return;
    };
    /**
     * Remove a WiFi network
     *
     * @param {string}    ssid
     *      SSID of network
     *
     * @return {Promise<void>}
     *      Promise that removing the WiFi network was successfull, rejected if unsuccessful
     */
    Hotspot.removeWifiNetwork = function (ssid) {
        return;
    };
    Hotspot.isConnectedToInternet = function () {
        return;
    };
    Hotspot.isConnectedToInternetViaWifi = function () {
        return;
    };
    Hotspot.isWifiOn = function () {
        return;
    };
    Hotspot.isWifiSupported = function () {
        return;
    };
    Hotspot.isWifiDirectSupported = function () {
        return;
    };
    Hotspot.scanWifi = function () {
        return;
    };
    Hotspot.scanWifiByLevel = function () {
        return;
    };
    Hotspot.startWifiPeriodicallyScan = function (interval, duration) {
        return;
    };
    Hotspot.stopWifiPeriodicallyScan = function () {
        return;
    };
    Hotspot.getNetConfig = function () {
        return;
    };
    Hotspot.getConnectionInfo = function () {
        return;
    };
    Hotspot.pingHost = function (ip) {
        return;
    };
    /**
     * Gets MAC Address associated with IP Address from ARP File
     *
     * @param {string}        ip  - IP Address that you want the MAC Address of
     *
     * @return {Promise<string>}  - A Promise for the MAC Address
     */
    Hotspot.getMacAddressOfHost = function (ip) {
        return;
    };
    /**
     * Checks if IP is live using DNS
     *
     * @param {string}        ip  - IP Address you want to test
     *
     * @return {Promise<boolean>} - A Promise for whether the IP Address is reachable
     */
    Hotspot.isDnsLive = function (ip) {
        return;
    };
    /**
     * Checks if IP is live using socket And PORT
     *
     * @param {string}        ip  - IP Address you want to test
     *
     * @return {Promise<boolean>} - A Promise for whether the IP Address is reachable
     */
    Hotspot.isPortLive = function (ip) {
        return;
    };
    /**
     * Checks if device is rooted
     *
     * @return {Promise<boolean>} - A Promise for whether the device is rooted
     */
    Hotspot.isRooted = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], Hotspot, "isAvailable", null);
    __decorate([plugin_1.Cordova()], Hotspot, "toggleWifi", null);
    __decorate([plugin_1.Cordova()], Hotspot, "createHotspot", null);
    __decorate([plugin_1.Cordova()], Hotspot, "startHotspot", null);
    __decorate([plugin_1.Cordova()], Hotspot, "configureHotspot", null);
    __decorate([plugin_1.Cordova()], Hotspot, "stopHotspot", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isHotspotEnabled", null);
    __decorate([plugin_1.Cordova()], Hotspot, "getAllHotspotDevices", null);
    __decorate([plugin_1.Cordova()], Hotspot, "connectToWifi", null);
    __decorate([plugin_1.Cordova()], Hotspot, "connectToWifiAuthEncrypt", null);
    __decorate([plugin_1.Cordova()], Hotspot, "addWifiNetwork", null);
    __decorate([plugin_1.Cordova()], Hotspot, "removeWifiNetwork", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isConnectedToInternet", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isConnectedToInternetViaWifi", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isWifiOn", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isWifiSupported", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isWifiDirectSupported", null);
    __decorate([plugin_1.Cordova()], Hotspot, "scanWifi", null);
    __decorate([plugin_1.Cordova()], Hotspot, "scanWifiByLevel", null);
    __decorate([plugin_1.Cordova()], Hotspot, "startWifiPeriodicallyScan", null);
    __decorate([plugin_1.Cordova()], Hotspot, "stopWifiPeriodicallyScan", null);
    __decorate([plugin_1.Cordova()], Hotspot, "getNetConfig", null);
    __decorate([plugin_1.Cordova()], Hotspot, "getConnectionInfo", null);
    __decorate([plugin_1.Cordova()], Hotspot, "pingHost", null);
    __decorate([plugin_1.Cordova()], Hotspot, "getMacAddressOfHost", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isDnsLive", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isPortLive", null);
    __decorate([plugin_1.Cordova()], Hotspot, "isRooted", null);
    Hotspot = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-hotspot',
        pluginRef: 'cordova.plugins.hotspot',
        repo: 'https://github.com/hypery2k/cordova-hotspot-plugin',
        platforms: ['Android']
    })], Hotspot);
    return Hotspot;
}();
exports.Hotspot = Hotspot;
//# sourceMappingURL=hotspot.js.map

/***/ },
/* 961 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Insomnia
 * @description
 * Prevent the screen of the mobile device from falling asleep.
 *
 * @usage
 * ```js
 * import {Insomnia} from 'ionic-native';
 *
 * Insomnia.keepAwake()
 *   .then(
 *     () => console.log('success'),
 *     () => console.log('error')
 *   );
 *
 * Insomnia.allowSleepAgain()
 *   .then(
 *     () => console.log('success'),
 *     () => console.log('error')
 *   );
 * ```
 *
 */
var Insomnia = function () {
    function Insomnia() {}
    /**
     * Keeps awake the application
     * @returns {Promise}
     */
    Insomnia.keepAwake = function () {
        return;
    };
    /**
     * Allows the application to sleep again
     * @returns {Promise}
     */
    Insomnia.allowSleepAgain = function () {
        return;
    };
    __decorate([plugin_1.Cordova()], Insomnia, "keepAwake", null);
    __decorate([plugin_1.Cordova()], Insomnia, "allowSleepAgain", null);
    Insomnia = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin.git',
        pluginRef: 'plugins.insomnia',
        repo: 'https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin',
        platforms: ['Android', 'iOS', 'Windows Phone 8']
    })], Insomnia);
    return Insomnia;
}();
exports.Insomnia = Insomnia;
//# sourceMappingURL=insomnia.js.map

/***/ },
/* 962 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Keyboard
 * @description
 * @usage
 * ```js
 * import {Keyboard} from 'ionic-native';
 *
 *
 *
 * ```
 */
var Keyboard = function () {
    function Keyboard() {}
    /**
     * Hide the keyboard accessory bar with the next, previous and done buttons.
     * @param hide {boolean}
     */
    Keyboard.hideKeyboardAccessoryBar = function (hide) {
        console.log('hideKeyboardAccessoryBar method has been removed temporarily.');
    };
    /**
     * Force keyboard to be shown.
     */
    Keyboard.show = function () {};
    /**
     * Close the keyboard if open.
     */
    Keyboard.close = function () {};
    /**
     * Prevents the native UIScrollView from moving when an input is focused.
     * @param disable
     */
    Keyboard.disableScroll = function (disable) {};
    /**
     * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.
     */
    Keyboard.onKeyboardShow = function () {
        return;
    };
    /**
     * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.
     */
    Keyboard.onKeyboardHide = function () {
        return;
    };
    __decorate([plugin_1.Cordova({
        sync: true,
        platforms: ['Android', 'BlackBerry 10', 'Windows']
    })], Keyboard, "show", null);
    __decorate([plugin_1.Cordova({
        sync: true,
        platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']
    })], Keyboard, "close", null);
    __decorate([plugin_1.Cordova({
        sync: true,
        platforms: ['iOS', 'Windows']
    })], Keyboard, "disableScroll", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'native.keyboardshow',
        platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']
    })], Keyboard, "onKeyboardShow", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'native.keyboardhide',
        platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']
    })], Keyboard, "onKeyboardHide", null);
    Keyboard = __decorate([plugin_1.Plugin({
        plugin: 'ionic-plugin-keyboard',
        pluginRef: 'cordova.plugins.Keyboard',
        repo: 'https://github.com/driftyco/ionic-plugin-keyboard'
    })], Keyboard);
    return Keyboard;
}();
exports.Keyboard = Keyboard;
//# sourceMappingURL=keyboard.js.map

/***/ },
/* 963 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Network
 * @description
 * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).
 *
 * @usage
 * ```js
 * import {Network, Connection} from 'ionic-native';
 *
 * // watch network for a disconnect
 * let disconnectSubscription = Network.onDisconnect().subscribe(() => {
 *   console.log('network was disconnected :-( ')
 * });
 *
 * // stop disconnect watch
 * disconnectSubscription.unsubscribe();
 *
 *
 * // watch network for a connection
 * let connectSubscription = Network.onConnect().subscribe(() => {
 *   console.log('network connected!');
*
 *   // We just got a connection but we need to wait briefly
 *
// before we determine the connection type.  Might need to wait

 *   // prior to doing any api requests as well.
 *   setTimeout(() => {
 *     console.log(Network.connection);
 *     if (Network.connection === Connection.WIFI) {
 *       console.log('we got a wifi connection, woohoo!');
 *     }
 *   }, 3000);
 * });
 *
 * // stop connect watch
 * connectSubscription.unsubscribe();
 *
 * ```
 */
var Network = function () {
    function Network() {}
    Object.defineProperty(Network, "connection", {
        /**
         * Return the network connection type
         */
        get: function get() {
            return navigator.connection.type;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get notified when the device goes offline
     * @returns {Observable<any>} Returns an observable.
     */
    Network.onDisconnect = function () {
        return;
    };
    /**
     * Get notified when the device goes online
     * @returns {Observable<any>} Returns an observable.
     */
    Network.onConnect = function () {
        return;
    };
    __decorate([plugin_1.CordovaProperty], Network, "connection", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'offline'
    })], Network, "onDisconnect", null);
    __decorate([plugin_1.Cordova({
        eventObservable: true,
        event: 'online'
    })], Network, "onConnect", null);
    Network = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-network-information',
        repo: 'https://github.com/apache/cordova-plugin-network-information',
        platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser'],
        pluginRef: 'navigator.connection'
    })], Network);
    return Network;
}();
exports.Network = Network;
var Connection = function () {
    function Connection() {}
    Object.defineProperty(Connection, "UNKNOWN", {
        get: function get() {
            return 'unknown';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "ETHERNET", {
        get: function get() {
            return 'ethernet';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "WIFI", {
        get: function get() {
            return 'wifi';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "CELL_2G", {
        get: function get() {
            return '2g';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "CELL_3G", {
        get: function get() {
            return '3g';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "CELL_4G", {
        get: function get() {
            return '4g';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "CELL", {
        get: function get() {
            return 'cellular';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection, "NONE", {
        get: function get() {
            return 'none';
        },
        enumerable: true,
        configurable: true
    });
    return Connection;
}();
exports.Connection = Connection;
//# sourceMappingURL=network.js.map

/***/ },
/* 964 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
var Screenshot = function () {
    function Screenshot() {}
    /**
     *  Takes screenshot and saves the image
     *
     * @param {string} format. Format can take the value of either 'jpg' or 'png'
     * On ios, only 'jpg' format is supported
     * @param {number} quality. Determines the quality of the screenshot.
     *        Default quality is set to 100.
     * @param {string} filename. Name of the file as stored on the storage
     */
    Screenshot.save = function (format, quality, filename) {
        return new Promise(function (resolve, reject) {
            navigator.screenshot.save(function (error, result) {
                if (error) {
                    reject(error);
                } else {
                    resolve(result);
                }
            }, format, quality, filename);
        });
    };
    /**
     *  Takes screenshot and returns the image as an URI
     *
     * @param {number} quality. Determines the quality of the screenshot.
     *        Default quality is set to 100.
     */
    Screenshot.URI = function (quality) {
        return new Promise(function (resolve, reject) {
            navigator.screenshot.URI(function (error, result) {
                if (error) {
                    reject(error);
                } else {
                    resolve(result);
                }
            }, quality);
        });
    };
    Screenshot = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/gitawego/cordova-screenshot.git',
        pluginRef: 'navigator.screenshot',
        repo: 'https://github.com/gitawego/cordova-screenshot.git'
    })], Screenshot);
    return Screenshot;
}();
exports.Screenshot = Screenshot;
//# sourceMappingURL=screenshot.js.map

/***/ },
/* 965 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Social Sharing
 * @description
 * Share text, files, images, and links via social networks, sms, and email.
 * @usage
 * ```js
 * import {SocialSharing} from 'ionic-native';
 *
 * ...
 * // TODO add usage info
 * ```
 */
var SocialSharing = function () {
    function SocialSharing() {}
    /**
     * Shares using the share sheet
     * @param message {string} The message you would like to share.
     * @param subject {string} The subject
     * @param file {string|Array<string>} URL(s) to file(s) or image(s), local path(s) to file(s) or image(s), or base64 data of an image. Only the first file/image will be used on Windows Phone.
     * @param url {string} A URL to share
     */
    SocialSharing.share = function (message, subject, file, url) {};
    /**
     * Shares using the share sheet with additional options and returns a result object or an error message (requires plugin version 5.1.0+)
     * @param options {object} The options object with the message, subject, files, url and chooserTitle properties.
     */
    SocialSharing.shareWithOptions = function (options) {
        return;
    };
    /**
     * Checks if you can share via a specific app.
     * @param appName App name or package name. Examples: instagram or com.apple.social.facebook
     */
    SocialSharing.canShareVia = function (appName) {
        return;
    };
    /**
     * Shares directly to Twitter
     * @param message
     * @param image
     * @param url
     */
    SocialSharing.shareViaTwitter = function (message, image, url) {};
    /**
     * Shares directly to Facebook
     * @param message {string}
     * @param image {string}
     * @param url {string}
     */
    SocialSharing.shareViaFacebook = function (message, image, url) {
        return;
    };
    /**
     * Shares directly to Facebook with a paste message hint
     * @param message {string}
     * @param image {string}
     * @param url {string}
     * @param pasteMessageHint {string}
     */
    SocialSharing.shareViaFacebookWithPasteMessageHint = function (message, image, url, pasteMessageHint) {
        return;
    };
    /**
     * Shares directly to Instagram
     * @param message {string}
     * @param image {string}
     */
    SocialSharing.shareViaInstagram = function (message, image) {
        return;
    };
    /**
     * Shares directly to WhatsApp
     * @param message {string}
     * @param image {string}
     * @param url {string}
     */
    SocialSharing.shareViaWhatsApp = function (message, image, url) {
        return;
    };
    /**
     * Shares directly to a WhatsApp Contact
     * @param receiver {string} Pass phone number on Android, and Addressbook ID (abid) on iOS
     * @param message {string} Message to send
     * @param image {string} Image to send (does not work on iOS
     * @param url {string} Link to send
     */
    SocialSharing.shareViaWhatsAppToReceiver = function (receiver, message, image, url) {
        return;
    };
    /**
     * Share via SMS
     * @param messge {string} message to send
     * @param phoneNumber {string} Number or multiple numbers seperated by commas
     */
    SocialSharing.shareViaSMS = function (messge, phoneNumber) {
        return;
    };
    /**
     * Share via Email
     * @param message {string}
     * @param subject {string}
     * @param to {Array<string>}
     * @param cc {Array<string>}
     * @param bcc {Array<string>}
     * @param files {string|Array<string>} URL or local path to file(s) to attach
     */
    SocialSharing.shareViaEmail = function (message, subject, to, cc, bcc, files) {
        return;
    };
    __decorate([plugin_1.Cordova({
        sync: true
    })], SocialSharing, "share", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareWithOptions", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "canShareVia", null);
    __decorate([plugin_1.Cordova({
        sync: true,
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaTwitter", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaFacebook", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaFacebookWithPasteMessageHint", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaInstagram", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaWhatsApp", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaWhatsAppToReceiver", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaSMS", null);
    __decorate([plugin_1.Cordova({
        platforms: ['iOS', 'Android']
    })], SocialSharing, "shareViaEmail", null);
    SocialSharing = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-x-socialsharing',
        pluginRef: 'window.plugins.socialsharing',
        repo: 'https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin',
        platforms: ['iOS', 'Android', 'Windows Phone']
    })], SocialSharing);
    return SocialSharing;
}();
exports.SocialSharing = SocialSharing;
//# sourceMappingURL=socialsharing.js.map

/***/ },
/* 966 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Splashscreen
 * @description This plugin displays and hides a splash screen during application launch. The methods below allows showing and hiding the splashscreen after the app has loaded.
 * @usage
 * ```ts
 * import {Splashscreen} from 'ionic-native';
 *
 *
 *
 * Splashscreen.show();
 *
 * Splashscreen.hide();
 * ```
 */
var Splashscreen = function () {
    function Splashscreen() {}
    /**
     * Shows the splashscreen
     */
    Splashscreen.show = function () {};
    /**
     * Hides the splashscreen
     */
    Splashscreen.hide = function () {};
    __decorate([plugin_1.Cordova({
        sync: true
    })], Splashscreen, "show", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], Splashscreen, "hide", null);
    Splashscreen = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-splashscreen',
        pluginRef: 'navigator.splashscreen',
        repo: 'https://github.com/apache/cordova-plugin-splashscreen'
    })], Splashscreen);
    return Splashscreen;
}();
exports.Splashscreen = Splashscreen;
//# sourceMappingURL=splashscreen.js.map

/***/ },
/* 967 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name SQLite
 */
var SQLite = function () {
    function SQLite(config) {
        var _this = this;
        new Promise(function (resolve, reject) {
            sqlitePlugin.openDatabase(config, resolve, reject);
        }).then(function (db) {
            return _this._objectInstance = db;
        }, function (error) {
            return console.warn(error);
        });
    }
    Object.defineProperty(SQLite.prototype, "databaseFeatures", {
        get: function get() {
            return this._objectInstance.databaseFeatures;
        },
        enumerable: true,
        configurable: true
    });
    SQLite.prototype.addTransaction = function (transaction) {};
    SQLite.prototype.transaction = function (fn) {
        return;
    };
    SQLite.prototype.readTransaction = function (fn) {
        return;
    };
    SQLite.prototype.startNextTransaction = function () {};
    SQLite.prototype.close = function () {
        return;
    };
    SQLite.prototype.start = function () {};
    SQLite.prototype.executeSql = function (statement, params) {
        return;
    };
    SQLite.prototype.addSatement = function (sql, values) {
        return;
    };
    SQLite.prototype.sqlBatch = function (sqlStatements) {
        return;
    };
    SQLite.prototype.abortallPendingTransactions = function () {};
    SQLite.prototype.handleStatementSuccess = function (handler, response) {};
    SQLite.prototype.handleStatementFailure = function (handler, response) {};
    SQLite.prototype.run = function () {};
    SQLite.prototype.abort = function (txFailure) {};
    SQLite.prototype.finish = function () {};
    SQLite.prototype.abortFromQ = function (sqlerror) {};
    SQLite.echoTest = function () {
        return;
    };
    SQLite.deleteDatabase = function (first) {
        return;
    };
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "addTransaction", null);
    __decorate([plugin_1.CordovaInstance()], SQLite.prototype, "transaction", null);
    __decorate([plugin_1.CordovaInstance()], SQLite.prototype, "readTransaction", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "startNextTransaction", null);
    __decorate([plugin_1.CordovaInstance()], SQLite.prototype, "close", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "start", null);
    __decorate([plugin_1.CordovaInstance()], SQLite.prototype, "executeSql", null);
    __decorate([plugin_1.CordovaInstance()], SQLite.prototype, "addSatement", null);
    __decorate([plugin_1.CordovaInstance()], SQLite.prototype, "sqlBatch", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "abortallPendingTransactions", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "handleStatementSuccess", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "handleStatementFailure", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "run", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "abort", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "finish", null);
    __decorate([plugin_1.CordovaInstance({
        sync: true
    })], SQLite.prototype, "abortFromQ", null);
    __decorate([plugin_1.Cordova()], SQLite, "echoTest", null);
    __decorate([plugin_1.Cordova()], SQLite, "deleteDatabase", null);
    SQLite = __decorate([plugin_1.Plugin({
        pluginRef: 'sqlitePlugin',
        plugin: 'cordova-sqlite-storage',
        repo: 'https://github.com/litehelpers/Cordova-sqlite-storage'
    })], SQLite);
    return SQLite;
}();
exports.SQLite = SQLite;
//# sourceMappingURL=sqlite.js.map

/***/ },
/* 968 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Status Bar
 * @description
 * Manage the appearance of the native status bar.
 *
 * Requires Cordova plugin: `cordova-plugin-statusbar`. For more info, please see the [StatusBar plugin docs](https://github.com/apache/cordova-plugin-statusbar).
 *
 * @usage
 * ```ts
 * import {StatusBar} from 'ionic-native';
 *
 * ...
 *
 * StatuBar.overlaysWebView(true); // let status var overlay webview
 *
 * StatusBar.backgroundColorByHexString('#ffffff'); // set status bar to white
 * ```
 *
 */
var StatusBar = function () {
    function StatusBar() {}
    /**
     * Set whether the status bar overlays the main app view. The default
     * is true.
     *
     * @param {boolean} doesOverlay  Whether the status bar overlays the main app view.
     */
    StatusBar.overlaysWebView = function (doesOverlay) {};
    ;
    /**
     * Use the default statusbar (dark text, for light backgrounds).
     */
    StatusBar.styleDefault = function () {};
    ;
    /**
     * Use the lightContent statusbar (light text, for dark backgrounds).
     */
    StatusBar.styleLightContent = function () {};
    ;
    /**
     * Use the blackTranslucent statusbar (light text, for dark backgrounds).
     */
    StatusBar.styleBlackTranslucent = function () {};
    ;
    /**
     * Use the blackOpaque statusbar (light text, for dark backgrounds).
     */
    StatusBar.styleBlackOpaque = function () {};
    ;
    /**
     * Set the status bar to a specific named color. Valid options:
     * black, darkGray, lightGray, white, gray, red, green, blue, cyan, yellow, magenta, orange, purple, brown.
     *
     * iOS note: you must call StatusBar.overlaysWebView(false) to enable color changing.
     *
     * @param {string} colorName  The name of the color (from above)
     */
    StatusBar.backgroundColorByName = function (colorName) {};
    ;
    /**
     * Set the status bar to a specific hex color (CSS shorthand supported!).
     *
     * iOS note: you must call StatusBar.overlaysWebView(false) to enable color changing.
     *
     * @param {string} hexString  The hex value of the color.
     */
    StatusBar.backgroundColorByHexString = function (hexString) {};
    ;
    /**
     * Hide the StatusBar
     */
    StatusBar.hide = function () {};
    ;
    /**
    * Show the StatusBar
    */
    StatusBar.show = function () {};
    ;
    Object.defineProperty(StatusBar, "isVisible", {
        /**
         * Whether the StatusBar is currently visible or not.
         */
        get: function get() {
            return window.StatusBar.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "overlaysWebView", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "styleDefault", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "styleLightContent", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "styleBlackTranslucent", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "styleBlackOpaque", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "backgroundColorByName", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "backgroundColorByHexString", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "hide", null);
    __decorate([plugin_1.Cordova({
        sync: true
    })], StatusBar, "show", null);
    __decorate([plugin_1.CordovaProperty], StatusBar, "isVisible", null);
    StatusBar = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-statusbar',
        pluginRef: 'StatusBar',
        repo: 'https://github.com/apache/cordova-plugin-statusbar',
        platforms: ['iOS', 'Android', 'Windows Phone 8', 'Windows 8', 'Windows 10']
    })], StatusBar);
    return StatusBar;
}();
exports.StatusBar = StatusBar;
//# sourceMappingURL=statusbar.js.map

/***/ },
/* 969 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name TouchID
 * @description
 * Scan the fingerprint of a user with the TouchID sensor.
 *
 * Requires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).
 *
 * ### Error Codes
 *
 * The plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.
 *
 * Here is a list of some of the error codes:
 *
 *  -  `-1` - Fingerprint scan failed more than 3 times
 *  -  `-2` or `-128` - User tapped the 'Cancel' button
 *  -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button
 *  -  `-4` - The scan was cancelled by the system (Home button for example)
 *  -  `-6` - TouchID is not Available
 *  -  `-8` - TouchID is locked out from too many tries
 * @usage
 * ```js
 * import {TouchID} from 'ionic-native';
 *
 * ...
 *
 * TouchID.isAvailable()
 *   .then(
 *     res => console.log("TouchID is available!"),
 *     err => console.error("TouchID isn't available", err)
 *   );
 *
 * TouchID.verifyFingerprint('Scan your fingerprint please')
 *   .then(
 *     res => console.log("Ok", res),
 *     err => console.error("Error", err)
 *   );
 *
 * ```
 */
var TouchID = function () {
    function TouchID() {}
    /**
     * Whether TouchID is available or not.
     *
     * @return {Promise} Returns a Promise that resolves if yes, rejects if no.
     */
    TouchID.prototype.isAvailable = function () {
        return;
    };
    /**
     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.
     *
     * @param {string} message  The message to display
     * @return {Promise} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
     */
    TouchID.verifyFingerprint = function (message) {
        return;
    };
    /**
     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).
     *
     * @param {string} message  The message to display
     * @return {Promise} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
     */
    TouchID.verifyFingerprintWithCustomPasswordFallback = function (message) {
        return;
    };
    /**
     * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).
     *
     * @param {string} message  The message to display
     * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button
     * @return {Promise} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
     */
    TouchID.verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel = function (message, enterPasswordLabel) {
        return;
    };
    __decorate([plugin_1.Cordova()], TouchID.prototype, "isAvailable", null);
    __decorate([plugin_1.Cordova()], TouchID, "verifyFingerprint", null);
    __decorate([plugin_1.Cordova()], TouchID, "verifyFingerprintWithCustomPasswordFallback", null);
    __decorate([plugin_1.Cordova()], TouchID, "verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel", null);
    TouchID = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-touch-id',
        pluginRef: 'plugins.touchid',
        repo: 'https://github.com/EddyVerbruggen/cordova-plugin-touch-id',
        platforms: ['iOS']
    })], TouchID);
    return TouchID;
}();
exports.TouchID = TouchID;
//# sourceMappingURL=touchid.js.map

/***/ },
/* 970 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name Vibration
 * @description Vibrates the device
 * @usage
 * ```ts
 * import {Vibration} from 'ionic-native';
 *
 *
 *
 * // Vibrate the device for a second
 * Vibration.vibrate(1000);
 *
 * // Vibrate 2 seconds
 * // Pause for 1 second
 * // Vibrate for 2 seconds
 * // Patterns work on Android and Windows only
 * Vibration.vibrate([2000,1000,2000]);
 *
 * // Stop any current vibrations immediately
 * // Works on Android and Windows only
 * Vibration.vibrate(0);
 * ```
 */
var Vibration = function () {
    function Vibration() {}
    /**
     * Vibrates the device for given amount of time.
     * @param time {number|Array<number>} Milliseconds to vibrate the device. If passed an array of numbers, it will define a vibration pattern. Pass 0 to stop any vibration immediately.
     */
    Vibration.vibrate = function (time) {};
    __decorate([plugin_1.Cordova({
        sync: true
    })], Vibration, "vibrate", null);
    Vibration = __decorate([plugin_1.Plugin({
        plugin: 'cordova-plugin-vibration',
        pluginRef: 'navigator',
        repo: 'https://github.com/apache/cordova-plugin-vibration',
        platforms: ['Android', 'iOS', 'Windows 8.1 Phone', 'Windows 8.1', 'Windows 10']
    })], Vibration);
    return Vibration;
}();
exports.Vibration = Vibration;
//# sourceMappingURL=vibration.js.map

/***/ },
/* 971 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = __webpack_require__(2);
/**
 * @name WebIntent
 * @description
 * @usage
 * For usage information please refer to the plugin's Github repo.
 */
var WebIntent = function () {
    function WebIntent() {}
    Object.defineProperty(WebIntent, "ACTION_VIEW", {
        get: function get() {
            return window.plugins.webintent.ACTION_VIEW;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebIntent, "EXTRA_TEXT", {
        get: function get() {
            return window.plugins.webintent.EXTRA_TEXT;
        },
        enumerable: true,
        configurable: true
    });
    WebIntent.startActivity = function (options) {
        return;
    };
    WebIntent.hasExtra = function (extra) {
        return;
    };
    WebIntent.getExtra = function (extra) {
        return;
    };
    WebIntent.getUri = function () {
        return;
    };
    ;
    WebIntent.onNewIntent = function () {
        return;
    };
    ;
    WebIntent.sendBroadcast = function (options) {
        return;
    };
    __decorate([plugin_1.CordovaProperty], WebIntent, "ACTION_VIEW", null);
    __decorate([plugin_1.CordovaProperty], WebIntent, "EXTRA_TEXT", null);
    __decorate([plugin_1.Cordova()], WebIntent, "startActivity", null);
    __decorate([plugin_1.Cordova()], WebIntent, "hasExtra", null);
    __decorate([plugin_1.Cordova()], WebIntent, "getExtra", null);
    __decorate([plugin_1.Cordova()], WebIntent, "getUri", null);
    __decorate([plugin_1.Cordova()], WebIntent, "onNewIntent", null);
    __decorate([plugin_1.Cordova()], WebIntent, "sendBroadcast", null);
    WebIntent = __decorate([plugin_1.Plugin({
        plugin: 'https://github.com/Initsogar/cordova-webintent.git',
        pluginRef: 'window.plugins.webintent',
        repo: 'https://github.com/Initsogar/cordova-webintent.git',
        platforms: ['Android']
    })], WebIntent);
    return WebIntent;
}();
exports.WebIntent = WebIntent;
//# sourceMappingURL=webintent.js.map

/***/ },
/* 972 */
/***/ function(module, exports) {

"use strict";
"use strict";

function get(obj, path) {
    for (var i = 0, path = path.split('.'), len = path.length; i < len; i++) {
        if (!obj) {
            return null;
        }
        obj = obj[path[i]];
    }
    return obj;
}
exports.get = get;
;
//# sourceMappingURL=util.js.map

/***/ },
/* 973 */,
/* 974 */,
/* 975 */,
/* 976 */,
/* 977 */,
/* 978 */,
/* 979 */,
/* 980 */,
/* 981 */,
/* 982 */,
/* 983 */,
/* 984 */,
/* 985 */,
/* 986 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__ = __webpack_require__(403);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view___default = __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__ && __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view___default, 'a', __WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__nav__ = __webpack_require__(310);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__nav___default = __WEBPACK_IMPORTED_MODULE_1__nav__ && __WEBPACK_IMPORTED_MODULE_1__nav__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_1__nav__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_1__nav__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_1__nav___default, 'a', __WEBPACK_IMPORTED_MODULE_1__nav___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__ = __webpack_require__(621);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list___default = __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__ && __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list___default, 'a', __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element___default = __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__ && __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element___default, 'a', __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__nav_portal__ = __webpack_require__(463);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__nav_portal___default = __WEBPACK_IMPORTED_MODULE_4__nav_portal__ && __WEBPACK_IMPORTED_MODULE_4__nav_portal__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_4__nav_portal__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_4__nav_portal__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_4__nav_portal___default, 'a', __WEBPACK_IMPORTED_MODULE_4__nav_portal___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type___default = __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__ && __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type___default, 'a', __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__ = __webpack_require__(176);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection___default = __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__ && __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection___default, 'a', __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__view_controller__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__view_controller___default = __WEBPACK_IMPORTED_MODULE_7__view_controller__ && __WEBPACK_IMPORTED_MODULE_7__view_controller__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_7__view_controller__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_7__view_controller__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_7__view_controller___default, 'a', __WEBPACK_IMPORTED_MODULE_7__view_controller___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_controller__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__nav_controller___default = __WEBPACK_IMPORTED_MODULE_8__nav_controller__ && __WEBPACK_IMPORTED_MODULE_8__nav_controller__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_8__nav_controller__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_8__nav_controller__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_8__nav_controller___default, 'a', __WEBPACK_IMPORTED_MODULE_8__nav_controller___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app___default = __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__ && __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app___default, 'a', __WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config___default = __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__ && __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config___default, 'a', __WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard___default = __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__ && __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard___default, 'a', __WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__ = __webpack_require__(266);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref___default = __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__ && __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref___default, 'a', __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__ = __webpack_require__(408);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone___default = __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__ && __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone___default, 'a', __WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__ = __webpack_require__(401);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver___default = __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__ && __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver___default, 'a', __WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view__ = __webpack_require__(404);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view___default = __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view__ && __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view___default, 'a', __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory___default = __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory__ && __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory___default, 'a', __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory___default);
/* harmony export */ exports["viewFactory_Nav0"] = viewFactory_Nav0;
/* harmony export */ __webpack_require__.d(exports, "NavNgFactory", function() { return NavNgFactory; });/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

















var styles_Nav = [];
var renderType_Nav = null;
var _View_Nav0 = (function (_super) {
    __extends(_View_Nav0, _super);
    function _View_Nav0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_Nav0, renderType_Nav, __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.ChangeDetectionStrategy.CheckAlways);
    }
    _View_Nav0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._viewQuery_viewport_0 = new __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__.QueryList();
        this._viewQuery_NavPortal_1 = new __WEBPACK_IMPORTED_MODULE_2__angular_core_src_linker_query_list__.QueryList();
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'nav-viewport', '');
        this._appEl_0 = new __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__.AppElement(0, null, this, this._el_0);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'nav-decor');
        this._el_2 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_2, 'nav-portal', '');
        this._appEl_2 = new __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__.AppElement(2, null, this, this._el_2);
        this._NavPortal_2_5 = new __WEBPACK_IMPORTED_MODULE_4__nav_portal__.NavPortal(this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_7__view_controller__.ViewController, null), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_8__nav_controller__.NavController, null), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__.App), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__.Config), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__.Keyboard), new __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__.ElementRef(this._el_2), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__.NgZone), this.renderer, this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__.ComponentResolver), this._appEl_2.vcRef);
        this._viewQuery_viewport_0.reset([this._appEl_0.vcRef]);
        this.context._vp = this._viewQuery_viewport_0.first;
        this.init([], [
            this._el_0,
            this._el_1,
            this._el_2
        ], [], []);
        return null;
    };
    _View_Nav0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === __WEBPACK_IMPORTED_MODULE_4__nav_portal__.NavPortal) && (2 === requestNodeIndex))) {
            return this._NavPortal_2_5;
        }
        return notFoundResult;
    };
    _View_Nav0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if (this._viewQuery_NavPortal_1.dirty) {
                this._viewQuery_NavPortal_1.reset([this._NavPortal_2_5]);
                this.context._np = this._viewQuery_NavPortal_1;
                this._viewQuery_NavPortal_1.notifyOnChanges();
            }
        }
    };
    return _View_Nav0;
}(__WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__.AppView));
function viewFactory_Nav0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_Nav === null)) {
        (renderType_Nav = viewUtils.createRenderComponentType('/Users/joshthomas/Workspace/tree-shake-ionic2/node_modules/ionic-angular/components/nav/nav.d.ts class Nav - inline template', 0, __WEBPACK_IMPORTED_MODULE_15__angular_core_src_metadata_view__.ViewEncapsulation.None, styles_Nav));
    }
    return new _View_Nav0(viewUtils, parentInjector, declarationEl);
}
var styles_Nav_Host = [];
var renderType_Nav_Host = null;
var _View_Nav_Host0 = (function (_super) {
    __extends(_View_Nav_Host0, _super);
    function _View_Nav_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_Nav_Host0, renderType_Nav_Host, __WEBPACK_IMPORTED_MODULE_5__angular_core_src_linker_view_type__.ViewType.HOST, viewUtils, parentInjector, declarationEl, __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.ChangeDetectionStrategy.CheckAlways);
    }
    _View_Nav_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-nav', rootSelector, null);
        this._appEl_0 = new __WEBPACK_IMPORTED_MODULE_3__angular_core_src_linker_element__.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_Nav0(this.viewUtils, this.injector(0), this._appEl_0);
        this._Nav_0_4 = new __WEBPACK_IMPORTED_MODULE_1__nav__.Nav(this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_7__view_controller__.ViewController, null), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_8__nav_controller__.NavController, null), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_9_ionic_angular_components_app_app__.App), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_10_ionic_angular_config_config__.Config), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_11_ionic_angular_util_keyboard__.Keyboard), new __WEBPACK_IMPORTED_MODULE_12__angular_core_src_linker_element_ref__.ElementRef(this._el_0), this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_13__angular_core_src_zone_ng_zone__.NgZone), this.renderer, this.parentInjector.get(__WEBPACK_IMPORTED_MODULE_14__angular_core_src_linker_component_resolver__.ComponentResolver));
        this._appEl_0.initComponent(this._Nav_0_4, [], compView_0);
        compView_0.create(this._Nav_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_Nav_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === __WEBPACK_IMPORTED_MODULE_1__nav__.Nav) && (0 === requestNodeIndex))) {
            return this._Nav_0_4;
        }
        return notFoundResult;
    };
    _View_Nav_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.cdState === __WEBPACK_IMPORTED_MODULE_6__angular_core_src_change_detection_change_detection__.ChangeDetectorState.NeverChecked)) {
                this._Nav_0_4.ngAfterViewInit();
            }
        }
    };
    return _View_Nav_Host0;
}(__WEBPACK_IMPORTED_MODULE_0__angular_core_src_linker_view__.AppView));
function viewFactory_Nav_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_Nav_Host === null)) {
        (renderType_Nav_Host = viewUtils.createRenderComponentType('', 0, null, styles_Nav_Host));
    }
    return new _View_Nav_Host0(viewUtils, parentInjector, declarationEl);
}
var NavNgFactory = new __WEBPACK_IMPORTED_MODULE_16__angular_core_src_linker_component_factory__.ComponentFactory('ion-nav', viewFactory_Nav_Host0, __WEBPACK_IMPORTED_MODULE_1__nav__.Nav);


/***/ },
/* 987 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_native__ = __webpack_require__(931);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_native___default = __WEBPACK_IMPORTED_MODULE_1_ionic_native__ && __WEBPACK_IMPORTED_MODULE_1_ionic_native__.__esModule ? function() { return __WEBPACK_IMPORTED_MODULE_1_ionic_native__['default'] } : function() { return __WEBPACK_IMPORTED_MODULE_1_ionic_native__; };
/* harmony import */ __webpack_require__.d(__WEBPACK_IMPORTED_MODULE_1_ionic_native___default, 'a', __WEBPACK_IMPORTED_MODULE_1_ionic_native___default);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ionic_angular__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pages_tabs_tabs__ = __webpack_require__(991);

/* harmony export */ __webpack_require__.d(exports, "App", function() { return App; });var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var App = (function () {
    function App(platform) {
        this.platform = platform;
        this.rootPage = __WEBPACK_IMPORTED_MODULE_3__pages_tabs_tabs__["a" /* TabsPage */];
        platform.ready().then(function () {
            // Okay, so the platform is ready and our plugins are available.
            // Here you can do any higher level native things you might need.
            __WEBPACK_IMPORTED_MODULE_1_ionic_native__["StatusBar"].styleDefault();
        });
    }
    App = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'ion-app',
            template: '<ion-nav [root]="rootPage"></ion-nav>',
            directives: [__WEBPACK_IMPORTED_MODULE_2_ionic_angular__["b" /* Nav */], __WEBPACK_IMPORTED_MODULE_3__pages_tabs_tabs__["a" /* TabsPage */]]
        }), 
        __metadata('design:paramtypes', [__WEBPACK_IMPORTED_MODULE_2_ionic_angular__["c" /* Platform */]])
    ], App);
    return App;
}());
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ionic_angular__["d" /* ionicBootstrap */])(App);


/***/ },
/* 988 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(131);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return AboutPage; });/* unused harmony export removeMeDangIt */var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var AboutPage = (function () {
    function AboutPage(navController) {
        this.navController = navController;
    }
    AboutPage = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            template: "\n  <ion-navbar *navbar>\n    <ion-title>\n      About\n    </ion-title>\n  </ion-navbar>\n\n  <ion-content padding class=\"about\">\n  </ion-content>\n  "
        }), 
        __metadata('design:paramtypes', [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["a" /* NavController */]])
    ], AboutPage);
    return AboutPage;
}());
function removeMeDangIt() {
    return 'hi josh';
}


/***/ },
/* 989 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(131);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return ContactPage; });var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ContactPage = (function () {
    function ContactPage(navController) {
        this.navController = navController;
    }
    ContactPage = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            template: "\n  <ion-navbar *navbar>\n    <ion-title>\n      Contact\n    </ion-title>\n  </ion-navbar>\n\n  <ion-content>\n    <ion-list>\n      <ion-list-header>Follow us on Twitter</ion-list-header>\n      <ion-item>\n        <ion-icon name=\"ionic\" item-left></ion-icon>\n        @ionicframework\n      </ion-item>\n    </ion-list>\n  </ion-content>\n  "
        }), 
        __metadata('design:paramtypes', [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["a" /* NavController */]])
    ], ContactPage);
    return ContactPage;
}());


/***/ },
/* 990 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(131);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return HomePage; });var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var HomePage = (function () {
    function HomePage(navController) {
        this.navController = navController;
    }
    HomePage = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            template: "\n  <ion-navbar *navbar>\n    <ion-title>Home</ion-title>\n  </ion-navbar>\n\n  <ion-content padding class=\"home\">\n    <h2>Welcome to Ionic!</h2>\n    <p>\n      This starter project comes with simple tabs-based layout for apps\n      that are going to primarily use a Tabbed UI.\n    </p>\n    <p>\n      Take a look at the <code>app/</code> directory to add or change tabs,\n      update any existing page or create new pages.\n    </p>\n  </ion-content>\n  "
        }), 
        __metadata('design:paramtypes', [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["a" /* NavController */]])
    ], HomePage);
    return HomePage;
}());


/***/ },
/* 991 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__home_home__ = __webpack_require__(990);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__about_about__ = __webpack_require__(988);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__contact_contact__ = __webpack_require__(989);

/* harmony export */ __webpack_require__.d(exports, "a", function() { return TabsPage; });var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var TabsPage = (function () {
    function TabsPage() {
        // this tells the tabs component which Pages
        // should be each tab's root Page
        this.tab1Root = __WEBPACK_IMPORTED_MODULE_1__home_home__["a" /* HomePage */];
        this.tab2Root = __WEBPACK_IMPORTED_MODULE_2__about_about__["a" /* AboutPage */];
        this.tab3Root = __WEBPACK_IMPORTED_MODULE_3__contact_contact__["a" /* ContactPage */];
    }
    TabsPage = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            template: "\n  <ion-tabs>\n    <ion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"></ion-tab>\n    <ion-tab [root]=\"tab2Root\" tabTitle=\"About\" tabIcon=\"information-circle\"></ion-tab>\n    <ion-tab [root]=\"tab3Root\" tabTitle=\"Contact\" tabIcon=\"contacts\"></ion-tab>\n  </ion-tabs>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], TabsPage);
    return TabsPage;
}());


/***/ },
/* 992 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ionic_angular__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_app_ngfactory__ = __webpack_require__(542);




var providers = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ionic_angular__["e" /* ionicProviders */])();
var appInjector = __WEBPACK_IMPORTED_MODULE_0__angular_core__["ReflectiveInjector"].resolveAndCreate([__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BROWSER_APP_PROVIDERS"], providers], __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["browserPlatform"])().injector);
var ngComponentRef = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["coreBootstrap"])(__WEBPACK_IMPORTED_MODULE_3__app_app_ngfactory__["a" /* AppNgFactory */], appInjector);
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ionic_angular__["f" /* ionicPostBootstrap */])(ngComponentRef);


/***/ }
],[992]);
//# sourceMappingURL=main.map